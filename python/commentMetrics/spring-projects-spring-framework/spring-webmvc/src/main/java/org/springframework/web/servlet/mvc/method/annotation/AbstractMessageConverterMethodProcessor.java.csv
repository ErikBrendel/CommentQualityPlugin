# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1444898007;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1445889692;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1446487668;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1446769889;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1446831433;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1446846341;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1447280069;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1454648148;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1454648699;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1457125561;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1467457342;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1467463695;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1467730834;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1481630543;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1494019148;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1496259743;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1496837955;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1496955179;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1497346678;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1503600637;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1508532146;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1510344303;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1512193423;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1522184059;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1522843494;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1524501545;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1529361191;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1529721864;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1530174524;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1531217483;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1531763135;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1532479646;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1533160168;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1534488420;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1534488827;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1536942003;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1536962806;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1546457570;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters);1548082815;Constructor with list of converters only.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {_		this(converters, null, null)__	};constructor,with,list,of,converters,only;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,this,converters,null,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  ServletServerHttpRequest inputMessage, 												  ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1328020251;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  ServletServerHttpRequest inputMessage,_												  ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		List<MediaType> acceptableMediaTypes = getAcceptableMediaTypes(inputMessage)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest(), returnValueClass)__		_		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType a : acceptableMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (a.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(a, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__		}_		_		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificity(mediaTypes)__		_		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}_		_		if (selectedMediaType != null) {_			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,list,media,type,acceptable,media,types,get,acceptable,media,types,input,message,list,media,type,producible,media,types,get,producible,media,types,input,message,get,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,a,acceptable,media,types,for,media,type,p,producible,media,types,if,a,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,a,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  ServletServerHttpRequest inputMessage, 												  ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1333402583;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  ServletServerHttpRequest inputMessage,_												  ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		List<MediaType> acceptableMediaTypes = getAcceptableMediaTypes(inputMessage)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest(), returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType a : acceptableMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (a.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(a, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificity(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,list,media,type,acceptable,media,types,get,acceptable,media,types,input,message,list,media,type,producible,media,types,get,producible,media,types,input,message,get,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,a,acceptable,media,types,for,media,type,p,producible,media,types,if,a,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,a,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  ServletServerHttpRequest inputMessage, 												  ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1336761838;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  ServletServerHttpRequest inputMessage,_												  ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		List<MediaType> acceptableMediaTypes = getAcceptableMediaTypes(inputMessage)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest(), returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType a : acceptableMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (a.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(a, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		selectedMediaType = selectedMediaType.removeQualityValue()___		if (selectedMediaType != null) {_			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,list,media,type,acceptable,media,types,get,acceptable,media,types,input,message,list,media,type,producible,media,types,get,producible,media,types,input,message,get,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,a,acceptable,media,types,for,media,type,p,producible,media,types,if,a,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,a,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,selected,media,type,selected,media,type,remove,quality,value,if,selected,media,type,null,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  ServletServerHttpRequest inputMessage, 												  ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1340380546;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  ServletServerHttpRequest inputMessage,_												  ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType r : requestedMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (r.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(r, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		selectedMediaType = selectedMediaType.removeQualityValue()___		if (selectedMediaType != null) {_			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,r,requested,media,types,for,media,type,p,producible,media,types,if,r,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,r,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,selected,media,type,selected,media,type,remove,quality,value,if,selected,media,type,null,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  ServletServerHttpRequest inputMessage, 												  ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1349874043;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  ServletServerHttpRequest inputMessage,_												  ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType r : requestedMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (r.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(r, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,r,requested,media,types,for,media,type,p,producible,media,types,if,r,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,r,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  ServletServerHttpRequest inputMessage, 												  ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1350046170;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  ServletServerHttpRequest inputMessage,_												  ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType r : requestedMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (r.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(r, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,r,requested,media,types,for,media,type,p,producible,media,types,if,r,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,r,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, @Nullable Type declaredType);1496259743;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, @Nullable Type declaredType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, @Nullable Type declaredType);1496837955;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, @Nullable Type declaredType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, @Nullable Type declaredType);1496955179;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, @Nullable Type declaredType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1444898007;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1445889692;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1446487668;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1446769889;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1446831433;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1446846341;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1447280069;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1454648148;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1454648699;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1457125561;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1467457342;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1467463695;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1467730834;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1481630543;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1494019148;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice);1496259743;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,manager,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1496837955;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1496955179;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)__		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1497346678;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1503600637;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1508532146;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1510344303;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1512193423;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1522184059;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1522843494;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1524501545;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1529361191;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1529721864;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1530174524;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1531217483;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1531763135;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1532479646;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1533160168;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1534488420;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1534488827;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1536942003;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1536962806;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1546457570;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice);1548082815;Constructor with list of converters and ContentNegotiationManager as well_as request/response body advice instances.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {__		super(converters, requestResponseBodyAdvice)___		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager())__		this.pathStrategy = initPathStrategy(this.contentNegotiationManager)__		this.safeExtensions.addAll(this.contentNegotiationManager.getAllFileExtensions())__		this.safeExtensions.addAll(WHITELISTED_EXTENSIONS)__	};constructor,with,list,of,converters,and,content,negotiation,manager,as,well,as,request,response,body,advice,instances;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,manager,nullable,list,object,request,response,body,advice,super,converters,request,response,body,advice,this,content,negotiation,manager,manager,null,manager,new,content,negotiation,manager,this,path,strategy,init,path,strategy,this,content,negotiation,manager,this,safe,extensions,add,all,this,content,negotiation,manager,get,all,file,extensions,this,safe,extensions,add,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1531763135;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1532479646;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1533160168;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1534488420;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1534488827;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1536942003;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1536962806;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1546457570;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes( 			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType);1548082815;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(_			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {__		Set<MediaType> mediaTypes =_				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && targetType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,target,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,target,type,null,if,generic,http,message,converter,converter,can,write,target,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1438078548;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		Assert.isTrue(returnValue == null || !producibleMediaTypes.isEmpty(),_				"No converter found for return value of type: " + returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,assert,is,true,return,value,null,producible,media,types,is,empty,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1441370327;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1444898007;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1445889692;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446487668;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446769889;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446831433;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446846341;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1447280069;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1454648148;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)___		if (returnValue != null && returnValue instanceof CharSequence) {_			returnValueClass = String.class__			returnValueType = String.class__			returnValue = (T) returnValue.toString()__		}__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		if (returnValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + returnValueClass)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,if,return,value,null,return,value,instanceof,char,sequence,return,value,class,string,class,return,value,type,string,class,return,value,t,return,value,to,string,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,if,return,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1444898007;Check if the path has a file extension and whether the extension is either_{@link #WHITELISTED_EXTENSIONS whitelisted} or_{@link ContentNegotiationManager#getAllFileExtensions() explicitly_registered}. If not add a 'Content-Disposition' header with a safe_attachment file name ("f.txt") to prevent RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!isSafeExtension(ext) || !isSafeExtension(extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,link,content,negotiation,manager,get,all,file,extensions,explicitly,registered,if,not,add,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,is,safe,extension,ext,is,safe,extension,ext,in,path,params,headers,add,http,headers,attachment,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1445889692;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!isSafeExtension(ext) || !isSafeExtension(extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,is,safe,extension,ext,is,safe,extension,ext,in,path,params,headers,add,http,headers,attachment,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1446487668;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,attachment,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1446769889;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,attachment,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1446831433;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,attachment,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1446846341;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,attachment,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1447280069;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1454648148;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1454648699;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1457125561;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1467457342;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1467463695;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, 			ServletServerHttpResponse response);1467730834;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request,_			ServletServerHttpResponse response) {__		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1496837955;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new HttpMessageNotWritableException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter) messageConverter).canWrite(_							declaredType, valueType, selectedMediaType)) {_						outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (outputValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter) messageConverter).write(_									outputValue, declaredType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_										"\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter) messageConverter).write(outputValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,message,converter,can,write,declared,type,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,message,converter,write,output,value,declared,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,message,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1496955179;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new HttpMessageNotWritableException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter) messageConverter).canWrite(_							declaredType, valueType, selectedMediaType)) {_						outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (outputValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter) messageConverter).write(_									outputValue, declaredType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_										"\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter) messageConverter).write(outputValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,message,converter,can,write,declared,type,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,message,converter,write,output,value,declared,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,message,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1444898007;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1445889692;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1446487668;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1446769889;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1446831433;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1446846341;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1447280069;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1454648148;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1454648699;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1457125561;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1467457342;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1467463695;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1467730834;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1481630543;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1494019148;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			ContentNegotiationManager contentNegotiationManager);1496259743;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1467463695;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1467730834;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1481630543;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1494019148;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1496259743;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1496837955;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1496955179;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1497346678;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1503600637;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1508532146;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1510344303;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1512193423;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1522184059;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1522843494;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1524501545;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1529361191;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1529721864;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1530174524;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1531217483;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1531763135;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1532479646;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1533160168;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1534488420;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1534488827;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1536942003;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1536962806;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1546457570;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unused") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass);1548082815;Returns the media types that can be produced._@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unused")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {_		return getProducibleMediaTypes(request, valueClass, null)__	};returns,the,media,types,that,can,be,produced,see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,return,get,producible,media,types,request,value,class,null
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												MethodParameter returnType, 												NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1356735495;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												MethodParameter returnType,_												NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												MethodParameter returnType, 												NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1362408075;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												MethodParameter returnType,_												NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1435237353;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1438078548;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1441370327;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1444898007;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1445889692;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1446487668;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1446769889;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1446831433;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1446846341;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1447280069;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1454648148;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1454648699;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1457125561;Return the generic type of the {@code returnType} (or of the nested type if it is_a {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		Type type__		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			returnType.increaseNestingLevel()__			type = returnType.getNestedGenericParameterType()__		}_		else {_			type = returnType.getGenericParameterType()__		}_		return type__	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,a,link,http,entity;private,type,get,generic,type,method,parameter,return,type,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,return,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1467457342;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric(0).getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,0,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1467463695;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric(0).getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,0,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1467730834;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric(0).getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,0,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1481630543;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric(0).getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,0,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1494019148;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric(0).getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,0,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1496259743;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric(0).getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,0,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1496955179;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1497346678;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1503600637;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1508532146;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1510344303;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1512193423;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1522184059;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1522843494;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1524501545;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1529361191;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1529721864;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1530174524;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1531217483;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1531763135;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1532479646;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1533160168;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1534488420;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1534488827;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1536942003;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1536962806;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1546457570;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> private Type getGenericType(MethodParameter returnType);1548082815;Return the generic type of the {@code returnType} (or of the nested type_if it is an {@link HttpEntity}).;private Type getGenericType(MethodParameter returnType) {_		if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_			return ResolvableType.forType(returnType.getGenericParameterType()).getGeneric().getType()__		}_		else {_			return returnType.getGenericParameterType()__		}_	};return,the,generic,type,of,the,code,return,type,or,of,the,nested,type,if,it,is,an,link,http,entity;private,type,get,generic,type,method,parameter,return,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,resolvable,type,for,type,return,type,get,generic,parameter,type,get,generic,get,type,else,return,return,type,get,generic,parameter,type
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1435237353;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1438078548;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1441370327;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1444898007;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1445889692;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1446487668;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1446769889;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1446831433;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1446846341;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1447280069;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1454648148;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1454648699;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1457125561;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType);1467457342;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass, Type returnValueType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && returnValueType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(returnValueType, returnValueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,type,return,value,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,return,value,type,null,if,generic,http,message,converter,converter,can,write,return,value,type,return,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1444898007;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1445889692;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1446487668;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1446769889;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1446831433;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1446846341;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1447280069;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1454648148;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1454648699;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1457125561;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"unchecked", "unused"}) 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1467457342;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings({"unchecked", "unused"})_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,unused,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1328020251;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1333402583;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1336761838;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1340380546;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1349874043;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1350046170;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1356735495;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1362408075;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1398287027;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1400209413;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1400528836;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1400528836;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1401483748;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1401483748;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1411153076;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1413407172;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1413566468;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1427679734;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1434575016;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1434985545;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1435237353;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1438078548;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1441370327;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1444898007;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1445889692;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1446487668;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1446769889;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1446831433;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1446846341;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1447280069;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1454648148;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1454648699;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1457125561;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1467457342;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1467463695;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1467730834;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1481630543;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1494019148;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1496259743;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1496837955;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1496955179;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1497346678;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1503600637;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1508532146;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1510344303;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1512193423;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1522184059;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1522843494;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1524501545;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1529361191;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1529721864;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1530174524;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1531217483;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1531763135;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1532479646;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1533160168;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1534488420;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1534488827;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1536942003;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1536962806;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1546457570;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest);1548082815;Creates a new {@link HttpOutputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an output message from_@return the output message;protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {_		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Assert.state(response != null, "No HttpServletResponse")__		return new ServletServerHttpResponse(response)__	};creates,a,new,link,http,output,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,output,message,from,return,the,output,message;protected,servlet,server,http,response,create,output,message,native,web,request,web,request,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,assert,state,response,null,no,http,servlet,response,return,new,servlet,server,http,response,response
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1411153076;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1413407172;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1413566468;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1427679734;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1434575016;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1434985545;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1435237353;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1438078548;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1441370327;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1444898007;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1445889692;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1446487668;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1446769889;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1446831433;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1446846341;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1447280069;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1454648148;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1454648699;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1457125561;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType);1467457342;Return the type of the value to be written to the response. Typically this_is a simple check via getClass on the returnValue but if the returnValue is_null, then the returnType needs to be examined possibly including generic_type determination (e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object returnValue, MethodParameter returnType) {_		return (returnValue != null ? returnValue.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,return,value,but,if,the,return,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,return,value,method,parameter,return,type,return,return,value,null,return,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1467463695;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1467730834;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1481630543;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1494019148;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1496259743;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1496837955;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1496955179;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1497346678;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1503600637;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1508532146;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1510344303;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1512193423;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1522184059;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1522843494;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1524501545;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1529361191;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1529721864;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1530174524;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1531217483;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1531763135;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1532479646;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1533160168;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1534488420;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1534488827;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1536942003;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1536962806;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1546457570;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1548082815;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(value, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object value, MethodParameter returnType);1467463695;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object value, MethodParameter returnType);1467730834;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object value, MethodParameter returnType);1481630543;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object value, MethodParameter returnType);1494019148;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(Object value, MethodParameter returnType);1496259743;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												MethodParameter returnType, 												ServletServerHttpRequest inputMessage, 												ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1356735495;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												MethodParameter returnType,_												ServletServerHttpRequest inputMessage,_												ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType r : requestedMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (r.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(r, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,r,requested,media,types,for,media,type,p,producible,media,types,if,r,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,r,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, 												MethodParameter returnType, 												ServletServerHttpRequest inputMessage, 												ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1362408075;Writes the given return type to the given output message.__@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue,_												MethodParameter returnType,_												ServletServerHttpRequest inputMessage,_												ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()___		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType r : requestedMediaTypes) {_			for (MediaType p : producibleMediaTypes) {_				if (r.isCompatibleWith(p)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(r, p))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,r,requested,media,types,for,media,type,p,producible,media,types,if,r,is,compatible,with,p,compatible,media,types,add,get,most,specific,media,type,r,p,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType);1467463695;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType);1467730834;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType);1481630543;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType);1494019148;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type declaredType) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1336761838;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1340380546;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1349874043;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1350046170;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) <= 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1356735495;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) <= 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1362408075;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) <= 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1398287027;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1400209413;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1400528836;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1400528836;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1401483748;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1401483748;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1411153076;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1413407172;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1413566468;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1427679734;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1434575016;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1434985545;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1435237353;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1438078548;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1441370327;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1444898007;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1445889692;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1446487668;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1446769889;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1446831433;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1446846341;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1447280069;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1454648148;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1454648699;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1457125561;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1467457342;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1467463695;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1467730834;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1481630543;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1494019148;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1496259743;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1496837955;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1496955179;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1497346678;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1503600637;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1508532146;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1510344303;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1512193423;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1522184059;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1522843494;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1524501545;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1529361191;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1529721864;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1530174524;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1531217483;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1531763135;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1532479646;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1533160168;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1534488420;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1534488827;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1536942003;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1536962806;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1546457570;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1548082815;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,media,type,produce,type,to,use,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,to,use,0,accept,type,produce,type,to,use
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1496837955;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1496955179;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1497346678;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1503600637;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1508532146;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1510344303;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1512193423;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1522184059;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1522843494;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1524501545;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1529361191;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1529721864;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1530174524;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1531217483;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1531763135;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1532479646;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1533160168;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1534488420;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1534488827;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1536942003;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1536962806;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1546457570;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters, 			@Nullable ContentNegotiationManager contentNegotiationManager);1548082815;Constructor with list of converters and ContentNegotiationManager.;protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters,_			@Nullable ContentNegotiationManager contentNegotiationManager) {__		this(converters, contentNegotiationManager, null)__	};constructor,with,list,of,converters,and,content,negotiation,manager;protected,abstract,message,converter,method,processor,list,http,message,converter,converters,nullable,content,negotiation,manager,content,negotiation,manager,this,converters,content,negotiation,manager,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1328020251;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__            for (HttpMessageConverter<?> converter : messageConverters) {_                if (converter.canWrite(returnValueClass, null)) {_                	result.addAll(converter.getSupportedMediaTypes())__                }_            }			_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1333402583;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__            for (HttpMessageConverter<?> converter : messageConverters) {_                if (converter.canWrite(returnValueClass, null)) {_                	result.addAll(converter.getSupportedMediaTypes())__                }_            }_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1336761838;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__            for (HttpMessageConverter<?> converter : messageConverters) {_                if (converter.canWrite(returnValueClass, null)) {_                	result.addAll(converter.getSupportedMediaTypes())__                }_            }_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1340380546;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__            for (HttpMessageConverter<?> converter : messageConverters) {_                if (converter.canWrite(returnValueClass, null)) {_                	result.addAll(converter.getSupportedMediaTypes())__                }_            }_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1349874043;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__            for (HttpMessageConverter<?> converter : messageConverters) {_                if (converter.canWrite(returnValueClass, null)) {_                	result.addAll(converter.getSupportedMediaTypes())__                }_            }_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1350046170;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__            for (HttpMessageConverter<?> converter : messageConverters) {_                if (converter.canWrite(returnValueClass, null)) {_                	result.addAll(converter.getSupportedMediaTypes())__                }_            }_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1356735495;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1362408075;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1398287027;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1400209413;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1400528836;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1400528836;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1401483748;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1401483748;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1411153076;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1413407172;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1413566468;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1427679734;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1434575016;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1434985545;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<MediaType>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<MediaType>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter.canWrite(returnValueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,type,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,media,type,for,http,message,converter,converter,this,message,converters,if,converter,can,write,return,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1435237353;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1438078548;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass);1441370327;@see #getProducibleMediaTypes(HttpServletRequest, Class, Type);@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> returnValueClass) {_		return getProducibleMediaTypes(request, returnValueClass, null)__	};see,get,producible,media,types,http,servlet,request,class,type;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,return,value,class,return,get,producible,media,types,request,return,value,class,null
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1328020251;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1333402583;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1336761838;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1340380546;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1349874043;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, 												  MethodParameter returnType, 												  NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1350046170;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue,_												  MethodParameter returnType,_												  NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {_		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1497346678;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1503600637;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1508532146;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1510344303;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1512193423;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1522184059;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1522843494;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1524501545;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1529361191;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1529721864;Returns the media types that can be produced:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1530174524;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, 			@Nullable Type declaredType);1531217483;Returns the media types that can be produced. The resulting media types are:_<ul>_<li>The producible media types specified in the request mappings, or_<li>Media types of configured converters that can write the specific return value, or_<li>{@link MediaType#ALL}_</ul>_@since 4.2;@SuppressWarnings("unchecked")_	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,_			@Nullable Type declaredType) {__		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE)__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			return new ArrayList<>(mediaTypes)__		}_		else if (!this.allSupportedMediaTypes.isEmpty()) {_			List<MediaType> result = new ArrayList<>()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				if (converter instanceof GenericHttpMessageConverter && declaredType != null) {_					if (((GenericHttpMessageConverter<?>) converter).canWrite(declaredType, valueClass, null)) {_						result.addAll(converter.getSupportedMediaTypes())__					}_				}_				else if (converter.canWrite(valueClass, null)) {_					result.addAll(converter.getSupportedMediaTypes())__				}_			}_			return result__		}_		else {_			return Collections.singletonList(MediaType.ALL)__		}_	};returns,the,media,types,that,can,be,produced,the,resulting,media,types,are,ul,li,the,producible,media,types,specified,in,the,request,mappings,or,li,media,types,of,configured,converters,that,can,write,the,specific,return,value,or,li,link,media,type,all,ul,since,4,2;suppress,warnings,unchecked,protected,list,media,type,get,producible,media,types,http,servlet,request,request,class,value,class,nullable,type,declared,type,set,media,type,media,types,set,media,type,request,get,attribute,handler,mapping,if,collection,utils,is,empty,media,types,return,new,array,list,media,types,else,if,this,all,supported,media,types,is,empty,list,media,type,result,new,array,list,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,declared,type,null,if,generic,http,message,converter,converter,can,write,declared,type,value,class,null,result,add,all,converter,get,supported,media,types,else,if,converter,can,write,value,class,null,result,add,all,converter,get,supported,media,types,return,result,else,return,collections,singleton,list,media,type,all
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1481630543;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1494019148;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1496259743;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = RAW_URL_PATH_HELPER.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = DECODING_URL_PATH_HELPER.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1496837955;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1496955179;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1497346678;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1503600637;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1508532146;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1510344303;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1512193423;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1522184059;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1522843494;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1524501545;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1529361191;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1529721864;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1530174524;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1531217483;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1531763135;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1532479646;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1533160168;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1534488420;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1534488827;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1536942003;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1536962806;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1546457570;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response);1548082815;Check if the path has a file extension and whether the extension is_either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly_{@link ContentNegotiationManager#getAllFileExtensions() registered}._If not, and the status is in the 2xx range, a 'Content-Disposition'_header with a safe attachment file name ("f.txt") is added to prevent_RFD exploits.;private void addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response) {_		HttpHeaders headers = response.getHeaders()__		if (headers.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {_			return__		}__		try {_			int status = response.getServletResponse().getStatus()__			if (status < 200 || status > 299) {_				return__			}_		}_		catch (Throwable ex) {_			_		}__		HttpServletRequest servletRequest = request.getServletRequest()__		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest)___		int index = requestUri.lastIndexOf('/') + 1__		String filename = requestUri.substring(index)__		String pathParams = ""___		index = filename.indexOf('_')__		if (index != -1) {_			pathParams = filename.substring(index)__			filename = filename.substring(0, index)__		}__		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename)__		String ext = StringUtils.getFilenameExtension(filename)___		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams)__		String extInPathParams = StringUtils.getFilenameExtension(pathParams)___		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {_			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline_filename=f.txt")__		}_	};check,if,the,path,has,a,file,extension,and,whether,the,extension,is,either,link,whitelisted,or,explicitly,link,content,negotiation,manager,get,all,file,extensions,registered,if,not,and,the,status,is,in,the,2xx,range,a,content,disposition,header,with,a,safe,attachment,file,name,f,txt,is,added,to,prevent,rfd,exploits;private,void,add,content,disposition,header,servlet,server,http,request,request,servlet,server,http,response,response,http,headers,headers,response,get,headers,if,headers,contains,key,http,headers,return,try,int,status,response,get,servlet,response,get,status,if,status,200,status,299,return,catch,throwable,ex,http,servlet,request,servlet,request,request,get,servlet,request,string,request,uri,raw,url,path,helper,get,originating,request,uri,servlet,request,int,index,request,uri,last,index,of,1,string,filename,request,uri,substring,index,string,path,params,index,filename,index,of,if,index,1,path,params,filename,substring,index,filename,filename,substring,0,index,filename,decoding,url,path,helper,decode,request,string,servlet,request,filename,string,ext,string,utils,get,filename,extension,filename,path,params,decoding,url,path,helper,decode,request,string,servlet,request,path,params,string,ext,in,path,params,string,utils,get,filename,extension,path,params,if,safe,extension,servlet,request,ext,safe,extension,servlet,request,ext,in,path,params,headers,add,http,headers,inline,filename,f,txt
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1454648699;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> clazz = getReturnValueType(value, returnType)__		Type type = getGenericType(returnType)___		if (value != null && value instanceof CharSequence) {_			clazz = String.class__			type = String.class__			value = (T) value.toString()__		}__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, clazz, type)___		if (value != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + clazz)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (value != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(type,_							clazz, selectedMediaType)) {_						value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (value != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(value,_									type, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + value + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(clazz, selectedMediaType)) {_					value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (value != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(value,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + value + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (value != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,clazz,get,return,value,type,value,return,type,type,type,get,generic,type,return,type,if,value,null,value,instanceof,char,sequence,clazz,string,class,type,string,class,value,t,value,to,string,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,clazz,type,if,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,clazz,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,type,clazz,selected,media,type,value,t,get,advice,before,body,write,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,clazz,selected,media,type,value,t,get,advice,before,body,write,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,value,as,selected,media,type,using,message,converter,return,if,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1457125561;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> clazz = getReturnValueType(value, returnType)__		Type type = getGenericType(returnType)___		if (value != null && value instanceof CharSequence) {_			clazz = String.class__			type = String.class__			value = (T) value.toString()__		}__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, clazz, type)___		if (value != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + clazz)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (value != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(type,_							clazz, selectedMediaType)) {_						value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (value != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(value,_									type, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + value + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(clazz, selectedMediaType)) {_					value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (value != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(value,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + value + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (value != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,clazz,get,return,value,type,value,return,type,type,type,get,generic,type,return,type,if,value,null,value,instanceof,char,sequence,clazz,string,class,type,string,class,value,t,value,to,string,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,clazz,type,if,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,clazz,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,type,clazz,selected,media,type,value,t,get,advice,before,body,write,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,clazz,selected,media,type,value,t,get,advice,before,body,write,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,value,as,selected,media,type,using,message,converter,return,if,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1467457342;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Class<?> clazz = getReturnValueType(value, returnType)__		Type type = getGenericType(returnType)___		if (value != null && value instanceof CharSequence) {_			clazz = String.class__			type = String.class__			value = (T) value.toString()__		}__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, clazz, type)___		if (value != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + clazz)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (value != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(type,_							clazz, selectedMediaType)) {_						value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (value != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter<T>) messageConverter).write(value,_									type, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + value + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(clazz, selectedMediaType)) {_					value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (value != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter<T>) messageConverter).write(value,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + value + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (value != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,class,clazz,get,return,value,type,value,return,type,type,type,get,generic,type,return,type,if,value,null,value,instanceof,char,sequence,clazz,string,class,type,string,class,value,t,value,to,string,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,clazz,type,if,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,clazz,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,type,clazz,selected,media,type,value,t,get,advice,before,body,write,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,t,message,converter,write,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,clazz,selected,media,type,value,t,get,advice,before,body,write,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,t,message,converter,write,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,value,as,selected,media,type,using,message,converter,return,if,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1467463695;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter) messageConverter).canWrite(_							declaredType, valueType, selectedMediaType)) {_						outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (outputValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter) messageConverter).write(_									outputValue, declaredType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_										"\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter) messageConverter).write(outputValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,message,converter,can,write,declared,type,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,message,converter,write,output,value,declared,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,message,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1467730834;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter) messageConverter).canWrite(_							declaredType, valueType, selectedMediaType)) {_						outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (outputValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter) messageConverter).write(_									outputValue, declaredType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_										"\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter) messageConverter).write(outputValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,message,converter,can,write,declared,type,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,message,converter,write,output,value,declared,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,message,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1481630543;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter) messageConverter).canWrite(_							declaredType, valueType, selectedMediaType)) {_						outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (outputValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter) messageConverter).write(_									outputValue, declaredType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_										"\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter) messageConverter).write(outputValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,message,converter,can,write,declared,type,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,message,converter,write,output,value,declared,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,message,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1494019148;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter) messageConverter).canWrite(_							declaredType, valueType, selectedMediaType)) {_						outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (outputValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter) messageConverter).write(_									outputValue, declaredType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_										"\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter) messageConverter).write(outputValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,message,converter,can,write,declared,type,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,message,converter,write,output,value,declared,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,message,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1496259743;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new IllegalArgumentException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter) messageConverter).canWrite(_							declaredType, valueType, selectedMediaType)) {_						outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (outputValue != null) {_							addContentDispositionHeader(inputMessage, outputMessage)__							((GenericHttpMessageConverter) messageConverter).write(_									outputValue, declaredType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_										"\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						((HttpMessageConverter) messageConverter).write(outputValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,illegal,argument,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,message,converter,can,write,declared,type,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,generic,http,message,converter,message,converter,write,output,value,declared,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,http,message,converter,message,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,message,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1398287027;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1400209413;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof MethodParameterHttpMessageConverter) {_					MethodParameterHttpMessageConverter<T> c = (MethodParameterHttpMessageConverter<T>) messageConverter__					if (c.canWrite(returnValueClass, selectedMediaType, returnType)) {_						c.write(returnValue, selectedMediaType, outputMessage, returnType)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_									messageConverter + "]")__						}_						return__					}_				}_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,method,parameter,http,message,converter,method,parameter,http,message,converter,t,c,method,parameter,http,message,converter,t,message,converter,if,c,can,write,return,value,class,selected,media,type,return,type,c,write,return,value,selected,media,type,output,message,return,type,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,message,converter,can,write,return,value,class,selected,media,type,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1400528836;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof MethodParameterHttpMessageConverter) {_					MethodParameterHttpMessageConverter<T> c = (MethodParameterHttpMessageConverter<T>) messageConverter__					if (c.canWrite(returnValueClass, selectedMediaType, returnType)) {_						c.write(returnValue, selectedMediaType, outputMessage, returnType)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_									messageConverter + "]")__						}_						return__					}_				}_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = this.interceptorChain.invoke(returnValue, selectedMediaType,_							(Class<HttpMessageConverter<T>>) messageConverter.getClass(),_							returnType, inputMessage, outputMessage)__					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,method,parameter,http,message,converter,method,parameter,http,message,converter,t,c,method,parameter,http,message,converter,t,message,converter,if,c,can,write,return,value,class,selected,media,type,return,type,c,write,return,value,selected,media,type,output,message,return,type,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,message,converter,can,write,return,value,class,selected,media,type,return,value,this,interceptor,chain,invoke,return,value,selected,media,type,class,http,message,converter,t,message,converter,get,class,return,type,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1400528836;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = this.interceptorChain.invoke(returnValue, selectedMediaType,_							(Class<HttpMessageConverter<T>>) messageConverter.getClass(),_							returnType, inputMessage, outputMessage)__					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,this,interceptor,chain,invoke,return,value,selected,media,type,class,http,message,converter,t,message,converter,get,class,return,type,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1401483748;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = this.interceptorChain.invoke(returnValue, returnType, selectedMediaType,_							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage)__					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,this,interceptor,chain,invoke,return,value,return,type,selected,media,type,class,http,message,converter,message,converter,get,class,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1401483748;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = returnValue.getClass()__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = this.adviceChain.invoke(returnValue, returnType, selectedMediaType,_							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage)__					((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__					if (logger.isDebugEnabled()) {_						logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_								messageConverter + "]")__					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,return,value,get,class,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,this,advice,chain,invoke,return,value,return,type,selected,media,type,class,http,message,converter,message,converter,get,class,input,message,output,message,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1411153076;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = this.adviceChain.invoke(returnValue, returnType, selectedMediaType,_							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_									messageConverter + "]")__						}_					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,get,return,value,type,return,value,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,this,advice,chain,invoke,return,value,return,type,selected,media,type,class,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1413407172;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		if (returnValue == null && Void.class.equals(returnValueClass)) {_			return__		}__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = this.adviceChain.invoke(returnValue, returnType, selectedMediaType,_							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_									messageConverter + "]")__						}_					}_					return__				}_			}_		}_		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,get,return,value,type,return,value,return,type,if,return,value,null,void,class,equals,return,value,class,return,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,producible,media,types,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,this,advice,chain,invoke,return,value,return,type,selected,media,type,class,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1413566468;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = this.adviceChain.invoke(returnValue, returnType, selectedMediaType,_							(Class<HttpMessageConverter<?>>) messageConverter.getClass(), inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" + selectedMediaType + "\" using [" +_									messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,get,return,value,type,return,value,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,this,advice,chain,invoke,return,value,return,type,selected,media,type,class,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1427679734;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,get,return,value,type,return,value,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1434575016;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Assert.isTrue(returnValue == null || !producibleMediaTypes.isEmpty(),_				"No converter found for return value of type: " + returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,get,return,value,type,return,value,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,assert,is,true,return,value,null,producible,media,types,is,empty,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1434985545;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass)___		Assert.isTrue(returnValue == null || !producibleMediaTypes.isEmpty(),_				"No converter found for return value of type: " + returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						if (messageConverter instanceof GenericHttpMessageConverter) {_							Type type__							if (HttpEntity.class.isAssignableFrom(returnType.getParameterType())) {_								returnType.increaseNestingLevel()__								type = returnType.getNestedGenericParameterType()__							}_							else {_								type = returnType.getGenericParameterType()__							}_							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue, type, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,get,return,value,type,return,value,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,assert,is,true,return,value,null,producible,media,types,is,empty,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,if,message,converter,instanceof,generic,http,message,converter,type,type,if,http,entity,class,is,assignable,from,return,type,get,parameter,type,return,type,increase,nesting,level,type,return,type,get,nested,generic,parameter,type,else,type,return,type,get,generic,parameter,type,generic,http,message,converter,t,message,converter,write,return,value,type,selected,media,type,output,message,else,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings("unchecked") 	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException;1435237353;Writes the given return type to the given output message._@param returnValue the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on_the request cannot be met by the message converters;@SuppressWarnings("unchecked")_	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException {__		Class<?> returnValueClass = getReturnValueType(returnValue, returnType)__		Type returnValueType = getGenericType(returnType)__		HttpServletRequest servletRequest = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType)___		Assert.isTrue(returnValue == null || !producibleMediaTypes.isEmpty(),_				"No converter found for return value of type: " + returnValueClass)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (returnValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {_				if (messageConverter instanceof GenericHttpMessageConverter) {_					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,_							returnValueClass, selectedMediaType)) {_						returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_								(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_								inputMessage, outputMessage)__						if (returnValue != null) {_							((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,_									returnValueType, selectedMediaType, outputMessage)__							if (logger.isDebugEnabled()) {_								logger.debug("Written [" + returnValue + "] as \"" +_										selectedMediaType + "\" using [" + messageConverter + "]")__							}_						}_						return__					}_				}_				else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {_					returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),_							inputMessage, outputMessage)__					if (returnValue != null) {_						((HttpMessageConverter<T>) messageConverter).write(returnValue,_								selectedMediaType, outputMessage)__						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + returnValue + "] as \"" +_									selectedMediaType + "\" using [" + messageConverter + "]")__						}_					}_					return__				}_			}_		}__		if (returnValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,return,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,unchecked,protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,class,return,value,class,get,return,value,type,return,value,return,type,type,return,value,type,get,generic,type,return,type,http,servlet,request,servlet,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,servlet,request,list,media,type,producible,media,types,get,producible,media,types,servlet,request,return,value,class,return,value,type,assert,is,true,return,value,null,producible,media,types,is,empty,no,converter,found,for,return,value,of,type,return,value,class,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,message,converter,this,message,converters,if,message,converter,instanceof,generic,http,message,converter,if,generic,http,message,converter,t,message,converter,can,write,return,value,type,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,generic,http,message,converter,t,message,converter,write,return,value,return,value,type,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,else,if,message,converter,can,write,return,value,class,selected,media,type,return,value,t,get,advice,before,body,write,return,value,return,type,selected,media,type,class,extends,http,message,converter,message,converter,get,class,input,message,output,message,if,return,value,null,http,message,converter,t,message,converter,write,return,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,return,value,as,selected,media,type,using,message,converter,return,if,return,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1497346678;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new HttpMessageNotWritableException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1503600637;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}_		_		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					outputValue = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = outputValue.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new HttpMessageNotWritableException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,output,value,http,range,to,resource,regions,http,ranges,resource,value,type,output,value,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1508532146;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}_		_		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					outputValue = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = outputValue.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new HttpMessageNotWritableException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,output,value,http,range,to,resource,regions,http,ranges,resource,value,type,output,value,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1510344303;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}_		_		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					outputValue = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = outputValue.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		HttpServletRequest request = inputMessage.getServletRequest()__		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)___		MediaType contentType = outputMessage.getHeaders().getContentType()__		List<MediaType> producibleMediaTypes = (contentType != null && contentType.isConcrete() ?_				Collections.singletonList(contentType) : getProducibleMediaTypes(request, valueType, declaredType))___		if (outputValue != null && producibleMediaTypes.isEmpty()) {_			throw new HttpMessageNotWritableException("No converter found for return value of type: " + valueType)__		}__		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType requestedType : requestedMediaTypes) {_			for (MediaType producibleType : producibleMediaTypes) {_				if (requestedType.isCompatibleWith(producibleType)) {_					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType))__				}_			}_		}_		if (compatibleMediaTypes.isEmpty()) {_			if (outputValue != null) {_				throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__			}_			return__		}__		List<MediaType> mediaTypes = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(mediaTypes)___		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypes) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,output,value,http,range,to,resource,regions,http,ranges,resource,value,type,output,value,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,media,type,content,type,output,message,get,headers,get,content,type,list,media,type,producible,media,types,content,type,null,content,type,is,concrete,collections,singleton,list,content,type,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,compatible,media,types,add,get,most,specific,media,type,requested,type,producible,type,if,compatible,media,types,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,list,media,type,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,media,types,media,type,selected,media,type,null,for,media,type,media,type,media,types,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1512193423;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}_		_		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					outputValue = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = outputValue.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (outputValue != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (outputValue != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,output,value,http,range,to,resource,regions,http,ranges,resource,value,type,output,value,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1522184059;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}_		_		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					outputValue = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = outputValue.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (outputValue != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (outputValue != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,output,value,http,range,to,resource,regions,http,ranges,resource,value,type,output,value,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,t,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1522843494;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					outputValue = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = outputValue.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (outputValue != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (outputValue != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,output,value,http,range,to,resource,regions,http,ranges,resource,value,type,output,value,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1524501545;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object outputValue__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			outputValue = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			outputValue = value__			valueType = getReturnValueType(outputValue, returnType)__			declaredType = getGenericType(returnType)__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					outputValue = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = outputValue.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (outputValue != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (outputValue != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					outputValue = getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (outputValue != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType +_									"\" using [" + converter + "]")__						}_					}_					return__				}_			}_		}__		if (outputValue != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,output,value,class,value,type,type,declared,type,if,value,instanceof,char,sequence,output,value,value,to,string,value,type,string,class,declared,type,string,class,else,output,value,value,value,type,get,return,value,type,output,value,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,output,value,http,range,to,resource,regions,http,ranges,resource,value,type,output,value,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,output,value,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,output,value,get,advice,before,body,write,output,value,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,output,value,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,output,value,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,output,value,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,output,value,as,selected,media,type,using,converter,return,if,output,value,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1529361191;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			declaredType = getGenericType(returnType)__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (body != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Written \"" + selectedMediaType + "\" from " +_									"[" + (body instanceof CharSequence ? "\"" + body + "\"" : body) + "]")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,declared,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,declared,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,body,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,if,logger,is,debug,enabled,logger,debug,written,selected,media,type,from,body,instanceof,char,sequence,body,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1529721864;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			declaredType = getGenericType(returnType)__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (body != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("No match for " + requestedMediaTypes + ", supported: " + producibleMediaTypes)__			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Using '" + selectedMediaType + "' given " + mediaTypesToUse)__		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							Object formatted = body instanceof CharSequence ? "\"" + body + "\"" : body__							logger.debug("Writing [" + formatted + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,declared,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,declared,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,body,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,logger,is,debug,enabled,logger,debug,no,match,for,requested,media,types,supported,producible,media,types,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,media,types,to,use,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,object,formatted,body,instanceof,char,sequence,body,body,logger,debug,writing,formatted,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1530174524;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			declaredType = getGenericType(returnType)__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (body != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("No match for " + requestedMediaTypes + ", supported: " + producibleMediaTypes)__			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Using '" + selectedMediaType + "' given " + mediaTypesToUse)__		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							Object formatted = body instanceof CharSequence ? "\"" + body + "\"" : body__							logger.debug("Writing [" + formatted + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,declared,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,declared,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,body,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,logger,is,debug,enabled,logger,debug,no,match,for,requested,media,types,supported,producible,media,types,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,media,types,to,use,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,object,formatted,body,instanceof,char,sequence,body,body,logger,debug,writing,formatted,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1531217483;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type declaredType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			declaredType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			declaredType = getGenericType(returnType)__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null_					&& outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					declaredType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType)___			if (body != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("No match for " + requestedMediaTypes + ", supported: " + producibleMediaTypes)__			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Using '" + selectedMediaType + "' given " + mediaTypesToUse)__		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							Object formatted = body instanceof CharSequence ? "\"" + body + "\"" : body__							logger.debug("Writing [" + formatted + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, declaredType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,declared,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,declared,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,declared,type,get,generic,type,return,type,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,declared,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,declared,type,if,body,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,logger,is,debug,enabled,logger,debug,no,match,for,requested,media,types,supported,producible,media,types,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,media,types,to,use,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,declared,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,object,formatted,body,instanceof,char,sequence,body,body,logger,debug,writing,formatted,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,declared,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1531763135;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}___		List<MediaType> mediaTypesToUse___		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			mediaTypesToUse = Collections.singletonList(contentType)__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleMediaTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : requestedMediaTypes) {_				for (MediaType producibleType : producibleMediaTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("No match for " + requestedMediaTypes + ", supported: " + producibleMediaTypes)__			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes)__				}_				return__			}_			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)__		}__		MediaType selectedMediaType = null__		for (MediaType mediaType : mediaTypesToUse) {_			if (mediaType.isConcrete()) {_				selectedMediaType = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_				selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Using '" + selectedMediaType + "' given " + mediaTypesToUse)__		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							Object formatted = (body instanceof CharSequence ? "\"" + body + "\"" : body)__							logger.debug("Writing [" + formatted + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,list,media,type,media,types,to,use,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,media,types,to,use,collections,singleton,list,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,requested,media,types,get,acceptable,media,types,request,list,media,type,producible,media,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,media,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,media,types,to,use,new,array,list,for,media,type,requested,type,requested,media,types,for,media,type,producible,type,producible,media,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,logger,is,debug,enabled,logger,debug,no,match,for,requested,media,types,supported,producible,media,types,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,media,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,media,type,selected,media,type,null,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,media,types,to,use,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,object,formatted,body,instanceof,char,sequence,body,body,logger,debug,writing,formatted,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1532479646;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							Object formatted = (body instanceof CharSequence ? "\"" + body + "\"" : body)__							logger.debug("Writing [" + formatted + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,object,formatted,body,instanceof,char,sequence,body,body,logger,debug,writing,formatted,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1533160168;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Writing [" + formatValue(body) + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,logger,debug,writing,format,value,body,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1534488420;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							Object formatted = (body instanceof CharSequence ? "\"" + body + "\"" : body)__							logger.debug("Writing [" + formatted + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,object,formatted,body,instanceof,char,sequence,body,body,logger,debug,writing,formatted,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1534488827;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Writing [" + formatValue(body) + "]")__						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,logger,debug,writing,format,value,body,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1536942003;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						if (logger.isDebugEnabled()) {_							boolean traceOn = logger.isTraceEnabled()__							String s = "Writing [" + RequestMappingHandlerAdapter.formatValue(body, traceOn) + "]"__							if (traceOn) {_								logger.trace(s)__							}_							else {_								logger.debug(s)__							}_						}_						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,if,logger,is,debug,enabled,boolean,trace,on,logger,is,trace,enabled,string,s,writing,request,mapping,handler,adapter,format,value,body,trace,on,if,trace,on,logger,trace,s,else,logger,debug,s,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1536962806;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						Object theBody = body__						LogFormatUtils.traceDebug(logger, traceOn ->_								"Writing [" + LogFormatUtils.formatValue(theBody, traceOn) + "]")__						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,object,the,body,body,log,format,utils,trace,debug,logger,trace,on,writing,log,format,utils,format,value,the,body,trace,on,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1546457570;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						Object theBody = body__						LogFormatUtils.traceDebug(logger, traceOn ->_								"Writing [" + LogFormatUtils.formatValue(theBody, traceOn) + "]")__						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,is,present,in,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,object,the,body,body,log,format,utils,trace,debug,logger,trace,on,writing,log,format,utils,format,value,the,body,trace,on,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> @SuppressWarnings({"rawtypes", "unchecked"}) 	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType, 			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1548082815;Writes the given return type to the given output message._@param value the value to write to the output message_@param returnType the type of the value_@param inputMessage the input messages. Used to inspect the {@code Accept} header._@param outputMessage the output message to write to_@throws IOException thrown in case of I/O errors_@throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated_by the {@code Accept} header on the request cannot be met by the message converters;@SuppressWarnings({"rawtypes", "unchecked"})_	protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,_			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		Object body__		Class<?> valueType__		Type targetType___		if (value instanceof CharSequence) {_			body = value.toString()__			valueType = String.class__			targetType = String.class__		}_		else {_			body = value__			valueType = getReturnValueType(body, returnType)__			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass())__		}__		if (isResourceType(value, returnType)) {_			outputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&_					outputMessage.getServletResponse().getStatus() == 200) {_				Resource resource = (Resource) value__				try {_					List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__					outputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value())__					body = HttpRange.toResourceRegions(httpRanges, resource)__					valueType = body.getClass()__					targetType = RESOURCE_REGION_LIST_TYPE__				}_				catch (IllegalArgumentException ex) {_					outputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, "bytes */" + resource.contentLength())__					outputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value())__				}_			}_		}__		MediaType selectedMediaType = null__		MediaType contentType = outputMessage.getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			selectedMediaType = contentType__		}_		else {_			HttpServletRequest request = inputMessage.getServletRequest()__			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request)__			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType)___			if (body != null && producibleTypes.isEmpty()) {_				throw new HttpMessageNotWritableException(_						"No converter found for return value of type: " + valueType)__			}_			List<MediaType> mediaTypesToUse = new ArrayList<>()__			for (MediaType requestedType : acceptableTypes) {_				for (MediaType producibleType : producibleTypes) {_					if (requestedType.isCompatibleWith(producibleType)) {_						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType))__					}_				}_			}_			if (mediaTypesToUse.isEmpty()) {_				if (body != null) {_					throw new HttpMediaTypeNotAcceptableException(producibleTypes)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__				}_				return__			}__			MediaType.sortBySpecificityAndQuality(mediaTypesToUse)___			for (MediaType mediaType : mediaTypesToUse) {_				if (mediaType.isConcrete()) {_					selectedMediaType = mediaType__					break__				}_				else if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {_					selectedMediaType = MediaType.APPLICATION_OCTET_STREAM__					break__				}_			}__			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selectedMediaType + "', given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}__		if (selectedMediaType != null) {_			selectedMediaType = selectedMediaType.removeQualityValue()__			for (HttpMessageConverter<?> converter : this.messageConverters) {_				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?_						(GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ?_						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :_						converter.canWrite(valueType, selectedMediaType)) {_					body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,_							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),_							inputMessage, outputMessage)__					if (body != null) {_						Object theBody = body__						LogFormatUtils.traceDebug(logger, traceOn ->_								"Writing [" + LogFormatUtils.formatValue(theBody, !traceOn) + "]")__						addContentDispositionHeader(inputMessage, outputMessage)__						if (genericConverter != null) {_							genericConverter.write(body, targetType, selectedMediaType, outputMessage)__						}_						else {_							((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage)__						}_					}_					else {_						if (logger.isDebugEnabled()) {_							logger.debug("Nothing to write: null body")__						}_					}_					return__				}_			}_		}__		if (body != null) {_			throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes)__		}_	};writes,the,given,return,type,to,the,given,output,message,param,value,the,value,to,write,to,the,output,message,param,return,type,the,type,of,the,value,param,input,message,the,input,messages,used,to,inspect,the,code,accept,header,param,output,message,the,output,message,to,write,to,throws,ioexception,thrown,in,case,of,i,o,errors,throws,http,media,type,not,acceptable,exception,thrown,when,the,conditions,indicated,by,the,code,accept,header,on,the,request,cannot,be,met,by,the,message,converters;suppress,warnings,rawtypes,unchecked,protected,t,void,write,with,message,converters,nullable,t,value,method,parameter,return,type,servlet,server,http,request,input,message,servlet,server,http,response,output,message,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,object,body,class,value,type,type,target,type,if,value,instanceof,char,sequence,body,value,to,string,value,type,string,class,target,type,string,class,else,body,value,value,type,get,return,value,type,body,return,type,target,type,generic,type,resolver,resolve,type,get,generic,type,return,type,return,type,get,containing,class,if,is,resource,type,value,return,type,output,message,get,headers,set,http,headers,bytes,if,value,null,input,message,get,headers,get,first,http,headers,range,null,output,message,get,servlet,response,get,status,200,resource,resource,resource,value,try,list,http,range,http,ranges,input,message,get,headers,get,range,output,message,get,servlet,response,set,status,http,status,value,body,http,range,to,resource,regions,http,ranges,resource,value,type,body,get,class,target,type,catch,illegal,argument,exception,ex,output,message,get,headers,set,http,headers,bytes,resource,content,length,output,message,get,servlet,response,set,status,http,status,value,media,type,selected,media,type,null,media,type,content,type,output,message,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,selected,media,type,content,type,else,http,servlet,request,request,input,message,get,servlet,request,list,media,type,acceptable,types,get,acceptable,media,types,request,list,media,type,producible,types,get,producible,media,types,request,value,type,target,type,if,body,null,producible,types,is,empty,throw,new,http,message,not,writable,exception,no,converter,found,for,return,value,of,type,value,type,list,media,type,media,types,to,use,new,array,list,for,media,type,requested,type,acceptable,types,for,media,type,producible,type,producible,types,if,requested,type,is,compatible,with,producible,type,media,types,to,use,add,get,most,specific,media,type,requested,type,producible,type,if,media,types,to,use,is,empty,if,body,null,throw,new,http,media,type,not,acceptable,exception,producible,types,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,media,type,sort,by,specificity,and,quality,media,types,to,use,for,media,type,media,type,media,types,to,use,if,media,type,is,concrete,selected,media,type,media,type,break,else,if,media,type,is,present,in,selected,media,type,media,type,break,if,logger,is,debug,enabled,logger,debug,using,selected,media,type,given,acceptable,types,and,supported,producible,types,if,selected,media,type,null,selected,media,type,selected,media,type,remove,quality,value,for,http,message,converter,converter,this,message,converters,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,http,message,converter,converter,can,write,target,type,value,type,selected,media,type,converter,can,write,value,type,selected,media,type,body,get,advice,before,body,write,body,return,type,selected,media,type,class,extends,http,message,converter,converter,get,class,input,message,output,message,if,body,null,object,the,body,body,log,format,utils,trace,debug,logger,trace,on,writing,log,format,utils,format,value,the,body,trace,on,add,content,disposition,header,input,message,output,message,if,generic,converter,null,generic,converter,write,body,target,type,selected,media,type,output,message,else,http,message,converter,converter,write,body,selected,media,type,output,message,else,if,logger,is,debug,enabled,logger,debug,nothing,to,write,null,body,return,if,body,null,throw,new,http,media,type,not,acceptable,exception,this,all,supported,media,types
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1503600637;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType())__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,return,resource,class,is,assignable,from,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1508532146;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType())__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,return,resource,class,is,assignable,from,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1510344303;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType())__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,return,resource,class,is,assignable,from,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1512193423;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType())__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,return,resource,class,is,assignable,from,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1522184059;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType())__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,return,resource,class,is,assignable,from,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1522843494;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		return Resource.class.isAssignableFrom(value != null ? value.getClass() : returnType.getParameterType())__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,return,resource,class,is,assignable,from,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1524501545;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1529361191;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1529721864;Return whether the returned value or the declared return type extend {@link Resource};protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1530174524;Return whether the returned value or the declared return type extend {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extend,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1531217483;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1531763135;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1532479646;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1533160168;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1534488420;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1534488827;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1536942003;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1536962806;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1546457570;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected boolean isResourceType(@Nullable Object value, MethodParameter returnType);1548082815;Return whether the returned value or the declared return type extends {@link Resource}.;protected boolean isResourceType(@Nullable Object value, MethodParameter returnType) {_		Class<?> clazz = getReturnValueType(value, returnType)__		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz)__	};return,whether,the,returned,value,or,the,declared,return,type,extends,link,resource;protected,boolean,is,resource,type,nullable,object,value,method,parameter,return,type,class,clazz,get,return,value,type,value,return,type,return,clazz,input,stream,resource,class,resource,class,is,assignable,from,clazz
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1398287027;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1400209413;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1400528836;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1400528836;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1401483748;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1401483748;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1411153076;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1413407172;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1413566468;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1427679734;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1434575016;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1434985545;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException;1435237353;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1496837955;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1496955179;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1497346678;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1503600637;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1508532146;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1510344303;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1512193423;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1522184059;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1522843494;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1524501545;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1529361191;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1529721864;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1530174524;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1531217483;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1531763135;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1532479646;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1533160168;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1534488420;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1534488827;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1536942003;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1536962806;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1546457570;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType);1548082815;Return the type of the value to be written to the response. Typically this is_a simple check via getClass on the value but if the value is null, then the_return type needs to be examined possibly including generic type determination_(e.g. {@code ResponseEntity<T>}).;protected Class<?> getReturnValueType(@Nullable Object value, MethodParameter returnType) {_		return (value != null ? value.getClass() : returnType.getParameterType())__	};return,the,type,of,the,value,to,be,written,to,the,response,typically,this,is,a,simple,check,via,get,class,on,the,value,but,if,the,value,is,null,then,the,return,type,needs,to,be,examined,possibly,including,generic,type,determination,e,g,code,response,entity,t;protected,class,get,return,value,type,nullable,object,value,method,parameter,return,type,return,value,null,value,get,class,return,type,get,parameter,type
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2);1328020251;Returns the more specific media type using the q-value of the first media type for both.;private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2) {_		double quality = type1.getQualityValue()__		Map<String, String> params = Collections.singletonMap("q", String.valueOf(quality))__		MediaType t1 = new MediaType(type1, params)__		MediaType t2 = new MediaType(type2, params)__		return MediaType.SPECIFICITY_COMPARATOR.compare(t1, t2) <= 0 ? type1 : type2__	};returns,the,more,specific,media,type,using,the,q,value,of,the,first,media,type,for,both;private,media,type,get,most,specific,media,type,media,type,type1,media,type,type2,double,quality,type1,get,quality,value,map,string,string,params,collections,singleton,map,q,string,value,of,quality,media,type,t1,new,media,type,type1,params,media,type,t2,new,media,type,type2,params,return,media,type,compare,t1,t2,0,type1,type2
AbstractMessageConverterMethodProcessor -> private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2);1333402583;Returns the more specific media type using the q-value of the first media type for both.;private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2) {_		double quality = type1.getQualityValue()__		Map<String, String> params = Collections.singletonMap("q", String.valueOf(quality))__		MediaType t1 = new MediaType(type1, params)__		MediaType t2 = new MediaType(type2, params)__		return MediaType.SPECIFICITY_COMPARATOR.compare(t1, t2) <= 0 ? type1 : type2__	};returns,the,more,specific,media,type,using,the,q,value,of,the,first,media,type,for,both;private,media,type,get,most,specific,media,type,media,type,type1,media,type,type2,double,quality,type1,get,quality,value,map,string,string,params,collections,singleton,map,q,string,value,of,quality,media,type,t1,new,media,type,type1,params,media,type,t2,new,media,type,type2,params,return,media,type,compare,t1,t2,0,type1,type2
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1438078548;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1441370327;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1444898007;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1445889692;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446487668;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446769889;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446831433;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1446846341;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1447280069;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1454648148;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1454648699;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1457125561;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
AbstractMessageConverterMethodProcessor -> protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) 			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException;1467457342;Writes the given return value to the given web request. Delegates to_{@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)};protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)_			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {__		ServletServerHttpRequest inputMessage = createInputMessage(webRequest)__		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest)__		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)__	};writes,the,given,return,value,to,the,given,web,request,delegates,to,link,write,with,message,converters,object,method,parameter,servlet,server,http,request,servlet,server,http,response;protected,t,void,write,with,message,converters,t,return,value,method,parameter,return,type,native,web,request,web,request,throws,ioexception,http,media,type,not,acceptable,exception,http,message,not,writable,exception,servlet,server,http,request,input,message,create,input,message,web,request,servlet,server,http,response,output,message,create,output,message,web,request,write,with,message,converters,return,value,return,type,input,message,output,message
