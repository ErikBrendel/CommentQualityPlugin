commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Class<?> requiredViewClass() {     return XsltView.class. }
true;public;1;3;/**  * Set the name of the model attribute that represents the XSLT Source.  * If not specified, the model map will be searched for a matching value type.  * <p>The following source types are supported out of the box:  * {@link javax.xml.transform.Source}, {@link org.w3c.dom.Document},  * {@link org.w3c.dom.Node}, {@link java.io.Reader}, {@link java.io.InputStream}  * and {@link org.springframework.core.io.Resource}.  */ ;/**  * Set the name of the model attribute that represents the XSLT Source.  * If not specified, the model map will be searched for a matching value type.  * <p>The following source types are supported out of the box:  * {@link javax.xml.transform.Source}, {@link org.w3c.dom.Document},  * {@link org.w3c.dom.Node}, {@link java.io.Reader}, {@link java.io.InputStream}  * and {@link org.springframework.core.io.Resource}.  */ public void setSourceKey(String sourceKey) {     this.sourceKey = sourceKey. }
true;public;1;3;/**  * Set the URIResolver used in the transform.  * <p>The URIResolver handles calls to the XSLT {@code document()} function.  */ ;/**  * Set the URIResolver used in the transform.  * <p>The URIResolver handles calls to the XSLT {@code document()} function.  */ public void setUriResolver(URIResolver uriResolver) {     this.uriResolver = uriResolver. }
true;public;1;3;/**  * Set an implementation of the {@link javax.xml.transform.ErrorListener}  * interface for custom handling of transformation errors and warnings.  * <p>If not set, a default  * {@link org.springframework.util.xml.SimpleTransformErrorListener} is  * used that simply logs warnings using the logger instance of the view class,  * and rethrows errors to discontinue the XML transformation.  * @see org.springframework.util.xml.SimpleTransformErrorListener  */ ;/**  * Set an implementation of the {@link javax.xml.transform.ErrorListener}  * interface for custom handling of transformation errors and warnings.  * <p>If not set, a default  * {@link org.springframework.util.xml.SimpleTransformErrorListener} is  * used that simply logs warnings using the logger instance of the view class,  * and rethrows errors to discontinue the XML transformation.  * @see org.springframework.util.xml.SimpleTransformErrorListener  */ public void setErrorListener(ErrorListener errorListener) {     this.errorListener = errorListener. }
true;public;1;3;/**  * Set whether the XSLT transformer may add additional whitespace when  * outputting the result tree.  * <p>Default is {@code true} (on). set this to {@code false} (off)  * to not specify an "indent" key, leaving the choice up to the stylesheet.  * @see javax.xml.transform.OutputKeys#INDENT  */ ;/**  * Set whether the XSLT transformer may add additional whitespace when  * outputting the result tree.  * <p>Default is {@code true} (on). set this to {@code false} (off)  * to not specify an "indent" key, leaving the choice up to the stylesheet.  * @see javax.xml.transform.OutputKeys#INDENT  */ public void setIndent(boolean indent) {     this.indent = indent. }
true;public;1;3;/**  * Set arbitrary transformer output properties to be applied to the stylesheet.  * <p>Any values specified here will override defaults that this view sets  * programmatically.  * @see javax.xml.transform.Transformer#setOutputProperty  */ ;/**  * Set arbitrary transformer output properties to be applied to the stylesheet.  * <p>Any values specified here will override defaults that this view sets  * programmatically.  * @see javax.xml.transform.Transformer#setOutputProperty  */ public void setOutputProperties(Properties outputProperties) {     this.outputProperties = outputProperties. }
true;public;1;3;/**  * Turn on/off the caching of the XSLT templates.  * <p>The default value is "true". Only set this to "false" in development,  * where caching does not seriously impact performance.  */ ;/**  * Turn on/off the caching of the XSLT templates.  * <p>The default value is "true". Only set this to "false" in development,  * where caching does not seriously impact performance.  */ public void setCacheTemplates(boolean cacheTemplates) {     this.cacheTemplates = cacheTemplates. }
false;protected;1;19;;@Override protected AbstractUrlBasedView buildView(String viewName) throws Exception {     XsltView view = (XsltView) super.buildView(viewName).     if (this.sourceKey != null) {         view.setSourceKey(this.sourceKey).     }     if (this.uriResolver != null) {         view.setUriResolver(this.uriResolver).     }     if (this.errorListener != null) {         view.setErrorListener(this.errorListener).     }     view.setIndent(this.indent).     if (this.outputProperties != null) {         view.setOutputProperties(this.outputProperties).     }     view.setCacheTemplates(this.cacheTemplates).     return view. }
