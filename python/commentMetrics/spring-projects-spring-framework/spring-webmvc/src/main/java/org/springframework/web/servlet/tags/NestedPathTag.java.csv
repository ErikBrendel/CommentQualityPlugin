commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Set the path that this tag should apply.  * <p>E.g. "customer" to allow bind paths like "address.street"  * rather than "customer.address.street".  * @see BindTag#setPath  */ ;/**  * Set the path that this tag should apply.  * <p>E.g. "customer" to allow bind paths like "address.street"  * rather than "customer.address.street".  * @see BindTag#setPath  */ public void setPath(@Nullable String path) {     if (path == null) {         path = "".     }     if (path.length() > 0 && !path.endsWith(PropertyAccessor.NESTED_PROPERTY_SEPARATOR)) {         path += PropertyAccessor.NESTED_PROPERTY_SEPARATOR.     }     this.path = path. }
true;public;0;4;/**  * Return the path that this tag applies to.  */ ;/**  * Return the path that this tag applies to.  */ @Nullable public String getPath() {     return this.path. }
false;public;0;12;;@Override public int doStartTag() throws JspException {     // Save previous nestedPath value, build and expose current nestedPath value.     // Use request scope to expose nestedPath to included pages too.     this.previousNestedPath = (String) this.pageContext.getAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     String nestedPath = (this.previousNestedPath != null ? this.previousNestedPath + getPath() : getPath()).     this.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, nestedPath, PageContext.REQUEST_SCOPE).     return EVAL_BODY_INCLUDE. }
true;public;0;13;/**  * Reset any previous nestedPath value.  */ ;/**  * Reset any previous nestedPath value.  */ @Override public int doEndTag() {     if (this.previousNestedPath != null) {         // Expose previous nestedPath value.         this.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, this.previousNestedPath, PageContext.REQUEST_SCOPE).     } else {         // Remove exposed nestedPath value.         this.pageContext.removeAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     }     return EVAL_PAGE. }
false;public;1;4;;@Override public void doCatch(Throwable throwable) throws Throwable {     throw throwable. }
false;public;0;4;;@Override public void doFinally() {     this.previousNestedPath = null. }
