commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure a {@link ResourceUrlProvider} to use when resolving the public  * URL of links in a transformed resource (e.g. import links in a CSS file).  * This is required only for links expressed as full paths and not for  * relative links.  */ ;/**  * Configure a {@link ResourceUrlProvider} to use when resolving the public  * URL of links in a transformed resource (e.g. import links in a CSS file).  * This is required only for links expressed as full paths and not for  * relative links.  */ public void setResourceUrlProvider(@Nullable ResourceUrlProvider resourceUrlProvider) {     this.resourceUrlProvider = resourceUrlProvider. }
true;public;0;4;/**  * Return the configured {@code ResourceUrlProvider}.  */ ;/**  * Return the configured {@code ResourceUrlProvider}.  */ @Nullable public ResourceUrlProvider getResourceUrlProvider() {     return this.resourceUrlProvider. }
true;protected;4;15;/**  * A transformer can use this method when a resource being transformed  * contains links to other resources. Such links need to be replaced with the  * public facing link as determined by the resource resolver chain (e.g. the  * public URL may have a version inserted).  * @param resourcePath the path to a resource that needs to be re-written  * @param request the current request  * @param resource the resource being transformed  * @param transformerChain the transformer chain  * @return the resolved URL, or {@code} if not resolvable  */ ;/**  * A transformer can use this method when a resource being transformed  * contains links to other resources. Such links need to be replaced with the  * public facing link as determined by the resource resolver chain (e.g. the  * public URL may have a version inserted).  * @param resourcePath the path to a resource that needs to be re-written  * @param request the current request  * @param resource the resource being transformed  * @param transformerChain the transformer chain  * @return the resolved URL, or {@code} if not resolvable  */ @Nullable protected String resolveUrlPath(String resourcePath, HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) {     if (resourcePath.startsWith("/")) {         // full resource path         ResourceUrlProvider urlProvider = findResourceUrlProvider(request).         return (urlProvider != null ? urlProvider.getForRequestUrl(request, resourcePath) : null).     } else {         // try resolving as relative path         return transformerChain.getResolverChain().resolveUrlPath(resourcePath, Collections.singletonList(resource)).     } }
true;protected;2;10;/**  * Transform the given relative request path to an absolute path,  * taking the path of the given request as a point of reference.  * The resulting path is also cleaned from sequences like "path/..".  * @param path the relative path to transform  * @param request the referer request  * @return the absolute request path for the given resource path  */ ;/**  * Transform the given relative request path to an absolute path,  * taking the path of the given request as a point of reference.  * The resulting path is also cleaned from sequences like "path/..".  * @param path the relative path to transform  * @param request the referer request  * @return the absolute request path for the given resource path  */ protected String toAbsolutePath(String path, HttpServletRequest request) {     String absolutePath = path.     if (!path.startsWith("/")) {         ResourceUrlProvider urlProvider = findResourceUrlProvider(request).         Assert.state(urlProvider != null, "No ResourceUrlProvider").         String requestPath = urlProvider.getUrlPathHelper().getRequestUri(request).         absolutePath = StringUtils.applyRelativePath(requestPath, path).     }     return StringUtils.cleanPath(absolutePath). }
false;private;1;8;;@Nullable private ResourceUrlProvider findResourceUrlProvider(HttpServletRequest request) {     if (this.resourceUrlProvider != null) {         return this.resourceUrlProvider.     }     return (ResourceUrlProvider) request.getAttribute(ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR). }
