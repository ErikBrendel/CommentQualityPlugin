commented;modifiers;parameterAmount;loc;comment;code
true;default;1;2;/**  * Helps with configuring HandlerMappings path matching options such as trailing slash match,  * suffix registration, path matcher and path helper.  * Configured path matcher and path helper instances are shared for:  * <ul>  * <li>RequestMappings</li>  * <li>ViewControllerMappings</li>  * <li>ResourcesMappings</li>  * </ul>  * @since 4.0.3  */ ;/**  * Helps with configuring HandlerMappings path matching options such as trailing slash match,  * suffix registration, path matcher and path helper.  * Configured path matcher and path helper instances are shared for:  * <ul>  * <li>RequestMappings</li>  * <li>ViewControllerMappings</li>  * <li>ResourcesMappings</li>  * </ul>  * @since 4.0.3  */ default void configurePathMatch(PathMatchConfigurer configurer) { }
true;default;1;2;/**  * Configure content negotiation options.  */ ;/**  * Configure content negotiation options.  */ default void configureContentNegotiation(ContentNegotiationConfigurer configurer) { }
true;default;1;2;/**  * Configure asynchronous request handling options.  */ ;/**  * Configure asynchronous request handling options.  */ default void configureAsyncSupport(AsyncSupportConfigurer configurer) { }
true;default;1;2;/**  * Configure a handler to delegate unhandled requests by forwarding to the  * Servlet container's "default" servlet. A common use case for this is when  * the {@link DispatcherServlet} is mapped to "/" thus overriding the  * Servlet container's default handling of static resources.  */ ;/**  * Configure a handler to delegate unhandled requests by forwarding to the  * Servlet container's "default" servlet. A common use case for this is when  * the {@link DispatcherServlet} is mapped to "/" thus overriding the  * Servlet container's default handling of static resources.  */ default void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) { }
true;default;1;2;/**  * Add {@link Converter Converters} and {@link Formatter Formatters} in addition to the ones  * registered by default.  */ ;/**  * Add {@link Converter Converters} and {@link Formatter Formatters} in addition to the ones  * registered by default.  */ default void addFormatters(FormatterRegistry registry) { }
true;default;1;2;/**  * Add Spring MVC lifecycle interceptors for pre- and post-processing of  * controller method invocations. Interceptors can be registered to apply  * to all requests or be limited to a subset of URL patterns.  * <p><strong>Note</strong> that interceptors registered here only apply to  * controllers and not to resource handler requests. To intercept requests for  * static resources either declare a  * {@link org.springframework.web.servlet.handler.MappedInterceptor MappedInterceptor}  * bean or switch to advanced configuration mode by extending  * {@link org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport  * WebMvcConfigurationSupport} and then override {@code resourceHandlerMapping}.  */ ;/**  * Add Spring MVC lifecycle interceptors for pre- and post-processing of  * controller method invocations. Interceptors can be registered to apply  * to all requests or be limited to a subset of URL patterns.  * <p><strong>Note</strong> that interceptors registered here only apply to  * controllers and not to resource handler requests. To intercept requests for  * static resources either declare a  * {@link org.springframework.web.servlet.handler.MappedInterceptor MappedInterceptor}  * bean or switch to advanced configuration mode by extending  * {@link org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport  * WebMvcConfigurationSupport} and then override {@code resourceHandlerMapping}.  */ default void addInterceptors(InterceptorRegistry registry) { }
true;default;1;2;/**  * Add handlers to serve static resources such as images, js, and, css  * files from specific locations under web application root, the classpath,  * and others.  */ ;/**  * Add handlers to serve static resources such as images, js, and, css  * files from specific locations under web application root, the classpath,  * and others.  */ default void addResourceHandlers(ResourceHandlerRegistry registry) { }
true;default;1;2;/**  * Configure cross origin requests processing.  * @since 4.2  */ ;/**  * Configure cross origin requests processing.  * @since 4.2  */ default void addCorsMappings(CorsRegistry registry) { }
true;default;1;2;/**  * Configure simple automated controllers pre-configured with the response  * status code and/or a view to render the response body. This is useful in  * cases where there is no need for custom controller logic -- e.g. render a  * home page, perform simple site URL redirects, return a 404 status with  * HTML content, a 204 with no content, and more.  */ ;/**  * Configure simple automated controllers pre-configured with the response  * status code and/or a view to render the response body. This is useful in  * cases where there is no need for custom controller logic -- e.g. render a  * home page, perform simple site URL redirects, return a 404 status with  * HTML content, a 204 with no content, and more.  */ default void addViewControllers(ViewControllerRegistry registry) { }
true;default;1;2;/**  * Configure view resolvers to translate String-based view names returned from  * controllers into concrete {@link org.springframework.web.servlet.View}  * implementations to perform rendering with.  * @since 4.1  */ ;/**  * Configure view resolvers to translate String-based view names returned from  * controllers into concrete {@link org.springframework.web.servlet.View}  * implementations to perform rendering with.  * @since 4.1  */ default void configureViewResolvers(ViewResolverRegistry registry) { }
true;default;1;2;/**  * Add resolvers to support custom controller method argument types.  * <p>This does not override the built-in support for resolving handler  * method arguments. To customize the built-in support for argument  * resolution, configure {@link RequestMappingHandlerAdapter} directly.  * @param resolvers initially an empty list  */ ;/**  * Add resolvers to support custom controller method argument types.  * <p>This does not override the built-in support for resolving handler  * method arguments. To customize the built-in support for argument  * resolution, configure {@link RequestMappingHandlerAdapter} directly.  * @param resolvers initially an empty list  */ default void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) { }
true;default;1;2;/**  * Add handlers to support custom controller method return value types.  * <p>Using this option does not override the built-in support for handling  * return values. To customize the built-in support for handling return  * values, configure RequestMappingHandlerAdapter directly.  * @param handlers initially an empty list  */ ;/**  * Add handlers to support custom controller method return value types.  * <p>Using this option does not override the built-in support for handling  * return values. To customize the built-in support for handling return  * values, configure RequestMappingHandlerAdapter directly.  * @param handlers initially an empty list  */ default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) { }
true;default;1;2;/**  * Configure the {@link HttpMessageConverter HttpMessageConverters} to use for reading or writing  * to the body of the request or response. If no converters are added, a  * default list of converters is registered.  * <p><strong>Note</strong> that adding converters to the list, turns off  * default converter registration. To simply add a converter without impacting  * default registration, consider using the method  * {@link #extendMessageConverters(java.util.List)} instead.  * @param converters initially an empty list of converters  */ ;/**  * Configure the {@link HttpMessageConverter HttpMessageConverters} to use for reading or writing  * to the body of the request or response. If no converters are added, a  * default list of converters is registered.  * <p><strong>Note</strong> that adding converters to the list, turns off  * default converter registration. To simply add a converter without impacting  * default registration, consider using the method  * {@link #extendMessageConverters(java.util.List)} instead.  * @param converters initially an empty list of converters  */ default void configureMessageConverters(List<HttpMessageConverter<?>> converters) { }
true;default;1;2;/**  * A hook for extending or modifying the list of converters after it has been  * configured. This may be useful for example to allow default converters to  * be registered and then insert a custom converter through this method.  * @param converters the list of configured converters to extend.  * @since 4.1.3  */ ;/**  * A hook for extending or modifying the list of converters after it has been  * configured. This may be useful for example to allow default converters to  * be registered and then insert a custom converter through this method.  * @param converters the list of configured converters to extend.  * @since 4.1.3  */ default void extendMessageConverters(List<HttpMessageConverter<?>> converters) { }
true;default;1;2;/**  * Configure exception resolvers.  * <p>The given list starts out empty. If it is left empty, the framework  * configures a default set of resolvers, see  * {@link WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List)}.  * Or if any exception resolvers are added to the list, then the application  * effectively takes over and must provide, fully initialized, exception  * resolvers.  * <p>Alternatively you can use  * {@link #extendHandlerExceptionResolvers(List)} which allows you to extend  * or modify the list of exception resolvers configured by default.  * @param resolvers initially an empty list  * @see #extendHandlerExceptionResolvers(List)  * @see WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List)  */ ;/**  * Configure exception resolvers.  * <p>The given list starts out empty. If it is left empty, the framework  * configures a default set of resolvers, see  * {@link WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List)}.  * Or if any exception resolvers are added to the list, then the application  * effectively takes over and must provide, fully initialized, exception  * resolvers.  * <p>Alternatively you can use  * {@link #extendHandlerExceptionResolvers(List)} which allows you to extend  * or modify the list of exception resolvers configured by default.  * @param resolvers initially an empty list  * @see #extendHandlerExceptionResolvers(List)  * @see WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List)  */ default void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) { }
true;default;1;2;/**  * Extending or modify the list of exception resolvers configured by default.  * This can be useful for inserting a custom exception resolver without  * interfering with default ones.  * @param resolvers the list of configured resolvers to extend  * @since 4.3  * @see WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List)  */ ;/**  * Extending or modify the list of exception resolvers configured by default.  * This can be useful for inserting a custom exception resolver without  * interfering with default ones.  * @param resolvers the list of configured resolvers to extend  * @since 4.3  * @see WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List)  */ default void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) { }
true;default;0;4;/**  * Provide a custom {@link Validator} instead of the one created by default.  * The default implementation, assuming JSR-303 is on the classpath, is:  * {@link org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean}.  * Leave the return value as {@code null} to keep the default.  */ ;/**  * Provide a custom {@link Validator} instead of the one created by default.  * The default implementation, assuming JSR-303 is on the classpath, is:  * {@link org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean}.  * Leave the return value as {@code null} to keep the default.  */ @Nullable default Validator getValidator() {     return null. }
true;default;0;4;/**  * Provide a custom {@link MessageCodesResolver} for building message codes  * from data binding and validation error codes. Leave the return value as  * {@code null} to keep the default.  */ ;/**  * Provide a custom {@link MessageCodesResolver} for building message codes  * from data binding and validation error codes. Leave the return value as  * {@code null} to keep the default.  */ @Nullable default MessageCodesResolver getMessageCodesResolver() {     return null. }
