commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the order value for this HandlerAdapter bean.  * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.  * @see org.springframework.core.Ordered#getOrder()  */ ;/**  * Specify the order value for this HandlerAdapter bean.  * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.  * @see org.springframework.core.Ordered#getOrder()  */ public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;public,final;1;4;/**  * This implementation expects the handler to be an {@link HandlerMethod}.  * @param handler the handler instance to check  * @return whether or not this adapter can adapt the given handler  */ ;/**  * This implementation expects the handler to be an {@link HandlerMethod}.  * @param handler the handler instance to check  * @return whether or not this adapter can adapt the given handler  */ @Override public final boolean supports(Object handler) {     return (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler)). }
true;protected,abstract;1;1;/**  * Given a handler method, return whether or not this adapter can support it.  * @param handlerMethod the handler method to check  * @return whether or not this adapter can adapt the given method  */ ;/**  * Given a handler method, return whether or not this adapter can support it.  * @param handlerMethod the handler method to check  * @return whether or not this adapter can adapt the given method  */ protected abstract boolean supportsInternal(HandlerMethod handlerMethod).
true;public,final;3;7;/**  * This implementation expects the handler to be an {@link HandlerMethod}.  */ ;/**  * This implementation expects the handler to be an {@link HandlerMethod}.  */ @Override @Nullable public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {     return handleInternal(request, response, (HandlerMethod) handler). }
true;protected,abstract;3;3;/**  * Use the given handler method to handle the request.  * @param request current HTTP request  * @param response current HTTP response  * @param handlerMethod handler method to use. This object must have previously been passed to the  * {@link #supportsInternal(HandlerMethod)} this interface, which must have returned {@code true}.  * @return a ModelAndView object with the name of the view and the required model data,  * or {@code null} if the request has been handled directly  * @throws Exception in case of errors  */ ;/**  * Use the given handler method to handle the request.  * @param request current HTTP request  * @param response current HTTP response  * @param handlerMethod handler method to use. This object must have previously been passed to the  * {@link #supportsInternal(HandlerMethod)} this interface, which must have returned {@code true}.  * @return a ModelAndView object with the name of the view and the required model data,  * or {@code null} if the request has been handled directly  * @throws Exception in case of errors  */ @Nullable protected abstract ModelAndView handleInternal(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception.
true;public,final;2;4;/**  * This implementation expects the handler to be an {@link HandlerMethod}.  */ ;/**  * This implementation expects the handler to be an {@link HandlerMethod}.  */ @Override public final long getLastModified(HttpServletRequest request, Object handler) {     return getLastModifiedInternal(request, (HandlerMethod) handler). }
true;protected,abstract;2;1;/**  * Same contract as for {@link javax.servlet.http.HttpServlet#getLastModified(HttpServletRequest)}.  * @param request current HTTP request  * @param handlerMethod handler method to use  * @return the lastModified value for the given handler  */ ;/**  * Same contract as for {@link javax.servlet.http.HttpServlet#getLastModified(HttpServletRequest)}.  * @param request current HTTP request  * @param handlerMethod handler method to use  * @return the lastModified value for the given handler  */ protected abstract long getLastModifiedInternal(HttpServletRequest request, HandlerMethod handlerMethod).
