# id;timestamp;commentText;codeText;commentWords;codeWords
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1500448076;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1510251306;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1510341686;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1521630133;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1522103016;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1522163099;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1522332273;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1527623253;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1529361191;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1529721864;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1529948549;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1495868221;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1496837955;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1500448076;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1510251306;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1510341686;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1521630133;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1522103016;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1522163099;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1522332273;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path \"" + resourcePath + "\" was successfully resolved " +_						"but resource \"" +	resource.getURL() + "\" is neither under the " +_						"current location \"" + location.getURL() + "\" nor under any of the " +_						"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1527623253;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.trace("Resource path \"" + resourcePath + "\" was successfully resolved " +_						"but resource \"" +	resource.getURL() + "\" is neither under the " +_						"current location \"" + location.getURL() + "\" nor under any of the " +_						"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1529361191;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isWarnEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.warn("Resource path \"" + resourcePath + "\" was successfully resolved " +_						"but resource \"" +	resource.getURL() + "\" is neither under the " +_						"current location \"" + location.getURL() + "\" nor under any of the " +_						"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,warn,enabled,resource,allowed,locations,get,allowed,locations,logger,warn,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1529721864;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isWarnEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.warn("Resource path \"" + resourcePath + "\" was successfully resolved " +_						"but resource \"" +	resource.getURL() + "\" is neither under the " +_						"current location \"" + location.getURL() + "\" nor under any of the " +_						"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,warn,enabled,resource,allowed,locations,get,allowed,locations,logger,warn,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> @Nullable 	protected Resource getResource(String resourcePath, Resource location) throws IOException;1529948549;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;@Nullable_	protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isWarnEnabled()) {_				Resource[] allowedLocations = getAllowedLocations()__				logger.warn("Resource path \"" + resourcePath + "\" was successfully resolved " +_						"but resource \"" +	resource.getURL() + "\" is neither under the " +_						"current location \"" + location.getURL() + "\" nor under any of the " +_						"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;nullable,protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,warn,enabled,resource,allowed,locations,get,allowed,locations,logger,warn,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,null
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1510251306;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@param locationCharsets charsets by location_@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,param,location,charsets,charsets,by,location,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1510341686;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1521630133;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1522103016;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1522163099;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1522332273;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1527623253;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1529361191;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1529721864;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setLocationCharsets(Map<Resource, Charset> locationCharsets);1529948549;Configure charsets associated with locations. If a static resource is found_under a {@link org.springframework.core.io.UrlResource URL resource}_location the charset is used to encode the relative path_<p><strong>Note:</strong> the charset is used only if the_{@link #setUrlPathHelper urlPathHelper} property is also configured and_its {@code urlDecode} property is set to true._@since 4.3.13;public void setLocationCharsets(Map<Resource, Charset> locationCharsets) {_		this.locationCharsets.clear()__		this.locationCharsets.putAll(locationCharsets)__	};configure,charsets,associated,with,locations,if,a,static,resource,is,found,under,a,link,org,springframework,core,io,url,resource,url,resource,location,the,charset,is,used,to,encode,the,relative,path,p,strong,note,strong,the,charset,is,used,only,if,the,link,set,url,path,helper,url,path,helper,property,is,also,configured,and,its,code,url,decode,property,is,set,to,true,since,4,3,13;public,void,set,location,charsets,map,resource,charset,location,charsets,this,location,charsets,clear,this,location,charsets,put,all,location,charsets
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1415686364;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1416834534;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1416838004;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1421772365;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1424956799;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1424969426;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1437121897;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1441728690;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1449660489;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1495868221;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1496837955;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link org.springframework.web.servlet.resource.CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceHttpRequestHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations_@since 4.1.2_@see ResourceHttpRequestHandler#initAllowedLocations();public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,org,springframework,web,servlet,resource,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,http,request,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations,since,4,1,2,see,resource,http,request,handler,init,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1415686364;Perform additional checks on a resolved resource beyond checking whether_the resources exists and is readable. The default implementation also_verifies the resource is either under the location relative to which it_was found or is under one of the {@link #setAllowedLocations allowed_locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1416834534;Perform additional checks on a resolved resource beyond checking whether_the resources exists and is readable. The default implementation also_verifies the resource is either under the location relative to which it_was found or is under one of the {@link #setAllowedLocations allowed_locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1416838004;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1421772365;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1424956799;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1424969426;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1437121897;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1441728690;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1449660489;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1495868221;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1496837955;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1500448076;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1510251306;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1510341686;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1521630133;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1522103016;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1522163099;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1522332273;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1527623253;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1529361191;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1529721864;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1529948549;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise._@since 4.1.2;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		Resource[] allowedLocations = getAllowedLocations()__		if (allowedLocations != null) {_			for (Resource current : allowedLocations) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise,since,4,1,2;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,resource,allowed,locations,get,allowed,locations,if,allowed,locations,null,for,resource,current,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1510251306;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1510341686;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1521630133;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1522103016;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1522163099;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1522332273;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1527623253;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1529361191;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1529721864;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public Map<Resource, Charset> getLocationCharsets();1529948549;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1510251306;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@param urlPathHelper a reference to the path helper_@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,param,url,path,helper,a,reference,to,the,path,helper,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1510341686;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1521630133;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1522103016;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1522163099;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1522332273;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1527623253;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1529361191;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1529721864;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1529948549;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1409160643;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource or {@code null};protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		return (resource.exists() && resource.isReadable() ? resource : null)__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,return,resource,exists,resource,is,readable,resource,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1413848647;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource or {@code null};protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		return (resource.exists() && resource.isReadable() ? resource : null)__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,return,resource,exists,resource,is,readable,resource,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1415376890;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		return (resource.exists() && resource.isReadable() ? resource : null)__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,return,resource,exists,resource,is,readable,resource,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1415686364;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("resourcePath=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" +	resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + getAllowedLocations())__				}_			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1416834534;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("resourcePath=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" +	resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + getAllowedLocations())__				}_			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1416838004;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1421772365;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1424956799;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1424969426;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1437121897;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1441728690;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> protected Resource getResource(String resourcePath, Resource location) throws IOException;1449660489;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Resource getResource(String resourcePath, Resource location) throws IOException {_		Resource resource = location.createRelative(resourcePath)__		if (resource.exists() && resource.isReadable()) {_			if (checkResource(resource, location)) {_				return resource__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_						"but resource=\"" +	resource.getURL() + "\" is neither under the " +_						"current location=\"" + location.getURL() + "\" nor under any of the " +_						"allowed locations=" + Arrays.asList(getAllowedLocations()))__			}_		}_		return null__	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,resource,get,resource,string,resource,path,resource,location,throws,ioexception,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,return,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,return,null
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1510251306;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1510341686;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1521630133;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1522103016;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1522163099;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1522332273;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1527623253;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1529361191;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1529721864;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
PathResourceResolver -> @Nullable 	public UrlPathHelper getUrlPathHelper();1529948549;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
