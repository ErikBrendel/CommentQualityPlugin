commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the name of the parameter that contains a locale specification  * in a locale change request. Default is "locale".  */ ;/**  * Set the name of the parameter that contains a locale specification  * in a locale change request. Default is "locale".  */ public void setParamName(String paramName) {     this.paramName = paramName. }
true;public;0;3;/**  * Return the name of the parameter that contains a locale specification  * in a locale change request.  */ ;/**  * Return the name of the parameter that contains a locale specification  * in a locale change request.  */ public String getParamName() {     return this.paramName. }
true;public;1;3;/**  * Configure the HTTP method(s) over which the locale can be changed.  * @param httpMethods the methods  * @since 4.2  */ ;/**  * Configure the HTTP method(s) over which the locale can be changed.  * @param httpMethods the methods  * @since 4.2  */ public void setHttpMethods(@Nullable String... httpMethods) {     this.httpMethods = httpMethods. }
true;public;0;4;/**  * Return the configured HTTP methods.  * @since 4.2  */ ;/**  * Return the configured HTTP methods.  * @since 4.2  */ @Nullable public String[] getHttpMethods() {     return this.httpMethods. }
true;public;1;3;/**  * Set whether to ignore an invalid value for the locale parameter.  * @since 4.2.2  */ ;/**  * Set whether to ignore an invalid value for the locale parameter.  * @since 4.2.2  */ public void setIgnoreInvalidLocale(boolean ignoreInvalidLocale) {     this.ignoreInvalidLocale = ignoreInvalidLocale. }
true;public;0;3;/**  * Return whether to ignore an invalid value for the locale parameter.  * @since 4.2.2  */ ;/**  * Return whether to ignore an invalid value for the locale parameter.  * @since 4.2.2  */ public boolean isIgnoreInvalidLocale() {     return this.ignoreInvalidLocale. }
true;public;1;6;/**  * Specify whether to parse request parameter values as BCP 47 language tags  * instead of Java's legacy locale specification format.  * <p><b>NOTE: As of 5.1, this resolver leniently accepts the legacy  * {@link Locale#toString} format as well as BCP 47 language tags.</b>  * @since 4.3  * @see Locale#forLanguageTag(String)  * @see Locale#toLanguageTag()  * @deprecated as of 5.1 since it only accepts {@code true} now  */ ;/**  * Specify whether to parse request parameter values as BCP 47 language tags  * instead of Java's legacy locale specification format.  * <p><b>NOTE: As of 5.1, this resolver leniently accepts the legacy  * {@link Locale#toString} format as well as BCP 47 language tags.</b>  * @since 4.3  * @see Locale#forLanguageTag(String)  * @see Locale#toLanguageTag()  * @deprecated as of 5.1 since it only accepts {@code true} now  */ @Deprecated public void setLanguageTagCompliant(boolean languageTagCompliant) {     if (!languageTagCompliant) {         throw new IllegalArgumentException("LocaleChangeInterceptor always accepts BCP 47 language tags").     } }
true;public;0;4;/**  * Return whether to use BCP 47 language tags instead of Java's legacy  * locale specification format.  * @since 4.3  * @deprecated as of 5.1 since it always returns {@code true} now  */ ;/**  * Return whether to use BCP 47 language tags instead of Java's legacy  * locale specification format.  * @since 4.3  * @deprecated as of 5.1 since it always returns {@code true} now  */ @Deprecated public boolean isLanguageTagCompliant() {     return true. }
false;public;3;28;;@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException {     String newLocale = request.getParameter(getParamName()).     if (newLocale != null) {         if (checkHttpMethod(request.getMethod())) {             LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(request).             if (localeResolver == null) {                 throw new IllegalStateException("No LocaleResolver found: not in a DispatcherServlet request?").             }             try {                 localeResolver.setLocale(request, response, parseLocaleValue(newLocale)).             } catch (IllegalArgumentException ex) {                 if (isIgnoreInvalidLocale()) {                     logger.debug("Ignoring invalid locale value [" + newLocale + "]: " + ex.getMessage()).                 } else {                     throw ex.                 }             }         }     }     // Proceed in any case.     return true. }
false;private;1;12;;private boolean checkHttpMethod(String currentMethod) {     String[] configuredMethods = getHttpMethods().     if (ObjectUtils.isEmpty(configuredMethods)) {         return true.     }     for (String configuredMethod : configuredMethods) {         if (configuredMethod.equalsIgnoreCase(currentMethod)) {             return true.         }     }     return false. }
true;protected;1;4;/**  * Parse the given locale value as coming from a request parameter.  * <p>The default implementation calls {@link StringUtils#parseLocale(String)},  * accepting the {@link Locale#toString} format as well as BCP 47 language tags.  * @param localeValue the locale value to parse  * @return the corresponding {@code Locale} instance  * @since 4.3  */ ;/**  * Parse the given locale value as coming from a request parameter.  * <p>The default implementation calls {@link StringUtils#parseLocale(String)},  * accepting the {@link Locale#toString} format as well as BCP 47 language tags.  * @param localeValue the locale value to parse  * @return the corresponding {@code Locale} instance  * @since 4.3  */ @Nullable protected Locale parseLocaleValue(String localeValue) {     return StringUtils.parseLocale(localeValue). }
