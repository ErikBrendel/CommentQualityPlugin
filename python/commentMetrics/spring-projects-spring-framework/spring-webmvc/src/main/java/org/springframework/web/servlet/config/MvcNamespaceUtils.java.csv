# id;timestamp;commentText;codeText;commentWords;codeWords
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, @Nullable Object source);1496837955;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, @Nullable Object source);1506468851;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, @Nullable Object source);1506562129;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1506562129;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1508532146;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1510251306;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1510821383;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1510825976;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1510940038;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)){_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1551080576;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source);1551113869;Registers  an {@link HandlerMappingIntrospector} under a well-known name_unless already registered.;private static void registerHandlerMappingIntrospector(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(HandlerMappingIntrospector.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanDef.setLazyInit(true)__			parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, beanDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME))__		}_	};registers,an,link,handler,mapping,introspector,under,a,well,known,name,unless,already,registered;private,static,void,register,handler,mapping,introspector,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,handler,mapping,introspector,class,bean,def,set,source,source,bean,def,set,role,bean,definition,bean,def,set,lazy,init,true,parser,context,get,registry,register,bean,definition,bean,def,parser,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1328020251;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1356735495;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1402499224;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1405306409;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1405696918;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1433265252;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1436473186;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1457125561;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1495868221;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source);1496259743;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations, ParserContext parserContext, Object source);1436473186;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations, ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsConfigurationsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsConfigurationsDef.setSource(source)__			corsConfigurationsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			parserContext.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsConfigurationsDef)__			parserContext.registerComponent(new BeanComponentDefinition(corsConfigurationsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsConfigurationsDef = parserContext.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,map,string,cors,configuration,cors,configurations,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,cors,configurations,def,new,root,bean,definition,linked,hash,map,class,cors,configurations,def,set,source,source,cors,configurations,def,set,role,bean,definition,if,cors,configurations,null,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,parser,context,get,reader,context,get,registry,register,bean,definition,cors,configurations,def,parser,context,register,component,new,bean,component,definition,cors,configurations,def,else,if,cors,configurations,null,bean,definition,cors,configurations,def,parser,context,get,registry,get,bean,definition,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations, ParserContext parserContext, Object source);1457125561;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations, ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsConfigurationsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsConfigurationsDef.setSource(source)__			corsConfigurationsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			parserContext.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsConfigurationsDef)__			parserContext.registerComponent(new BeanComponentDefinition(corsConfigurationsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsConfigurationsDef = parserContext.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,map,string,cors,configuration,cors,configurations,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,cors,configurations,def,new,root,bean,definition,linked,hash,map,class,cors,configurations,def,set,source,source,cors,configurations,def,set,role,bean,definition,if,cors,configurations,null,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,parser,context,get,reader,context,get,registry,register,bean,definition,cors,configurations,def,parser,context,register,component,new,bean,component,definition,cors,configurations,def,else,if,cors,configurations,null,bean,definition,cors,configurations,def,parser,context,get,registry,get,bean,definition,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations, ParserContext parserContext, Object source);1495868221;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(Map<String, CorsConfiguration> corsConfigurations, ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsConfigurationsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsConfigurationsDef.setSource(source)__			corsConfigurationsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			parserContext.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsConfigurationsDef)__			parserContext.registerComponent(new BeanComponentDefinition(corsConfigurationsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsConfigurationsDef = parserContext.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,map,string,cors,configuration,cors,configurations,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,cors,configurations,def,new,root,bean,definition,linked,hash,map,class,cors,configurations,def,set,source,source,cors,configurations,def,set,role,bean,definition,if,cors,configurations,null,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,parser,context,get,reader,context,get,registry,register,bean,definition,cors,configurations,def,parser,context,register,component,new,bean,component,definition,cors,configurations,def,else,if,cors,configurations,null,bean,definition,cors,configurations,def,parser,context,get,registry,get,bean,definition,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1328020251;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1356735495;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1402499224;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1405306409;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1405696918;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1433265252;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationRef = MvcNamespaceUtils.registerCorsConfiguration(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfiguration", corsConfigurationRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configuration,ref,mvc,namespace,utils,register,cors,configuration,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configuration,cors,configuration,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1436473186;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationsRef = MvcNamespaceUtils.registerCorsConfigurations(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfigurations", corsConfigurationsRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configurations,ref,mvc,namespace,utils,register,cors,configurations,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configurations,cors,configurations,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1457125561;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationsRef = MvcNamespaceUtils.registerCorsConfigurations(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfigurations", corsConfigurationsRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configurations,ref,mvc,namespace,utils,register,cors,configurations,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configurations,cors,configurations,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1495868221;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationsRef = MvcNamespaceUtils.registerCorsConfigurations(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfigurations", corsConfigurationsRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configurations,ref,mvc,namespace,utils,register,cors,configurations,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configurations,cors,configurations,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source);1496259743;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationsRef = MvcNamespaceUtils.registerCorsConfigurations(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfigurations", corsConfigurationsRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configurations,ref,mvc,namespace,utils,register,cors,configurations,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configurations,cors,configurations,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1496837955;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1506468851;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1506562129;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1508532146;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1510251306;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1510821383;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1510825976;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1510940038;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1551080576;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef, 			ParserContext parserContext, @Nullable Object source);1551113869;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(@Nullable RuntimeBeanReference pathMatcherRef,_			ParserContext parserContext, @Nullable Object source) {__		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME) &&_				!parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,nullable,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,nullable,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1495868221;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or null.;@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1496259743;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or null.;@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1496837955;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or null.;@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1506468851;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null};@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1506562129;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null};@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1508532146;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null};@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1510251306;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null};@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1510821383;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null};@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1510825976;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null} if none defined;@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null,if,none,defined;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1510940038;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null} if none defined;@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null,if,none,defined;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1551080576;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null} if none defined;@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null,if,none,defined;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> @Nullable 	public static Object getContentNegotiationManager(ParserContext context);1551113869;Find the {@code ContentNegotiationManager} bean created by or registered_with the {@code annotation-driven} element._@return a bean definition, bean reference, or {@code null} if none defined;@Nullable_	public static Object getContentNegotiationManager(ParserContext context) {_		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name)__			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager")__		}_		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME__		if (context.getRegistry().containsBeanDefinition(name)) {_			return new RuntimeBeanReference(name)__		}_		return null__	};find,the,code,content,negotiation,manager,bean,created,by,or,registered,with,the,code,annotation,driven,element,return,a,bean,definition,bean,reference,or,code,null,if,none,defined;nullable,public,static,object,get,content,negotiation,manager,parser,context,context,string,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,bean,definition,handler,mapping,bean,def,context,get,registry,get,bean,definition,name,return,handler,mapping,bean,def,get,property,values,get,content,negotiation,manager,name,annotation,driven,bean,definition,parser,if,context,get,registry,contains,bean,definition,name,return,new,runtime,bean,reference,name,return,null
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source);1402499224;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {_		if(pathMatcherRef != null) {_			if(parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source);1405306409;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {_		if(pathMatcherRef != null) {_			if(parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source);1405696918;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {_		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source);1433265252;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {_		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source);1436473186;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {_		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source);1457125561;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {_		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source);1495868221;Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link PathMatcher} instance;public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {_		if (pathMatcherRef != null) {_			if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {_			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class)__			pathMatcherDef.setSource(source)__			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef)__			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME))__		}_		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,path,matcher,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,path,matcher,instance;public,static,runtime,bean,reference,register,path,matcher,runtime,bean,reference,path,matcher,ref,parser,context,parser,context,object,source,if,path,matcher,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,path,matcher,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,path,matcher,def,new,root,bean,definition,ant,path,matcher,class,path,matcher,def,set,source,source,path,matcher,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,path,matcher,def,parser,context,register,component,new,bean,component,definition,path,matcher,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source);1508532146;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition mappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			mappingDef.setSource(source)__			mappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			mappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsRef = MvcNamespaceUtils.registerCorsConfigurations(null, context, source)__			mappingDef.getPropertyValues().add("corsConfigurations", corsRef)__			context.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, mappingDef)__			context.registerComponent(new BeanComponentDefinition(mappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,mapping,def,set,source,source,mapping,def,set,role,bean,definition,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,ref,mvc,namespace,utils,register,cors,configurations,null,context,source,mapping,def,get,property,values,add,cors,configurations,cors,ref,context,get,registry,register,bean,definition,mapping,def,context,register,component,new,bean,component,definition,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source);1510251306;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition mappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			mappingDef.setSource(source)__			mappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			mappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsRef = MvcNamespaceUtils.registerCorsConfigurations(null, context, source)__			mappingDef.getPropertyValues().add("corsConfigurations", corsRef)__			context.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, mappingDef)__			context.registerComponent(new BeanComponentDefinition(mappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,mapping,def,set,source,source,mapping,def,set,role,bean,definition,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,ref,mvc,namespace,utils,register,cors,configurations,null,context,source,mapping,def,get,property,values,add,cors,configurations,cors,ref,context,get,registry,register,bean,definition,mapping,def,context,register,component,new,bean,component,definition,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source);1510821383;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition mappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			mappingDef.setSource(source)__			mappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			mappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsRef = MvcNamespaceUtils.registerCorsConfigurations(null, context, source)__			mappingDef.getPropertyValues().add("corsConfigurations", corsRef)__			context.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, mappingDef)__			context.registerComponent(new BeanComponentDefinition(mappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,mapping,def,set,source,source,mapping,def,set,role,bean,definition,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,ref,mvc,namespace,utils,register,cors,configurations,null,context,source,mapping,def,get,property,values,add,cors,configurations,cors,ref,context,get,registry,register,bean,definition,mapping,def,context,register,component,new,bean,component,definition,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source);1510825976;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition mappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			mappingDef.setSource(source)__			mappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			mappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsRef = MvcNamespaceUtils.registerCorsConfigurations(null, context, source)__			mappingDef.getPropertyValues().add("corsConfigurations", corsRef)__			context.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, mappingDef)__			context.registerComponent(new BeanComponentDefinition(mappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,mapping,def,set,source,source,mapping,def,set,role,bean,definition,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,ref,mvc,namespace,utils,register,cors,configurations,null,context,source,mapping,def,get,property,values,add,cors,configurations,cors,ref,context,get,registry,register,bean,definition,mapping,def,context,register,component,new,bean,component,definition,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source);1510940038;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition mappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			mappingDef.setSource(source)__			mappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			mappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsRef = MvcNamespaceUtils.registerCorsConfigurations(null, context, source)__			mappingDef.getPropertyValues().add("corsConfigurations", corsRef)__			context.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, mappingDef)__			context.registerComponent(new BeanComponentDefinition(mappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,mapping,def,set,source,source,mapping,def,set,role,bean,definition,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,ref,mvc,namespace,utils,register,cors,configurations,null,context,source,mapping,def,get,property,values,add,cors,configurations,cors,ref,context,get,registry,register,bean,definition,mapping,def,context,register,component,new,bean,component,definition,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source);1551080576;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)) {_			RootBeanDefinition mappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			mappingDef.setSource(source)__			mappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			mappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsRef = MvcNamespaceUtils.registerCorsConfigurations(null, context, source)__			mappingDef.getPropertyValues().add("corsConfigurations", corsRef)__			context.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, mappingDef)__			context.registerComponent(new BeanComponentDefinition(mappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,mapping,def,set,source,source,mapping,def,set,role,bean,definition,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,ref,mvc,namespace,utils,register,cors,configurations,null,context,source,mapping,def,get,property,values,add,cors,configurations,cors,ref,context,get,registry,register,bean,definition,mapping,def,context,register,component,new,bean,component,definition,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source);1551113869;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)) {_			RootBeanDefinition mappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			mappingDef.setSource(source)__			mappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			mappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsRef = MvcNamespaceUtils.registerCorsConfigurations(null, context, source)__			mappingDef.getPropertyValues().add("corsConfigurations", corsRef)__			context.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, mappingDef)__			context.registerComponent(new BeanComponentDefinition(mappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,mapping,def,set,source,source,mapping,def,set,role,bean,definition,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,ref,mvc,namespace,utils,register,cors,configurations,null,context,source,mapping,def,get,property,values,add,cors,configurations,cors,ref,context,get,registry,register,bean,definition,mapping,def,context,register,component,new,bean,component,definition,mapping,def
MvcNamespaceUtils -> public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader, 			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets);1510251306;Load the {@link Resource}'s for the given locations with the given_{@link ResourceLoader} and add them to the output list. Also for_{@link org.springframework.core.io.UrlResource URL-based resources} (e.g._files, HTTP URLs, etc) this method supports a special prefix to indicate_the charset associated with the URL so that relative paths appended to it_can be encoded correctly, e.g._{@code [charset=Windows-31J]http://example.org/path}. The charsets, if_any, are added to the output map._@since 4.3.13;public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader,_			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets) {__		for (String location : locations) {_			Charset charset = null__			location = location.trim()__			if (location.startsWith(URL_RESOURCE_CHARSET_PREFIX)) {_				int endIndex = location.indexOf("]", URL_RESOURCE_CHARSET_PREFIX.length())__				Assert.isTrue(endIndex != -1, "Invalid charset syntax in location: " + location)__				String value = location.substring(URL_RESOURCE_CHARSET_PREFIX.length(), endIndex)__				charset = Charset.forName(value)__				location = location.substring(endIndex + 1)__			}_			Resource resource = resourceLoader.getResource(location)__			outputLocations.add(resource)__			if (charset != null) {_				Assert.isInstanceOf(UrlResource.class, resource, "Unexpected charset for: " + resource)__				outputLocationCharsets.put(resource, charset)__			}_		}_	};load,the,link,resource,s,for,the,given,locations,with,the,given,link,resource,loader,and,add,them,to,the,output,list,also,for,link,org,springframework,core,io,url,resource,url,based,resources,e,g,files,http,urls,etc,this,method,supports,a,special,prefix,to,indicate,the,charset,associated,with,the,url,so,that,relative,paths,appended,to,it,can,be,encoded,correctly,e,g,code,charset,windows,31j,http,example,org,path,the,charsets,if,any,are,added,to,the,output,map,since,4,3,13;public,static,void,load,resource,locations,string,locations,resource,loader,resource,loader,list,resource,output,locations,map,resource,charset,output,location,charsets,for,string,location,locations,charset,charset,null,location,location,trim,if,location,starts,with,int,end,index,location,index,of,length,assert,is,true,end,index,1,invalid,charset,syntax,in,location,location,string,value,location,substring,length,end,index,charset,charset,for,name,value,location,location,substring,end,index,1,resource,resource,resource,loader,get,resource,location,output,locations,add,resource,if,charset,null,assert,is,instance,of,url,resource,class,resource,unexpected,charset,for,resource,output,location,charsets,put,resource,charset
MvcNamespaceUtils -> public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader, 			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets);1510821383;Load the {@link Resource}'s for the given locations with the given_{@link ResourceLoader} and add them to the output list. Also for_{@link org.springframework.core.io.UrlResource URL-based resources} (e.g._files, HTTP URLs, etc) this method supports a special prefix to indicate_the charset associated with the URL so that relative paths appended to it_can be encoded correctly, e.g._{@code [charset=Windows-31J]http://example.org/path}. The charsets, if_any, are added to the output map._@since 4.3.13;public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader,_			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets) {__		for (String location : locations) {_			Charset charset = null__			location = location.trim()__			if (location.startsWith(URL_RESOURCE_CHARSET_PREFIX)) {_				int endIndex = location.indexOf("]", URL_RESOURCE_CHARSET_PREFIX.length())__				if (endIndex == -1) {_					throw new IllegalArgumentException("Invalid charset syntax in location: " + location)__				}_				String value = location.substring(URL_RESOURCE_CHARSET_PREFIX.length(), endIndex)__				charset = Charset.forName(value)__				location = location.substring(endIndex + 1)__			}_			Resource resource = resourceLoader.getResource(location)__			outputLocations.add(resource)__			if (charset != null) {_				if (!(resource instanceof UrlResource)) {_					throw new IllegalArgumentException("Unexpected charset for non-UrlResource: " + resource)__				}_				outputLocationCharsets.put(resource, charset)__			}_		}_	};load,the,link,resource,s,for,the,given,locations,with,the,given,link,resource,loader,and,add,them,to,the,output,list,also,for,link,org,springframework,core,io,url,resource,url,based,resources,e,g,files,http,urls,etc,this,method,supports,a,special,prefix,to,indicate,the,charset,associated,with,the,url,so,that,relative,paths,appended,to,it,can,be,encoded,correctly,e,g,code,charset,windows,31j,http,example,org,path,the,charsets,if,any,are,added,to,the,output,map,since,4,3,13;public,static,void,load,resource,locations,string,locations,resource,loader,resource,loader,list,resource,output,locations,map,resource,charset,output,location,charsets,for,string,location,locations,charset,charset,null,location,location,trim,if,location,starts,with,int,end,index,location,index,of,length,if,end,index,1,throw,new,illegal,argument,exception,invalid,charset,syntax,in,location,location,string,value,location,substring,length,end,index,charset,charset,for,name,value,location,location,substring,end,index,1,resource,resource,resource,loader,get,resource,location,output,locations,add,resource,if,charset,null,if,resource,instanceof,url,resource,throw,new,illegal,argument,exception,unexpected,charset,for,non,url,resource,resource,output,location,charsets,put,resource,charset
MvcNamespaceUtils -> public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader, 			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets);1510825976;Load the {@link Resource}'s for the given locations with the given_{@link ResourceLoader} and add them to the output list. Also for_{@link org.springframework.core.io.UrlResource URL-based resources} (e.g. files,_HTTP URLs, etc) this method supports a special prefix to indicate the charset_associated with the URL so that relative paths appended to it can be encoded_correctly, e.g. {@code [charset=Windows-31J]http://example.org/path}._The charsets, if any, are added to the output map._@since 4.3.13;public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader,_			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets) {__		for (String location : locations) {_			Charset charset = null__			location = location.trim()__			if (location.startsWith(URL_RESOURCE_CHARSET_PREFIX)) {_				int endIndex = location.indexOf("]", URL_RESOURCE_CHARSET_PREFIX.length())__				if (endIndex == -1) {_					throw new IllegalArgumentException("Invalid charset syntax in location: " + location)__				}_				String value = location.substring(URL_RESOURCE_CHARSET_PREFIX.length(), endIndex)__				charset = Charset.forName(value)__				location = location.substring(endIndex + 1)__			}_			Resource resource = resourceLoader.getResource(location)__			outputLocations.add(resource)__			if (charset != null) {_				if (!(resource instanceof UrlResource)) {_					throw new IllegalArgumentException("Unexpected charset for non-UrlResource: " + resource)__				}_				outputLocationCharsets.put(resource, charset)__			}_		}_	};load,the,link,resource,s,for,the,given,locations,with,the,given,link,resource,loader,and,add,them,to,the,output,list,also,for,link,org,springframework,core,io,url,resource,url,based,resources,e,g,files,http,urls,etc,this,method,supports,a,special,prefix,to,indicate,the,charset,associated,with,the,url,so,that,relative,paths,appended,to,it,can,be,encoded,correctly,e,g,code,charset,windows,31j,http,example,org,path,the,charsets,if,any,are,added,to,the,output,map,since,4,3,13;public,static,void,load,resource,locations,string,locations,resource,loader,resource,loader,list,resource,output,locations,map,resource,charset,output,location,charsets,for,string,location,locations,charset,charset,null,location,location,trim,if,location,starts,with,int,end,index,location,index,of,length,if,end,index,1,throw,new,illegal,argument,exception,invalid,charset,syntax,in,location,location,string,value,location,substring,length,end,index,charset,charset,for,name,value,location,location,substring,end,index,1,resource,resource,resource,loader,get,resource,location,output,locations,add,resource,if,charset,null,if,resource,instanceof,url,resource,throw,new,illegal,argument,exception,unexpected,charset,for,non,url,resource,resource,output,location,charsets,put,resource,charset
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext context, @Nullable Object source);1508532146;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext context, @Nullable Object source) {__		if (!context.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsDef.setSource(source)__			corsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			context.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsDef)__			context.registerComponent(new BeanComponentDefinition(corsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsDef = context.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,cors,def,new,root,bean,definition,linked,hash,map,class,cors,def,set,source,source,cors,def,set,role,bean,definition,if,cors,configurations,null,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,context,get,reader,context,get,registry,register,bean,definition,cors,def,context,register,component,new,bean,component,definition,cors,def,else,if,cors,configurations,null,bean,definition,cors,def,context,get,registry,get,bean,definition,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext context, @Nullable Object source);1510251306;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext context, @Nullable Object source) {__		if (!context.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsDef.setSource(source)__			corsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			context.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsDef)__			context.registerComponent(new BeanComponentDefinition(corsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsDef = context.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,cors,def,new,root,bean,definition,linked,hash,map,class,cors,def,set,source,source,cors,def,set,role,bean,definition,if,cors,configurations,null,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,context,get,reader,context,get,registry,register,bean,definition,cors,def,context,register,component,new,bean,component,definition,cors,def,else,if,cors,configurations,null,bean,definition,cors,def,context,get,registry,get,bean,definition,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext context, @Nullable Object source);1510821383;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext context, @Nullable Object source) {__		if (!context.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsDef.setSource(source)__			corsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			context.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsDef)__			context.registerComponent(new BeanComponentDefinition(corsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsDef = context.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,cors,def,new,root,bean,definition,linked,hash,map,class,cors,def,set,source,source,cors,def,set,role,bean,definition,if,cors,configurations,null,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,context,get,reader,context,get,registry,register,bean,definition,cors,def,context,register,component,new,bean,component,definition,cors,def,else,if,cors,configurations,null,bean,definition,cors,def,context,get,registry,get,bean,definition,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext context, @Nullable Object source);1510825976;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext context, @Nullable Object source) {__		if (!context.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsDef.setSource(source)__			corsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			context.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsDef)__			context.registerComponent(new BeanComponentDefinition(corsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsDef = context.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,cors,def,new,root,bean,definition,linked,hash,map,class,cors,def,set,source,source,cors,def,set,role,bean,definition,if,cors,configurations,null,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,context,get,reader,context,get,registry,register,bean,definition,cors,def,context,register,component,new,bean,component,definition,cors,def,else,if,cors,configurations,null,bean,definition,cors,def,context,get,registry,get,bean,definition,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext context, @Nullable Object source);1510940038;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext context, @Nullable Object source) {__		if (!context.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsDef.setSource(source)__			corsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			context.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsDef)__			context.registerComponent(new BeanComponentDefinition(corsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsDef = context.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,cors,def,new,root,bean,definition,linked,hash,map,class,cors,def,set,source,source,cors,def,set,role,bean,definition,if,cors,configurations,null,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,context,get,reader,context,get,registry,register,bean,definition,cors,def,context,register,component,new,bean,component,definition,cors,def,else,if,cors,configurations,null,bean,definition,cors,def,context,get,registry,get,bean,definition,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext context, @Nullable Object source);1551080576;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext context, @Nullable Object source) {__		if (!context.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsDef.setSource(source)__			corsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			context.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsDef)__			context.registerComponent(new BeanComponentDefinition(corsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsDef = context.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,cors,def,new,root,bean,definition,linked,hash,map,class,cors,def,set,source,source,cors,def,set,role,bean,definition,if,cors,configurations,null,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,context,get,reader,context,get,registry,register,bean,definition,cors,def,context,register,component,new,bean,component,definition,cors,def,else,if,cors,configurations,null,bean,definition,cors,def,context,get,registry,get,bean,definition,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext context, @Nullable Object source);1551113869;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext context, @Nullable Object source) {__		if (!context.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsDef.setSource(source)__			corsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			context.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsDef)__			context.registerComponent(new BeanComponentDefinition(corsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsDef = context.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,cors,def,new,root,bean,definition,linked,hash,map,class,cors,def,set,source,source,cors,def,set,role,bean,definition,if,cors,configurations,null,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,context,get,reader,context,get,registry,register,bean,definition,cors,def,context,register,component,new,bean,component,definition,cors,def,else,if,cors,configurations,null,bean,definition,cors,def,context,get,registry,get,bean,definition,cors,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1496837955;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1506468851;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1506562129;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1508532146;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1510251306;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1510821383;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1510825976;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1510940038;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1551080576;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper( 			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source);1551113869;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(_			@Nullable RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, @Nullable Object source) {__		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME) &&_				!parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,nullable,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,nullable,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source);1508532146;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition adapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			adapterDef.setSource(source)__			adapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, adapterDef)__			context.registerComponent(new BeanComponentDefinition(adapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,adapter,def,set,source,source,adapter,def,set,role,bean,definition,context,get,registry,register,bean,definition,adapter,def,context,register,component,new,bean,component,definition,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source);1510251306;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition adapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			adapterDef.setSource(source)__			adapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, adapterDef)__			context.registerComponent(new BeanComponentDefinition(adapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,adapter,def,set,source,source,adapter,def,set,role,bean,definition,context,get,registry,register,bean,definition,adapter,def,context,register,component,new,bean,component,definition,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source);1510821383;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition adapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			adapterDef.setSource(source)__			adapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, adapterDef)__			context.registerComponent(new BeanComponentDefinition(adapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,adapter,def,set,source,source,adapter,def,set,role,bean,definition,context,get,registry,register,bean,definition,adapter,def,context,register,component,new,bean,component,definition,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source);1510825976;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition adapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			adapterDef.setSource(source)__			adapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, adapterDef)__			context.registerComponent(new BeanComponentDefinition(adapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,adapter,def,set,source,source,adapter,def,set,role,bean,definition,context,get,registry,register,bean,definition,adapter,def,context,register,component,new,bean,component,definition,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source);1510940038;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition adapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			adapterDef.setSource(source)__			adapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, adapterDef)__			context.registerComponent(new BeanComponentDefinition(adapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,adapter,def,set,source,source,adapter,def,set,role,bean,definition,context,get,registry,register,bean,definition,adapter,def,context,register,component,new,bean,component,definition,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source);1551080576;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition adapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			adapterDef.setSource(source)__			adapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, adapterDef)__			context.registerComponent(new BeanComponentDefinition(adapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,adapter,def,set,source,source,adapter,def,set,role,bean,definition,context,get,registry,register,bean,definition,adapter,def,context,register,component,new,bean,component,definition,adapter,def
MvcNamespaceUtils -> private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source);1551113869;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerHttpRequestHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition adapterDef = new RootBeanDefinition(HttpRequestHandlerAdapter.class)__			adapterDef.setSource(source)__			adapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, adapterDef)__			context.registerComponent(new BeanComponentDefinition(adapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,http,request,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,adapter,def,new,root,bean,definition,http,request,handler,adapter,class,adapter,def,set,source,source,adapter,def,set,role,bean,definition,context,get,registry,register,bean,definition,adapter,def,context,register,component,new,bean,component,definition,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1328020251;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1356735495;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1402499224;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1405306409;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1405696918;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1433265252;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1436473186;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1457125561;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1495868221;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source);1496259743;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source);1402499224;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {_		if(urlPathHelperRef != null) {_			if(parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source);1405306409;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {_		if(urlPathHelperRef != null) {_			if(parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source);1405696918;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {_		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source);1433265252;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {_		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source);1436473186;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {_		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source);1457125561;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {_		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source);1495868221;Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}_under that well-known name, unless already registered._@return a RuntimeBeanReference to this {@link UrlPathHelper} instance;public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {_		if (urlPathHelperRef != null) {_			if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {_				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME)__			}_			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME)__		}_		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)_				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {_			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class)__			urlPathHelperDef.setSource(source)__			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef)__			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME))__		}_		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME)__	};adds,an,alias,to,an,existing,well,known,name,or,registers,a,new,instance,of,a,link,url,path,helper,under,that,well,known,name,unless,already,registered,return,a,runtime,bean,reference,to,this,link,url,path,helper,instance;public,static,runtime,bean,reference,register,url,path,helper,runtime,bean,reference,url,path,helper,ref,parser,context,parser,context,object,source,if,url,path,helper,ref,null,if,parser,context,get,registry,is,alias,parser,context,get,registry,remove,alias,parser,context,get,registry,register,alias,url,path,helper,ref,get,bean,name,else,if,parser,context,get,registry,is,alias,parser,context,get,registry,contains,bean,definition,root,bean,definition,url,path,helper,def,new,root,bean,definition,url,path,helper,class,url,path,helper,def,set,source,source,url,path,helper,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,url,path,helper,def,parser,context,register,component,new,bean,component,definition,url,path,helper,def,return,new,runtime,bean,reference
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, @Nullable Object source);1496837955;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, @Nullable Object source);1506468851;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, @Nullable Object source);1506562129;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			handlerAdapterDef.setSource(source)__			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef)__			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,handler,adapter,def,new,root,bean,definition,simple,controller,handler,adapter,class,handler,adapter,def,set,source,source,handler,adapter,def,set,role,bean,definition,parser,context,get,registry,register,bean,definition,handler,adapter,def,parser,context,register,component,new,bean,component,definition,handler,adapter,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext cxt, @Nullable Object source);1508532146;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext cxt, @Nullable Object source) {_		if (!cxt.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			cxt.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, beanDef)__			cxt.registerComponent(new BeanComponentDefinition(beanDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,cxt,nullable,object,source,if,cxt,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,simple,controller,handler,adapter,class,bean,def,set,source,source,bean,def,set,role,bean,definition,cxt,get,registry,register,bean,definition,bean,def,cxt,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext cxt, @Nullable Object source);1510251306;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext cxt, @Nullable Object source) {_		if (!cxt.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			cxt.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, beanDef)__			cxt.registerComponent(new BeanComponentDefinition(beanDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,cxt,nullable,object,source,if,cxt,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,simple,controller,handler,adapter,class,bean,def,set,source,source,bean,def,set,role,bean,definition,cxt,get,registry,register,bean,definition,bean,def,cxt,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext cxt, @Nullable Object source);1510821383;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext cxt, @Nullable Object source) {_		if (!cxt.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			cxt.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, beanDef)__			cxt.registerComponent(new BeanComponentDefinition(beanDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,cxt,nullable,object,source,if,cxt,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,simple,controller,handler,adapter,class,bean,def,set,source,source,bean,def,set,role,bean,definition,cxt,get,registry,register,bean,definition,bean,def,cxt,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source);1510825976;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, beanDef)__			context.registerComponent(new BeanComponentDefinition(beanDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,simple,controller,handler,adapter,class,bean,def,set,source,source,bean,def,set,role,bean,definition,context,get,registry,register,bean,definition,bean,def,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source);1510940038;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, beanDef)__			context.registerComponent(new BeanComponentDefinition(beanDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,simple,controller,handler,adapter,class,bean,def,set,source,source,bean,def,set,role,bean,definition,context,get,registry,register,bean,definition,bean,def,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source);1551080576;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, beanDef)__			context.registerComponent(new BeanComponentDefinition(beanDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,simple,controller,handler,adapter,class,bean,def,set,source,source,bean,def,set,role,bean,definition,context,get,registry,register,bean,definition,bean,def,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source);1551113869;Registers a {@link SimpleControllerHandlerAdapter} under a well-known_name unless already registered.;private static void registerSimpleControllerHandlerAdapter(ParserContext context, @Nullable Object source) {_		if (!context.getRegistry().containsBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME)) {_			RootBeanDefinition beanDef = new RootBeanDefinition(SimpleControllerHandlerAdapter.class)__			beanDef.setSource(source)__			beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			context.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, beanDef)__			context.registerComponent(new BeanComponentDefinition(beanDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME))__		}_	};registers,a,link,simple,controller,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,simple,controller,handler,adapter,parser,context,context,nullable,object,source,if,context,get,registry,contains,bean,definition,root,bean,definition,bean,def,new,root,bean,definition,simple,controller,handler,adapter,class,bean,def,set,source,source,bean,def,set,role,bean,definition,context,get,registry,register,bean,definition,bean,def,context,register,component,new,bean,component,definition,bean,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, @Nullable Object source);1496837955;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationsRef = MvcNamespaceUtils.registerCorsConfigurations(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfigurations", corsConfigurationsRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configurations,ref,mvc,namespace,utils,register,cors,configurations,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configurations,cors,configurations,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, @Nullable Object source);1506468851;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationsRef = MvcNamespaceUtils.registerCorsConfigurations(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfigurations", corsConfigurationsRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configurations,ref,mvc,namespace,utils,register,cors,configurations,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configurations,cors,configurations,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, @Nullable Object source);1506562129;Registers  an {@link HttpRequestHandlerAdapter} under a well-known_name unless already registered.;private static void registerBeanNameUrlHandlerMapping(ParserContext parserContext, @Nullable Object source) {_		if (!parserContext.getRegistry().containsBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME)){_			RootBeanDefinition beanNameMappingDef = new RootBeanDefinition(BeanNameUrlHandlerMapping.class)__			beanNameMappingDef.setSource(source)__			beanNameMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			beanNameMappingDef.getPropertyValues().add("order", 2)_	_			RuntimeBeanReference corsConfigurationsRef = MvcNamespaceUtils.registerCorsConfigurations(null, parserContext, source)__			beanNameMappingDef.getPropertyValues().add("corsConfigurations", corsConfigurationsRef)__			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef)__			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME))__		}_	};registers,an,link,http,request,handler,adapter,under,a,well,known,name,unless,already,registered;private,static,void,register,bean,name,url,handler,mapping,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,bean,name,mapping,def,new,root,bean,definition,bean,name,url,handler,mapping,class,bean,name,mapping,def,set,source,source,bean,name,mapping,def,set,role,bean,definition,bean,name,mapping,def,get,property,values,add,order,2,runtime,bean,reference,cors,configurations,ref,mvc,namespace,utils,register,cors,configurations,null,parser,context,source,bean,name,mapping,def,get,property,values,add,cors,configurations,cors,configurations,ref,parser,context,get,registry,register,bean,definition,bean,name,mapping,def,parser,context,register,component,new,bean,component,definition,bean,name,mapping,def
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext parserContext, @Nullable Object source);1496837955;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext parserContext, @Nullable Object source) {__		if (!parserContext.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsConfigurationsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsConfigurationsDef.setSource(source)__			corsConfigurationsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			parserContext.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsConfigurationsDef)__			parserContext.registerComponent(new BeanComponentDefinition(corsConfigurationsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsConfigurationsDef = parserContext.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,cors,configurations,def,new,root,bean,definition,linked,hash,map,class,cors,configurations,def,set,source,source,cors,configurations,def,set,role,bean,definition,if,cors,configurations,null,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,parser,context,get,reader,context,get,registry,register,bean,definition,cors,configurations,def,parser,context,register,component,new,bean,component,definition,cors,configurations,def,else,if,cors,configurations,null,bean,definition,cors,configurations,def,parser,context,get,registry,get,bean,definition,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext parserContext, @Nullable Object source);1506468851;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext parserContext, @Nullable Object source) {__		if (!parserContext.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsConfigurationsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsConfigurationsDef.setSource(source)__			corsConfigurationsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			parserContext.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsConfigurationsDef)__			parserContext.registerComponent(new BeanComponentDefinition(corsConfigurationsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsConfigurationsDef = parserContext.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,cors,configurations,def,new,root,bean,definition,linked,hash,map,class,cors,configurations,def,set,source,source,cors,configurations,def,set,role,bean,definition,if,cors,configurations,null,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,parser,context,get,reader,context,get,registry,register,bean,definition,cors,configurations,def,parser,context,register,component,new,bean,component,definition,cors,configurations,def,else,if,cors,configurations,null,bean,definition,cors,configurations,def,parser,context,get,registry,get,bean,definition,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
MvcNamespaceUtils -> public static RuntimeBeanReference registerCorsConfigurations( 			@Nullable Map<String, CorsConfiguration> corsConfigurations, 			ParserContext parserContext, @Nullable Object source);1506562129;Registers a {@code Map<String, CorsConfiguration>} (mapped {@code CorsConfiguration}s)_under a well-known name unless already registered. The bean definition may be updated_if a non-null CORS configuration is provided._@return a RuntimeBeanReference to this {@code Map<String, CorsConfiguration>} instance;public static RuntimeBeanReference registerCorsConfigurations(_			@Nullable Map<String, CorsConfiguration> corsConfigurations,_			ParserContext parserContext, @Nullable Object source) {__		if (!parserContext.getRegistry().containsBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)) {_			RootBeanDefinition corsConfigurationsDef = new RootBeanDefinition(LinkedHashMap.class)__			corsConfigurationsDef.setSource(source)__			corsConfigurationsDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			if (corsConfigurations != null) {_				corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__			}_			parserContext.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsConfigurationsDef)__			parserContext.registerComponent(new BeanComponentDefinition(corsConfigurationsDef, CORS_CONFIGURATION_BEAN_NAME))__		}_		else if (corsConfigurations != null) {_			BeanDefinition corsConfigurationsDef = parserContext.getRegistry().getBeanDefinition(CORS_CONFIGURATION_BEAN_NAME)__			corsConfigurationsDef.getConstructorArgumentValues().addIndexedArgumentValue(0, corsConfigurations)__		}_		return new RuntimeBeanReference(CORS_CONFIGURATION_BEAN_NAME)__	};registers,a,code,map,string,cors,configuration,mapped,code,cors,configuration,s,under,a,well,known,name,unless,already,registered,the,bean,definition,may,be,updated,if,a,non,null,cors,configuration,is,provided,return,a,runtime,bean,reference,to,this,code,map,string,cors,configuration,instance;public,static,runtime,bean,reference,register,cors,configurations,nullable,map,string,cors,configuration,cors,configurations,parser,context,parser,context,nullable,object,source,if,parser,context,get,registry,contains,bean,definition,root,bean,definition,cors,configurations,def,new,root,bean,definition,linked,hash,map,class,cors,configurations,def,set,source,source,cors,configurations,def,set,role,bean,definition,if,cors,configurations,null,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,parser,context,get,reader,context,get,registry,register,bean,definition,cors,configurations,def,parser,context,register,component,new,bean,component,definition,cors,configurations,def,else,if,cors,configurations,null,bean,definition,cors,configurations,def,parser,context,get,registry,get,bean,definition,cors,configurations,def,get,constructor,argument,values,add,indexed,argument,value,0,cors,configurations,return,new,runtime,bean,reference
