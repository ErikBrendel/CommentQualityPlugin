# id;timestamp;commentText;codeText;commentWords;codeWords
ContentNegotiatingViewResolver -> protected MediaType getMediaTypeFromFilename(String filename);1328020251;Determines the {@link MediaType} for the given filename._<p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}_property first for a defined mapping. If not present, and if the Java Activation Framework_can be found on the classpath, it will call {@link FileTypeMap#getContentType(String)}_<p>This method can be overridden to provide a different algorithm._@param filename the current request file name (i.e. {@code hotels.html})_@return the media type, if any;protected MediaType getMediaTypeFromFilename(String filename) {_		String extension = StringUtils.getFilenameExtension(filename)__		if (!StringUtils.hasText(extension)) {_			return null__		}_		extension = extension.toLowerCase(Locale.ENGLISH)__		MediaType mediaType = this.mediaTypes.get(extension)__		if (mediaType == null) {_			String mimeType = getServletContext().getMimeType(filename)__			if (StringUtils.hasText(mimeType)) {_				mediaType = MediaType.parseMediaType(mimeType)__			}_			if (this.useJaf && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_				MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(filename)__				if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_					mediaType = jafMediaType__				}_			}_			if (mediaType != null) {_				this.mediaTypes.putIfAbsent(extension, mediaType)__			}_		}_		return mediaType__	};determines,the,link,media,type,for,the,given,filename,p,the,default,implementation,will,check,the,linkplain,set,media,types,map,media,types,property,first,for,a,defined,mapping,if,not,present,and,if,the,java,activation,framework,can,be,found,on,the,classpath,it,will,call,link,file,type,map,get,content,type,string,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,filename,the,current,request,file,name,i,e,code,hotels,html,return,the,media,type,if,any;protected,media,type,get,media,type,from,filename,string,filename,string,extension,string,utils,get,filename,extension,filename,if,string,utils,has,text,extension,return,null,extension,extension,to,lower,case,locale,english,media,type,media,type,this,media,types,get,extension,if,media,type,null,string,mime,type,get,servlet,context,get,mime,type,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,this,use,jaf,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,if,media,type,null,this,media,types,put,if,absent,extension,media,type,return,media,type
ContentNegotiatingViewResolver -> protected MediaType getMediaTypeFromFilename(String filename);1336676401;Determines the {@link MediaType} for the given filename._<p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}_property first for a defined mapping. If not present, and if the Java Activation Framework_can be found on the classpath, it will call {@link FileTypeMap#getContentType(String)}_<p>This method can be overridden to provide a different algorithm._@param filename the current request file name (i.e. {@code hotels.html})_@return the media type, if any;protected MediaType getMediaTypeFromFilename(String filename) {_		String extension = StringUtils.getFilenameExtension(filename)__		if (!StringUtils.hasText(extension)) {_			return null__		}_		extension = extension.toLowerCase(Locale.ENGLISH)__		MediaType mediaType = this.mediaTypes.get(extension)__		if (mediaType == null) {_			String mimeType = getServletContext().getMimeType(filename)__			if (StringUtils.hasText(mimeType)) {_				mediaType = MediaType.parseMediaType(mimeType)__			}_			if (this.useJaf && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_				MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(filename)__				if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_					mediaType = jafMediaType__				}_			}_			if (mediaType != null) {_				this.mediaTypes.putIfAbsent(extension, mediaType)__			}_		}_		return mediaType__	};determines,the,link,media,type,for,the,given,filename,p,the,default,implementation,will,check,the,linkplain,set,media,types,map,media,types,property,first,for,a,defined,mapping,if,not,present,and,if,the,java,activation,framework,can,be,found,on,the,classpath,it,will,call,link,file,type,map,get,content,type,string,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,filename,the,current,request,file,name,i,e,code,hotels,html,return,the,media,type,if,any;protected,media,type,get,media,type,from,filename,string,filename,string,extension,string,utils,get,filename,extension,filename,if,string,utils,has,text,extension,return,null,extension,extension,to,lower,case,locale,english,media,type,media,type,this,media,types,get,extension,if,media,type,null,string,mime,type,get,servlet,context,get,mime,type,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,this,use,jaf,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,if,media,type,null,this,media,types,put,if,absent,extension,media,type,return,media,type
ContentNegotiatingViewResolver -> protected MediaType getMediaTypeFromFilename(String filename);1336761838;Determines the {@link MediaType} for the given filename._<p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}_property first for a defined mapping. If not present, and if the Java Activation Framework_can be found on the classpath, it will call {@link FileTypeMap#getContentType(String)}_<p>This method can be overridden to provide a different algorithm._@param filename the current request file name (i.e. {@code hotels.html})_@return the media type, if any;protected MediaType getMediaTypeFromFilename(String filename) {_		String extension = StringUtils.getFilenameExtension(filename)__		if (!StringUtils.hasText(extension)) {_			return null__		}_		extension = extension.toLowerCase(Locale.ENGLISH)__		MediaType mediaType = this.mediaTypes.get(extension)__		if (mediaType == null) {_			String mimeType = getServletContext().getMimeType(filename)__			if (StringUtils.hasText(mimeType)) {_				mediaType = MediaType.parseMediaType(mimeType)__			}_			if (this.useJaf && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_				MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(filename)__				if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_					mediaType = jafMediaType__				}_			}_			if (mediaType != null) {_				this.mediaTypes.putIfAbsent(extension, mediaType)__			}_		}_		return mediaType__	};determines,the,link,media,type,for,the,given,filename,p,the,default,implementation,will,check,the,linkplain,set,media,types,map,media,types,property,first,for,a,defined,mapping,if,not,present,and,if,the,java,activation,framework,can,be,found,on,the,classpath,it,will,call,link,file,type,map,get,content,type,string,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,filename,the,current,request,file,name,i,e,code,hotels,html,return,the,media,type,if,any;protected,media,type,get,media,type,from,filename,string,filename,string,extension,string,utils,get,filename,extension,filename,if,string,utils,has,text,extension,return,null,extension,extension,to,lower,case,locale,english,media,type,media,type,this,media,types,get,extension,if,media,type,null,string,mime,type,get,servlet,context,get,mime,type,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,this,use,jaf,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,if,media,type,null,this,media,types,put,if,absent,extension,media,type,return,media,type
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1328020251;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.;public void setMediaTypes(Map<String, String> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		for (Map.Entry<String, String> entry : mediaTypes.entrySet()) {_			String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__			MediaType mediaType = MediaType.parseMediaType(entry.getValue())__			this.mediaTypes.put(extension, mediaType)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available;public,void,set,media,types,map,string,string,media,types,assert,not,null,media,types,media,types,must,not,be,null,for,map,entry,string,string,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,parse,media,type,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1336676401;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.;public void setMediaTypes(Map<String, String> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		for (Map.Entry<String, String> entry : mediaTypes.entrySet()) {_			String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__			MediaType mediaType = MediaType.parseMediaType(entry.getValue())__			this.mediaTypes.put(extension, mediaType)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available;public,void,set,media,types,map,string,string,media,types,assert,not,null,media,types,media,types,must,not,be,null,for,map,entry,string,string,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,parse,media,type,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1336761838;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.;public void setMediaTypes(Map<String, String> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		for (Map.Entry<String, String> entry : mediaTypes.entrySet()) {_			String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__			MediaType mediaType = MediaType.parseMediaType(entry.getValue())__			this.mediaTypes.put(extension, mediaType)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available;public,void,set,media,types,map,string,string,media,types,assert,not,null,media,types,media,types,must,not,be,null,for,map,entry,string,string,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,parse,media,type,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1340380546;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setMediaTypes(Map<String, String> mediaTypes) {_		this.mediaTypes = mediaTypes__	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,media,types,map,string,string,media,types,this,media,types,media,types
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1340652245;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			for (Map.Entry<String, String> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.parseMediaType(entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,media,types,map,string,string,media,types,if,media,types,null,for,map,entry,string,string,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,parse,media,type,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1348666123;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			this.cnManagerFactoryBean.getMediaTypes().putAll(mediaTypes)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,media,types,map,string,string,media,types,if,media,types,null,this,cn,manager,factory,bean,get,media,types,put,all,media,types
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1350941037;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			this.cnManagerFactoryBean.getMediaTypes().putAll(mediaTypes)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,media,types,map,string,string,media,types,if,media,types,null,this,cn,manager,factory,bean,get,media,types,put,all,media,types
ContentNegotiatingViewResolver -> public void setMediaTypes(Map<String, String> mediaTypes);1355313310;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			this.cnManagerFactoryBean.getMediaTypes().putAll(mediaTypes)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,media,types,map,string,string,media,types,if,media,types,null,this,cn,manager,factory,bean,get,media,types,put,all,media,types
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1340380546;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1340652245;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1348666123;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1350941037;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1355313310;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1356735495;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1357119239;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1357248712;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1362408075;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1368482696;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1374198819;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1385423968;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1405306403;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1405306409;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1413848647;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1419966315;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1426267113;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1441791912;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1446156060;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1446471766;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1467730834;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1477045587;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1485810955;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1495868221;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1496242568;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1496837955;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1498780456;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1356735495;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1357119239;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1357248712;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1362408075;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1368482696;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1374198819;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1385423968;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1405306403;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1405306409;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setUseJaf(boolean useJaf);1413848647;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1328020251;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1336676401;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1336761838;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1340380546;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1340652245;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1348666123;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1350941037;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1355313310;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1356735495;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1357119239;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1357248712;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1362408075;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1368482696;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1374198819;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1385423968;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1405306403;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1405306409;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1413848647;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1419966315;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1426267113;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1441791912;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1446156060;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1446471766;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1467730834;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1477045587;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1485810955;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1495868221;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1496242568;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1496837955;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1498780456;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1500448076;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1502974979;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1522184059;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1529361191;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode);1530174524;Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}_status code should be returned if no suitable view can be found._<p>Default is {@code false}, meaning that this view resolver returns {@code null} for_{@link #resolveViewName(String, Locale)} when an acceptable view cannot be found._This will allow for view resolvers chaining. When this property is set to {@code true},_{@link #resolveViewName(String, Locale)} will respond with a view that sets the_response status to {@code 406 Not Acceptable} instead.;public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {_		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode__	};indicate,whether,a,link,http,servlet,response,406,not,acceptable,status,code,should,be,returned,if,no,suitable,view,can,be,found,p,default,is,code,false,meaning,that,this,view,resolver,returns,code,null,for,link,resolve,view,name,string,locale,when,an,acceptable,view,cannot,be,found,this,will,allow,for,view,resolvers,chaining,when,this,property,is,set,to,code,true,link,resolve,view,name,string,locale,will,respond,with,a,view,that,sets,the,response,status,to,code,406,not,acceptable,instead;public,void,set,use,not,acceptable,status,code,boolean,use,not,acceptable,status,code,this,use,not,acceptable,status,code,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1500448076;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1502974979;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1522184059;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1529361191;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1530174524;Set the {@link ContentNegotiationManager} to use to determine requested media types._<p>If not set, ContentNegotiationManager's default constructor will be used,_applying a {@link org.springframework.web.accept.HeaderContentNegotiationStrategy}._@see ContentNegotiationManager#ContentNegotiationManager();public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,p,if,not,set,content,negotiation,manager,s,default,constructor,will,be,used,applying,a,link,org,springframework,web,accept,header,content,negotiation,strategy,see,content,negotiation,manager,content,negotiation,manager;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1328020251;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1336676401;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1336761838;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1340380546;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1340652245;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1348666123;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1350941037;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setDefaultContentType(MediaType defaultContentType);1355313310;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1328020251;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._<p>The default implementation invokes {@link #getMediaTypeFromFilename(String)} if {@linkplain_#setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is_<code>false</code>, or when a media type cannot be determined from the request path,_this method will inspect the {@code Accept} header of the request._<p>This method can be overridden to provide a different algorithm._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		if (this.favorPathExtension) {_			String requestUri = urlPathHelper.getLookupPathForRequest(request)__			String filename = WebUtils.extractFullFilenameFromUrlPath(requestUri)__			MediaType mediaType = getMediaTypeFromFilename(filename)__			if (mediaType != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Requested media type is '" + mediaType + "' (based on filename '" + filename + "')")__				}_				return Collections.singletonList(mediaType)__			}_		}_		if (this.favorParameter) {_			if (request.getParameter(this.parameterName) != null) {_				String parameterValue = request.getParameter(this.parameterName)__				MediaType mediaType = getMediaTypeFromParameter(parameterValue)__				if (mediaType != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Requested media type is '" + mediaType + "' (based on parameter '" +_								this.parameterName + "'='" + parameterValue + "')")__					}_					return Collections.singletonList(mediaType)__				}_			}_		}_		if (!this.ignoreAcceptHeader) {_			String acceptHeader = request.getHeader(ACCEPT_HEADER)__			if (StringUtils.hasText(acceptHeader)) {_				try {_					List<MediaType> acceptableMediaTypes = MediaType.parseMediaTypes(acceptHeader)__					List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__					Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__					for (MediaType acceptable : acceptableMediaTypes) {_						for (MediaType producible : producibleMediaTypes) {_							if (acceptable.isCompatibleWith(producible)) {_								compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__							}_						}_					}_					List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__					MediaType.sortByQualityValue(mediaTypes)__					if (logger.isDebugEnabled()) {_						logger.debug("Requested media types are " + mediaTypes + " based on Accept header types " +_								"and producible media types " + producibleMediaTypes + ")")__					}_					return mediaTypes__				}_				catch (IllegalArgumentException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not parse accept header [" + acceptHeader + "]: " + ex.getMessage())__					}_					return null__				}_			}_		}_		if (this.defaultContentType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types is " + this.defaultContentType +_						" (based on defaultContentType property)")__			}_			return Collections.singletonList(this.defaultContentType)__		}_		else {_			return Collections.emptyList()__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,p,the,default,implementation,invokes,link,get,media,type,from,filename,string,if,linkplain,set,favor,path,extension,favor,path,extension,property,is,code,true,code,if,the,property,is,code,false,code,or,when,a,media,type,cannot,be,determined,from,the,request,path,this,method,will,inspect,the,code,accept,header,of,the,request,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,if,this,favor,path,extension,string,request,uri,url,path,helper,get,lookup,path,for,request,request,string,filename,web,utils,extract,full,filename,from,url,path,request,uri,media,type,media,type,get,media,type,from,filename,filename,if,media,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,type,is,media,type,based,on,filename,filename,return,collections,singleton,list,media,type,if,this,favor,parameter,if,request,get,parameter,this,parameter,name,null,string,parameter,value,request,get,parameter,this,parameter,name,media,type,media,type,get,media,type,from,parameter,parameter,value,if,media,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,type,is,media,type,based,on,parameter,this,parameter,name,parameter,value,return,collections,singleton,list,media,type,if,this,ignore,accept,header,string,accept,header,request,get,header,if,string,utils,has,text,accept,header,try,list,media,type,acceptable,media,types,media,type,parse,media,types,accept,header,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,quality,value,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,media,types,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,parse,accept,header,accept,header,ex,get,message,return,null,if,this,default,content,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,types,is,this,default,content,type,based,on,default,content,type,property,return,collections,singleton,list,this,default,content,type,else,return,collections,empty,list
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1336676401;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._<p>The default implementation invokes {@link #getMediaTypeFromFilename(String)} if {@linkplain_#setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is_<code>false</code>, or when a media type cannot be determined from the request path,_this method will inspect the {@code Accept} header of the request._<p>This method can be overridden to provide a different algorithm._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		if (this.favorPathExtension) {_			String requestUri = urlPathHelper.getLookupPathForRequest(request)__			String filename = WebUtils.extractFullFilenameFromUrlPath(requestUri)__			MediaType mediaType = getMediaTypeFromFilename(filename)__			if (mediaType != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Requested media type is '" + mediaType + "' (based on filename '" + filename + "')")__				}_				return Collections.singletonList(mediaType)__			}_		}_		if (this.favorParameter) {_			if (request.getParameter(this.parameterName) != null) {_				String parameterValue = request.getParameter(this.parameterName)__				MediaType mediaType = getMediaTypeFromParameter(parameterValue)__				if (mediaType != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Requested media type is '" + mediaType + "' (based on parameter '" +_								this.parameterName + "'='" + parameterValue + "')")__					}_					return Collections.singletonList(mediaType)__				}_			}_		}_		if (!this.ignoreAcceptHeader) {_			String acceptHeader = request.getHeader(ACCEPT_HEADER)__			if (StringUtils.hasText(acceptHeader)) {_				try {_					List<MediaType> acceptableMediaTypes = MediaType.parseMediaTypes(acceptHeader)__					List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__					Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__					for (MediaType acceptable : acceptableMediaTypes) {_						for (MediaType producible : producibleMediaTypes) {_							if (acceptable.isCompatibleWith(producible)) {_								compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__							}_						}_					}_					List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__					MediaType.sortByQualityValue(mediaTypes)__					if (logger.isDebugEnabled()) {_						logger.debug("Requested media types are " + mediaTypes + " based on Accept header types " +_								"and producible media types " + producibleMediaTypes + ")")__					}_					return mediaTypes__				}_				catch (IllegalArgumentException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not parse accept header [" + acceptHeader + "]: " + ex.getMessage())__					}_					return null__				}_			}_		}_		if (this.defaultContentType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types is " + this.defaultContentType +_						" (based on defaultContentType property)")__			}_			return Collections.singletonList(this.defaultContentType)__		}_		else {_			return Collections.emptyList()__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,p,the,default,implementation,invokes,link,get,media,type,from,filename,string,if,linkplain,set,favor,path,extension,favor,path,extension,property,is,code,true,code,if,the,property,is,code,false,code,or,when,a,media,type,cannot,be,determined,from,the,request,path,this,method,will,inspect,the,code,accept,header,of,the,request,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,if,this,favor,path,extension,string,request,uri,url,path,helper,get,lookup,path,for,request,request,string,filename,web,utils,extract,full,filename,from,url,path,request,uri,media,type,media,type,get,media,type,from,filename,filename,if,media,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,type,is,media,type,based,on,filename,filename,return,collections,singleton,list,media,type,if,this,favor,parameter,if,request,get,parameter,this,parameter,name,null,string,parameter,value,request,get,parameter,this,parameter,name,media,type,media,type,get,media,type,from,parameter,parameter,value,if,media,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,type,is,media,type,based,on,parameter,this,parameter,name,parameter,value,return,collections,singleton,list,media,type,if,this,ignore,accept,header,string,accept,header,request,get,header,if,string,utils,has,text,accept,header,try,list,media,type,acceptable,media,types,media,type,parse,media,types,accept,header,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,quality,value,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,media,types,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,parse,accept,header,accept,header,ex,get,message,return,null,if,this,default,content,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,types,is,this,default,content,type,based,on,default,content,type,property,return,collections,singleton,list,this,default,content,type,else,return,collections,empty,list
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1336761838;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._<p>The default implementation invokes {@link #getMediaTypeFromFilename(String)} if {@linkplain_#setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is_<code>false</code>, or when a media type cannot be determined from the request path,_this method will inspect the {@code Accept} header of the request._<p>This method can be overridden to provide a different algorithm._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		if (this.favorPathExtension) {_			String requestUri = urlPathHelper.getLookupPathForRequest(request)__			String filename = WebUtils.extractFullFilenameFromUrlPath(requestUri)__			MediaType mediaType = getMediaTypeFromFilename(filename)__			if (mediaType != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Requested media type is '" + mediaType + "' (based on filename '" + filename + "')")__				}_				return Collections.singletonList(mediaType)__			}_		}_		if (this.favorParameter) {_			if (request.getParameter(this.parameterName) != null) {_				String parameterValue = request.getParameter(this.parameterName)__				MediaType mediaType = getMediaTypeFromParameter(parameterValue)__				if (mediaType != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Requested media type is '" + mediaType + "' (based on parameter '" +_								this.parameterName + "'='" + parameterValue + "')")__					}_					return Collections.singletonList(mediaType)__				}_			}_		}_		if (!this.ignoreAcceptHeader) {_			String acceptHeader = request.getHeader(ACCEPT_HEADER)__			if (StringUtils.hasText(acceptHeader)) {_				try {_					List<MediaType> acceptableMediaTypes = MediaType.parseMediaTypes(acceptHeader)__					List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__					Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__					for (MediaType acceptable : acceptableMediaTypes) {_						for (MediaType producible : producibleMediaTypes) {_							if (acceptable.isCompatibleWith(producible)) {_								compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__							}_						}_					}_					List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__					MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__					if (logger.isDebugEnabled()) {_						logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_								"and producible media types " + producibleMediaTypes + ")")__					}_					return selectedMediaTypes__				}_				catch (IllegalArgumentException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not parse accept header [" + acceptHeader + "]: " + ex.getMessage())__					}_					return null__				}_			}_		}_		if (this.defaultContentType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types is " + this.defaultContentType +_						" (based on defaultContentType property)")__			}_			return Collections.singletonList(this.defaultContentType)__		}_		else {_			return Collections.emptyList()__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,p,the,default,implementation,invokes,link,get,media,type,from,filename,string,if,linkplain,set,favor,path,extension,favor,path,extension,property,is,code,true,code,if,the,property,is,code,false,code,or,when,a,media,type,cannot,be,determined,from,the,request,path,this,method,will,inspect,the,code,accept,header,of,the,request,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,if,this,favor,path,extension,string,request,uri,url,path,helper,get,lookup,path,for,request,request,string,filename,web,utils,extract,full,filename,from,url,path,request,uri,media,type,media,type,get,media,type,from,filename,filename,if,media,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,type,is,media,type,based,on,filename,filename,return,collections,singleton,list,media,type,if,this,favor,parameter,if,request,get,parameter,this,parameter,name,null,string,parameter,value,request,get,parameter,this,parameter,name,media,type,media,type,get,media,type,from,parameter,parameter,value,if,media,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,type,is,media,type,based,on,parameter,this,parameter,name,parameter,value,return,collections,singleton,list,media,type,if,this,ignore,accept,header,string,accept,header,request,get,header,if,string,utils,has,text,accept,header,try,list,media,type,acceptable,media,types,media,type,parse,media,types,accept,header,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,parse,accept,header,accept,header,ex,get,message,return,null,if,this,default,content,type,null,if,logger,is,debug,enabled,logger,debug,requested,media,types,is,this,default,content,type,based,on,default,content,type,property,return,collections,singleton,list,this,default,content,type,else,return,collections,empty,list
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1340380546;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._<p>The default implementation invokes {@link #getMediaTypeFromFilename(String)} if {@linkplain_#setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is_<code>false</code>, or when a media type cannot be determined from the request path,_this method will inspect the {@code Accept} header of the request._<p>This method can be overridden to provide a different algorithm._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,p,the,default,implementation,invokes,link,get,media,type,from,filename,string,if,linkplain,set,favor,path,extension,favor,path,extension,property,is,code,true,code,if,the,property,is,code,false,code,or,when,a,media,type,cannot,be,determined,from,the,request,path,this,method,will,inspect,the,code,accept,header,of,the,request,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1340652245;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._<p>The default implementation invokes {@link #getMediaTypeFromFilename(String)} if {@linkplain_#setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is_<code>false</code>, or when a media type cannot be determined from the request path,_this method will inspect the {@code Accept} header of the request._<p>This method can be overridden to provide a different algorithm._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,p,the,default,implementation,invokes,link,get,media,type,from,filename,string,if,linkplain,set,favor,path,extension,favor,path,extension,property,is,code,true,code,if,the,property,is,code,false,code,or,when,a,media,type,cannot,be,determined,from,the,request,path,this,method,will,inspect,the,code,accept,header,of,the,request,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1348666123;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._<p>The default implementation invokes {@link #getMediaTypeFromFilename(String)} if {@linkplain_#setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is_<code>false</code>, or when a media type cannot be determined from the request path,_this method will inspect the {@code Accept} header of the request._<p>This method can be overridden to provide a different algorithm._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,p,the,default,implementation,invokes,link,get,media,type,from,filename,string,if,linkplain,set,favor,path,extension,favor,path,extension,property,is,code,true,code,if,the,property,is,code,false,code,or,when,a,media,type,cannot,be,determined,from,the,request,path,this,method,will,inspect,the,code,accept,header,of,the,request,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1350941037;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._<p>The default implementation invokes {@link #getMediaTypeFromFilename(String)} if {@linkplain_#setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is_<code>false</code>, or when a media type cannot be determined from the request path,_this method will inspect the {@code Accept} header of the request._<p>This method can be overridden to provide a different algorithm._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,p,the,default,implementation,invokes,link,get,media,type,from,filename,string,if,linkplain,set,favor,path,extension,favor,path,extension,property,is,code,true,code,if,the,property,is,code,false,code,or,when,a,media,type,cannot,be,determined,from,the,request,path,this,method,will,inspect,the,code,accept,header,of,the,request,p,this,method,can,be,overridden,to,provide,a,different,algorithm,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1355313310;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1356735495;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1357119239;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1357248712;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1362408075;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1368482696;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1374198819;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = acceptableMediaTypes.isEmpty() ?_					Collections.singletonList(MediaType.ALL) : acceptableMediaTypes___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,collections,singleton,list,media,type,all,acceptable,media,types,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1385423968;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = acceptableMediaTypes.isEmpty() ?_					Collections.singletonList(MediaType.ALL) : acceptableMediaTypes___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,collections,singleton,list,media,type,all,acceptable,media,types,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1405306403;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = acceptableMediaTypes.isEmpty() ?_					Collections.singletonList(MediaType.ALL) : acceptableMediaTypes___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,collections,singleton,list,media,type,all,acceptable,media,types,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1405306409;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = acceptableMediaTypes.isEmpty() ?_					Collections.singletonList(MediaType.ALL) : acceptableMediaTypes___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,collections,singleton,list,media,type,all,acceptable,media,types,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1413848647;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = acceptableMediaTypes.isEmpty() ?_					Collections.singletonList(MediaType.ALL) : acceptableMediaTypes___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,collections,singleton,list,media,type,all,acceptable,media,types,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1419966315;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = acceptableMediaTypes.isEmpty() ?_					Collections.singletonList(MediaType.ALL) : acceptableMediaTypes___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,collections,singleton,list,media,type,all,acceptable,media,types,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1426267113;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = acceptableMediaTypes.isEmpty() ?_					Collections.singletonList(MediaType.ALL) : acceptableMediaTypes___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,collections,singleton,list,media,type,all,acceptable,media,types,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1441791912;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1446156060;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1446471766;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,media,type,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,media,type,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1467730834;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1477045587;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> protected List<MediaType> getMediaTypes(HttpServletRequest request);1485810955;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1495868221;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1496242568;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1496837955;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1498780456;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		Assert.state(this.contentNegotiationManager != null, "No ContentNegotiationManager set")__		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,assert,state,this,content,negotiation,manager,null,no,content,negotiation,manager,set,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1500448076;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		Assert.state(this.contentNegotiationManager != null, "No ContentNegotiationManager set")__		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,assert,state,this,content,negotiation,manager,null,no,content,negotiation,manager,set,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1502974979;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		Assert.state(this.contentNegotiationManager != null, "No ContentNegotiationManager set")__		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)___			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :_					Collections.singletonList(MediaType.ALL))___			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,assert,state,this,content,negotiation,manager,null,no,content,negotiation,manager,set,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,acceptable,media,types,acceptable,media,types,is,empty,acceptable,media,types,collections,singleton,list,media,type,all,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1522184059;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		Assert.state(this.contentNegotiationManager != null, "No ContentNegotiationManager set")__		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			if (logger.isDebugEnabled()) {_				logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " +_						"and producible media types " + producibleMediaTypes + ")")__			}_			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,assert,state,this,content,negotiation,manager,null,no,content,negotiation,manager,set,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,if,logger,is,debug,enabled,logger,debug,requested,media,types,are,selected,media,types,based,on,accept,header,types,and,producible,media,types,producible,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1529361191;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		Assert.state(this.contentNegotiationManager != null, "No ContentNegotiationManager set")__		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug(ex.getMessage())__			}_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,assert,state,this,content,negotiation,manager,null,no,content,negotiation,manager,set,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,if,logger,is,debug,enabled,logger,debug,ex,get,message,return,null
ContentNegotiatingViewResolver -> @Nullable 	protected List<MediaType> getMediaTypes(HttpServletRequest request);1530174524;Determines the list of {@link MediaType} for the given {@link HttpServletRequest}._@param request the current servlet request_@return the list of media types requested, if any;@Nullable_	protected List<MediaType> getMediaTypes(HttpServletRequest request) {_		Assert.state(this.contentNegotiationManager != null, "No ContentNegotiationManager set")__		try {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			List<MediaType> acceptableMediaTypes = this.contentNegotiationManager.resolveMediaTypes(webRequest)__			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request)__			Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__			for (MediaType acceptable : acceptableMediaTypes) {_				for (MediaType producible : producibleMediaTypes) {_					if (acceptable.isCompatibleWith(producible)) {_						compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible))__					}_				}_			}_			List<MediaType> selectedMediaTypes = new ArrayList<>(compatibleMediaTypes)__			MediaType.sortBySpecificityAndQuality(selectedMediaTypes)__			return selectedMediaTypes__		}_		catch (HttpMediaTypeNotAcceptableException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug(ex.getMessage())__			}_			return null__		}_	};determines,the,list,of,link,media,type,for,the,given,link,http,servlet,request,param,request,the,current,servlet,request,return,the,list,of,media,types,requested,if,any;nullable,protected,list,media,type,get,media,types,http,servlet,request,request,assert,state,this,content,negotiation,manager,null,no,content,negotiation,manager,set,try,servlet,web,request,web,request,new,servlet,web,request,request,list,media,type,acceptable,media,types,this,content,negotiation,manager,resolve,media,types,web,request,list,media,type,producible,media,types,get,producible,media,types,request,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,media,types,for,media,type,producible,producible,media,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,get,most,specific,media,type,acceptable,producible,list,media,type,selected,media,types,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,selected,media,types,return,selected,media,types,catch,http,media,type,not,acceptable,exception,ex,if,logger,is,debug,enabled,logger,debug,ex,get,message,return,null
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1356735495;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			this.cnManagerFactoryBean.getMediaTypes().putAll(mediaTypes)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,this,cn,manager,factory,bean,get,media,types,put,all,media,types
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1357119239;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			this.cnManagerFactoryBean.getMediaTypes().putAll(mediaTypes)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,this,cn,manager,factory,bean,get,media,types,put,all,media,types
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1357248712;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1362408075;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1368482696;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1374198819;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1385423968;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1405306403;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1405306409;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> @Deprecated 	public void setMediaTypes(Map<String, String> mediaTypes);1413848647;Set the mapping from file extensions to media types._<p>When this mapping is not set or when an extension is not present, this view resolver_will fall back to using a {@link FileTypeMap} when the Java Action Framework is available._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setMediaTypes(Map<String, String> mediaTypes) {_		if (mediaTypes != null) {_			Properties props = new Properties()__			props.putAll(mediaTypes)__			this.cnManagerFactoryBean.setMediaTypes(props)__		}_	};set,the,mapping,from,file,extensions,to,media,types,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,present,this,view,resolver,will,fall,back,to,using,a,link,file,type,map,when,the,java,action,framework,is,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,media,types,map,string,string,media,types,if,media,types,null,properties,props,new,properties,props,put,all,media,types,this,cn,manager,factory,bean,set,media,types,props
ContentNegotiatingViewResolver -> public ContentNegotiationManager getContentNegotiationManager();1446471766;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> public ContentNegotiationManager getContentNegotiationManager();1467730834;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> public ContentNegotiationManager getContentNegotiationManager();1477045587;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> public ContentNegotiationManager getContentNegotiationManager();1485810955;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> public ContentNegotiationManager getContentNegotiationManager();1495868221;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> public ContentNegotiationManager getContentNegotiationManager();1496242568;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> public ContentNegotiationManager getContentNegotiationManager();1496837955;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2);1328020251;Returns the more specific media type using the q-value of the first media type for both.;private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2) {_		double quality = type1.getQualityValue()__		Map<String, String> params = Collections.singletonMap("q", String.valueOf(quality))__		MediaType t1 = new MediaType(type1, params)__		MediaType t2 = new MediaType(type2, params)__		return MediaType.SPECIFICITY_COMPARATOR.compare(t1, t2) <= 0 ? type1 : type2__	};returns,the,more,specific,media,type,using,the,q,value,of,the,first,media,type,for,both;private,media,type,get,most,specific,media,type,media,type,type1,media,type,type2,double,quality,type1,get,quality,value,map,string,string,params,collections,singleton,map,q,string,value,of,quality,media,type,t1,new,media,type,type1,params,media,type,t2,new,media,type,type2,params,return,media,type,compare,t1,t2,0,type1,type2
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2);1336676401;Returns the more specific media type using the q-value of the first media type for both.;private MediaType getMostSpecificMediaType(MediaType type1, MediaType type2) {_		double quality = type1.getQualityValue()__		Map<String, String> params = Collections.singletonMap("q", String.valueOf(quality))__		MediaType t1 = new MediaType(type1, params)__		MediaType t2 = new MediaType(type2, params)__		return MediaType.SPECIFICITY_COMPARATOR.compare(t1, t2) <= 0 ? type1 : type2__	};returns,the,more,specific,media,type,using,the,q,value,of,the,first,media,type,for,both;private,media,type,get,most,specific,media,type,media,type,type1,media,type,type2,double,quality,type1,get,quality,value,map,string,string,params,collections,singleton,map,q,string,value,of,quality,media,type,t1,new,media,type,type1,params,media,type,t2,new,media,type,type2,params,return,media,type,compare,t1,t2,0,type1,type2
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1356735495;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1357119239;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1357248712;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1362408075;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1368482696;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1374198819;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1385423968;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1405306403;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1405306409;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setParameterName(String parameterName);1413848647;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1356735495;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1357119239;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1357248712;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1362408075;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1368482696;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1374198819;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1385423968;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1405306403;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1405306409;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Deprecated 	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1413848647;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1498780456;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1500448076;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1502974979;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1522184059;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1529361191;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1530174524;Return the {@link ContentNegotiationManager} to use to determine requested media types._@since 4.1.9;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,since,4,1,9;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1328020251;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1336676401;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1336761838;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1340380546;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1340652245;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1348666123;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1350941037;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setFavorParameter(boolean favorParameter);1355313310;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,code,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1328020251;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1336676401;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1336761838;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1340380546;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1340652245;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1348666123;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1350941037;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1355313310;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1356735495;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1357119239;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1357248712;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1362408075;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1368482696;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1374198819;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1385423968;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1405306403;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1405306409;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1413848647;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1419966315;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1426267113;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1441791912;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1446156060;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1446471766;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1467730834;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1477045587;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1485810955;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1495868221;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1496242568;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1496837955;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1498780456;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1500448076;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1502974979;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1522184059;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1529361191;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setViewResolvers(List<ViewResolver> viewResolvers);1530174524;Sets the view resolvers to be wrapped by this view resolver._<p>If this property is not set, view resolvers will be detected automatically.;public void setViewResolvers(List<ViewResolver> viewResolvers) {_		this.viewResolvers = viewResolvers__	};sets,the,view,resolvers,to,be,wrapped,by,this,view,resolver,p,if,this,property,is,not,set,view,resolvers,will,be,detected,automatically;public,void,set,view,resolvers,list,view,resolver,view,resolvers,this,view,resolvers,view,resolvers
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1328020251;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1336676401;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1336761838;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1340380546;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1340652245;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1348666123;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1350941037;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setParameterName(String parameterName);1355313310;Set the parameter name that can be used to determine the requested media type if the {@link_#setFavorParameter} property is {@code true}. The default parameter name is {@code format}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setParameterName(String parameterName) {_		this.cnManagerFactoryBean.setParameterName(parameterName)__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,the,default,parameter,name,is,code,format,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,parameter,name,string,parameter,name,this,cn,manager,factory,bean,set,parameter,name,parameter,name
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1328020251;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1336676401;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1336761838;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1340380546;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1340652245;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1348666123;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1350941037;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1355313310;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1356735495;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1357119239;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1357248712;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1362408075;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1368482696;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1374198819;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1385423968;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1405306403;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1405306409;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1413848647;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1419966315;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1426267113;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1441791912;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1446156060;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1446471766;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1467730834;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1477045587;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1485810955;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1495868221;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1496242568;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1496837955;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1498780456;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1500448076;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1502974979;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1522184059;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1529361191;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> public void setDefaultViews(List<View> defaultViews);1530174524;Set the default views to use when a more specific view can not be obtained_from the {@link ViewResolver} chain.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews = defaultViews__	};set,the,default,views,to,use,when,a,more,specific,view,can,not,be,obtained,from,the,link,view,resolver,chain;public,void,set,default,views,list,view,default,views,this,default,views,default,views
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1356735495;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorParameter(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,parameter,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1357119239;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorParameter(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,parameter,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1357248712;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorParameter(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,parameter,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1362408075;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorPathExtension(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1368482696;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorPathExtension(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1374198819;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorPathExtension(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1385423968;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorPathExtension(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1405306403;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorPathExtension(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1405306409;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorPathExtension(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorPathExtension(boolean favorPathExtension);1413848647;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is {@code true} (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorPathExtension(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1405306409;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1413848647;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1419966315;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1426267113;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1441791912;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1446156060;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1446471766;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1467730834;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1477045587;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1485810955;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1495868221;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1496242568;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1496837955;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1498780456;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1500448076;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1502974979;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1522184059;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1529361191;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> public boolean isUseNotAcceptableStatusCode();1530174524;Whether to return HTTP Status 406 if no suitable is found.;public boolean isUseNotAcceptableStatusCode() {_		return this.useNotAcceptableStatusCode__	};whether,to,return,http,status,406,if,no,suitable,is,found;public,boolean,is,use,not,acceptable,status,code,return,this,use,not,acceptable,status,code
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1356735495;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1357119239;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1357248712;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1362408075;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1368482696;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1374198819;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1385423968;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1405306403;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1405306409;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> @Deprecated 	public void setFavorParameter(boolean favorParameter);1413848647;Indicate whether a request parameter should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code false}._<p>For instance, when this flag is {@code true}, a request for {@code /hotels?format=pdf} will result_in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined_{@code text/html,application/xhtml+xml}._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setFavorParameter(boolean favorParameter) {_		this.cnManagerFactoryBean.setFavorParameter(favorParameter)__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,false,p,for,instance,when,this,flag,is,code,true,a,request,for,code,hotels,format,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,favor,parameter,boolean,favor,parameter,this,cn,manager,factory,bean,set,favor,parameter,favor,parameter
ContentNegotiatingViewResolver -> protected MediaType getMediaTypeFromParameter(String parameterValue);1328020251;Determines the {@link MediaType} for the given parameter value._<p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}_property for a defined mapping._<p>This method can be overriden to provide a different algorithm._@param parameterValue the parameter value (i.e. {@code pdf})._@return the media type, if any;protected MediaType getMediaTypeFromParameter(String parameterValue) {_		return this.mediaTypes.get(parameterValue.toLowerCase(Locale.ENGLISH))__	};determines,the,link,media,type,for,the,given,parameter,value,p,the,default,implementation,will,check,the,linkplain,set,media,types,map,media,types,property,for,a,defined,mapping,p,this,method,can,be,overriden,to,provide,a,different,algorithm,param,parameter,value,the,parameter,value,i,e,code,pdf,return,the,media,type,if,any;protected,media,type,get,media,type,from,parameter,string,parameter,value,return,this,media,types,get,parameter,value,to,lower,case,locale,english
ContentNegotiatingViewResolver -> protected MediaType getMediaTypeFromParameter(String parameterValue);1336676401;Determines the {@link MediaType} for the given parameter value._<p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}_property for a defined mapping._<p>This method can be overriden to provide a different algorithm._@param parameterValue the parameter value (i.e. {@code pdf})._@return the media type, if any;protected MediaType getMediaTypeFromParameter(String parameterValue) {_		return this.mediaTypes.get(parameterValue.toLowerCase(Locale.ENGLISH))__	};determines,the,link,media,type,for,the,given,parameter,value,p,the,default,implementation,will,check,the,linkplain,set,media,types,map,media,types,property,for,a,defined,mapping,p,this,method,can,be,overriden,to,provide,a,different,algorithm,param,parameter,value,the,parameter,value,i,e,code,pdf,return,the,media,type,if,any;protected,media,type,get,media,type,from,parameter,string,parameter,value,return,this,media,types,get,parameter,value,to,lower,case,locale,english
ContentNegotiatingViewResolver -> protected MediaType getMediaTypeFromParameter(String parameterValue);1336761838;Determines the {@link MediaType} for the given parameter value._<p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}_property for a defined mapping._<p>This method can be overriden to provide a different algorithm._@param parameterValue the parameter value (i.e. {@code pdf})._@return the media type, if any;protected MediaType getMediaTypeFromParameter(String parameterValue) {_		return this.mediaTypes.get(parameterValue.toLowerCase(Locale.ENGLISH))__	};determines,the,link,media,type,for,the,given,parameter,value,p,the,default,implementation,will,check,the,linkplain,set,media,types,map,media,types,property,for,a,defined,mapping,p,this,method,can,be,overriden,to,provide,a,different,algorithm,param,parameter,value,the,parameter,value,i,e,code,pdf,return,the,media,type,if,any;protected,media,type,get,media,type,from,parameter,string,parameter,value,return,this,media,types,get,parameter,value,to,lower,case,locale,english
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1328020251;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1336676401;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1336761838;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1340380546;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1340652245;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1348666123;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorParameter(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,parameter,favor,path,extension
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1350941037;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorParameter(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,parameter,favor,path,extension
ContentNegotiatingViewResolver -> public void setFavorPathExtension(boolean favorPathExtension);1355313310;Indicate whether the extension of the request path should be used to determine the requested media type,_in favor of looking at the {@code Accept} header. The default value is {@code true}._<p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}_will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the_browser-defined {@code text/html,application/xhtml+xml}.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setFavorPathExtension(boolean favorPathExtension) {_		this.cnManagerFactoryBean.setFavorParameter(favorPathExtension)__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,in,favor,of,looking,at,the,code,accept,header,the,default,value,is,code,true,p,for,instance,when,this,flag,is,code,true,code,the,default,a,request,for,code,hotels,pdf,will,result,in,an,code,abstract,pdf,view,being,resolved,while,the,code,accept,header,can,be,the,browser,defined,code,text,html,application,xhtml,xml,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,favor,path,extension,boolean,favor,path,extension,this,cn,manager,factory,bean,set,favor,parameter,favor,path,extension
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1328020251;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1336676401;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1336761838;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1340380546;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1340652245;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1348666123;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1350941037;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> public void setUseJaf(boolean useJaf);1355313310;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setUseJaf(boolean useJaf) {_		this.cnManagerFactoryBean.setUseJaf(useJaf)__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,use,jaf,boolean,use,jaf,this,cn,manager,factory,bean,set,use,jaf,use,jaf
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1356735495;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1357119239;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1357248712;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1362408075;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1368482696;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1374198819;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1385423968;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1405306403;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1405306409;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> @Deprecated 	public void setDefaultContentType(MediaType defaultContentType);1413848647;Set the default content type._<p>This content type will be used when file extension, parameter, nor {@code Accept}_header define a content-type, either through being disabled or empty._@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};@Deprecated_	public void setDefaultContentType(MediaType defaultContentType) {_		this.cnManagerFactoryBean.setDefaultContentType(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,file,extension,parameter,nor,code,accept,header,define,a,content,type,either,through,being,disabled,or,empty,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;deprecated,public,void,set,default,content,type,media,type,default,content,type,this,cn,manager,factory,bean,set,default,content,type,default,content,type
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1328020251;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1336676401;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1336761838;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1340380546;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1340652245;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1348666123;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1350941037;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1355313310;Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}._<p>If set to {@code true}, this view resolver will only refer to the file extension and/or_parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and_{@link #setFavorParameter favorParameter} properties.__@deprecated use {@link #setContentNegotiationManager(ContentNegotiationManager)};public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.cnManagerFactoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__	};indicate,whether,the,http,code,accept,header,should,be,ignored,default,is,code,false,p,if,set,to,code,true,this,view,resolver,will,only,refer,to,the,file,extension,and,or,parameter,as,indicated,by,the,link,set,favor,path,extension,favor,path,extension,and,link,set,favor,parameter,favor,parameter,properties,deprecated,use,link,set,content,negotiation,manager,content,negotiation,manager;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,cn,manager,factory,bean,set,ignore,accept,header,ignore,accept,header
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1336761838;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1340380546;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1340652245;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1348666123;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1350941037;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1355313310;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1356735495;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1357119239;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1357248712;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1362408075;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1368482696;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1374198819;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1385423968;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1405306403;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1405306409;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1413848647;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1419966315;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1426267113;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1441791912;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1446156060;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1446471766;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1467730834;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1477045587;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1485810955;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1495868221;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1496242568;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1496837955;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1498780456;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1500448076;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1502974979;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1522184059;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1529361191;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
ContentNegotiatingViewResolver -> private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType);1530174524;Return the more specific of the acceptable and the producible media types_with the q-value of the former.;private MediaType getMostSpecificMediaType(MediaType acceptType, MediaType produceType) {_		produceType = produceType.copyQualityValue(acceptType)__		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType)__	};return,the,more,specific,of,the,acceptable,and,the,producible,media,types,with,the,q,value,of,the,former;private,media,type,get,most,specific,media,type,media,type,accept,type,media,type,produce,type,produce,type,produce,type,copy,quality,value,accept,type,return,media,type,compare,accept,type,produce,type,0,accept,type,produce,type
