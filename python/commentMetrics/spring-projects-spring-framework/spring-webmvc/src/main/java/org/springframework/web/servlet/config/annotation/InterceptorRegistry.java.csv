commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Adds the provided {@link HandlerInterceptor}.  * @param interceptor the interceptor to add  * @return an {@link InterceptorRegistration} that allows you optionally configure the  * registered interceptor further for example adding URL patterns it should apply to.  */ ;/**  * Adds the provided {@link HandlerInterceptor}.  * @param interceptor the interceptor to add  * @return an {@link InterceptorRegistration} that allows you optionally configure the  * registered interceptor further for example adding URL patterns it should apply to.  */ public InterceptorRegistration addInterceptor(HandlerInterceptor interceptor) {     InterceptorRegistration registration = new InterceptorRegistration(interceptor).     this.registrations.add(registration).     return registration. }
true;public;1;6;/**  * Adds the provided {@link WebRequestInterceptor}.  * @param interceptor the interceptor to add  * @return an {@link InterceptorRegistration} that allows you optionally configure the  * registered interceptor further for example adding URL patterns it should apply to.  */ ;/**  * Adds the provided {@link WebRequestInterceptor}.  * @param interceptor the interceptor to add  * @return an {@link InterceptorRegistration} that allows you optionally configure the  * registered interceptor further for example adding URL patterns it should apply to.  */ public InterceptorRegistration addWebRequestInterceptor(WebRequestInterceptor interceptor) {     WebRequestHandlerInterceptorAdapter adapted = new WebRequestHandlerInterceptorAdapter(interceptor).     InterceptorRegistration registration = new InterceptorRegistration(adapted).     this.registrations.add(registration).     return registration. }
true;protected;0;6;/**  * Return all registered interceptors.  */ ;/**  * Return all registered interceptors.  */ protected List<Object> getInterceptors() {     return this.registrations.stream().sorted(INTERCEPTOR_ORDER_COMPARATOR).map(InterceptorRegistration::getInterceptor).collect(Collectors.toList()). }
