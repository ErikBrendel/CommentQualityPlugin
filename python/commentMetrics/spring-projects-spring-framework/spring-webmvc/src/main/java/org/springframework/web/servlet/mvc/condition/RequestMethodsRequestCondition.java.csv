# id;timestamp;commentText;codeText;commentWords;codeWords
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1328020251;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1348240205;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1356735495;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1357119239;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1368482696;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1392410324;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1392417603;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1405696918;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1453684721;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1453684721;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1455824256;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1455908212;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1458824040;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1460920363;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1467304494;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1467730834;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1474905889;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1496837955;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1502974979;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1506097334;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1530174524;Returns all {@link RequestMethod RequestMethods} contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,request,methods,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1328020251;Checks if any of the HTTP request methods match the given request and returns_an instance that contains the matching request method only._@param request the current request_@return the same instance if the condition contains no request method__or a new condition with the matching request method__or {@code null} if no request methods match.;public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = RequestMethod.valueOf(request.getMethod())__		for (RequestMethod method : methods) {_			if (method.equals(incomingRequestMethod)) {_				return new RequestMethodsRequestCondition(method)__			}_		}_		return null__	};checks,if,any,of,the,http,request,methods,match,the,given,request,and,returns,an,instance,that,contains,the,matching,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,contains,no,request,method,or,a,new,condition,with,the,matching,request,method,or,code,null,if,no,request,methods,match;public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,methods,is,empty,return,this,request,method,incoming,request,method,request,method,value,of,request,get,method,for,request,method,method,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1348240205;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only.__@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = getRequestMethod(request)__		if(incomingRequestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(incomingRequestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,incoming,request,method,get,request,method,request,if,incoming,request,method,null,for,request,method,method,this,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1357119239;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only.__@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = getRequestMethod(request)__		if(incomingRequestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(incomingRequestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,incoming,request,method,get,request,method,request,if,incoming,request,method,null,for,request,method,method,this,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1328020251;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods._<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't._<li>Greater than 0 "other" has an HTTP request method but "this" doesn't._</ul>__<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return other.methods.size() - this.methods.size()__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1348240205;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>__<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return other.methods.size() - this.methods.size()__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1357119239;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>__<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return other.methods.size() - this.methods.size()__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1455908212;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1458824040;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1460920363;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1467304494;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1467730834;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1474905889;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1328020251;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1348240205;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1357119239;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1356735495;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1368482696;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1392410324;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1392417603;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1405696918;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1453684721;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1453684721;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1455824256;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1455908212;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1458824040;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1460920363;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1467304494;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<RequestMethod>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,request,method,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1467730834;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1474905889;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1496837955;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1502974979;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1506097334;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1530174524;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1328020251;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request.;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1348240205;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request.;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1356735495;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request.;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1357119239;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request.;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1368482696;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request.;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1392410324;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1392417603;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1405696918;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1453684721;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1453684721;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1455824256;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1455908212;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1458824040;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1460920363;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1467304494;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1467730834;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1474905889;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1496837955;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(Arrays.asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,arrays,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1502974979;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(Arrays.asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,arrays,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1506097334;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(Arrays.asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,arrays,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1530174524;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(Arrays.asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,arrays,as,list,request,methods
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods);1328020251;Private constructor.;private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods) {_		this.methods = Collections.unmodifiableSet(new LinkedHashSet<RequestMethod>(requestMethods))__	};private,constructor;private,request,methods,request,condition,collection,request,method,request,methods,this,methods,collections,unmodifiable,set,new,linked,hash,set,request,method,request,methods
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods);1348240205;Private constructor.;private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods) {_		this.methods = Collections.unmodifiableSet(new LinkedHashSet<RequestMethod>(requestMethods))__	};private,constructor;private,request,methods,request,condition,collection,request,method,request,methods,this,methods,collections,unmodifiable,set,new,linked,hash,set,request,method,request,methods
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods);1356735495;Private constructor.;private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods) {_		this.methods = Collections.unmodifiableSet(new LinkedHashSet<RequestMethod>(requestMethods))__	};private,constructor;private,request,methods,request,condition,collection,request,method,request,methods,this,methods,collections,unmodifiable,set,new,linked,hash,set,request,method,request,methods
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods);1357119239;Private constructor.;private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods) {_		this.methods = Collections.unmodifiableSet(new LinkedHashSet<RequestMethod>(requestMethods))__	};private,constructor;private,request,methods,request,condition,collection,request,method,request,methods,this,methods,collections,unmodifiable,set,new,linked,hash,set,request,method,request,methods
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods);1368482696;Private constructor.;private RequestMethodsRequestCondition(Collection<RequestMethod> requestMethods) {_		this.methods = Collections.unmodifiableSet(new LinkedHashSet<RequestMethod>(requestMethods))__	};private,constructor;private,request,methods,request,condition,collection,request,method,request,methods,this,methods,collections,unmodifiable,set,new,linked,hash,set,request,method,request,methods
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1356735495;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only.__@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = getRequestMethod(request)__		if(incomingRequestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(incomingRequestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,incoming,request,method,get,request,method,request,if,incoming,request,method,null,for,request,method,method,this,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1368482696;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only.__@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = getRequestMethod(request)__		if(incomingRequestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(incomingRequestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,incoming,request,method,get,request,method,request,if,incoming,request,method,null,for,request,method,method,this,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1392410324;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only.__@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = getRequestMethod(request)__		if(incomingRequestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(incomingRequestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,incoming,request,method,get,request,method,request,if,incoming,request,method,null,for,request,method,method,this,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1392417603;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = getRequestMethod(request)__		if(incomingRequestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(incomingRequestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,incoming,request,method,get,request,method,request,if,incoming,request,method,null,for,request,method,method,this,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1405696918;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod incomingRequestMethod = getRequestMethod(request)__		if (incomingRequestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(incomingRequestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,incoming,request,method,get,request,method,request,if,incoming,request,method,null,for,request,method,method,this,methods,if,method,equals,incoming,request,method,return,new,request,methods,request,condition,method,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1453684721;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (this.methods.isEmpty()) {_			return this__		}_		RequestMethod requestMethod = getRequestMethod(request)__		if (requestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(requestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_			if (isHeadRequest(requestMethod) && getMethods().contains(RequestMethod.GET)) {_				return HEAD_CONDITION__			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,this,methods,is,empty,return,this,request,method,request,method,get,request,method,request,if,request,method,null,for,request,method,method,this,methods,if,method,equals,request,method,return,new,request,methods,request,condition,method,if,is,head,request,request,method,get,methods,contains,request,method,get,return,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1453684721;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty, a new condition with_the matched request method, or {@code null} if no request methods match;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		RequestMethod requestMethod = getRequestMethod(request)__		if (requestMethod == null) {_			return null__		}_		if (this.methods.isEmpty()) {_			return (RequestMethod.OPTIONS.equals(requestMethod) ? null : this)__		}_		for (RequestMethod method : this.methods) {_			if (method.equals(requestMethod)) {_				return new RequestMethodsRequestCondition(method)__			}_		}_		if (RequestMethod.HEAD.equals(requestMethod) && getMethods().contains(RequestMethod.GET)) {_			return HEAD_CONDITION__		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,a,new,condition,with,the,matched,request,method,or,code,null,if,no,request,methods,match;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,request,method,request,method,get,request,method,request,if,request,method,null,return,null,if,this,methods,is,empty,return,request,method,options,equals,request,method,null,this,for,request,method,method,this,methods,if,method,equals,request,method,return,new,request,methods,request,condition,method,if,request,method,head,equals,request,method,get,methods,contains,request,method,get,return,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1455824256;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		RequestMethod requestMethod = getRequestMethod(request)__		if (this.methods.isEmpty()) {_			return (RequestMethod.OPTIONS.equals(requestMethod) ? null : this)__		}_		if (requestMethod != null) {_			for (RequestMethod method : this.methods) {_				if (method.equals(requestMethod)) {_					return new RequestMethodsRequestCondition(method)__				}_			}_			if (RequestMethod.HEAD.equals(requestMethod) && getMethods().contains(RequestMethod.GET)) {_				return HEAD_CONDITION__			}_		}_		return null__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,request,method,request,method,get,request,method,request,if,this,methods,is,empty,return,request,method,options,equals,request,method,null,this,if,request,method,null,for,request,method,method,this,methods,if,method,equals,request,method,return,new,request,methods,request,condition,method,if,request,method,head,equals,request,method,get,methods,contains,request,method,get,return,return,null
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1455908212;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {__		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod())) {_				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1458824040;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod())) {_				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1460920363;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod())) {_				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1467304494;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod()) &&_					!DispatcherType.ERROR.equals(request.getDispatcherType())) {__				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,dispatcher,type,error,equals,request,get,dispatcher,type,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1467730834;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod()) &&_					!DispatcherType.ERROR.equals(request.getDispatcherType())) {__				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,dispatcher,type,error,equals,request,get,dispatcher,type,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1474905889;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod()) &&_					!DispatcherType.ERROR.equals(request.getDispatcherType())) {__				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,dispatcher,type,error,equals,request,get,dispatcher,type,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1496837955;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod()) &&_					!DispatcherType.ERROR.equals(request.getDispatcherType())) {__				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,dispatcher,type,error,equals,request,get,dispatcher,type,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1356735495;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>__<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return other.methods.size() - this.methods.size()__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1368482696;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>__<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return other.methods.size() - this.methods.size()__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1392410324;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1392417603;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1405696918;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1453684721;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1453684721;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1455824256;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1455908212;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1458824040;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1460920363;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1467304494;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1467730834;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1474905889;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1496837955;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1502974979;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1506097334;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request);1530174524;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(HttpServletRequest)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,http,servlet,request,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,http,servlet,request,request,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> @Nullable 	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1496837955;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;@Nullable_	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;nullable,private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> @Nullable 	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1502974979;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;@Nullable_	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;nullable,private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> @Nullable 	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1506097334;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;@Nullable_	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;nullable,private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> @Nullable 	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request);1530174524;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;@Nullable_	private RequestMethodsRequestCondition matchPreFlight(HttpServletRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		String expectedMethod = request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD)__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;nullable,private,request,methods,request,condition,match,pre,flight,http,servlet,request,request,if,get,methods,is,empty,return,this,string,expected,method,request,get,header,http,headers,return,match,request,method,expected,method
RequestMethodsRequestCondition -> @Override 	@Nullable 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1502974979;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	@Nullable_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod()) &&_					!DispatcherType.ERROR.equals(request.getDispatcherType())) {__				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,nullable,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,dispatcher,type,error,equals,request,get,dispatcher,type,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	@Nullable 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1506097334;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	@Nullable_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod()) &&_					!DispatcherType.ERROR.equals(request.getDispatcherType())) {__				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,nullable,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,dispatcher,type,error,equals,request,get,dispatcher,type,return,null,return,this,return,match,request,method,request,get,method
RequestMethodsRequestCondition -> @Override 	@Nullable 	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request);1530174524;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param request the current request_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	@Nullable_	public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) {_		if (CorsUtils.isPreFlightRequest(request)) {_			return matchPreFlight(request)__		}__		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(request.getMethod()) &&_					!DispatcherType.ERROR.equals(request.getDispatcherType())) {__				return null_ _			}_			return this__		}__		return matchRequestMethod(request.getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,request,the,current,request,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,nullable,public,request,methods,request,condition,get,matching,condition,http,servlet,request,request,if,cors,utils,is,pre,flight,request,request,return,match,pre,flight,request,if,get,methods,is,empty,if,request,method,options,name,equals,request,get,method,dispatcher,type,error,equals,request,get,dispatcher,type,return,null,return,this,return,match,request,method,request,get,method
