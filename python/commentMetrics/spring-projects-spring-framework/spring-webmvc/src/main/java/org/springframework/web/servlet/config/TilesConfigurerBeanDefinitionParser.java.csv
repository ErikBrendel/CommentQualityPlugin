commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected String getBeanClassName(Element element) {     return "org.springframework.web.servlet.view.tiles3.TilesConfigurer". }
false;protected;3;4;;@Override protected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext) {     return BEAN_NAME. }
false;protected;3;23;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     List<Element> childElements = DomUtils.getChildElementsByTagName(element, "definitions").     if (!childElements.isEmpty()) {         List<String> locations = new ArrayList<>(childElements.size()).         for (Element childElement : childElements) {             locations.add(childElement.getAttribute("location")).         }         builder.addPropertyValue("definitions", StringUtils.toStringArray(locations)).     }     if (element.hasAttribute("check-refresh")) {         builder.addPropertyValue("checkRefresh", element.getAttribute("check-refresh")).     }     if (element.hasAttribute("validate-definitions")) {         builder.addPropertyValue("validateDefinitions", element.getAttribute("validate-definitions")).     }     if (element.hasAttribute("definitions-factory")) {         builder.addPropertyValue("definitionsFactoryClass", element.getAttribute("definitions-factory")).     }     if (element.hasAttribute("preparer-factory")) {         builder.addPropertyValue("preparerFactoryClass", element.getAttribute("preparer-factory")).     } }
