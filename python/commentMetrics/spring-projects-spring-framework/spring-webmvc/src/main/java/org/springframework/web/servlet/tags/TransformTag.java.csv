commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the value to transform, using the appropriate PropertyEditor  * from the enclosing BindTag.  * <p>The value can either be a plain value to transform (a hard-coded String  * value in a JSP or a JSP expression), or a JSP EL expression to be evaluated  * (transforming the result of the expression).  */ ;/**  * Set the value to transform, using the appropriate PropertyEditor  * from the enclosing BindTag.  * <p>The value can either be a plain value to transform (a hard-coded String  * value in a JSP or a JSP expression), or a JSP EL expression to be evaluated  * (transforming the result of the expression).  */ public void setValue(Object value) {     this.value = value. }
true;public;1;3;/**  * Set PageContext attribute name under which to expose  * a variable that contains the result of the transformation.  * @see #setScope  * @see javax.servlet.jsp.PageContext#setAttribute  */ ;/**  * Set PageContext attribute name under which to expose  * a variable that contains the result of the transformation.  * @see #setScope  * @see javax.servlet.jsp.PageContext#setAttribute  */ public void setVar(String var) {     this.var = var. }
true;public;1;3;/**  * Set the scope to export the variable to.  * Default is SCOPE_PAGE ("page").  * @see #setVar  * @see org.springframework.web.util.TagUtils#SCOPE_PAGE  * @see javax.servlet.jsp.PageContext#setAttribute  */ ;/**  * Set the scope to export the variable to.  * Default is SCOPE_PAGE ("page").  * @see #setVar  * @see org.springframework.web.util.TagUtils#SCOPE_PAGE  * @see javax.servlet.jsp.PageContext#setAttribute  */ public void setScope(String scope) {     this.scope = scope. }
false;protected,final;0;38;;@Override protected final int doStartTagInternal() throws JspException {     if (this.value != null) {         // Find the containing EditorAwareTag (e.g. BindTag), if applicable.         EditorAwareTag tag = (EditorAwareTag) TagSupport.findAncestorWithClass(this, EditorAwareTag.class).         if (tag == null) {             throw new JspException("TransformTag can only be used within EditorAwareTag (e.g. BindTag)").         }         // OK, let's obtain the editor...         String result = null.         PropertyEditor editor = tag.getEditor().         if (editor != null) {             // If an editor was found, edit the value.             editor.setValue(this.value).             result = editor.getAsText().         } else {             // Else, just do a toString.             result = this.value.toString().         }         result = htmlEscape(result).         if (this.var != null) {             this.pageContext.setAttribute(this.var, result, TagUtils.getScope(this.scope)).         } else {             try {                 // Else, just print it out.                 this.pageContext.getOut().print(result).             } catch (IOException ex) {                 throw new JspException(ex).             }         }     }     return SKIP_BODY. }
