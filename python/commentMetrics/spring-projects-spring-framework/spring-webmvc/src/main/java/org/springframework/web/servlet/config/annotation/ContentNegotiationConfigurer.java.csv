# id;timestamp;commentText;codeText;commentWords;codeWords
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager();1342834322;@return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() {_		List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>()__		if (this.favorPathExtension) {_			PathExtensionContentNegotiationStrategy strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes)__			if (this.useJaf != null) {_				strategy.setUseJaf(this.useJaf)__			}_			strategies.add(strategy)__		}_		if (this.favorParameter) {_			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes)__			strategy.setParameterName(this.parameterName)__			strategies.add(strategy)__		}_		if (!this.ignoreAcceptHeader) {_			strategies.add(new HeaderContentNegotiationStrategy())__		}_		if (this.defaultContentType != null) {_			strategies.add(new FixedContentNegotiationStrategy(this.defaultContentType))__		}_		ContentNegotiationStrategy[] array = strategies.toArray(new ContentNegotiationStrategy[strategies.size()])__		return new ContentNegotiationManager(array)__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,list,content,negotiation,strategy,strategies,new,array,list,content,negotiation,strategy,if,this,favor,path,extension,path,extension,content,negotiation,strategy,strategy,new,path,extension,content,negotiation,strategy,this,media,types,if,this,use,jaf,null,strategy,set,use,jaf,this,use,jaf,strategies,add,strategy,if,this,favor,parameter,parameter,content,negotiation,strategy,strategy,new,parameter,content,negotiation,strategy,this,media,types,strategy,set,parameter,name,this,parameter,name,strategies,add,strategy,if,this,ignore,accept,header,strategies,add,new,header,content,negotiation,strategy,if,this,default,content,type,null,strategies,add,new,fixed,content,negotiation,strategy,this,default,content,type,content,negotiation,strategy,array,strategies,to,array,new,content,negotiation,strategy,strategies,size,return,new,content,negotiation,manager,array
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager();1342865802;@return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() {_		List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>()__		if (this.favorPathExtension) {_			PathExtensionContentNegotiationStrategy strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes)__			if (this.useJaf != null) {_				strategy.setUseJaf(this.useJaf)__			}_			strategies.add(strategy)__		}_		if (this.favorParameter) {_			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes)__			strategy.setParameterName(this.parameterName)__			strategies.add(strategy)__		}_		if (!this.ignoreAcceptHeader) {_			strategies.add(new HeaderContentNegotiationStrategy())__		}_		if (this.defaultContentType != null) {_			strategies.add(new FixedContentNegotiationStrategy(this.defaultContentType))__		}_		ContentNegotiationStrategy[] array = strategies.toArray(new ContentNegotiationStrategy[strategies.size()])__		return new ContentNegotiationManager(array)__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,list,content,negotiation,strategy,strategies,new,array,list,content,negotiation,strategy,if,this,favor,path,extension,path,extension,content,negotiation,strategy,strategy,new,path,extension,content,negotiation,strategy,this,media,types,if,this,use,jaf,null,strategy,set,use,jaf,this,use,jaf,strategies,add,strategy,if,this,favor,parameter,parameter,content,negotiation,strategy,strategy,new,parameter,content,negotiation,strategy,this,media,types,strategy,set,parameter,name,this,parameter,name,strategies,add,strategy,if,this,ignore,accept,header,strategies,add,new,header,content,negotiation,strategy,if,this,default,content,type,null,strategies,add,new,fixed,content,negotiation,strategy,this,default,content,type,content,negotiation,strategy,array,strategies,to,array,new,content,negotiation,strategy,strategies,size,return,new,content,negotiation,manager,array
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1414005334;Set the {@link ContentNegotiationStrategy} to be used to resolving the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type._<p>Note that this method achieves the same goal as {@code defaultContentType}, so both_shouldn't be used at the same time._@since 4.1.2_@see #defaultContentType(org.springframework.http.MediaType);public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factoryBean.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,the,link,content,negotiation,strategy,to,be,used,to,resolving,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type,p,note,that,this,method,achieves,the,same,goal,as,code,default,content,type,so,both,shouldn,t,be,used,at,the,same,time,since,4,1,2,see,default,content,type,org,springframework,http,media,type;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,bean,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1414031301;Configure a custom {@link ContentNegotiationStrategy} to use to determine_the default content type to use when no content type was requested._<p>However also consider using {@link #defaultContentType} which provides_a simpler alternative to doing the same._@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factoryBean.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};configure,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,default,content,type,to,use,when,no,content,type,was,requested,p,however,also,consider,using,link,default,content,type,which,provides,a,simpler,alternative,to,doing,the,same,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,bean,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1443560917;Configure a custom {@link ContentNegotiationStrategy} to use to determine_the default content type to use when no content type was requested._<p>However also consider using {@link #defaultContentType} which provides_a simpler alternative to doing the same._@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factoryBean.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};configure,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,default,content,type,to,use,when,no,content,type,was,requested,p,however,also,consider,using,link,default,content,type,which,provides,a,simpler,alternative,to,doing,the,same,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,bean,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1443636308;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1446769889;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1446771757;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1467730834;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1490104706;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1490285806;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1491926110;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1496837955;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1498780456;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1499799657;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1506534768;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType_@since 4.1.2;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,since,4,1,2;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1530174524;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@since 4.1.2_@see #defaultContentType;public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.factory.setDefaultContentTypeStrategy(defaultStrategy)__		return this__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,since,4,1,2,see,default,content,type;public,content,negotiation,configurer,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,factory,set,default,content,type,strategy,default,strategy,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1342834322;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1342865802;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1348666123;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.factoryBean.getMediaTypes().clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,factory,bean,get,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1355313310;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.factoryBean.getMediaTypes().clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,factory,bean,get,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1357248712;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1398960186;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1413848647;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1413988332;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1414005334;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1414031301;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1443560917;Add mappings from file extensions to media types replacing any previous mappings._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};add,mappings,from,file,extensions,to,media,types,replacing,any,previous,mappings,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1443636308;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1446769889;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1446771757;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1467730834;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1490104706;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1490285806;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1491926110;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1496837955;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1498780456;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1499799657;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1506534768;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes);1530174524;Similar to {@link #mediaType} but for replacing existing mappings._@see #mediaType(String, MediaType)_@see #mediaTypes(Map);public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {_		this.mediaTypes.clear()__		mediaTypes(mediaTypes)__		return this__	};similar,to,link,media,type,but,for,replacing,existing,mappings,see,media,type,string,media,type,see,media,types,map;public,content,negotiation,configurer,replace,media,types,map,string,media,type,media,types,this,media,types,clear,media,types,media,types,return,this
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1348666123;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1355313310;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1357248712;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		if (!this.mediaTypes.isEmpty()) {_			this.factoryBean.addMediaTypes(mediaTypes)__		}_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,if,this,media,types,is,empty,this,factory,bean,add,media,types,media,types,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1398960186;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		if (!this.mediaTypes.isEmpty()) {_			this.factoryBean.addMediaTypes(mediaTypes)__		}_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,if,this,media,types,is,empty,this,factory,bean,add,media,types,media,types,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1413848647;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		if (!this.mediaTypes.isEmpty()) {_			this.factoryBean.addMediaTypes(mediaTypes)__		}_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,if,this,media,types,is,empty,this,factory,bean,add,media,types,media,types,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1413988332;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		if (!this.mediaTypes.isEmpty()) {_			this.factoryBean.addMediaTypes(mediaTypes)__		}_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,if,this,media,types,is,empty,this,factory,bean,add,media,types,media,types,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1414005334;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		if (!this.mediaTypes.isEmpty()) {_			this.factoryBean.addMediaTypes(mediaTypes)__		}_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,if,this,media,types,is,empty,this,factory,bean,add,media,types,media,types,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1414031301;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		if (!this.mediaTypes.isEmpty()) {_			this.factoryBean.addMediaTypes(mediaTypes)__		}_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,if,this,media,types,is,empty,this,factory,bean,add,media,types,media,types,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> protected ContentNegotiationManager getContentNegotiationManager() throws Exception;1443560917;Return the configured {@link ContentNegotiationManager} instance;protected ContentNegotiationManager getContentNegotiationManager() throws Exception {_		if (!this.mediaTypes.isEmpty()) {_			this.factoryBean.addMediaTypes(mediaTypes)__		}_		this.factoryBean.afterPropertiesSet()__		return this.factoryBean.getObject()__	};return,the,configured,link,content,negotiation,manager,instance;protected,content,negotiation,manager,get,content,negotiation,manager,throws,exception,if,this,media,types,is,empty,this,factory,bean,add,media,types,media,types,this,factory,bean,after,properties,set,return,this,factory,bean,get,object
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1490104706;@deprecated as 5.0, in favor of {@link MediaTypeFactory}, which has no JAF dependency.;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this__	};deprecated,as,5,0,in,favor,of,link,media,type,factory,which,has,no,jaf,dependency;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1490285806;@deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this.useRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this,use,registered,extensions,only,use,jaf
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1491926110;@deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this.useRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this,use,registered,extensions,only,use,jaf
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1496837955;@deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this.useRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this,use,registered,extensions,only,use,jaf
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1498780456;@deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this.useRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this,use,registered,extensions,only,use,jaf
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1499799657;@deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this.useRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this,use,registered,extensions,only,use,jaf
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1506534768;@deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}_which has reverse behavior;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this.useRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this,use,registered,extensions,only,use,jaf
ContentNegotiationConfigurer -> @Deprecated 	public ContentNegotiationConfigurer useJaf(boolean useJaf);1530174524;When {@link #favorPathExtension} is set, this property determines whether_to allow use of JAF (Java Activation Framework) to resolve a path_extension to a specific MediaType._@deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}_which has reverse behavior;@Deprecated_	public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		return this.useRegisteredExtensionsOnly(!useJaf)__	};when,link,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,deprecated,as,of,5,0,in,favor,of,link,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,content,negotiation,configurer,use,jaf,boolean,use,jaf,return,this,use,registered,extensions,only,use,jaf
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(@Nullable ServletContext servletContext);1498780456;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(@Nullable ServletContext servletContext) {_		if (servletContext != null) {_			this.factory.setServletContext(servletContext)__		}_	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,nullable,servlet,context,servlet,context,if,servlet,context,null,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(@Nullable ServletContext servletContext);1499799657;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(@Nullable ServletContext servletContext) {_		if (servletContext != null) {_			this.factory.setServletContext(servletContext)__		}_	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,nullable,servlet,context,servlet,context,if,servlet,context,null,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(@Nullable ServletContext servletContext);1506534768;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(@Nullable ServletContext servletContext) {_		if (servletContext != null) {_			this.factory.setServletContext(servletContext)__		}_	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,nullable,servlet,context,servlet,context,if,servlet,context,null,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(@Nullable ServletContext servletContext);1530174524;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(@Nullable ServletContext servletContext) {_		if (servletContext != null) {_			this.factory.setServletContext(servletContext)__		}_	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,nullable,servlet,context,servlet,context,if,servlet,context,null,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setParameterName(String parameterName);1342834322;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer setParameterName(String parameterName) {_		this.parameterName = parameterName__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setParameterName(String parameterName);1342865802;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer setParameterName(String parameterName) {_		this.parameterName = parameterName__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1348666123;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1355313310;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1357248712;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1398960186;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1413848647;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1413988332;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1414005334;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1414031301;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1443560917;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #mediaTypes(Map)}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factoryBean.setFavorParameter(favorParameter)__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,media,types,map,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,bean,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1443636308;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1446769889;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1446771757;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1467730834;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1490104706;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1490285806;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1491926110;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1496837955;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1498780456;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1499799657;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1506534768;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorParameter(boolean favorParameter);1530174524;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaType(String, MediaType) media type mappings}._<p>By default this is set to {@code false}._@see #parameterName(String);public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {_		this.factory.setFavorParameter(favorParameter)__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,type,string,media,type,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name,string;public,content,negotiation,configurer,favor,parameter,boolean,favor,parameter,this,factory,set,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1342834322;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1342865802;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1490285806;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly)__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,content,negotiation,configurer,use,registered,extensions,only,boolean,use,registered,extensions,only,this,factory,set,use,registered,extensions,only,use,registered,extensions,only,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1491926110;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly)__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,content,negotiation,configurer,use,registered,extensions,only,boolean,use,registered,extensions,only,this,factory,set,use,registered,extensions,only,use,registered,extensions,only,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1496837955;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly)__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,content,negotiation,configurer,use,registered,extensions,only,boolean,use,registered,extensions,only,this,factory,set,use,registered,extensions,only,use,registered,extensions,only,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1498780456;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly)__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,content,negotiation,configurer,use,registered,extensions,only,boolean,use,registered,extensions,only,this,factory,set,use,registered,extensions,only,use,registered,extensions,only,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1499799657;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly)__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,content,negotiation,configurer,use,registered,extensions,only,boolean,use,registered,extensions,only,this,factory,set,use,registered,extensions,only,use,registered,extensions,only,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1506534768;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly)__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,content,negotiation,configurer,use,registered,extensions,only,boolean,use,registered,extensions,only,this,factory,set,use,registered,extensions,only,use,registered,extensions,only,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1530174524;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly)__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,content,negotiation,configurer,use,registered,extensions,only,boolean,use,registered,extensions,only,this,factory,set,use,registered,extensions,only,use,registered,extensions,only,return,this
ContentNegotiationConfigurer -> public void strategies(@Nullable List<ContentNegotiationStrategy> strategies);1499799657;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void strategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.factory.setStrategies(strategies)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,strategies,nullable,list,content,negotiation,strategy,strategies,this,factory,set,strategies,strategies
ContentNegotiationConfigurer -> public void strategies(@Nullable List<ContentNegotiationStrategy> strategies);1506534768;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void strategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.factory.setStrategies(strategies)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,strategies,nullable,list,content,negotiation,strategy,strategies,this,factory,set,strategies,strategies
ContentNegotiationConfigurer -> public void strategies(@Nullable List<ContentNegotiationStrategy> strategies);1530174524;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void strategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.factory.setStrategies(strategies)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,strategies,nullable,list,content,negotiation,strategy,strategies,this,factory,set,strategies,strategies
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1348666123;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1355313310;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1357248712;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1398960186;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1413848647;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1413988332;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1414005334;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1414031301;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1443560917;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factoryBean.setFavorPathExtension(favorPathExtension)__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,bean,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1443636308;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1446769889;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1446771757;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1467730834;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1490104706;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1490285806;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1491926110;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1496837955;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1498780456;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1499799657;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1506534768;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension);1530174524;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {_		this.factory.setFavorPathExtension(favorPathExtension)__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,content,negotiation,configurer,favor,path,extension,boolean,favor,path,extension,this,factory,set,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setUseJaf(boolean useJaf);1342834322;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Map);public ContentNegotiationConfigurer setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,map;public,content,negotiation,configurer,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setUseJaf(boolean useJaf);1342865802;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Map);public ContentNegotiationConfigurer setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,map;public,content,negotiation,configurer,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1348666123;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1355313310;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1357248712;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1398960186;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1413848647;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1413988332;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1414005334;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1414031301;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1443560917;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factoryBean.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,bean,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1443636308;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1446769889;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1446771757;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1467730834;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1490104706;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1490285806;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1491926110;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1496837955;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1498780456;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1499799657;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1506534768;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader);1530174524;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader)__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,content,negotiation,configurer,ignore,accept,header,boolean,ignore,accept,header,this,factory,set,ignore,accept,header,ignore,accept,header,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setDefaultContentType(MediaType defaultContentType);1342834322;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setDefaultContentType(MediaType defaultContentType);1342865802;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes);1496837955;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes);1498780456;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes);1499799657;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes);1506534768;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes);1530174524;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1398960186;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factoryBean.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,bean,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1413848647;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factoryBean.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,bean,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1413988332;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factoryBean.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,bean,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1414005334;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factoryBean.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,bean,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1414031301;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factoryBean.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,bean,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1443560917;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factoryBean.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,bean,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1443636308;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1446769889;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1446771757;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1467730834;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1490104706;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1490285806;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1491926110;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1496837955;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1498780456;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1499799657;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1506534768;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore);1530174524;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {_		this.factory.setIgnoreUnknownPathExtensions(ignore)__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,content,negotiation,configurer,ignore,unknown,path,extensions,boolean,ignore,this,factory,set,ignore,unknown,path,extensions,ignore,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1348666123;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1355313310;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1357248712;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1398960186;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1413848647;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1413988332;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1414005334;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1414031301;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1443560917;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #favorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #mediaTypes(Map);public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factoryBean.setUseJaf(useJaf)__		return this__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,media,types,map;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,bean,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1443636308;When {@link #favorPathExtension} is set, this property determines whether_to allow use of JAF (Java Activation Framework) to resolve a path_extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factory.setUseJaf(useJaf)__		return this__	};when,link,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1446769889;When {@link #favorPathExtension} is set, this property determines whether_to allow use of JAF (Java Activation Framework) to resolve a path_extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factory.setUseJaf(useJaf)__		return this__	};when,link,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1446771757;When {@link #favorPathExtension} is set, this property determines whether_to allow use of JAF (Java Activation Framework) to resolve a path_extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factory.setUseJaf(useJaf)__		return this__	};when,link,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer useJaf(boolean useJaf);1467730834;When {@link #favorPathExtension} is set, this property determines whether_to allow use of JAF (Java Activation Framework) to resolve a path_extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public ContentNegotiationConfigurer useJaf(boolean useJaf) {_		this.factory.setUseJaf(useJaf)__		return this__	};when,link,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,content,negotiation,configurer,use,jaf,boolean,use,jaf,this,factory,set,use,jaf,use,jaf,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer addMediaTypes(Map<String, MediaType> mediaTypes);1342834322;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public ContentNegotiationConfigurer addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,content,negotiation,configurer,add,media,types,map,string,media,type,media,types,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer addMediaTypes(Map<String, MediaType> mediaTypes);1342865802;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public ContentNegotiationConfigurer addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,content,negotiation,configurer,add,media,types,map,string,media,type,media,types,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1348666123;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.factoryBean.getMediaTypes().put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,factory,bean,get,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1355313310;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.factoryBean.getMediaTypes().put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,factory,bean,get,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1357248712;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1398960186;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1413848647;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1413988332;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1414005334;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1414031301;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1443560917;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1443636308;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. The path extension strategy will also try_{@link ServletContext#getMimeType} and JAF if it is present and is not_suppressed via {@link #useJaf}._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,the,path,extension,strategy,will,also,try,link,servlet,context,get,mime,type,and,jaf,if,it,is,present,and,is,not,suppressed,via,link,use,jaf,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1446769889;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and JAF (if present) to resolve path_extensions. To change this behavior see the {@link #useJaf} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,jaf,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1446771757;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and JAF (if present) to resolve path_extensions. To change this behavior see the {@link #useJaf} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,jaf,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1467730834;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and JAF (if present) to resolve path_extensions. To change this behavior see the {@link #useJaf} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,jaf,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1490104706;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1490285806;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,registered,extensions,only,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1491926110;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,registered,extensions,only,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1496837955;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,registered,extensions,only,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1498780456;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,registered,extensions,only,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1499799657;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,registered,extensions,only,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1506534768;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,registered,extensions,only,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType);1530174524;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path_extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property._@param extension the key to look up_@param mediaType the media type_@see #mediaTypes(Map)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {_		this.mediaTypes.put(extension, mediaType)__		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,media,type,factory,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,registered,extensions,only,property,param,extension,the,key,to,look,up,param,media,type,the,media,type,see,media,types,map,see,replace,media,types,map;public,content,negotiation,configurer,media,type,string,extension,media,type,media,type,this,media,types,put,extension,media,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1348666123;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1355313310;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1357248712;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1398960186;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1413848647;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1413988332;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1414005334;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type._<p>Note that this method achieves the same goal as {@code defaultContentTypeStrategy}, so both_shouldn't be used at the same time._@see #defaultContentTypeStrategy(org.springframework.web.accept.ContentNegotiationStrategy);public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type,p,note,that,this,method,achieves,the,same,goal,as,code,default,content,type,strategy,so,both,shouldn,t,be,used,at,the,same,time,see,default,content,type,strategy,org,springframework,web,accept,content,negotiation,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1414031301;Set the default content type to use when no content type was requested._<p>Note that internally this method creates and adds a_{@link org.springframework.web.accept.FixedContentNegotiationStrategy_FixedContentNegotiationStrategy}. Alternatively you can also provide a_custom strategy via {@link #defaultContentTypeStrategy}.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,was,requested,p,note,that,internally,this,method,creates,and,adds,a,link,org,springframework,web,accept,fixed,content,negotiation,strategy,fixed,content,negotiation,strategy,alternatively,you,can,also,provide,a,custom,strategy,via,link,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1443560917;Set the default content type to use when no content type was requested._<p>Note that internally this method creates and adds a_{@link org.springframework.web.accept.FixedContentNegotiationStrategy_FixedContentNegotiationStrategy}. Alternatively you can also provide a_custom strategy via {@link #defaultContentTypeStrategy}.;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factoryBean.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,was,requested,p,note,that,internally,this,method,creates,and,adds,a,link,org,springframework,web,accept,fixed,content,negotiation,strategy,fixed,content,negotiation,strategy,alternatively,you,can,also,provide,a,custom,strategy,via,link,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,bean,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1443636308;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factory.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1446769889;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factory.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1446771757;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factory.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1467730834;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factory.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1490104706;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factory.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType);1490285806;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) {_		this.factory.setDefaultContentType(defaultContentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,type,this,factory,set,default,content,type,default,content,type,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setFavorPathExtension(boolean favorPathExtension);1342834322;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setFavorPathExtension(boolean favorPathExtension);1342865802;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public ContentNegotiationConfigurer setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__		return this__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,content,negotiation,configurer,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1348666123;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1355313310;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1357248712;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1398960186;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1413848647;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1413988332;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1414005334;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1414031301;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1443560917;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factoryBean.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,bean,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1443636308;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1446769889;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1446771757;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1467730834;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1490104706;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1490285806;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1491926110;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer(ServletContext servletContext);1496837955;Class constructor with {@link javax.servlet.ServletContext}.;public ContentNegotiationConfigurer(ServletContext servletContext) {_		this.factory.setServletContext(servletContext)__	};class,constructor,with,link,javax,servlet,servlet,context;public,content,negotiation,configurer,servlet,context,servlet,context,this,factory,set,servlet,context,servlet,context
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1348666123;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.factoryBean.getMediaTypes().putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,factory,bean,get,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1355313310;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.factoryBean.getMediaTypes().putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,factory,bean,get,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1357248712;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1398960186;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1413848647;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1413988332;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1414005334;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1414031301;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1443560917;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #favorPathExtension(boolean)}.;public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,favor,path,extension,boolean;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1443636308;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1446769889;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1446771757;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1467730834;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1490104706;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1490285806;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes);1491926110;An alternative to {@link #mediaType}._@see #mediaType(String, MediaType)_@see #replaceMediaTypes(Map);public ContentNegotiationConfigurer mediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_		return this__	};an,alternative,to,link,media,type,see,media,type,string,media,type,see,replace,media,types,map;public,content,negotiation,configurer,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1348666123;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1355313310;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1357248712;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1398960186;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1413848647;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1413988332;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1414005334;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1414031301;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1443560917;Set the parameter name that can be used to determine the requested media type_if the {@link #favorParameter(boolean)} property is {@code true}._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factoryBean.setParameterName(parameterName)__		return this__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,favor,parameter,boolean,property,is,code,true,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,bean,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1443636308;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1446769889;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1446771757;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1467730834;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1490104706;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1490285806;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1491926110;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1496837955;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1498780456;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1499799657;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1506534768;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer parameterName(String parameterName);1530174524;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public ContentNegotiationConfigurer parameterName(String parameterName) {_		this.factory.setParameterName(parameterName)__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,content,negotiation,configurer,parameter,name,string,parameter,name,this,factory,set,parameter,name,parameter,name,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes);1491926110;Set the default content type(s) to use when no content type is requested_in order of priority.__<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end.__<p>By default this is not set.__@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {_		this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,types,this,factory,set,default,content,types,arrays,as,list,default,content,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes);1496837955;Set the default content type(s) to use when no content type is requested_in order of priority._<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {_		this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,types,this,factory,set,default,content,types,arrays,as,list,default,content,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes);1498780456;Set the default content type(s) to use when no content type is requested_in order of priority._<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {_		this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,types,this,factory,set,default,content,types,arrays,as,list,default,content,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes);1499799657;Set the default content type(s) to use when no content type is requested_in order of priority._<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {_		this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,types,this,factory,set,default,content,types,arrays,as,list,default,content,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes);1506534768;Set the default content type(s) to use when no content type is requested_in order of priority._<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {_		this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,types,this,factory,set,default,content,types,arrays,as,list,default,content,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes);1530174524;Set the default content type(s) to use when no content type is requested_in order of priority._<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end._<p>By default this is not set._@see #defaultContentTypeStrategy;public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {_		this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,strategy;public,content,negotiation,configurer,default,content,type,media,type,default,content,types,this,factory,set,default,content,types,arrays,as,list,default,content,types,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setFavorParameter(boolean favorParameter);1342834322;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Map)}._@see #setParameterName(String);public ContentNegotiationConfigurer setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,map,see,set,parameter,name,string;public,content,negotiation,configurer,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> public ContentNegotiationConfigurer setFavorParameter(boolean favorParameter);1342865802;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Map)}._@see #setParameterName(String);public ContentNegotiationConfigurer setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__		return this__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,map,see,set,parameter,name,string;public,content,negotiation,configurer,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter,return,this
ContentNegotiationConfigurer -> protected ContentNegotiationManager buildContentNegotiationManager();1506534768;Build a {@link ContentNegotiationManager} based on this configurer's settings._@since 4.3.12_@see ContentNegotiationManagerFactoryBean#getObject();protected ContentNegotiationManager buildContentNegotiationManager() {_		this.factory.addMediaTypes(this.mediaTypes)__		return this.factory.build()__	};build,a,link,content,negotiation,manager,based,on,this,configurer,s,settings,since,4,3,12,see,content,negotiation,manager,factory,bean,get,object;protected,content,negotiation,manager,build,content,negotiation,manager,this,factory,add,media,types,this,media,types,return,this,factory,build
ContentNegotiationConfigurer -> protected ContentNegotiationManager buildContentNegotiationManager();1530174524;Build a {@link ContentNegotiationManager} based on this configurer's settings._@since 4.3.12_@see ContentNegotiationManagerFactoryBean#getObject();protected ContentNegotiationManager buildContentNegotiationManager() {_		this.factory.addMediaTypes(this.mediaTypes)__		return this.factory.build()__	};build,a,link,content,negotiation,manager,based,on,this,configurer,s,settings,since,4,3,12,see,content,negotiation,manager,factory,bean,get,object;protected,content,negotiation,manager,build,content,negotiation,manager,this,factory,add,media,types,this,media,types,return,this,factory,build
