commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the exact list of strategies to use.  * <p><strong>Note:</strong> use of this method is mutually exclusive with  * use of all other setters in this class which customize a default, fixed  * set of strategies. See class level doc for more details.  * @param strategies the strategies to use  * @since 5.0  */ ;/**  * Set the exact list of strategies to use.  * <p><strong>Note:</strong> use of this method is mutually exclusive with  * use of all other setters in this class which customize a default, fixed  * set of strategies. See class level doc for more details.  * @param strategies the strategies to use  * @since 5.0  */ public void strategies(@Nullable List<ContentNegotiationStrategy> strategies) {     this.factory.setStrategies(strategies). }
true;public;1;4;/**  * Whether the path extension in the URL path should be used to determine  * the requested media type.  * <p>By default this is set to {@code true} in which case a request  * for {@code /hotels.pdf} will be interpreted as a request for  * {@code "application/pdf"} regardless of the 'Accept' header.  */ ;/**  * Whether the path extension in the URL path should be used to determine  * the requested media type.  * <p>By default this is set to {@code true} in which case a request  * for {@code /hotels.pdf} will be interpreted as a request for  * {@code "application/pdf"} regardless of the 'Accept' header.  */ public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {     this.factory.setFavorPathExtension(favorPathExtension).     return this. }
true;public;2;4;/**  * Add a mapping from a key, extracted from a path extension or a query  * parameter, to a MediaType. This is required in order for the parameter  * strategy to work. Any extensions explicitly registered here are also  * whitelisted for the purpose of Reflected File Download attack detection  * (see Spring Framework reference documentation for more details on RFD  * attack protection).  * <p>The path extension strategy will also try to use  * {@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path  * extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property.  * @param extension the key to look up  * @param mediaType the media type  * @see #mediaTypes(Map)  * @see #replaceMediaTypes(Map)  */ ;/**  * Add a mapping from a key, extracted from a path extension or a query  * parameter, to a MediaType. This is required in order for the parameter  * strategy to work. Any extensions explicitly registered here are also  * whitelisted for the purpose of Reflected File Download attack detection  * (see Spring Framework reference documentation for more details on RFD  * attack protection).  * <p>The path extension strategy will also try to use  * {@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path  * extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property.  * @param extension the key to look up  * @param mediaType the media type  * @see #mediaTypes(Map)  * @see #replaceMediaTypes(Map)  */ public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {     this.mediaTypes.put(extension, mediaType).     return this. }
true;public;1;6;/**  * An alternative to {@link #mediaType}.  * @see #mediaType(String, MediaType)  * @see #replaceMediaTypes(Map)  */ ;/**  * An alternative to {@link #mediaType}.  * @see #mediaType(String, MediaType)  * @see #replaceMediaTypes(Map)  */ public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes) {     if (mediaTypes != null) {         this.mediaTypes.putAll(mediaTypes).     }     return this. }
true;public;1;5;/**  * Similar to {@link #mediaType} but for replacing existing mappings.  * @see #mediaType(String, MediaType)  * @see #mediaTypes(Map)  */ ;/**  * Similar to {@link #mediaType} but for replacing existing mappings.  * @see #mediaType(String, MediaType)  * @see #mediaTypes(Map)  */ public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {     this.mediaTypes.clear().     mediaTypes(mediaTypes).     return this. }
true;public;1;4;/**  * Whether to ignore requests with path extension that cannot be resolved  * to any media type. Setting this to {@code false} will result in an  * {@code HttpMediaTypeNotAcceptableException} if there is no match.  * <p>By default this is set to {@code true}.  */ ;/**  * Whether to ignore requests with path extension that cannot be resolved  * to any media type. Setting this to {@code false} will result in an  * {@code HttpMediaTypeNotAcceptableException} if there is no match.  * <p>By default this is set to {@code true}.  */ public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {     this.factory.setIgnoreUnknownPathExtensions(ignore).     return this. }
true;public;1;4;/**  * When {@link #favorPathExtension} is set, this property determines whether  * to allow use of JAF (Java Activation Framework) to resolve a path  * extension to a specific MediaType.  * @deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}  * which has reverse behavior  */ ;/**  * When {@link #favorPathExtension} is set, this property determines whether  * to allow use of JAF (Java Activation Framework) to resolve a path  * extension to a specific MediaType.  * @deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}  * which has reverse behavior  */ @Deprecated public ContentNegotiationConfigurer useJaf(boolean useJaf) {     return this.useRegisteredExtensionsOnly(!useJaf). }
true;public;1;4;/**  * When {@link #favorPathExtension favorPathExtension} is set, this  * property determines whether to use only registered {@code MediaType} mappings  * to resolve a path extension to a specific MediaType.  * <p>By default this is not set in which case  * {@code PathExtensionContentNegotiationStrategy} will use defaults if available.  */ ;/**  * When {@link #favorPathExtension favorPathExtension} is set, this  * property determines whether to use only registered {@code MediaType} mappings  * to resolve a path extension to a specific MediaType.  * <p>By default this is not set in which case  * {@code PathExtensionContentNegotiationStrategy} will use defaults if available.  */ public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {     this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly).     return this. }
true;public;1;4;/**  * Whether a request parameter ("format" by default) should be used to  * determine the requested media type. For this option to work you must  * register {@link #mediaType(String, MediaType) media type mappings}.  * <p>By default this is set to {@code false}.  * @see #parameterName(String)  */ ;/**  * Whether a request parameter ("format" by default) should be used to  * determine the requested media type. For this option to work you must  * register {@link #mediaType(String, MediaType) media type mappings}.  * <p>By default this is set to {@code false}.  * @see #parameterName(String)  */ public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {     this.factory.setFavorParameter(favorParameter).     return this. }
true;public;1;4;/**  * Set the query parameter name to use when {@link #favorParameter} is on.  * <p>The default parameter name is {@code "format"}.  */ ;/**  * Set the query parameter name to use when {@link #favorParameter} is on.  * <p>The default parameter name is {@code "format"}.  */ public ContentNegotiationConfigurer parameterName(String parameterName) {     this.factory.setParameterName(parameterName).     return this. }
true;public;1;4;/**  * Whether to disable checking the 'Accept' request header.  * <p>By default this value is set to {@code false}.  */ ;/**  * Whether to disable checking the 'Accept' request header.  * <p>By default this value is set to {@code false}.  */ public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {     this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader).     return this. }
true;public;1;4;/**  * Set the default content type(s) to use when no content type is requested  * in order of priority.  * <p>If destinations are present that do not support any of the given media  * types, consider appending {@link MediaType#ALL} at the end.  * <p>By default this is not set.  * @see #defaultContentTypeStrategy  */ ;/**  * Set the default content type(s) to use when no content type is requested  * in order of priority.  * <p>If destinations are present that do not support any of the given media  * types, consider appending {@link MediaType#ALL} at the end.  * <p>By default this is not set.  * @see #defaultContentTypeStrategy  */ public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {     this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes)).     return this. }
true;public;1;4;/**  * Set a custom {@link ContentNegotiationStrategy} to use to determine  * the content type to use when no content type is requested.  * <p>By default this is not set.  * @since 4.1.2  * @see #defaultContentType  */ ;/**  * Set a custom {@link ContentNegotiationStrategy} to use to determine  * the content type to use when no content type is requested.  * <p>By default this is not set.  * @since 4.1.2  * @see #defaultContentType  */ public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {     this.factory.setDefaultContentTypeStrategy(defaultStrategy).     return this. }
true;protected;0;4;/**  * Build a {@link ContentNegotiationManager} based on this configurer's settings.  * @since 4.3.12  * @see ContentNegotiationManagerFactoryBean#getObject()  */ ;/**  * Build a {@link ContentNegotiationManager} based on this configurer's settings.  * @since 4.3.12  * @see ContentNegotiationManagerFactoryBean#getObject()  */ protected ContentNegotiationManager buildContentNegotiationManager() {     this.factory.addMediaTypes(this.mediaTypes).     return this.factory.build(). }
