commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;/**  * This resolver requires {@link InternalResourceView}.  */ ;/**  * This resolver requires {@link InternalResourceView}.  */ @Override protected Class<?> requiredViewClass() {     return InternalResourceView.class. }
true;public;1;3;/**  * Specify whether to always include the view rather than forward to it.  * <p>Default is "false". Switch this flag on to enforce the use of a  * Servlet include, even if a forward would be possible.  * @see InternalResourceView#setAlwaysInclude  */ ;/**  * Specify whether to always include the view rather than forward to it.  * <p>Default is "false". Switch this flag on to enforce the use of a  * Servlet include, even if a forward would be possible.  * @see InternalResourceView#setAlwaysInclude  */ public void setAlwaysInclude(boolean alwaysInclude) {     this.alwaysInclude = alwaysInclude. }
false;protected;1;9;;@Override protected AbstractUrlBasedView buildView(String viewName) throws Exception {     InternalResourceView view = (InternalResourceView) super.buildView(viewName).     if (this.alwaysInclude != null) {         view.setAlwaysInclude(this.alwaysInclude).     }     view.setPreventDispatchLoop(true).     return view. }
