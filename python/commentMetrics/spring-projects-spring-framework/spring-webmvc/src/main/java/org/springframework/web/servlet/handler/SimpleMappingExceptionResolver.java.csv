# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleMappingExceptionResolver -> protected Integer determineStatusCode(HttpServletRequest request, String viewName);1328020251;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or <code>null</code> for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,code,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> protected Integer determineStatusCode(HttpServletRequest request, String viewName);1337102166;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or <code>null</code> for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,code,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> protected Integer determineStatusCode(HttpServletRequest request, String viewName);1356735495;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> protected Integer determineStatusCode(HttpServletRequest request, String viewName);1366717989;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> protected Integer determineStatusCode(HttpServletRequest request, String viewName);1432125256;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> protected Integer determineStatusCode(HttpServletRequest request, String viewName);1467730834;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> protected Integer determineStatusCode(HttpServletRequest request, String viewName);1468949155;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, 			@Nullable Object handler, Exception ex);1496242568;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,_			@Nullable Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, 			@Nullable Object handler, Exception ex);1498780456;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,_			@Nullable Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	@Nullable 	protected ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1525532664;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Override_	@Nullable_	protected ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;override,nullable,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	@Nullable 	protected ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1529361191;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Override_	@Nullable_	protected ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;override,nullable,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	@Nullable 	protected ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1530174524;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Override_	@Nullable_	protected ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;override,nullable,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	@Nullable 	protected ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1530174524;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Override_	@Nullable_	protected ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;override,nullable,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1328020251;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1337102166;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1356735495;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1366717989;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1432125256;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1467730834;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1468949155;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1495868221;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1496242568;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1498780456;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1502974979;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1525532664;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1529361191;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1530174524;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> protected int getDepth(String exceptionMapping, Exception ex);1530174524;Return the depth to the superclass matching._<p>0 means ex matches exactly. Returns -1 if there's no match._Otherwise, returns depth. Lowest depth wins.;protected int getDepth(String exceptionMapping, Exception ex) {_		return getDepth(exceptionMapping, ex.getClass(), 0)__	};return,the,depth,to,the,superclass,matching,p,0,means,ex,matches,exactly,returns,1,if,there,s,no,match,otherwise,returns,depth,lowest,depth,wins;protected,int,get,depth,string,exception,mapping,exception,ex,return,get,depth,exception,mapping,ex,get,class,0
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, 			Object handler, 			Exception ex);1328020251;Actually resolve the given exception that got thrown during on handler execution, returning a ModelAndView that_represents a specific error page if appropriate. <p>May be overridden in subclasses, in order to apply specific_exception checks. Note that this template method will be invoked <i>after</i> checking whether this resolved applies_("mappedHandlers" etc), so an implementation may simply proceed with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen at the time of the exception (for example,_if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or <code>null</code> for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response,_			Object handler,_			Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,code,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, 			Object handler, 			Exception ex);1337102166;Actually resolve the given exception that got thrown during on handler execution, returning a ModelAndView that_represents a specific error page if appropriate. <p>May be overridden in subclasses, in order to apply specific_exception checks. Note that this template method will be invoked <i>after</i> checking whether this resolved applies_("mappedHandlers" etc), so an implementation may simply proceed with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen at the time of the exception (for example,_if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or <code>null</code> for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response,_			Object handler,_			Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,code,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, 			Object handler, 			Exception ex);1356735495;Actually resolve the given exception that got thrown during on handler execution, returning a ModelAndView that_represents a specific error page if appropriate. <p>May be overridden in subclasses, in order to apply specific_exception checks. Note that this template method will be invoked <i>after</i> checking whether this resolved applies_("mappedHandlers" etc), so an implementation may simply proceed with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time of the exception (for example,_if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response,_			Object handler,_			Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1337102166;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1356735495;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1366717989;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1432125256;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1467730834;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1468949155;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1495868221;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1496242568;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1498780456;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1502974979;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1525532664;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1529361191;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1530174524;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setExcludedExceptions(Class<?>... excludedExceptions);1530174524;Set one or more exceptions to be excluded from the exception mappings._Excluded exceptions are checked first and if one of them equals the actual_exception, the exception will remain unresolved._@param excludedExceptions one or more excluded exception types;public void setExcludedExceptions(Class<?>... excludedExceptions) {_		this.excludedExceptions = excludedExceptions__	};set,one,or,more,exceptions,to,be,excluded,from,the,exception,mappings,excluded,exceptions,are,checked,first,and,if,one,of,them,equals,the,actual,exception,the,exception,will,remain,unresolved,param,excluded,exceptions,one,or,more,excluded,exception,types;public,void,set,excluded,exceptions,class,excluded,exceptions,this,excluded,exceptions,excluded,exceptions
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1328020251;Set the name of the default error view. This view will be returned if no specific mapping was found. <p>Default is_none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1337102166;Set the name of the default error view. This view will be returned if no specific mapping was found. <p>Default is_none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1356735495;Set the name of the default error view. This view will be returned if no specific mapping was found. <p>Default is_none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1366717989;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1432125256;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1467730834;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1468949155;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1495868221;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1496242568;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1498780456;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1502974979;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1525532664;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1529361191;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1530174524;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public void setDefaultErrorView(String defaultErrorView);1530174524;Set the name of the default error view._This view will be returned if no specific mapping was found._<p>Default is none.;public void setDefaultErrorView(String defaultErrorView) {_		this.defaultErrorView = defaultErrorView__	};set,the,name,of,the,default,error,view,this,view,will,be,returned,if,no,specific,mapping,was,found,p,default,is,none;public,void,set,default,error,view,string,default,error,view,this,default,error,view,default,error,view
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1328020251;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1337102166;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1356735495;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1366717989;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1432125256;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1467730834;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1468949155;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1495868221;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1496242568;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1498780456;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1502974979;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1525532664;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1529361191;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1530174524;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,status,codes
SimpleMappingExceptionResolver -> public Map<String, Integer> getStatusCodesAsMap();1530174524;Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}._Keys are view names_ values are status codes.;public Map<String, Integer> getStatusCodesAsMap() {_		return Collections.unmodifiableMap(this.statusCodes)__	};returns,the,http,status,codes,provided,via,link,set,status,codes,properties,keys,are,view,names,values,are,status,codes;public,map,string,integer,get,status,codes,as,map,return,collections,unmodifiable,map,this,status,codes
SimpleMappingExceptionResolver -> protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1328020251;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or <code>null</code> if none found_@see #setExceptionMappings;protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && depth < deepest) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,code,if,none,found,see,set,exception,mappings;protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1337102166;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or <code>null</code> if none found_@see #setExceptionMappings;protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && depth < deepest) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,code,if,none,found,see,set,exception,mappings;protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1356735495;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && depth < deepest) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1366717989;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1432125256;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1467730834;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1468949155;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1495868221;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1496242568;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1498780456;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1502974979;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1525532664;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() +_					"], based on exception mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,for,exception,of,type,ex,get,class,get,name,based,on,exception,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1529361191;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' based on mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,based,on,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1530174524;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' based on mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,based,on,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String findMatchingViewName(Properties exceptionMappings, Exception ex);1530174524;Find a matching view name in the given exception mappings._@param exceptionMappings mappings between exception class names and error view names_@param ex the exception that got thrown during handler execution_@return the view name, or {@code null} if none found_@see #setExceptionMappings;@Nullable_	protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {_		String viewName = null__		String dominantMapping = null__		int deepest = Integer.MAX_VALUE__		for (Enumeration<?> names = exceptionMappings.propertyNames()_ names.hasMoreElements()_) {_			String exceptionMapping = (String) names.nextElement()__			int depth = getDepth(exceptionMapping, ex)__			if (depth >= 0 && (depth < deepest || (depth == deepest &&_					dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {_				deepest = depth__				dominantMapping = exceptionMapping__				viewName = exceptionMappings.getProperty(exceptionMapping)__			}_		}_		if (viewName != null && logger.isDebugEnabled()) {_			logger.debug("Resolving to view '" + viewName + "' based on mapping [" + dominantMapping + "]")__		}_		return viewName__	};find,a,matching,view,name,in,the,given,exception,mappings,param,exception,mappings,mappings,between,exception,class,names,and,error,view,names,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,view,name,or,code,null,if,none,found,see,set,exception,mappings;nullable,protected,string,find,matching,view,name,properties,exception,mappings,exception,ex,string,view,name,null,string,dominant,mapping,null,int,deepest,integer,for,enumeration,names,exception,mappings,property,names,names,has,more,elements,string,exception,mapping,string,names,next,element,int,depth,get,depth,exception,mapping,ex,if,depth,0,depth,deepest,depth,deepest,dominant,mapping,null,exception,mapping,length,dominant,mapping,length,deepest,depth,dominant,mapping,exception,mapping,view,name,exception,mappings,get,property,exception,mapping,if,view,name,null,logger,is,debug,enabled,logger,debug,resolving,to,view,view,name,based,on,mapping,dominant,mapping,return,view,name
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1328020251;Set the default HTTP status code that this exception resolver will apply if it resolves an error view and if there_is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request. It will not be set for an_include request, since the HTTP status cannot be modified from within an include._<p>If not specified, no status code will be applied, either leaving this to the controller or view, or keeping_the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1337102166;Set the default HTTP status code that this exception resolver will apply if it resolves an error view and if there_is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request. It will not be set for an_include request, since the HTTP status cannot be modified from within an include._<p>If not specified, no status code will be applied, either leaving this to the controller or view, or keeping_the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1356735495;Set the default HTTP status code that this exception resolver will apply if it resolves an error view and if there_is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request. It will not be set for an_include request, since the HTTP status cannot be modified from within an include._<p>If not specified, no status code will be applied, either leaving this to the controller or view, or keeping_the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1366717989;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1432125256;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1467730834;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1468949155;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1495868221;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1496242568;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1498780456;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1502974979;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1525532664;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1529361191;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1530174524;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode the HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,the,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> public void setDefaultStatusCode(int defaultStatusCode);1530174524;Set the default HTTP status code that this exception resolver will apply_if it resolves an error view and if there is no status code mapping defined._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, no status code will be applied, either leaving this to the_controller or view, or keeping the servlet engine's default of 200 (OK)._@param defaultStatusCode the HTTP status code value, for example 500_({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND})_@see #setStatusCodes(Properties);public void setDefaultStatusCode(int defaultStatusCode) {_		this.defaultStatusCode = defaultStatusCode__	};set,the,default,http,status,code,that,this,exception,resolver,will,apply,if,it,resolves,an,error,view,and,if,there,is,no,status,code,mapping,defined,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,no,status,code,will,be,applied,either,leaving,this,to,the,controller,or,view,or,keeping,the,servlet,engine,s,default,of,200,ok,param,default,status,code,the,http,status,code,value,for,example,500,link,http,servlet,response,or,404,link,http,servlet,response,see,set,status,codes,properties;public,void,set,default,status,code,int,default,status,code,this,default,status,code,default,status,code
SimpleMappingExceptionResolver -> protected String determineViewName(Exception ex, HttpServletRequest request);1328020251;Determine the view name for the given exception, searching the {@link #setExceptionMappings "exceptionMappings"},_using the {@link #setDefaultErrorView "defaultErrorView"} as fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or <code>null</code> if none found;protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,searching,the,link,set,exception,mappings,exception,mappings,using,the,link,set,default,error,view,default,error,view,as,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,code,if,none,found;protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> protected String determineViewName(Exception ex, HttpServletRequest request);1337102166;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or <code>null</code> if excluded or none found;protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,code,if,excluded,or,none,found;protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> protected String determineViewName(Exception ex, HttpServletRequest request);1356735495;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> protected String determineViewName(Exception ex, HttpServletRequest request);1366717989;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> protected String determineViewName(Exception ex, HttpServletRequest request);1432125256;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> protected String determineViewName(Exception ex, HttpServletRequest request);1467730834;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> protected String determineViewName(Exception ex, HttpServletRequest request);1468949155;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1495868221;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1496242568;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1498780456;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1502974979;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1525532664;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1529361191;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1530174524;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(@Nullable String exceptionAttribute);1530174524;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(@Nullable String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,nullable,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1328020251;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1337102166;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1356735495;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1366717989;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1432125256;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1467730834;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1468949155;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1495868221;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1496242568;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1498780456;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1502974979;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1525532664;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'")__			}_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,if,logger,is,debug,enabled,logger,debug,exposing,exception,as,model,attribute,this,exception,attribute,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1529361191;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1530174524;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex);1530174524;Return a ModelAndView for the given view name and exception._<p>The default implementation adds the specified exception attribute._Can be overridden in subclasses._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@return the ModelAndView instance_@see #setExceptionAttribute;protected ModelAndView getModelAndView(String viewName, Exception ex) {_		ModelAndView mv = new ModelAndView(viewName)__		if (this.exceptionAttribute != null) {_			mv.addObject(this.exceptionAttribute, ex)__		}_		return mv__	};return,a,model,and,view,for,the,given,view,name,and,exception,p,the,default,implementation,adds,the,specified,exception,attribute,can,be,overridden,in,subclasses,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,return,the,model,and,view,instance,see,set,exception,attribute;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,model,and,view,mv,new,model,and,view,view,name,if,this,exception,attribute,null,mv,add,object,this,exception,attribute,ex,return,mv
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1328020251;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match <code>javax.servlet.ServletException</code>_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,code,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1337102166;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match <code>javax.servlet.ServletException</code>_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,code,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1356735495;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1366717989;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1432125256;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1467730834;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1468949155;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1495868221;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1496242568;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1498780456;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1502974979;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1525532664;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1529361191;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1530174524;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> public void setExceptionMappings(Properties mappings);1530174524;Set the mappings between exception class names and error view names._The exception class name can be a substring, with no wildcard support at present._A value of "ServletException" would match {@code javax.servlet.ServletException}_and subclasses, for example._<p><b>NB:</b> Consider carefully how_specific the pattern is, and whether to include package information (which isn't mandatory)._For example, "Exception" will match nearly anything, and will probably hide other rules._"java.lang.Exception" would be correct if "Exception" was meant to define a rule for all_checked exceptions. With more unusual exception names such as "BaseBusinessException"_there's no need to use a FQN._@param mappings exception patterns (can also be fully qualified class names) as keys,_and error view names as values;public void setExceptionMappings(Properties mappings) {_		this.exceptionMappings = mappings__	};set,the,mappings,between,exception,class,names,and,error,view,names,the,exception,class,name,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,isn,t,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fqn,param,mappings,exception,patterns,can,also,be,fully,qualified,class,names,as,keys,and,error,view,names,as,values;public,void,set,exception,mappings,properties,mappings,this,exception,mappings,mappings
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1366717989;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1432125256;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1467730834;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1468949155;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> @Override 	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1495868221;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Override_	protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		_		String viewName = determineViewName(ex, request)__		if (viewName != null) {_			_			_			Integer statusCode = determineStatusCode(request, viewName)__			if (statusCode != null) {_				applyStatusCodeIfPossible(request, response, statusCode)__			}_			return getModelAndView(viewName, ex, request)__		}_		else {_			return null__		}_	};actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;override,protected,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,string,view,name,determine,view,name,ex,request,if,view,name,null,integer,status,code,determine,status,code,request,view,name,if,status,code,null,apply,status,code,if,possible,request,response,status,code,return,get,model,and,view,view,name,ex,request,else,return,null
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1328020251;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1337102166;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1356735495;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1366717989;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1432125256;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1467730834;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1468949155;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1495868221;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1496242568;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1498780456;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1502974979;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1525532664;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1529361191;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1530174524;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request);1530174524;Return a ModelAndView for the given request, view name and exception._<p>The default implementation delegates to {@link #getModelAndView(String, Exception)}._@param viewName the name of the error view_@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the ModelAndView instance;protected ModelAndView getModelAndView(String viewName, Exception ex, HttpServletRequest request) {_		return getModelAndView(viewName, ex)__	};return,a,model,and,view,for,the,given,request,view,name,and,exception,p,the,default,implementation,delegates,to,link,get,model,and,view,string,exception,param,view,name,the,name,of,the,error,view,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,model,and,view,instance;protected,model,and,view,get,model,and,view,string,view,name,exception,ex,http,servlet,request,request,return,get,model,and,view,view,name,ex
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1495868221;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1496242568;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1498780456;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1502974979;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1525532664;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" +_						ex.getClass().getName() + "]")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,for,exception,of,type,ex,get,class,get,name,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1529361191;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "'")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1530174524;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "'")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> @Nullable 	protected String determineViewName(Exception ex, HttpServletRequest request);1530174524;Determine the view name for the given exception, first checking against the_{@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the_{@link #setExceptionMappings "exceptionMappings"}, and finally using the_{@link #setDefaultErrorView "defaultErrorView"} as a fallback._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the resolved view name, or {@code null} if excluded or none found;@Nullable_	protected String determineViewName(Exception ex, HttpServletRequest request) {_		String viewName = null__		if (this.excludedExceptions != null) {_			for (Class<?> excludedEx : this.excludedExceptions) {_				if (excludedEx.equals(ex.getClass())) {_					return null__				}_			}_		}_		_		if (this.exceptionMappings != null) {_			viewName = findMatchingViewName(this.exceptionMappings, ex)__		}_		_		if (viewName == null && this.defaultErrorView != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving to default view '" + this.defaultErrorView + "'")__			}_			viewName = this.defaultErrorView__		}_		return viewName__	};determine,the,view,name,for,the,given,exception,first,checking,against,the,link,set,excluded,exceptions,class,excluded,execptions,then,searching,the,link,set,exception,mappings,exception,mappings,and,finally,using,the,link,set,default,error,view,default,error,view,as,a,fallback,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,resolved,view,name,or,code,null,if,excluded,or,none,found;nullable,protected,string,determine,view,name,exception,ex,http,servlet,request,request,string,view,name,null,if,this,excluded,exceptions,null,for,class,excluded,ex,this,excluded,exceptions,if,excluded,ex,equals,ex,get,class,return,null,if,this,exception,mappings,null,view,name,find,matching,view,name,this,exception,mappings,ex,if,view,name,null,this,default,error,view,null,if,logger,is,debug,enabled,logger,debug,resolving,to,default,view,this,default,error,view,view,name,this,default,error,view,return,view,name
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1328020251;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1337102166;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1356735495;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1366717989;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1432125256;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1467730834;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1468949155;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1495868221;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1496242568;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1498780456;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1502974979;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1525532664;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status code " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,code,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1529361191;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1530174524;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);1530174524;Apply the specified HTTP status code to the given response, if possible (that is,_if not executing within an include request)._@param request current HTTP request_@param response current HTTP response_@param statusCode the status code to apply_@see #determineStatusCode_@see #setDefaultStatusCode_@see HttpServletResponse#setStatus;protected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode) {_		if (!WebUtils.isIncludeRequest(request)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Applying HTTP status " + statusCode)__			}_			response.setStatus(statusCode)__			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, statusCode)__		}_	};apply,the,specified,http,status,code,to,the,given,response,if,possible,that,is,if,not,executing,within,an,include,request,param,request,current,http,request,param,response,current,http,response,param,status,code,the,status,code,to,apply,see,determine,status,code,see,set,default,status,code,see,http,servlet,response,set,status;protected,void,apply,status,code,if,possible,http,servlet,request,request,http,servlet,response,response,int,status,code,if,web,utils,is,include,request,request,if,logger,is,debug,enabled,logger,debug,applying,http,status,status,code,response,set,status,status,code,request,set,attribute,web,utils,status,code
SimpleMappingExceptionResolver -> public void setExceptionAttribute(String exceptionAttribute);1328020251;Set the name of the model attribute as which the exception should be exposed. Default is "exception". <p>This can be_either set to a different attribute name or to <code>null</code> for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,code,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(String exceptionAttribute);1337102166;Set the name of the model attribute as which the exception should be exposed. Default is "exception". <p>This can be_either set to a different attribute name or to <code>null</code> for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,code,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(String exceptionAttribute);1356735495;Set the name of the model attribute as which the exception should be exposed. Default is "exception". <p>This can be_either set to a different attribute name or to {@code null} for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(String exceptionAttribute);1366717989;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(String exceptionAttribute);1432125256;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(String exceptionAttribute);1467730834;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setExceptionAttribute(String exceptionAttribute);1468949155;Set the name of the model attribute as which the exception should be exposed._Default is "exception"._<p>This can be either set to a different attribute name or to {@code null}_for not exposing an exception attribute at all._@see #DEFAULT_EXCEPTION_ATTRIBUTE;public void setExceptionAttribute(String exceptionAttribute) {_		this.exceptionAttribute = exceptionAttribute__	};set,the,name,of,the,model,attribute,as,which,the,exception,should,be,exposed,default,is,exception,p,this,can,be,either,set,to,a,different,attribute,name,or,to,code,null,for,not,exposing,an,exception,attribute,at,all,see;public,void,set,exception,attribute,string,exception,attribute,this,exception,attribute,exception,attribute
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1328020251;Set the HTTP status code that this exception resolver will apply for a given resolved error view. Keys are_view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request. It will not be set for an include_request, since the HTTP status cannot be modified from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = new Integer(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,new,integer,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1337102166;Set the HTTP status code that this exception resolver will apply for a given resolved error view. Keys are_view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request. It will not be set for an include_request, since the HTTP status cannot be modified from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = new Integer(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,new,integer,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1356735495;Set the HTTP status code that this exception resolver will apply for a given resolved error view. Keys are_view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request. It will not be set for an include_request, since the HTTP status cannot be modified from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = new Integer(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,new,integer,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1366717989;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = new Integer(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,new,integer,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1432125256;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = new Integer(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,new,integer,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1467730834;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = new Integer(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,new,integer,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1468949155;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1495868221;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1496242568;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1498780456;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1502974979;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1525532664;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1529361191;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1530174524;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void setStatusCodes(Properties statusCodes);1530174524;Set the HTTP status code that this exception resolver will apply for a given_resolved error view. Keys are view names_ values are status codes._<p>Note that this error code will only get applied in case of a top-level request._It will not be set for an include request, since the HTTP status cannot be modified_from within an include._<p>If not specified, the default status code will be applied._@see #setDefaultStatusCode(int);public void setStatusCodes(Properties statusCodes) {_		for (Enumeration<?> enumeration = statusCodes.propertyNames()_ enumeration.hasMoreElements()_) {_			String viewName = (String) enumeration.nextElement()__			Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName))__			this.statusCodes.put(viewName, statusCode)__		}_	};set,the,http,status,code,that,this,exception,resolver,will,apply,for,a,given,resolved,error,view,keys,are,view,names,values,are,status,codes,p,note,that,this,error,code,will,only,get,applied,in,case,of,a,top,level,request,it,will,not,be,set,for,an,include,request,since,the,http,status,cannot,be,modified,from,within,an,include,p,if,not,specified,the,default,status,code,will,be,applied,see,set,default,status,code,int;public,void,set,status,codes,properties,status,codes,for,enumeration,enumeration,status,codes,property,names,enumeration,has,more,elements,string,view,name,string,enumeration,next,element,integer,status,code,integer,value,of,status,codes,get,property,view,name,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1328020251;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1337102166;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1356735495;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1366717989;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1432125256;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1467730834;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1468949155;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1495868221;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1496242568;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1498780456;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1502974979;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1525532664;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1529361191;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1530174524;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> public void addStatusCode(String viewName, int statusCode);1530174524;An alternative to {@link #setStatusCodes(Properties)} for use with_Java-based configuration.;public void addStatusCode(String viewName, int statusCode) {_		this.statusCodes.put(viewName, statusCode)__	};an,alternative,to,link,set,status,codes,properties,for,use,with,java,based,configuration;public,void,add,status,code,string,view,name,int,status,code,this,status,codes,put,view,name,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1495868221;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1496242568;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1498780456;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1502974979;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1525532664;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1529361191;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1530174524;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
SimpleMappingExceptionResolver -> @Nullable 	protected Integer determineStatusCode(HttpServletRequest request, String viewName);1530174524;Determine the HTTP status code to apply for the given error view._<p>The default implementation returns the status code for the given view name (specified through the_{@link #setStatusCodes(Properties) statusCodes} property), or falls back to the_{@link #setDefaultStatusCode defaultStatusCode} if there is no match._<p>Override this in a custom subclass to customize this behavior._@param request current HTTP request_@param viewName the name of the error view_@return the HTTP status code to use, or {@code null} for the servlet container's default_(200 in case of a standard error view)_@see #setDefaultStatusCode_@see #applyStatusCodeIfPossible;@Nullable_	protected Integer determineStatusCode(HttpServletRequest request, String viewName) {_		if (this.statusCodes.containsKey(viewName)) {_			return this.statusCodes.get(viewName)__		}_		return this.defaultStatusCode__	};determine,the,http,status,code,to,apply,for,the,given,error,view,p,the,default,implementation,returns,the,status,code,for,the,given,view,name,specified,through,the,link,set,status,codes,properties,status,codes,property,or,falls,back,to,the,link,set,default,status,code,default,status,code,if,there,is,no,match,p,override,this,in,a,custom,subclass,to,customize,this,behavior,param,request,current,http,request,param,view,name,the,name,of,the,error,view,return,the,http,status,code,to,use,or,code,null,for,the,servlet,container,s,default,200,in,case,of,a,standard,error,view,see,set,default,status,code,see,apply,status,code,if,possible;nullable,protected,integer,determine,status,code,http,servlet,request,request,string,view,name,if,this,status,codes,contains,key,view,name,return,this,status,codes,get,view,name,return,this,default,status,code
