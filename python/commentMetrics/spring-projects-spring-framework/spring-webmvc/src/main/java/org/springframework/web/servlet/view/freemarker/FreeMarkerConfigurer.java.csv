commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set a preconfigured Configuration to use for the FreeMarker web config, e.g. a  * shared one for web and email usage, set up via FreeMarkerConfigurationFactoryBean.  * If this is not set, FreeMarkerConfigurationFactory's properties (inherited by  * this class) have to be specified.  * @see org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean  */ ;/**  * Set a preconfigured Configuration to use for the FreeMarker web config, e.g. a  * shared one for web and email usage, set up via FreeMarkerConfigurationFactoryBean.  * If this is not set, FreeMarkerConfigurationFactory's properties (inherited by  * this class) have to be specified.  * @see org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean  */ public void setConfiguration(Configuration configuration) {     this.configuration = configuration. }
true;public;1;4;/**  * Initialize the {@link TaglibFactory} for the given ServletContext.  */ ;/**  * Initialize the {@link TaglibFactory} for the given ServletContext.  */ @Override public void setServletContext(ServletContext servletContext) {     this.taglibFactory = new TaglibFactory(servletContext). }
true;public;0;6;/**  * Initialize FreeMarkerConfigurationFactory's Configuration  * if not overridden by a preconfigured FreeMarker Configuration.  * <p>Sets up a ClassTemplateLoader to use for loading Spring macros.  * @see #createConfiguration  * @see #setConfiguration  */ ;/**  * Initialize FreeMarkerConfigurationFactory's Configuration  * if not overridden by a preconfigured FreeMarker Configuration.  * <p>Sets up a ClassTemplateLoader to use for loading Spring macros.  * @see #createConfiguration  * @see #setConfiguration  */ @Override public void afterPropertiesSet() throws IOException, TemplateException {     if (this.configuration == null) {         this.configuration = createConfiguration().     } }
true;protected;1;4;/**  * This implementation registers an additional ClassTemplateLoader  * for the Spring-provided macros, added to the end of the list.  */ ;/**  * This implementation registers an additional ClassTemplateLoader  * for the Spring-provided macros, added to the end of the list.  */ @Override protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {     templateLoaders.add(new ClassTemplateLoader(FreeMarkerConfigurer.class, "")). }
true;public;0;5;/**  * Return the Configuration object wrapped by this bean.  */ ;/**  * Return the Configuration object wrapped by this bean.  */ @Override public Configuration getConfiguration() {     Assert.state(this.configuration != null, "No Configuration available").     return this.configuration. }
true;public;0;5;/**  * Return the TaglibFactory object wrapped by this bean.  */ ;/**  * Return the TaglibFactory object wrapped by this bean.  */ @Override public TaglibFactory getTaglibFactory() {     Assert.state(this.taglibFactory != null, "No TaglibFactory available").     return this.taglibFactory. }
