commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the URL of the resource that this view wraps.  * The URL must be appropriate for the concrete View implementation.  */ ;/**  * Set the URL of the resource that this view wraps.  * The URL must be appropriate for the concrete View implementation.  */ public void setUrl(@Nullable String url) {     this.url = url. }
true;public;0;4;/**  * Return the URL of the resource that this view wraps.  */ ;/**  * Return the URL of the resource that this view wraps.  */ @Nullable public String getUrl() {     return this.url. }
false;public;0;6;;@Override public void afterPropertiesSet() throws Exception {     if (isUrlRequired() && getUrl() == null) {         throw new IllegalArgumentException("Property 'url' is required").     } }
true;protected;0;3;/**  * Return whether the 'url' property is required.  * <p>The default implementation returns {@code true}.  * This can be overridden in subclasses.  */ ;/**  * Return whether the 'url' property is required.  * <p>The default implementation returns {@code true}.  * This can be overridden in subclasses.  */ protected boolean isUrlRequired() {     return true. }
true;public;1;3;/**  * Check whether the underlying resource that the configured URL points to  * actually exists.  * @param locale the desired Locale that we're looking for  * @return {@code true} if the resource exists (or is assumed to exist).  * {@code false} if we know that it does not exist  * @throws Exception if the resource exists but is invalid (e.g. could not be parsed)  */ ;/**  * Check whether the underlying resource that the configured URL points to  * actually exists.  * @param locale the desired Locale that we're looking for  * @return {@code true} if the resource exists (or is assumed to exist).  * {@code false} if we know that it does not exist  * @throws Exception if the resource exists but is invalid (e.g. could not be parsed)  */ public boolean checkResource(Locale locale) throws Exception {     return true. }
false;public;0;4;;@Override public String toString() {     return super.toString() + ". URL [" + getUrl() + "]". }
