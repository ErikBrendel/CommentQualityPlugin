commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static Collection<ParamExpression> parseExpressions(String... params) {     Set<ParamExpression> expressions = new LinkedHashSet<>().     for (String param : params) {         expressions.add(new ParamExpression(param)).     }     return expressions. }
true;public;0;3;/**  * Return the contained request parameter expressions.  */ ;/**  * Return the contained request parameter expressions.  */ public Set<NameValueExpression<String>> getExpressions() {     return new LinkedHashSet<>(this.expressions). }
false;protected;0;4;;@Override protected Collection<ParamExpression> getContent() {     return this.expressions. }
false;protected;0;4;;@Override protected String getToStringInfix() {     return " && ". }
true;public;1;6;/**  * Returns a new instance with the union of the param expressions  * from "this" and the "other" instance.  */ ;/**  * Returns a new instance with the union of the param expressions  * from "this" and the "other" instance.  */ @Override public ParamsRequestCondition combine(ParamsRequestCondition other) {     Set<ParamExpression> set = new LinkedHashSet<>(this.expressions).     set.addAll(other.expressions).     return new ParamsRequestCondition(set). }
true;public;1;10;/**  * Returns "this" instance if the request matches all param expressions.  * or {@code null} otherwise.  */ ;/**  * Returns "this" instance if the request matches all param expressions.  * or {@code null} otherwise.  */ @Override @Nullable public ParamsRequestCondition getMatchingCondition(HttpServletRequest request) {     for (ParamExpression expression : this.expressions) {         if (!expression.match(request)) {             return null.         }     }     return this. }
true;public;2;8;/**  * Compare to another condition based on parameter expressions. A condition  * is considered to be a more specific match, if it has:  * <ol>  * <li>A greater number of expressions.  * <li>A greater number of non-negated expressions with a concrete value.  * </ol>  * <p>It is assumed that both instances have been obtained via  * {@link #getMatchingCondition(HttpServletRequest)} and each instance  * contains the matching parameter expressions only or is otherwise empty.  */ ;/**  * Compare to another condition based on parameter expressions. A condition  * is considered to be a more specific match, if it has:  * <ol>  * <li>A greater number of expressions.  * <li>A greater number of non-negated expressions with a concrete value.  * </ol>  * <p>It is assumed that both instances have been obtained via  * {@link #getMatchingCondition(HttpServletRequest)} and each instance  * contains the matching parameter expressions only or is otherwise empty.  */ @Override public int compareTo(ParamsRequestCondition other, HttpServletRequest request) {     int result = other.expressions.size() - this.expressions.size().     if (result != 0) {         return result.     }     return (int) (getValueMatchCount(other.expressions) - getValueMatchCount(this.expressions)). }
false;private;1;3;;private long getValueMatchCount(Set<ParamExpression> expressions) {     return expressions.stream().filter(e -> e.getValue() != null && !e.isNegated()).count(). }
false;protected;0;4;;@Override protected boolean isCaseSensitiveName() {     return true. }
false;protected;1;4;;@Override protected String parseValue(String valueExpression) {     return valueExpression. }
false;protected;1;5;;@Override protected boolean matchName(HttpServletRequest request) {     return (WebUtils.hasSubmitParameter(request, this.name) || request.getParameterMap().containsKey(this.name)). }
false;protected;1;4;;@Override protected boolean matchValue(HttpServletRequest request) {     return ObjectUtils.nullSafeEquals(this.value, request.getParameter(this.name)). }
