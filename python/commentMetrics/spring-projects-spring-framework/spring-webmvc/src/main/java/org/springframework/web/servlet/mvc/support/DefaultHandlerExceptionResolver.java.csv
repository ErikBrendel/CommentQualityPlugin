# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1495868221;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496242568;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where an @{@link RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,link,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, 			HttpServletRequest request, HttpServletResponse response) throws IOException;1347316003;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex,_			HttpServletRequest request, HttpServletResponse response) throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, 			HttpServletRequest request, HttpServletResponse response) throws IOException;1355313310;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex,_			HttpServletRequest request, HttpServletResponse response) throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, 			HttpServletRequest request, HttpServletResponse response) throws IOException;1356735495;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex,_			HttpServletRequest request, HttpServletResponse response) throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, 			HttpServletRequest request, HttpServletResponse response) throws IOException;1380132768;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex,_			HttpServletRequest request, HttpServletResponse response) throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, 			HttpServletRequest request, HttpServletResponse response) throws IOException;1413848647;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex,_			HttpServletRequest request, HttpServletResponse response) throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, 			HttpServletRequest request, HttpServletResponse response) throws IOException;1434398959;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex,_			HttpServletRequest request, HttpServletResponse response) throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(ex.getErrorStatus().orElse(HttpStatus.BAD_REQUEST).value())__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,ex,get,error,status,or,else,http,status,value,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to convert request element: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,convert,request,element,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the ConversionNotSupportedException could be_rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,conversion,not,supported,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion cannot occur._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the ConversionNotSupportedException could be_rethrown as-is._@param ex the ConversionNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,cannot,occur,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,conversion,not,supported,exception,could,be,rethrown,as,is,param,ex,the,conversion,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,conversion,not,supported,conversion,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where a_{@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could_be rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to write HTTP message: " + ex)__		}_		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,write,http,message,ex,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where a_{@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could_be rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where a_{@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMessageNotWritableException could_be rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,message,not,writable,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where a_{@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot write to a HTTP request._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMessageNotWritableException could_be rethrown as-is._@param ex the HttpMessageNotWritableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		sendServerError(ex, request, response)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,write,to,a,http,request,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,message,not,writable,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,writable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,writable,http,message,not,writable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,send,server,error,ex,request,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {_ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1328020251;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1341955933;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1345563131;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1345566917;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1346090766;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1347316003;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1355313310;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1356735495;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1380132768;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1413848647;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1434398959;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1438078482;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1460021854;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1467726769;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1473903270;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1477665930;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1491384686;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1494009848;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1495868221;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1496242568;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1496837955;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1502974979;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1517457790;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1519937579;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1525517218;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1525532664;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1529361191;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1530174524;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1532985973;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1532986236;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1534272160;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1534319871;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1537179939;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered
DefaultHandlerExceptionResolver -> public DefaultHandlerExceptionResolver();1540224798;Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}.;public DefaultHandlerExceptionResolver() {_		setOrder(Ordered.LOWEST_PRECEDENCE)__		setWarnLogCategory(getClass().getName())__	};sets,the,linkplain,set,order,int,order,to,link;public,default,handler,exception,resolver,set,order,ordered,set,warn,log,category,get,class,get,name
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case when a required parameter is missing._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingServletRequestParameterException_could be rethrown as-is._@param ex the MissingServletRequestParameterException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestParameter(MissingServletRequestParameterException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,required,parameter,is,missing,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,servlet,request,parameter,exception,could,be,rethrown,as,is,param,ex,the,missing,servlet,request,parameter,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,parameter,missing,servlet,request,parameter,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case when a declared path variable does not match any extracted URI variable._<p>The default implementation sends an HTTP 500 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the MissingPathVariableException_could be rethrown as-is._@param ex the MissingPathVariableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2;protected ModelAndView handleMissingPathVariable(MissingPathVariableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,a,declared,path,variable,does,not,match,any,extracted,uri,variable,p,the,default,implementation,sends,an,http,500,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,missing,path,variable,exception,could,be,rethrown,as,is,param,ex,the,missing,path,variable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2;protected,model,and,view,handle,missing,path,variable,missing,path,variable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleTypeMismatch(TypeMismatchException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case when a {@link org.springframework.web.bind.WebDataBinder} conversion error occurs._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the TypeMismatchException could be rethrown as-is._@param ex the TypeMismatchException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleTypeMismatch(TypeMismatchException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to bind request element: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,a,link,org,springframework,web,bind,web,data,binder,conversion,error,occurs,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,type,mismatch,exception,could,be,rethrown,as,is,param,ex,the,type,mismatch,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,type,mismatch,type,mismatch,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,bind,request,element,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__ 		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where an argument annotated with {@code @Valid} such as_an {@link RequestBody} or {@link RequestPart} argument fails validation._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMethodArgumentNotValidException(MethodArgumentNotValidException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,argument,annotated,with,code,valid,such,as,an,link,request,body,or,link,request,part,argument,fails,validation,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,method,argument,not,valid,exception,method,argument,not,valid,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error,_sets the "Accept" header, and returns an empty {@code ModelAndView}. Alternatively, a fallback_view could be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found for the PUT or POSTed content._<p>The default implementation sends an HTTP 415 error, sets the "Accept" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could_be chosen, or the HttpMediaTypeNotSupportedException could be rethrown as-is._@param ex the HttpMediaTypeNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)__		List<MediaType> mediaTypes = ex.getSupportedMediaTypes()__		if (!CollectionUtils.isEmpty(mediaTypes)) {_			response.setHeader("Accept", MediaType.toString(mediaTypes))__		}_		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,for,the,put,or,posted,content,p,the,default,implementation,sends,an,http,415,error,sets,the,accept,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,supported,http,media,type,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,list,media,type,media,types,ex,get,supported,media,types,if,collection,utils,is,empty,media,types,response,set,header,accept,media,type,to,string,media,types,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (logger.isWarnEnabled()) {_			logger.warn("Failed to read HTTP message: " + ex)__		}_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,logger,is,warn,enabled,logger,warn,failed,to,read,http,message,ex,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotSupportedException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMessageNotReadableException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,message,not,readable,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where a {@linkplain org.springframework.http.converter.HttpMessageConverter message converter}_cannot read from a HTTP request._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMessageNotReadableException could be_rethrown as-is._@param ex the HttpMessageNotReadableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleHttpMessageNotReadable(HttpMessageNotReadableException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,a,linkplain,org,springframework,http,converter,http,message,converter,message,converter,cannot,read,from,a,http,request,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,message,not,readable,exception,could,be,rethrown,as,is,param,ex,the,http,message,not,readable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,http,message,not,readable,http,message,not,readable,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1495868221;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496242568;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where no handler was found during the dispatch._<p>The default implementation sends an HTTP 404 error and returns an empty_{@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,implementation,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._An HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},_or a {@code javax.servlet.http.Part} argument is required but is missing._<p>By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError};protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,request,part,request,part,a,link,multipart,file,or,a,code,javax,servlet,http,part,argument,is,required,but,is,missing,p,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error;protected,model,and,view,handle,missing,servlet,request,part,exception,missing,servlet,request,part,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where no request handler method was found._<p>The default implementation logs a warning, sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoSuchRequestHandlingMethodException could be rethrown as-is._@param ex the NoSuchRequestHandlingMethodException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethodException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,p,the,default,implementation,logs,a,warning,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,such,request,handling,method,exception,could,be,rethrown,as,is,param,ex,the,no,such,request,handling,method,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,no,such,request,handling,method,no,such,request,handling,method,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, HttpServletRequest request, 	                                           HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where no handler was found during the dispatch._<p>The default sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, HttpServletRequest request,_	                                           HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, HttpServletRequest request, 	                                           HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where no handler was found during the dispatch._<p>The default sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, HttpServletRequest request,_	                                           HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, HttpServletRequest request, 	                                           HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where no handler was found during the dispatch._<p>The default sends an HTTP 404 error, and returns_an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the NoHandlerFoundException could be rethrown as-is._@param ex the NoHandlerFoundException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.0;protected ModelAndView handleNoHandlerFoundException(NoHandlerFoundException ex, HttpServletRequest request,_	                                           HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_NOT_FOUND)__		return new ModelAndView()__	};handle,the,case,where,no,handler,was,found,during,the,dispatch,p,the,default,sends,an,http,404,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,no,handler,found,exception,could,be,rethrown,as,is,param,ex,the,no,handler,found,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,0;protected,model,and,view,handle,no,handler,found,exception,no,handler,found,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}_were found that were acceptable for the client (expressed via the {@code Accept} header._<p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException_could be rethrown as-is._@param ex the HttpMediaTypeNotAcceptableException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE)__		return new ModelAndView()__	};handle,the,case,where,no,linkplain,org,springframework,http,converter,http,message,converter,message,converters,were,found,that,were,acceptable,for,the,client,expressed,via,the,code,accept,header,p,the,default,implementation,sends,an,http,406,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,media,type,not,acceptable,exception,could,be,rethrown,as,is,param,ex,the,http,media,type,not,acceptable,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,media,type,not,acceptable,http,media,type,not,acceptable,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where no request handler method was found for the particular HTTP request method._<p>The default implementation logs a warning, sends an HTTP 405 error, sets the "Allow" header,_and returns an empty {@code ModelAndView}. Alternatively, a fallback view could be chosen,_or the HttpRequestMethodNotSupportedException could be rethrown as-is._@param ex the HttpRequestMethodNotSupportedException to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		pageNotFoundLogger.warn(ex.getMessage())__		String[] supportedMethods = ex.getSupportedMethods()__		if (supportedMethods != null) {_			response.setHeader("Allow", StringUtils.arrayToDelimitedString(supportedMethods, ", "))__		}_		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,where,no,request,handler,method,was,found,for,the,particular,http,request,method,p,the,default,implementation,logs,a,warning,sends,an,http,405,error,sets,the,allow,header,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,http,request,method,not,supported,exception,could,be,rethrown,as,is,param,ex,the,http,request,method,not,supported,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,http,request,method,not,supported,http,request,method,not,supported,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,page,not,found,logger,warn,ex,get,message,string,supported,methods,ex,get,supported,methods,if,supported,methods,null,response,set,header,allow,string,utils,array,to,delimited,string,supported,methods,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1495868221;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496242568;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1496837955;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1502974979;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1517457790;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isErrorEnabled()) {_			logger.error("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,error,enabled,logger,error,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1519937579;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isDebugEnabled()) {_			logger.debug("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,debug,enabled,logger,debug,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525517218;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isDebugEnabled()) {_			logger.debug("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,debug,enabled,logger,debug,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1525532664;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isDebugEnabled()) {_			logger.debug("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,debug,enabled,logger,debug,async,timeout,for,request,get,method,request,get,request,uri,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1529361191;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,warn,enabled,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1530174524;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,warn,enabled,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532985973;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,if,logger,is,warn,enabled,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1532986236;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError()_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534272160;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1534319871;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1537179939;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException;1540224798;Handle the case where an async request timed out._<p>The default implementation sends an HTTP 503 error._@param ex the {@link AsyncRequestTimeoutException }to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from {@link HttpServletResponse#sendError}_@since 4.2.8;protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {__		if (!response.isCommitted()) {_			response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE)__		}_		else {_			logger.warn("Async request timed out")__		}_		return new ModelAndView()__	};handle,the,case,where,an,async,request,timed,out,p,the,default,implementation,sends,an,http,503,error,param,ex,the,link,async,request,timeout,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,link,http,servlet,response,send,error,since,4,2,8;protected,model,and,view,handle,async,request,timeout,exception,async,request,timeout,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,ioexception,if,response,is,committed,response,send,error,http,servlet,response,else,logger,warn,async,request,timed,out,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {_		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleBindException(BindException ex, HttpServletRequest request, 			HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method_argument has binding or validation errors and is not followed by another_method argument of type {@link BindingResult}._By default, an HTTP 400 error is sent back to the client._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,_			HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,where,an,linkplain,model,attribute,model,attribute,method,argument,has,binding,or,validation,errors,and,is,not,followed,by,another,method,argument,of,type,link,binding,result,by,default,an,http,400,error,is,sent,back,to,the,client,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,bind,exception,bind,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1328020251;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1341955933;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345563131;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1345566917;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1346090766;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1347316003;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1355313310;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1356735495;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1380132768;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1413848647;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1434398959;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST)__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1438078482;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1460021854;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1467726769;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1473903270;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1477665930;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1491384686;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1494009848;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1495868221;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException;1496242568;Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie._<p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}._Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is._@param ex the exception to be handled_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler_@return an empty ModelAndView indicating the exception was handled_@throws IOException potentially thrown from response.sendError();protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {__		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage())__		return new ModelAndView()__	};handle,the,case,when,an,unrecoverable,binding,exception,occurs,e,g,required,header,required,cookie,p,the,default,implementation,sends,an,http,400,error,and,returns,an,empty,code,model,and,view,alternatively,a,fallback,view,could,be,chosen,or,the,exception,could,be,rethrown,as,is,param,ex,the,exception,to,be,handled,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,return,an,empty,model,and,view,indicating,the,exception,was,handled,throws,ioexception,potentially,thrown,from,response,send,error;protected,model,and,view,handle,servlet,request,binding,exception,servlet,request,binding,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,ioexception,response,send,error,http,servlet,response,ex,get,message,return,new,model,and,view
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1438078482;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1460021854;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1467726769;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1473903270;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1477665930;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1491384686;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1494009848;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1495868221;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1496242568;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1496837955;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1502974979;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1517457790;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1519937579;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {___		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1525517218;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1525532664;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1529361191;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1530174524;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1532985973;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1532986236;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1534272160;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1534319871;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1537179939;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
DefaultHandlerExceptionResolver -> protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response) 			throws IOException;1540224798;Invoked to send a server error. Sets the status to 500 and also sets the_request attribute "javax.servlet.error.exception" to the Exception.;protected void sendServerError(Exception ex, HttpServletRequest request, HttpServletResponse response)_			throws IOException {__		request.setAttribute("javax.servlet.error.exception", ex)__		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)__	};invoked,to,send,a,server,error,sets,the,status,to,500,and,also,sets,the,request,attribute,javax,servlet,error,exception,to,the,exception;protected,void,send,server,error,exception,ex,http,servlet,request,request,http,servlet,response,response,throws,ioexception,request,set,attribute,javax,servlet,error,exception,ex,response,send,error,http,servlet,response
