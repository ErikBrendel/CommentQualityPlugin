# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1495868221;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1496837955;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1508508612;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1515624523;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {__		_		String previous__		do {_			previous = lookupPath__			lookupPath = StringUtils.replace(lookupPath, "//", "/")__		} while (!lookupPath.equals(previous))___		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,string,previous,do,previous,lookup,path,lookup,path,string,utils,replace,lookup,path,while,lookup,path,equals,previous,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1518772998;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {__		_		String previous__		do {_			previous = lookupPath__			lookupPath = StringUtils.replace(lookupPath, "//", "/")__		} while (!lookupPath.equals(previous))___		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			matchingPatterns.sort(patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,string,previous,do,previous,lookup,path,lookup,path,string,utils,replace,lookup,path,while,lookup,path,equals,previous,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,matching,patterns,sort,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1519588127;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {__		_		String previous__		do {_			previous = lookupPath__			lookupPath = StringUtils.replace(lookupPath, "//", "/")__		} while (!lookupPath.equals(previous))___		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			matchingPatterns.sort(patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,string,previous,do,previous,lookup,path,lookup,path,string,utils,replace,lookup,path,while,lookup,path,equals,previous,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,matching,patterns,sort,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1520260016;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {__		_		String previous__		do {_			previous = lookupPath__			lookupPath = StringUtils.replace(lookupPath, "//", "/")__		} while (!lookupPath.equals(previous))___		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			matchingPatterns.sort(patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,string,previous,do,previous,lookup,path,lookup,path,string,utils,replace,lookup,path,while,lookup,path,equals,previous,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,matching,patterns,sort,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1522843494;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {__		_		String previous__		do {_			previous = lookupPath__			lookupPath = StringUtils.replace(lookupPath, "//", "/")__		} while (!lookupPath.equals(previous))___		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			matchingPatterns.sort(patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,string,previous,do,previous,lookup,path,lookup,path,string,utils,replace,lookup,path,while,lookup,path,equals,previous,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,matching,patterns,sort,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1529361191;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {__		_		String previous__		do {_			previous = lookupPath__			lookupPath = StringUtils.replace(lookupPath, "//", "/")__		} while (!lookupPath.equals(previous))___		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			matchingPatterns.sort(patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				return pathMapping + resolved__			}_		}__		if (logger.isTraceEnabled()) {_			logger.trace("No match for \"" + lookupPath + "\"")__		}__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,string,previous,do,previous,lookup,path,lookup,path,string,utils,replace,lookup,path,while,lookup,path,equals,previous,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,matching,patterns,sort,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,return,path,mapping,resolved,if,logger,is,trace,enabled,logger,trace,no,match,for,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForLookupPath(String lookupPath);1530174524;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForLookupPath(String lookupPath) {__		_		String previous__		do {_			previous = lookupPath__			lookupPath = StringUtils.replace(lookupPath, "//", "/")__		} while (!lookupPath.equals(previous))___		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			matchingPatterns.sort(patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				return pathMapping + resolved__			}_		}__		if (logger.isTraceEnabled()) {_			logger.trace("No match for \"" + lookupPath + "\"")__		}__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,lookup,path,string,lookup,path,string,previous,do,previous,lookup,path,lookup,path,string,utils,replace,lookup,path,while,lookup,path,equals,previous,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,matching,patterns,sort,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,return,path,mapping,resolved,if,logger,is,trace,enabled,logger,trace,no,match,for,lookup,path,return,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1495868221;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1496837955;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1508508612;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1515624523;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1518772998;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1519588127;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1520260016;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		if (prefixIndex >= suffixIndex) {_			return null__		}_		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,if,prefix,index,suffix,index,return,null,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1522843494;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		if (prefixIndex >= suffixIndex) {_			return null__		}_		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,if,prefix,index,suffix,index,return,null,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1529361191;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		if (prefixIndex >= suffixIndex) {_			return null__		}_		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,if,prefix,index,suffix,index,return,null,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> @Nullable 	public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1530174524;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;@Nullable_	public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		if (prefixIndex >= suffixIndex) {_			return null__		}_		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;nullable,public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,if,prefix,index,suffix,index,return,null,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1468415682;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1481552090;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1486634978;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1486635693;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1495868221;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1496837955;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1508508612;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1515624523;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1518772998;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1519588127;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1520260016;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1522843494;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1529361191;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1530174524;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1398458972;@return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1401238462;@return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1409804208;@return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1409949973;@return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1413311133;@return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1413511286;@return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1413848647;@return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1414829614;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1421836543;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1421964500;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1422979675;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1426267113;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1440504723;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1441728690;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1450275875;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1450277942;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1450293581;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1458843770;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public UrlPathHelper getPathHelper();1467730834;Return the configured {@code UrlPathHelper}.;public UrlPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,url,path,helper;public,url,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public boolean isAutodetect();1398458972;@return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1401238462;@return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1409804208;@return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1409949973;@return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1413311133;@return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1413511286;@return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1413848647;@return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1414829614;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1421836543;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1421964500;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1422979675;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1426267113;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1440504723;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1441728690;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1450275875;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1450277942;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1450293581;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1458843770;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1467730834;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1468415682;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1481552090;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1486634978;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1486635693;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1495868221;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1496837955;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1508508612;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1515624523;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1518772998;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1519588127;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1520260016;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1522843494;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1529361191;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1530174524;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1398458972;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use.__<p>It is expected the given path is what Spring MVC would use for request_mapping purposes, i.e. excluding context and servlet path portions.__@param lookupPath the lookup path to check_@return the resolved public URL path or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = handler.createResourceResolverChain()__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,handler,create,resource,resolver,chain,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1401238462;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use.__<p>It is expected the given path is what Spring MVC would use for request_mapping purposes, i.e. excluding context and servlet path portions.__@param lookupPath the lookup path to check_@return the resolved public URL path or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1409804208;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use.__<p>It is expected the given path is what Spring MVC would use for request_mapping purposes, i.e. excluding context and servlet path portions.__@param lookupPath the lookup path to check_@return the resolved public URL path or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1409949973;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use.__<p>It is expected the given path is what Spring MVC would use for request_mapping purposes, i.e. excluding context and servlet path portions.__@param lookupPath the lookup path to check_@return the resolved public URL path or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1413311133;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use.__<p>It is expected the given path is what Spring MVC would use for request_mapping purposes, i.e. excluding context and servlet path portions.__@param lookupPath the lookup path to check_@return the resolved public URL path or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1413511286;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use.__<p>It is expected the given path is what Spring MVC would use for request_mapping purposes, i.e. excluding context and servlet path portions.__@param lookupPath the lookup path to check_@return the resolved public URL path or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1413848647;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use.__<p>It is expected the given path is what Spring MVC would use for request_mapping purposes, i.e. excluding context and servlet path portions.__@param lookupPath the lookup path to check_@return the resolved public URL path or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1414829614;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1421836543;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				throw new IllegalStateException("Failed to get public resource URL path for " + pathWithinMapping)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,throw,new,illegal,state,exception,failed,to,get,public,resource,url,path,for,path,within,mapping,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1421964500;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		for (String pattern : this.handlerMap.keySet()) {_			if (!getPathMatcher().match(pattern, lookupPath)) {_				continue__			}_			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__			String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__			if (logger.isTraceEnabled()) {_				logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__			}_			ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__			ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__			String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__			if (resolved == null) {_				continue__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__			}_			return pathMapping + resolved__		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,continue,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1422979675;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}_		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for(String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1426267113;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}_		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for(String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1440504723;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}_		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for(String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1441728690;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}_		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for(String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1450275875;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookupPath=" + lookupPath)__		}_		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}_		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for(String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern=\"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path=\"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}_		logger.debug("No matching resource mapping")__		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,logger,debug,no,matching,resource,mapping,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1450277942;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for(String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1450293581;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for(String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1458843770;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<String>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,string,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1467730834;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1468415682;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1481552090;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1486634978;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public final String getForLookupPath(String lookupPath);1486635693;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring MVC would use for_request mapping purposes, i.e. excluding context and servlet path portions._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final String getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (!matchingPatterns.isEmpty()) {_			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__			Collections.sort(matchingPatterns, patternComparator)__			for (String pattern : matchingPatterns) {_				String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__				String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__				if (logger.isTraceEnabled()) {_					logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__				}_				ResourceHttpRequestHandler handler = this.handlerMap.get(pattern)__				ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__				String resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations())__				if (resolved == null) {_					continue__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Resolved public resource URL path \"" + resolved + "\"")__				}_				return pathMapping + resolved__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"")__		}_		return null__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,mvc,would,use,for,request,mapping,purposes,i,e,excluding,context,and,servlet,path,portions,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,for,string,pattern,matching,patterns,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,http,request,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,string,resolved,chain,resolve,url,path,path,within,mapping,handler,get,locations,if,resolved,null,continue,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,return,path,mapping,resolved,if,logger,is,debug,enabled,logger,debug,no,matching,resource,mapping,for,lookup,path,lookup,path,return,null
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1468415682;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1481552090;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1486634978;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1486635693;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1495868221;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1496837955;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1508508612;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1515624523;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1518772998;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1519588127;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1520260016;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1522843494;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1529361191;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public UrlPathHelper getUrlPathHelper();1530174524;Return the configured {@code UrlPathHelper}._@since 4.2.8;public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper,since,4,2,8;public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1496837955;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1508508612;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1515624523;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1518772998;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1519588127;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1520260016;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1522843494;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1529361191;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap);1530174524;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1398458972;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1401238462;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1409804208;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1409949973;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1413311133;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1413511286;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1413848647;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1414829614;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1421836543;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1421964500;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1422979675;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1426267113;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1440504723;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1441728690;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1450275875;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1450277942;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1450293581;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1458843770;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(UrlPathHelper pathHelper);1467730834;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(javax.servlet.http.HttpServletRequest, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(UrlPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,javax,servlet,http,http,servlet,request,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,url,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public PathMatcher getPathMatcher();1398458972;@return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1401238462;@return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1409804208;@return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1409949973;@return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1413311133;@return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1413511286;@return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1413848647;@return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1414829614;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1421836543;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1421964500;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1422979675;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1426267113;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1440504723;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1441728690;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1450275875;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1450277942;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1450293581;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1458843770;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1467730834;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1468415682;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1481552090;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1486634978;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1486635693;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1495868221;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1496837955;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1508508612;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1515624523;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1518772998;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1519588127;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1520260016;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1522843494;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1529361191;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1530174524;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1398458972;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1401238462;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1409804208;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1409949973;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1413311133;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1413511286;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1413848647;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1414829614;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1421836543;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1421964500;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1422979675;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1426267113;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1440504723;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1441728690;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1450275875;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1450277942;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1450293581;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1458843770;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1467730834;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1468415682;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1481552090;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1486634978;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1486635693;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1495868221;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1496837955;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1508508612;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1515624523;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1518772998;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1519588127;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1520260016;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1522843494;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1529361191;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1530174524;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1398458972;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use.__@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}__		String pathWithinMapping = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE)__		if (pathWithinMapping == null) {_			logger.trace("Request attribute with lookup path not found, calculating instead.")__			pathWithinMapping = getPathHelper().getLookupPathForRequest(request)__		}__		int index = getPathHelper().getRequestUri(request).indexOf(pathWithinMapping)__		Assert.state(index > 0 && index < requestUrl.length(), "Failed to determine lookup path: " + requestUrl)___		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedPath = getForLookupPath(lookupPath)___		return (resolvedPath != null) ? prefix + resolvedPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,string,path,within,mapping,string,request,get,attribute,handler,mapping,if,path,within,mapping,null,logger,trace,request,attribute,with,lookup,path,not,found,calculating,instead,path,within,mapping,get,path,helper,get,lookup,path,for,request,request,int,index,get,path,helper,get,request,uri,request,index,of,path,within,mapping,assert,state,index,0,index,request,url,length,failed,to,determine,lookup,path,request,url,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,path,get,for,lookup,path,lookup,path,return,resolved,path,null,prefix,resolved,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1401238462;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use.__@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}__		String pathWithinMapping = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE)__		if (pathWithinMapping == null) {_			logger.trace("Request attribute with lookup path not found, calculating instead.")__			pathWithinMapping = getPathHelper().getLookupPathForRequest(request)__		}__		int index = getPathHelper().getRequestUri(request).indexOf(pathWithinMapping)__		Assert.state(index > 0 && index < requestUrl.length(), "Failed to determine lookup path: " + requestUrl)___		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedPath = getForLookupPath(lookupPath)___		return (resolvedPath != null) ? prefix + resolvedPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,string,path,within,mapping,string,request,get,attribute,handler,mapping,if,path,within,mapping,null,logger,trace,request,attribute,with,lookup,path,not,found,calculating,instead,path,within,mapping,get,path,helper,get,lookup,path,for,request,request,int,index,get,path,helper,get,request,uri,request,index,of,path,within,mapping,assert,state,index,0,index,request,url,length,failed,to,determine,lookup,path,request,url,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,path,get,for,lookup,path,lookup,path,return,resolved,path,null,prefix,resolved,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1409804208;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use.__@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}__		String pathWithinMapping = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE)__		if (pathWithinMapping == null) {_			logger.trace("Request attribute with lookup path not found, calculating instead.")__			pathWithinMapping = getPathHelper().getLookupPathForRequest(request)__		}__		int index = getPathHelper().getRequestUri(request).indexOf(pathWithinMapping)__		Assert.state(index > 0 && index < requestUrl.length(), "Failed to determine lookup path: " + requestUrl)___		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedPath = getForLookupPath(lookupPath)___		return (resolvedPath != null) ? prefix + resolvedPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,string,path,within,mapping,string,request,get,attribute,handler,mapping,if,path,within,mapping,null,logger,trace,request,attribute,with,lookup,path,not,found,calculating,instead,path,within,mapping,get,path,helper,get,lookup,path,for,request,request,int,index,get,path,helper,get,request,uri,request,index,of,path,within,mapping,assert,state,index,0,index,request,url,length,failed,to,determine,lookup,path,request,url,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,path,get,for,lookup,path,lookup,path,return,resolved,path,null,prefix,resolved,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1409949973;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use.__@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}__		String pathWithinMapping = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE)__		if (pathWithinMapping == null) {_			logger.trace("Request attribute with lookup path not found, calculating instead.")__			pathWithinMapping = getPathHelper().getLookupPathForRequest(request)__		}__		int index = getPathHelper().getRequestUri(request).indexOf(pathWithinMapping)__		Assert.state(index != -1, "Failed to determine lookup path: " + requestUrl)___		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedPath = getForLookupPath(lookupPath)___		return (resolvedPath != null) ? prefix + resolvedPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,string,path,within,mapping,string,request,get,attribute,handler,mapping,if,path,within,mapping,null,logger,trace,request,attribute,with,lookup,path,not,found,calculating,instead,path,within,mapping,get,path,helper,get,lookup,path,for,request,request,int,index,get,path,helper,get,request,uri,request,index,of,path,within,mapping,assert,state,index,1,failed,to,determine,lookup,path,request,url,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,path,get,for,lookup,path,lookup,path,return,resolved,path,null,prefix,resolved,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1413311133;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use.__@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}__		String pathWithinMapping = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE)__		if (pathWithinMapping == null) {_			logger.trace("Request attribute with lookup path not found, calculating instead.")__			pathWithinMapping = getPathHelper().getLookupPathForRequest(request)__		}__		_		pathWithinMapping = (pathWithinMapping.charAt(0) == '/' ? pathWithinMapping : "/" + pathWithinMapping)___		int index = getPathHelper().getRequestUri(request).indexOf(pathWithinMapping)__		Assert.state(index != -1, "Failed to determine lookup path: " + requestUrl)___		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedPath = getForLookupPath(lookupPath)___		return (resolvedPath != null) ? prefix + resolvedPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,string,path,within,mapping,string,request,get,attribute,handler,mapping,if,path,within,mapping,null,logger,trace,request,attribute,with,lookup,path,not,found,calculating,instead,path,within,mapping,get,path,helper,get,lookup,path,for,request,request,path,within,mapping,path,within,mapping,char,at,0,path,within,mapping,path,within,mapping,int,index,get,path,helper,get,request,uri,request,index,of,path,within,mapping,assert,state,index,1,failed,to,determine,lookup,path,request,url,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,path,get,for,lookup,path,lookup,path,return,resolved,path,null,prefix,resolved,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1413511286;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use.__@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int index = getLookupPathIndex(request)__		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,index,get,lookup,path,index,request,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1413848647;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use.__@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int index = getLookupPathIndex(request)__		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,index,get,lookup,path,index,request,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1414829614;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int index = getLookupPathIndex(request)__		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,index,get,lookup,path,index,request,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1421836543;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int index = getLookupPathIndex(request)__		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,index,get,lookup,path,index,request,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1421964500;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int index = getLookupPathIndex(request)__		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,index,get,lookup,path,index,request,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1422979675;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int index = getLookupPathIndex(request)__		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,index,get,lookup,path,index,request,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1426267113;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int index = getLookupPathIndex(request)__		String prefix = requestUrl.substring(0, index)__		String lookupPath = requestUrl.substring(index)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,index,get,lookup,path,index,request,string,prefix,request,url,substring,0,index,string,lookup,path,request,url,substring,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1440504723;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath + suffix : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1441728690;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath + suffix : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1450275875;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for requestURL=" + requestUrl)__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath + suffix : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1450277942;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null) ? prefix + resolvedLookupPath + suffix : null__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1450293581;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1458843770;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1467730834;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1468415682;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getQueryParamsIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,query,params,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1481552090;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1486634978;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public final String getForRequestUrl(HttpServletRequest request, String requestUrl);1486635693;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path (i.e. including context and servlet path) and returns the full request_URL path to expose for public use._@param request the current request_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final String getForRequestUrl(HttpServletRequest request, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(request)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		String resolvedLookupPath = getForLookupPath(lookupPath)__		return (resolvedLookupPath != null ? prefix + resolvedLookupPath + suffix : null)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,i,e,including,context,and,servlet,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,request,the,current,request,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,string,get,for,request,url,http,servlet,request,request,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,request,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,string,resolved,lookup,path,get,for,lookup,path,lookup,path,return,resolved,lookup,path,null,prefix,resolved,lookup,path,suffix,null
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1398458972;@return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1401238462;@return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1409804208;@return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1409949973;@return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1413311133;@return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1413511286;@return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1413848647;@return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1414829614;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1421836543;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1421964500;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1422979675;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1426267113;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1440504723;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1441728690;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1450275875;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1450277942;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1450293581;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1458843770;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1467730834;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1468415682;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1481552090;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1486634978;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1486635693;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1495868221;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1496837955;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1508508612;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1515624523;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1518772998;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1519588127;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1520260016;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1522843494;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1529361191;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceHttpRequestHandler> getHandlerMap();1530174524;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceHttpRequestHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,http,request,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1398458972;Manually configure the resource mappings.__<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1401238462;Manually configure the resource mappings.__<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1409804208;Manually configure the resource mappings.__<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1409949973;Manually configure the resource mappings.__<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1413311133;Manually configure the resource mappings.__<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1413511286;Manually configure the resource mappings.__<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1413848647;Manually configure the resource mappings.__<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1414829614;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1421836543;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1421964500;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1422979675;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1426267113;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1440504723;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1441728690;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1450275875;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1450277942;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1450293581;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1458843770;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1467730834;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1468415682;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1481552090;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1486634978;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1486635693;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap);1495868221;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceHttpRequestHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,http,request,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
