commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;4;;@Override protected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext) {     return BEAN_NAME. }
false;protected;1;4;;@Override protected String getBeanClassName(Element element) {     return "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer". }
false;protected;3;30;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     List<Element> childElements = DomUtils.getChildElementsByTagName(element, "script").     if (!childElements.isEmpty()) {         List<String> locations = new ArrayList<>(childElements.size()).         for (Element childElement : childElements) {             locations.add(childElement.getAttribute("location")).         }         builder.addPropertyValue("scripts", StringUtils.toStringArray(locations)).     }     builder.addPropertyValue("engineName", element.getAttribute("engine-name")).     if (element.hasAttribute("render-object")) {         builder.addPropertyValue("renderObject", element.getAttribute("render-object")).     }     if (element.hasAttribute("render-function")) {         builder.addPropertyValue("renderFunction", element.getAttribute("render-function")).     }     if (element.hasAttribute("content-type")) {         builder.addPropertyValue("contentType", element.getAttribute("content-type")).     }     if (element.hasAttribute("charset")) {         builder.addPropertyValue("charset", Charset.forName(element.getAttribute("charset"))).     }     if (element.hasAttribute("resource-loader-path")) {         builder.addPropertyValue("resourceLoaderPath", element.getAttribute("resource-loader-path")).     }     if (element.hasAttribute("shared-engine")) {         builder.addPropertyValue("sharedEngine", element.getAttribute("shared-engine")).     } }
false;protected;1;6;;@Override protected boolean isEligibleAttribute(String name) {     return (name.equals("engine-name") || name.equals("scripts") || name.equals("render-object") || name.equals("render-function") || name.equals("content-type") || name.equals("charset") || name.equals("resource-loader-path")). }
