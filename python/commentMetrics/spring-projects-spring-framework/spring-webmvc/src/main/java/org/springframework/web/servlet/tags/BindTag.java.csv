commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the path that this tag should apply. Can be a bean (e.g. "person")  * to get global errors, or a bean property (e.g. "person.name") to get  * field errors (also supporting nested fields and "person.na*" mappings).  * "person.*" will return all errors for the specified bean, both global  * and field errors.  * @see org.springframework.validation.Errors#getGlobalErrors  * @see org.springframework.validation.Errors#getFieldErrors  */ ;/**  * Set the path that this tag should apply. Can be a bean (e.g. "person")  * to get global errors, or a bean property (e.g. "person.name") to get  * field errors (also supporting nested fields and "person.na*" mappings).  * "person.*" will return all errors for the specified bean, both global  * and field errors.  * @see org.springframework.validation.Errors#getGlobalErrors  * @see org.springframework.validation.Errors#getFieldErrors  */ public void setPath(String path) {     this.path = path. }
true;public;0;3;/**  * Return the path that this tag applies to.  */ ;/**  * Return the path that this tag applies to.  */ public String getPath() {     return this.path. }
true;public;1;3;/**  * Set whether to ignore a nested path, if any.  * Default is to not ignore.  */ ;/**  * Set whether to ignore a nested path, if any.  * Default is to not ignore.  */ public void setIgnoreNestedPath(boolean ignoreNestedPath) {     this.ignoreNestedPath = ignoreNestedPath. }
true;public;0;3;/**  * Return whether to ignore a nested path, if any.  */ ;/**  * Return whether to ignore a nested path, if any.  */ public boolean isIgnoreNestedPath() {     return this.ignoreNestedPath. }
false;protected,final;0;31;;@Override protected final int doStartTagInternal() throws Exception {     String resolvedPath = getPath().     if (!isIgnoreNestedPath()) {         String nestedPath = (String) this.pageContext.getAttribute(NestedPathTag.NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE).         // only prepend if not already an absolute path         if (nestedPath != null && !resolvedPath.startsWith(nestedPath) && !resolvedPath.equals(nestedPath.substring(0, nestedPath.length() - 1))) {             resolvedPath = nestedPath + resolvedPath.         }     }     try {         this.status = new BindStatus(getRequestContext(), resolvedPath, isHtmlEscape()).     } catch (IllegalStateException ex) {         throw new JspTagException(ex.getMessage()).     }     // Save previous status values, for re-exposure at the end of this tag.     this.previousPageStatus = this.pageContext.getAttribute(STATUS_VARIABLE_NAME, PageContext.PAGE_SCOPE).     this.previousRequestStatus = this.pageContext.getAttribute(STATUS_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     // Expose this tag's status object as PageContext attribute,     // making it available for JSP EL.     this.pageContext.removeAttribute(STATUS_VARIABLE_NAME, PageContext.PAGE_SCOPE).     this.pageContext.setAttribute(STATUS_VARIABLE_NAME, this.status, PageContext.REQUEST_SCOPE).     return EVAL_BODY_INCLUDE. }
false;public;0;14;;@Override public int doEndTag() {     // Reset previous status values.     if (this.previousPageStatus != null) {         this.pageContext.setAttribute(STATUS_VARIABLE_NAME, this.previousPageStatus, PageContext.PAGE_SCOPE).     }     if (this.previousRequestStatus != null) {         this.pageContext.setAttribute(STATUS_VARIABLE_NAME, this.previousRequestStatus, PageContext.REQUEST_SCOPE).     } else {         this.pageContext.removeAttribute(STATUS_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     }     return EVAL_PAGE. }
true;private;0;4;/**  * Return the current BindStatus.  */ ;/**  * Return the current BindStatus.  */ private BindStatus getStatus() {     Assert.state(this.status != null, "No current BindStatus").     return this.status. }
true;public,final;0;4;/**  * Retrieve the property that this tag is currently bound to,  * or {@code null} if bound to an object rather than a specific property.  * Intended for cooperating nesting tags.  * @return the property that this tag is currently bound to,  * or {@code null} if none  */ ;/**  * Retrieve the property that this tag is currently bound to,  * or {@code null} if bound to an object rather than a specific property.  * Intended for cooperating nesting tags.  * @return the property that this tag is currently bound to,  * or {@code null} if none  */ @Nullable public final String getProperty() {     return getStatus().getExpression(). }
true;public,final;0;4;/**  * Retrieve the Errors instance that this tag is currently bound to.  * Intended for cooperating nesting tags.  * @return the current Errors instance, or {@code null} if none  */ ;/**  * Retrieve the Errors instance that this tag is currently bound to.  * Intended for cooperating nesting tags.  * @return the current Errors instance, or {@code null} if none  */ @Nullable public final Errors getErrors() {     return getStatus().getErrors(). }
false;public,final;0;5;;@Override @Nullable public final PropertyEditor getEditor() {     return getStatus().getEditor(). }
false;public;0;7;;@Override public void doFinally() {     super.doFinally().     this.status = null.     this.previousPageStatus = null.     this.previousRequestStatus = null. }
