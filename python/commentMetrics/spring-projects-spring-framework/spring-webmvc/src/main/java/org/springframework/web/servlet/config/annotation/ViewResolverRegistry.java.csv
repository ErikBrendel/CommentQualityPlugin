# id;timestamp;commentText;codeText;commentWords;codeWords
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1405306403;Enable Velocity-based view resolution with an empty default view name_prefix, a default suffix of ".vm".__<p>By default the Velocity resource loader path is set to "/WEB-INF/"._To change that and other Velocity-related options please also implement_the interface {@link VelocityWebMvcConfigurer}.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException(_					"It looks like you're trying to configure Velocity view resolution. " +_					"If not using @EnableWebMvc you must import WebMvcVelocityConfiguration, " +_					"or declare your own VelocityConfigurer bean.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};enable,velocity,based,view,resolution,with,an,empty,default,view,name,prefix,a,default,suffix,of,vm,p,by,default,the,velocity,resource,loader,path,is,set,to,web,inf,to,change,that,and,other,velocity,related,options,please,also,implement,the,interface,link,velocity,web,mvc,configurer;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,it,looks,like,you,re,trying,to,configure,velocity,view,resolution,if,not,using,enable,web,mvc,you,must,import,web,mvc,velocity,configuration,or,declare,your,own,velocity,configurer,bean,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1405448821;Register Velocity view resolver with an empty default view name_prefix, a default suffix of ".vm".__<p><strong>Note</strong> that you must also configure Velocity by adding a_{@link org.springframework.web.servlet.view.velocity.VelocityConfigurer} bean.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Velocity view resolver " +_					"there must also be a single VelocityConfig bean in this web application context " +_					"(or its parent): VelocityConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,velocity,view,resolver,with,an,empty,default,view,name,prefix,a,default,suffix,of,vm,p,strong,note,strong,that,you,must,also,configure,velocity,by,adding,a,link,org,springframework,web,servlet,view,velocity,velocity,configurer,bean;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,velocity,view,resolver,there,must,also,be,a,single,velocity,config,bean,in,this,web,application,context,or,its,parent,velocity,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1405561410;Register Velocity view resolver with an empty default view name_prefix and a default suffix of ".vm".__<p><strong>Note</strong> that you must also configure Velocity by adding a_{@link org.springframework.web.servlet.view.velocity.VelocityConfigurer} bean.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Velocity view resolver " +_					"there must also be a single VelocityConfig bean in this web application context " +_					"(or its parent): VelocityConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,velocity,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,vm,p,strong,note,strong,that,you,must,also,configure,velocity,by,adding,a,link,org,springframework,web,servlet,view,velocity,velocity,configurer,bean;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,velocity,view,resolver,there,must,also,be,a,single,velocity,config,bean,in,this,web,application,context,or,its,parent,velocity,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1405561410;Register Velocity view resolver with an empty default view name_prefix and a default suffix of ".vm".__<p><strong>Note</strong> that you must also configure Velocity by adding a_{@link org.springframework.web.servlet.view.velocity.VelocityConfigurer} bean.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Velocity view resolver " +_					"there must also be a single VelocityConfig bean in this web application context " +_					"(or its parent): VelocityConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,velocity,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,vm,p,strong,note,strong,that,you,must,also,configure,velocity,by,adding,a,link,org,springframework,web,servlet,view,velocity,velocity,configurer,bean;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,velocity,view,resolver,there,must,also,be,a,single,velocity,config,bean,in,this,web,application,context,or,its,parent,velocity,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1412087903;Register Velocity view resolver with an empty default view name_prefix and a default suffix of ".vm".__<p><strong>Note</strong> that you must also configure Velocity by adding a_{@link org.springframework.web.servlet.view.velocity.VelocityConfigurer} bean.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Velocity view resolver " +_					"there must also be a single VelocityConfig bean in this web application context " +_					"(or its parent): VelocityConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,velocity,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,vm,p,strong,note,strong,that,you,must,also,configure,velocity,by,adding,a,link,org,springframework,web,servlet,view,velocity,velocity,configurer,bean;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,velocity,view,resolver,there,must,also,be,a,single,velocity,config,bean,in,this,web,application,context,or,its,parent,velocity,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1412089060;Register Velocity view resolver with an empty default view name_prefix and a default suffix of ".vm".__<p><strong>Note</strong> that you must also configure Velocity by adding a_{@link org.springframework.web.servlet.view.velocity.VelocityConfigurer} bean.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Velocity view resolver " +_					"there must also be a single VelocityConfig bean in this web application context " +_					"(or its parent): VelocityConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,velocity,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,vm,p,strong,note,strong,that,you,must,also,configure,velocity,by,adding,a,link,org,springframework,web,servlet,view,velocity,velocity,configurer,bean;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,velocity,view,resolver,there,must,also,be,a,single,velocity,config,bean,in,this,web,application,context,or,its,parent,velocity,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1413848647;Register Velocity view resolver with an empty default view name_prefix and a default suffix of ".vm".__<p><strong>Note</strong> that you must also configure Velocity by adding a_{@link org.springframework.web.servlet.view.velocity.VelocityConfigurer} bean.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Velocity view resolver " +_					"there must also be a single VelocityConfig bean in this web application context " +_					"(or its parent): VelocityConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,velocity,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,vm,p,strong,note,strong,that,you,must,also,configure,velocity,by,adding,a,link,org,springframework,web,servlet,view,velocity,velocity,configurer,bean;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,velocity,view,resolver,there,must,also,be,a,single,velocity,config,bean,in,this,web,application,context,or,its,parent,velocity,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration velocity();1429685224;Register Velocity view resolver with an empty default view name_prefix and a default suffix of ".vm".__<p><strong>Note</strong> that you must also configure Velocity by adding a_{@link org.springframework.web.servlet.view.velocity.VelocityConfigurer} bean.;public UrlBasedViewResolverRegistration velocity() {_		if (this.applicationContext != null && !hasBeanOfType(VelocityConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Velocity view resolver " +_					"there must also be a single VelocityConfig bean in this web application context " +_					"(or its parent): VelocityConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		VelocityRegistration registration = new VelocityRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,velocity,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,vm,p,strong,note,strong,that,you,must,also,configure,velocity,by,adding,a,link,org,springframework,web,servlet,view,velocity,velocity,configurer,bean;public,url,based,view,resolver,registration,velocity,if,this,application,context,null,has,bean,of,type,velocity,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,velocity,view,resolver,there,must,also,be,a,single,velocity,config,bean,in,this,web,application,context,or,its,parent,velocity,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,velocity,registration,registration,new,velocity,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1405306403;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1405448821;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1405561410;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1405561410;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1412087903;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1412089060;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1413848647;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1429685224;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1450368957;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1467667858;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1467730834;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1498780456;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1506534768;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public void enableContentNegotiation(View... defaultViews);1520529117;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,view,default,views,init,content,negotiating,view,resolver,default,views
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1405306403;Enable view resolution by forwarding to JSP pages with the specified_prefix and suffix.__<p>This method may be invoked multiple and each call will register a_separate ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_that indicates which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};enable,view,resolution,by,forwarding,to,jsp,pages,with,the,specified,prefix,and,suffix,p,this,method,may,be,invoked,multiple,and,each,call,will,register,a,separate,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,that,indicates,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1405448821;Register JSP view resolver with the specified prefix and suffix.__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1405561410;Register JSP view resolver with the specified prefix and suffix.__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1405561410;Register JSP view resolver with the specified prefix and suffix.__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1412087903;Register JSP view resolver with the specified prefix and suffix.__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1412089060;Register JSP view resolver with the specified prefix and suffix.__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1413848647;Register JSP view resolver with the specified prefix and suffix.__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1429685224;Register JSP view resolver with the specified prefix and suffix.__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1450368957;Register JSP view resolver with the specified prefix and suffix._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1467667858;Register JSP view resolver with the specified prefix and suffix._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1467730834;Register JSP view resolver with the specified prefix and suffix._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1498780456;Register JSP view resolver with the specified prefix and suffix._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1506534768;Register JSP view resolver with the specified prefix and suffix._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp(String prefix, String suffix);1520529117;Register JSP view resolver with the specified prefix and suffix._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp(String prefix, String suffix) {_		InternalResourceViewResolver resolver = new InternalResourceViewResolver()__		resolver.setPrefix(prefix)__		resolver.setSuffix(suffix)__		this.viewResolvers.add(resolver)__		return new UrlBasedViewResolverRegistration(resolver)__	};register,jsp,view,resolver,with,the,specified,prefix,and,suffix,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,string,prefix,string,suffix,internal,resource,view,resolver,resolver,new,internal,resource,view,resolver,resolver,set,prefix,prefix,resolver,set,suffix,suffix,this,view,resolvers,add,resolver,return,new,url,based,view,resolver,registration,resolver
ViewResolverRegistry -> public void beanName();1405306403;Enable the ability to map view names returned from controllers to_{@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};enable,the,ability,to,map,view,names,returned,from,controllers,to,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1405448821;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1405561410;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1405561410;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1412087903;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1412089060;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1413848647;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1429685224;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1450368957;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1467667858;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1467730834;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1498780456;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1506534768;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public void beanName();1520529117;Register a bean name view resolver that interprets view names as the names_of {@link org.springframework.web.servlet.View} beans.;public void beanName() {_		BeanNameViewResolver resolver = new BeanNameViewResolver()__		this.viewResolvers.add(resolver)__	};register,a,bean,name,view,resolver,that,interprets,view,names,as,the,names,of,link,org,springframework,web,servlet,view,beans;public,void,bean,name,bean,name,view,resolver,resolver,new,bean,name,view,resolver,this,view,resolvers,add,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1405306403;Enable Tiles-based view resolution.__<p>By default tiles definitions are expected to be in "/WEB-INF/tiles.xml"._To change that and other Tiles-related options please also implement the_interface {@link TilesWebMvcConfigurer}.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException(_					"It looks like you're trying to configure Tiles view resolution. " +_					"If not using @EnableWebMvc you must import WebMvcTilesConfiguration, " +_					"or declare your own TilesConfigurer bean.")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};enable,tiles,based,view,resolution,p,by,default,tiles,definitions,are,expected,to,be,in,web,inf,tiles,xml,to,change,that,and,other,tiles,related,options,please,also,implement,the,interface,link,tiles,web,mvc,configurer;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,it,looks,like,you,re,trying,to,configure,tiles,view,resolution,if,not,using,enable,web,mvc,you,must,import,web,mvc,tiles,configuration,or,declare,your,own,tiles,configurer,bean,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1405448821;Register Tiles 3.x view resolver.__<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1405561410;Register Tiles 3.x view resolver.__<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1405561410;Register Tiles 3.x view resolver.__<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1412087903;Register Tiles 3.x view resolver.__<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1412089060;Register Tiles 3.x view resolver.__<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1413848647;Register Tiles 3.x view resolver.__<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1429685224;Register Tiles 3.x view resolver.__<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1450368957;Register Tiles 3.x view resolver._<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1467667858;Register Tiles 3.x view resolver._<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1467730834;Register Tiles 3.x view resolver._<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (this.applicationContext != null && !hasBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,this,application,context,null,has,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1498780456;Register Tiles 3.x view resolver._<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (!checkBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,check,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1506534768;Register Tiles 3.x view resolver._<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (!checkBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,check,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration tiles();1520529117;Register Tiles 3.x view resolver._<p><strong>Note</strong> that you must also configure Tiles by adding a_{@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean.;public UrlBasedViewResolverRegistration tiles() {_		if (!checkBeanOfType(TilesConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Tiles view resolver " +_					"there must also be a single TilesConfigurer bean in this web application context " +_					"(or its parent).")__		}_		TilesRegistration registration = new TilesRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,tiles,3,x,view,resolver,p,strong,note,strong,that,you,must,also,configure,tiles,by,adding,a,link,org,springframework,web,servlet,view,tiles3,tiles,configurer,bean;public,url,based,view,resolver,registration,tiles,if,check,bean,of,type,tiles,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,tiles,view,resolver,there,must,also,be,a,single,tiles,configurer,bean,in,this,web,application,context,or,its,parent,tiles,registration,registration,new,tiles,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public ViewResolverRegistry( 			ContentNegotiationManager contentNegotiationManager, @Nullable ApplicationContext context);1506534768;Class constructor with {@link ContentNegotiationManager} and {@link ApplicationContext}._@since 4.3.12;public ViewResolverRegistry(_			ContentNegotiationManager contentNegotiationManager, @Nullable ApplicationContext context) {__		this.contentNegotiationManager = contentNegotiationManager__		this.applicationContext = context__	};class,constructor,with,link,content,negotiation,manager,and,link,application,context,since,4,3,12;public,view,resolver,registry,content,negotiation,manager,content,negotiation,manager,nullable,application,context,context,this,content,negotiation,manager,content,negotiation,manager,this,application,context,context
ViewResolverRegistry -> public ViewResolverRegistry( 			ContentNegotiationManager contentNegotiationManager, @Nullable ApplicationContext context);1520529117;Class constructor with {@link ContentNegotiationManager} and {@link ApplicationContext}._@since 4.3.12;public ViewResolverRegistry(_			ContentNegotiationManager contentNegotiationManager, @Nullable ApplicationContext context) {__		this.contentNegotiationManager = contentNegotiationManager__		this.applicationContext = context__	};class,constructor,with,link,content,negotiation,manager,and,link,application,context,since,4,3,12;public,view,resolver,registry,content,negotiation,manager,content,negotiation,manager,nullable,application,context,context,this,content,negotiation,manager,content,negotiation,manager,this,application,context,context
ViewResolverRegistry -> public boolean hasRegistrations();1405306403;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1405448821;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1405561410;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1405561410;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1412087903;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1412089060;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1413848647;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1429685224;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1450368957;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1467667858;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1467730834;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1498780456;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1506534768;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1520529117;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (this.contentNegotiatingResolver != null || !this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,content,negotiating,resolver,null,this,view,resolvers,is,empty
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1405306403;Enable FreeMarker-based view resolution with an empty default view name_prefix and a default suffix of ".ftl".__<p>By default the FreeMarker template loader path is set to "/WEB-INF/"._To change that and other FreeMarker-related options please also implement_the interface {@link FreeMarkerWebMvcConfigurer}.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException(_					"It looks like you're trying to configure FreeMarker view resolution. " +_							"If not using @EnableWebMvc you must import WebMvcFreeMarkerConfiguration, " +_							"or declare your own FreeMarkerConfigurer bean.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};enable,free,marker,based,view,resolution,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,by,default,the,free,marker,template,loader,path,is,set,to,web,inf,to,change,that,and,other,free,marker,related,options,please,also,implement,the,interface,link,free,marker,web,mvc,configurer;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,it,looks,like,you,re,trying,to,configure,free,marker,view,resolution,if,not,using,enable,web,mvc,you,must,import,web,mvc,free,marker,configuration,or,declare,your,own,free,marker,configurer,bean,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1405448821;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl".__<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1405561410;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl".__<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1405561410;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl".__<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1412087903;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl".__<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1412089060;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl".__<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1413848647;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl".__<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1429685224;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl".__<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1450368957;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl"._<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1467667858;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl"._<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1467730834;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl"._<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1498780456;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl"._<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (!checkBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,check,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1506534768;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl"._<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (!checkBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,check,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1520529117;Register a FreeMarker view resolver with an empty default view name_prefix and a default suffix of ".ftl"._<p><strong>Note</strong> that you must also configure FreeMarker by adding a_{@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (!checkBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,free,marker,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,ftl,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,org,springframework,web,servlet,view,freemarker,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,check,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1405306403;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1405448821;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1405561410;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1405561410;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1412087903;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1412089060;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1413848647;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1429685224;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header).__<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1450368957;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1467667858;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1467730834;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already.__@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		initContentNegotiatingViewResolver(defaultViews)__		this.contentNegotiatingResolver.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,init,content,negotiating,view,resolver,default,views,this,content,negotiating,resolver,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1498780456;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		ContentNegotiatingViewResolver vr = initContentNegotiatingViewResolver(defaultViews)__		vr.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,content,negotiating,view,resolver,vr,init,content,negotiating,view,resolver,default,views,vr,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1506534768;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		ContentNegotiatingViewResolver vr = initContentNegotiatingViewResolver(defaultViews)__		vr.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,content,negotiating,view,resolver,vr,init,content,negotiating,view,resolver,default,views,vr,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);1520529117;Enable use of a {@link ContentNegotiatingViewResolver} to front all other_configured view resolvers and select among all selected Views based on_media types requested by the client (e.g. in the Accept header)._<p>If invoked multiple times the provided default views will be added to_any other default views that may have been configured already._@see ContentNegotiatingViewResolver#setDefaultViews;public void enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews) {_		ContentNegotiatingViewResolver vr = initContentNegotiatingViewResolver(defaultViews)__		vr.setUseNotAcceptableStatusCode(useNotAcceptableStatus)__	};enable,use,of,a,link,content,negotiating,view,resolver,to,front,all,other,configured,view,resolvers,and,select,among,all,selected,views,based,on,media,types,requested,by,the,client,e,g,in,the,accept,header,p,if,invoked,multiple,times,the,provided,default,views,will,be,added,to,any,other,default,views,that,may,have,been,configured,already,see,content,negotiating,view,resolver,set,default,views;public,void,enable,content,negotiation,boolean,use,not,acceptable,status,view,default,views,content,negotiating,view,resolver,vr,init,content,negotiating,view,resolver,default,views,vr,set,use,not,acceptable,status,code,use,not,acceptable,status
ViewResolverRegistry -> public void order(int order);1412087903;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1412089060;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1413848647;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1429685224;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1450368957;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1467667858;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1467730834;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1498780456;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1506534768;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1520529117;ViewResolver's registered through this registry are encapsulated in an_instance of {@link org.springframework.web.servlet.view.ViewResolverComposite_ViewResolverComposite} and follow the order of registration._This property determines the order of the ViewResolverComposite itself_relative to any additional ViewResolver's (not registered here) present in_the Spring configuration_<p>By default this property is not set, which means the resolver is ordered_at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled_in which case the order (if not set explicitly) is changed to_{@link Ordered#HIGHEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};view,resolver,s,registered,through,this,registry,are,encapsulated,in,an,instance,of,link,org,springframework,web,servlet,view,view,resolver,composite,view,resolver,composite,and,follow,the,order,of,registration,this,property,determines,the,order,of,the,view,resolver,composite,itself,relative,to,any,additional,view,resolver,s,not,registered,here,present,in,the,spring,configuration,p,by,default,this,property,is,not,set,which,means,the,resolver,is,ordered,at,link,ordered,unless,content,negotiation,is,enabled,in,which,case,the,order,if,not,set,explicitly,is,changed,to,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public UrlBasedViewResolverRegistration scriptTemplate();1429685224;Register a script template view resolver with an empty default view name prefix and suffix._@since 4.2;public UrlBasedViewResolverRegistration scriptTemplate() {_		if (this.applicationContext != null && !hasBeanOfType(ScriptTemplateConfigurer.class)) {_			throw new BeanInitializationException("In addition to a script template view resolver " +_					"there must also be a single ScriptTemplateConfig bean in this web application context " +_					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		ScriptRegistration registration = new ScriptRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,script,template,view,resolver,with,an,empty,default,view,name,prefix,and,suffix,since,4,2;public,url,based,view,resolver,registration,script,template,if,this,application,context,null,has,bean,of,type,script,template,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,script,template,view,resolver,there,must,also,be,a,single,script,template,config,bean,in,this,web,application,context,or,its,parent,script,template,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,script,registration,registration,new,script,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration scriptTemplate();1450368957;Register a script template view resolver with an empty default view name prefix and suffix._@since 4.2;public UrlBasedViewResolverRegistration scriptTemplate() {_		if (this.applicationContext != null && !hasBeanOfType(ScriptTemplateConfigurer.class)) {_			throw new BeanInitializationException("In addition to a script template view resolver " +_					"there must also be a single ScriptTemplateConfig bean in this web application context " +_					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		ScriptRegistration registration = new ScriptRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,script,template,view,resolver,with,an,empty,default,view,name,prefix,and,suffix,since,4,2;public,url,based,view,resolver,registration,script,template,if,this,application,context,null,has,bean,of,type,script,template,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,script,template,view,resolver,there,must,also,be,a,single,script,template,config,bean,in,this,web,application,context,or,its,parent,script,template,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,script,registration,registration,new,script,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration scriptTemplate();1467667858;Register a script template view resolver with an empty default view name prefix and suffix._@since 4.2;public UrlBasedViewResolverRegistration scriptTemplate() {_		if (this.applicationContext != null && !hasBeanOfType(ScriptTemplateConfigurer.class)) {_			throw new BeanInitializationException("In addition to a script template view resolver " +_					"there must also be a single ScriptTemplateConfig bean in this web application context " +_					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		ScriptRegistration registration = new ScriptRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,script,template,view,resolver,with,an,empty,default,view,name,prefix,and,suffix,since,4,2;public,url,based,view,resolver,registration,script,template,if,this,application,context,null,has,bean,of,type,script,template,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,script,template,view,resolver,there,must,also,be,a,single,script,template,config,bean,in,this,web,application,context,or,its,parent,script,template,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,script,registration,registration,new,script,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration scriptTemplate();1467730834;Register a script template view resolver with an empty default view name prefix and suffix._@since 4.2;public UrlBasedViewResolverRegistration scriptTemplate() {_		if (this.applicationContext != null && !hasBeanOfType(ScriptTemplateConfigurer.class)) {_			throw new BeanInitializationException("In addition to a script template view resolver " +_					"there must also be a single ScriptTemplateConfig bean in this web application context " +_					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		ScriptRegistration registration = new ScriptRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,script,template,view,resolver,with,an,empty,default,view,name,prefix,and,suffix,since,4,2;public,url,based,view,resolver,registration,script,template,if,this,application,context,null,has,bean,of,type,script,template,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,script,template,view,resolver,there,must,also,be,a,single,script,template,config,bean,in,this,web,application,context,or,its,parent,script,template,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,script,registration,registration,new,script,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration scriptTemplate();1498780456;Register a script template view resolver with an empty default view name prefix and suffix._@since 4.2;public UrlBasedViewResolverRegistration scriptTemplate() {_		if (!checkBeanOfType(ScriptTemplateConfigurer.class)) {_			throw new BeanInitializationException("In addition to a script template view resolver " +_					"there must also be a single ScriptTemplateConfig bean in this web application context " +_					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		ScriptRegistration registration = new ScriptRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,script,template,view,resolver,with,an,empty,default,view,name,prefix,and,suffix,since,4,2;public,url,based,view,resolver,registration,script,template,if,check,bean,of,type,script,template,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,script,template,view,resolver,there,must,also,be,a,single,script,template,config,bean,in,this,web,application,context,or,its,parent,script,template,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,script,registration,registration,new,script,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration scriptTemplate();1506534768;Register a script template view resolver with an empty default view name prefix and suffix._@since 4.2;public UrlBasedViewResolverRegistration scriptTemplate() {_		if (!checkBeanOfType(ScriptTemplateConfigurer.class)) {_			throw new BeanInitializationException("In addition to a script template view resolver " +_					"there must also be a single ScriptTemplateConfig bean in this web application context " +_					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		ScriptRegistration registration = new ScriptRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,script,template,view,resolver,with,an,empty,default,view,name,prefix,and,suffix,since,4,2;public,url,based,view,resolver,registration,script,template,if,check,bean,of,type,script,template,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,script,template,view,resolver,there,must,also,be,a,single,script,template,config,bean,in,this,web,application,context,or,its,parent,script,template,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,script,registration,registration,new,script,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration scriptTemplate();1520529117;Register a script template view resolver with an empty default view name prefix and suffix._@since 4.2;public UrlBasedViewResolverRegistration scriptTemplate() {_		if (!checkBeanOfType(ScriptTemplateConfigurer.class)) {_			throw new BeanInitializationException("In addition to a script template view resolver " +_					"there must also be a single ScriptTemplateConfig bean in this web application context " +_					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		ScriptRegistration registration = new ScriptRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,script,template,view,resolver,with,an,empty,default,view,name,prefix,and,suffix,since,4,2;public,url,based,view,resolver,registration,script,template,if,check,bean,of,type,script,template,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,script,template,view,resolver,there,must,also,be,a,single,script,template,config,bean,in,this,web,application,context,or,its,parent,script,template,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,script,registration,registration,new,script,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1405306403;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1405448821;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1405561410;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1405561410;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1412087903;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1412089060;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1413848647;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1429685224;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1450368957;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1467667858;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1467730834;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1498780456;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1506534768;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1520529117;Register a {@link ViewResolver} bean instance. This may be useful to_configure a custom (or 3rd party) resolver implementation. It may also be_used as an alternative to other registration methods in this class when_they don't expose some more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		if (viewResolver instanceof ContentNegotiatingViewResolver) {_			throw new BeanInitializationException(_					"addViewResolver cannot be used to configure a ContentNegotiatingViewResolver. " +_					"Please use the method enableContentNegotiation instead.")__		}_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,custom,or,3rd,party,resolver,implementation,it,may,also,be,used,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,if,view,resolver,instanceof,content,negotiating,view,resolver,throw,new,bean,initialization,exception,add,view,resolver,cannot,be,used,to,configure,a,content,negotiating,view,resolver,please,use,the,method,enable,content,negotiation,instead,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1405561410;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1412087903;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1412089060;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1413848647;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1429685224;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1450368957;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1467667858;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1467730834;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (this.applicationContext != null && !hasBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,this,application,context,null,has,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1498780456;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (!checkBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,check,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1506534768;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (!checkBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,check,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration groovy();1520529117;Register a Groovy markup view resolver with an empty default view name_prefix and a default suffix of ".tpl".;public UrlBasedViewResolverRegistration groovy() {_		if (!checkBeanOfType(GroovyMarkupConfigurer.class)) {_			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +_					"there must also be a single GroovyMarkupConfig bean in this web application context " +_					"(or its parent): GroovyMarkupConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		GroovyMarkupRegistration registration = new GroovyMarkupRegistration()__		this.viewResolvers.add(registration.getViewResolver())__		return registration__	};register,a,groovy,markup,view,resolver,with,an,empty,default,view,name,prefix,and,a,default,suffix,of,tpl;public,url,based,view,resolver,registration,groovy,if,check,bean,of,type,groovy,markup,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,groovy,markup,view,resolver,there,must,also,be,a,single,groovy,markup,config,bean,in,this,web,application,context,or,its,parent,groovy,markup,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,groovy,markup,registration,registration,new,groovy,markup,registration,this,view,resolvers,add,registration,get,view,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1405306403;Enable view resolution by forwarding to JSP pages with a default view name_prefix of "/WEB-INF/" and a default suffix of ".jsp".__<p>This method may be invoked multiple and each call will register a_separate ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_that indicates which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};enable,view,resolution,by,forwarding,to,jsp,pages,with,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,this,method,may,be,invoked,multiple,and,each,call,will,register,a,separate,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,that,indicates,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1405448821;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp".__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1405561410;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp".__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1405561410;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp".__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1412087903;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp".__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1412089060;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp".__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1413848647;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp".__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1429685224;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp".__<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1450368957;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp"._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1467667858;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp"._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1467730834;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp"._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1498780456;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp"._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1506534768;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp"._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
ViewResolverRegistry -> public UrlBasedViewResolverRegistration jsp();1520529117;Register JSP view resolver using a default view name prefix of "/WEB-INF/"_and a default suffix of ".jsp"._<p>When this method is invoked more than once, each call will register a_new ViewResolver instance. Note that since it's not easy to determine_if a JSP exists without forwarding to it, using multiple JSP-based view_resolvers only makes sense in combination with the "viewNames" property_on the resolver indicating which view names are handled by which resolver.;public UrlBasedViewResolverRegistration jsp() {_		return jsp("/WEB-INF/", ".jsp")__	};register,jsp,view,resolver,using,a,default,view,name,prefix,of,web,inf,and,a,default,suffix,of,jsp,p,when,this,method,is,invoked,more,than,once,each,call,will,register,a,new,view,resolver,instance,note,that,since,it,s,not,easy,to,determine,if,a,jsp,exists,without,forwarding,to,it,using,multiple,jsp,based,view,resolvers,only,makes,sense,in,combination,with,the,view,names,property,on,the,resolver,indicating,which,view,names,are,handled,by,which,resolver;public,url,based,view,resolver,registration,jsp,return,jsp,web,inf,jsp
