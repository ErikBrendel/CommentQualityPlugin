commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public boolean supportsReturnType(MethodParameter returnType) {     Class<?> type = returnType.getParameterType().     return (DeferredResult.class.isAssignableFrom(type) || ListenableFuture.class.isAssignableFrom(type) || CompletionStage.class.isAssignableFrom(type)). }
false;public;4;27;;@Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {     if (returnValue == null) {         mavContainer.setRequestHandled(true).         return.     }     DeferredResult<?> result.     if (returnValue instanceof DeferredResult) {         result = (DeferredResult<?>) returnValue.     } else if (returnValue instanceof ListenableFuture) {         result = adaptListenableFuture((ListenableFuture<?>) returnValue).     } else if (returnValue instanceof CompletionStage) {         result = adaptCompletionStage((CompletionStage<?>) returnValue).     } else {         // Should not happen...         throw new IllegalStateException("Unexpected return value type: " + returnValue).     }     WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(result, mavContainer). }
false;public;1;4;;@Override public void onSuccess(@Nullable Object value) {     result.setResult(value). }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     result.setErrorResult(ex). }
false;private;1;14;;private DeferredResult<Object> adaptListenableFuture(ListenableFuture<?> future) {     DeferredResult<Object> result = new DeferredResult<>().     future.addCallback(new ListenableFutureCallback<Object>() {          @Override         public void onSuccess(@Nullable Object value) {             result.setResult(value).         }          @Override         public void onFailure(Throwable ex) {             result.setErrorResult(ex).         }     }).     return result. }
false;private;1;13;;private DeferredResult<Object> adaptCompletionStage(CompletionStage<?> future) {     DeferredResult<Object> result = new DeferredResult<>().     future.handle((BiFunction<Object, Throwable, Object>) (value, ex) -> {         if (ex != null) {             result.setErrorResult(ex).         } else {             result.setResult(value).         }         return null.     }).     return result. }
