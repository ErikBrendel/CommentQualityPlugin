commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Configure supported locales to check against the requested locales  * determined via {@link HttpServletRequest#getLocales()}. If this is not  * configured then {@link HttpServletRequest#getLocale()} is used instead.  * @param locales the supported locales  * @since 4.3  */ ;/**  * Configure supported locales to check against the requested locales  * determined via {@link HttpServletRequest#getLocales()}. If this is not  * configured then {@link HttpServletRequest#getLocale()} is used instead.  * @param locales the supported locales  * @since 4.3  */ public void setSupportedLocales(List<Locale> locales) {     this.supportedLocales.clear().     this.supportedLocales.addAll(locales). }
true;public;0;3;/**  * Return the configured list of supported locales.  * @since 4.3  */ ;/**  * Return the configured list of supported locales.  * @since 4.3  */ public List<Locale> getSupportedLocales() {     return this.supportedLocales. }
true;public;1;3;/**  * Configure a fixed default locale to fall back on if the request does not  * have an "Accept-Language" header.  * <p>By default this is not set in which case when there is "Accept-Language"  * header, the default locale for the server is used as defined in  * {@link HttpServletRequest#getLocale()}.  * @param defaultLocale the default locale to use  * @since 4.3  */ ;/**  * Configure a fixed default locale to fall back on if the request does not  * have an "Accept-Language" header.  * <p>By default this is not set in which case when there is "Accept-Language"  * header, the default locale for the server is used as defined in  * {@link HttpServletRequest#getLocale()}.  * @param defaultLocale the default locale to use  * @since 4.3  */ public void setDefaultLocale(@Nullable Locale defaultLocale) {     this.defaultLocale = defaultLocale. }
true;public;0;4;/**  * The configured default locale, if any.  * @since 4.3  */ ;/**  * The configured default locale, if any.  * @since 4.3  */ @Nullable public Locale getDefaultLocale() {     return this.defaultLocale. }
false;public;1;17;;@Override public Locale resolveLocale(HttpServletRequest request) {     Locale defaultLocale = getDefaultLocale().     if (defaultLocale != null && request.getHeader("Accept-Language") == null) {         return defaultLocale.     }     Locale requestLocale = request.getLocale().     List<Locale> supportedLocales = getSupportedLocales().     if (supportedLocales.isEmpty() || supportedLocales.contains(requestLocale)) {         return requestLocale.     }     Locale supportedLocale = findSupportedLocale(request, supportedLocales).     if (supportedLocale != null) {         return supportedLocale.     }     return (defaultLocale != null ? defaultLocale : requestLocale). }
false;private;2;25;;@Nullable private Locale findSupportedLocale(HttpServletRequest request, List<Locale> supportedLocales) {     Enumeration<Locale> requestLocales = request.getLocales().     Locale languageMatch = null.     while (requestLocales.hasMoreElements()) {         Locale locale = requestLocales.nextElement().         if (supportedLocales.contains(locale)) {             if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {                 // Full match: language + country, possibly narrowed from earlier language-only match                 return locale.             }         } else if (languageMatch == null) {             // Let's try to find a language-only match as a fallback             for (Locale candidate : supportedLocales) {                 if (!StringUtils.hasLength(candidate.getCountry()) && candidate.getLanguage().equals(locale.getLanguage())) {                     languageMatch = candidate.                     break.                 }             }         }     }     return languageMatch. }
false;public;3;5;;@Override public void setLocale(HttpServletRequest request, @Nullable HttpServletResponse response, @Nullable Locale locale) {     throw new UnsupportedOperationException("Cannot change HTTP accept header - use a different locale resolution strategy"). }
