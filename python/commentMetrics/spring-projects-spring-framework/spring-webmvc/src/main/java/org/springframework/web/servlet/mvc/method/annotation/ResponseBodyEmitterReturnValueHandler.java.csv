# id;timestamp;commentText;codeText;commentWords;codeWords
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1491330227;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1492694378;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1496837955;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1498500776;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1508273855;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1522843494;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1529361191;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, 			ContentNegotiationManager manager);1529948549;Complete constructor with pluggable "reactive" type support.__@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types__@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor,_			ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1491330227;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1492694378;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1496837955;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1498500776;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1508273855;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1522843494;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1529361191;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1529948549;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1530294255;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1532406269;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters);1534082111;Simple constructor with reactive type support based on a default instance of_{@link ReactiveAdapterRegistry},_{@link org.springframework.core.task.SyncTaskExecutor}, and_{@link ContentNegotiationManager} with an Accept header strategy.;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {_		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler()__	};simple,constructor,with,reactive,type,support,based,on,a,default,instance,of,link,reactive,adapter,registry,link,org,springframework,core,task,sync,task,executor,and,link,content,negotiation,manager,with,an,accept,header,strategy;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler
ResponseBodyEmitterReturnValueHandler -> public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap();1457972402;Return the map with {@code ResponseBodyEmitter} adapters._By default the map contains a single adapter {@code ResponseBodyEmitter}_that simply downcasts the return value._@return the map of adapters;public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap() {_		return this.adapterMap__	};return,the,map,with,code,response,body,emitter,adapters,by,default,the,map,contains,a,single,adapter,code,response,body,emitter,that,simply,downcasts,the,return,value,return,the,map,of,adapters;public,map,class,response,body,emitter,adapter,get,adapter,map,return,this,adapter,map
ResponseBodyEmitterReturnValueHandler -> public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap();1458150035;Return the map with {@code ResponseBodyEmitter} adapters._By default the map contains a single adapter {@code ResponseBodyEmitter}_that simply downcasts the return value._@return the map of adapters;public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap() {_		return this.adapterMap__	};return,the,map,with,code,response,body,emitter,adapters,by,default,the,map,contains,a,single,adapter,code,response,body,emitter,that,simply,downcasts,the,return,value,return,the,map,of,adapters;public,map,class,response,body,emitter,adapter,get,adapter,map,return,this,adapter,map
ResponseBodyEmitterReturnValueHandler -> public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap();1461704770;Return the map with {@code ResponseBodyEmitter} adapters._By default the map contains a single adapter {@code ResponseBodyEmitter}_that simply downcasts the return value._@return the map of adapters;public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap() {_		return this.adapterMap__	};return,the,map,with,code,response,body,emitter,adapters,by,default,the,map,contains,a,single,adapter,code,response,body,emitter,that,simply,downcasts,the,return,value,return,the,map,of,adapters;public,map,class,response,body,emitter,adapter,get,adapter,map,return,this,adapter,map
ResponseBodyEmitterReturnValueHandler -> public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap();1464701749;Return the map with {@code ResponseBodyEmitter} adapters._By default the map contains a single adapter {@code ResponseBodyEmitter}_that simply downcasts the return value._@return the map of adapters;public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap() {_		return this.adapterMap__	};return,the,map,with,code,response,body,emitter,adapters,by,default,the,map,contains,a,single,adapter,code,response,body,emitter,that,simply,downcasts,the,return,value,return,the,map,of,adapters;public,map,class,response,body,emitter,adapter,get,adapter,map,return,this,adapter,map
ResponseBodyEmitterReturnValueHandler -> public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap();1467730834;Return the map with {@code ResponseBodyEmitter} adapters._By default the map contains a single adapter {@code ResponseBodyEmitter}_that simply downcasts the return value._@return the map of adapters;public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap() {_		return this.adapterMap__	};return,the,map,with,code,response,body,emitter,adapters,by,default,the,map,contains,a,single,adapter,code,response,body,emitter,that,simply,downcasts,the,return,value,return,the,map,of,adapters;public,map,class,response,body,emitter,adapter,get,adapter,map,return,this,adapter,map
ResponseBodyEmitterReturnValueHandler -> public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap();1485810955;Return the map with {@code ResponseBodyEmitter} adapters._By default the map contains a single adapter {@code ResponseBodyEmitter}_that simply downcasts the return value._@return the map of adapters;public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap() {_		return this.adapterMap__	};return,the,map,with,code,response,body,emitter,adapters,by,default,the,map,contains,a,single,adapter,code,response,body,emitter,that,simply,downcasts,the,return,value,return,the,map,of,adapters;public,map,class,response,body,emitter,adapter,get,adapter,map,return,this,adapter,map
ResponseBodyEmitterReturnValueHandler -> public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap();1485860413;Return the map with {@code ResponseBodyEmitter} adapters._By default the map contains a single adapter {@code ResponseBodyEmitter}_that simply downcasts the return value._@return the map of adapters;public Map<Class<?>, ResponseBodyEmitterAdapter> getAdapterMap() {_		return this.adapterMap__	};return,the,map,with,code,response,body,emitter,adapters,by,default,the,map,contains,a,single,adapter,code,response,body,emitter,that,simply,downcasts,the,return,value,return,the,map,of,adapters;public,map,class,response,body,emitter,adapter,get,adapter,map,return,this,adapter,map
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, ContentNegotiationManager manager);1530294255;Complete constructor with pluggable "reactive" type support._@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types_@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, ContentNegotiationManager manager);1532406269;Complete constructor with pluggable "reactive" type support._@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types_@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
ResponseBodyEmitterReturnValueHandler -> public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters, 			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, ContentNegotiationManager manager);1534082111;Complete constructor with pluggable "reactive" type support._@param messageConverters converters to write emitted objects with_@param reactiveRegistry for reactive return value type support_@param executor for blocking I/O writes of items emitted from reactive types_@param manager for detecting streaming media types_@since 5.0;public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters,_			ReactiveAdapterRegistry reactiveRegistry, TaskExecutor executor, ContentNegotiationManager manager) {__		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty")__		this.messageConverters = messageConverters__		this.reactiveHandler = new ReactiveTypeHandler(reactiveRegistry, executor, manager)__	};complete,constructor,with,pluggable,reactive,type,support,param,message,converters,converters,to,write,emitted,objects,with,param,reactive,registry,for,reactive,return,value,type,support,param,executor,for,blocking,i,o,writes,of,items,emitted,from,reactive,types,param,manager,for,detecting,streaming,media,types,since,5,0;public,response,body,emitter,return,value,handler,list,http,message,converter,message,converters,reactive,adapter,registry,reactive,registry,task,executor,executor,content,negotiation,manager,manager,assert,not,empty,message,converters,http,message,converter,list,must,not,be,empty,this,message,converters,message,converters,this,reactive,handler,new,reactive,type,handler,reactive,registry,executor,manager
