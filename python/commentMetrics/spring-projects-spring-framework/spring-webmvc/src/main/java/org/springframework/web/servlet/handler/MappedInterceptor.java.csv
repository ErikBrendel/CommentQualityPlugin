commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure a PathMatcher to use with this MappedInterceptor instead of the one passed  * by default to the {@link #matches(String, org.springframework.util.PathMatcher)} method.  * <p>This is an advanced property that is only required when using custom PathMatcher  * implementations that support mapping metadata other than the Ant-style path patterns  * supported by default.  */ ;/**  * Configure a PathMatcher to use with this MappedInterceptor instead of the one passed  * by default to the {@link #matches(String, org.springframework.util.PathMatcher)} method.  * <p>This is an advanced property that is only required when using custom PathMatcher  * implementations that support mapping metadata other than the Ant-style path patterns  * supported by default.  */ public void setPathMatcher(@Nullable PathMatcher pathMatcher) {     this.pathMatcher = pathMatcher. }
true;public;0;4;/**  * The configured PathMatcher, or {@code null} if none.  */ ;/**  * The configured PathMatcher, or {@code null} if none.  */ @Nullable public PathMatcher getPathMatcher() {     return this.pathMatcher. }
true;public;0;4;/**  * The path into the application the interceptor is mapped to.  */ ;/**  * The path into the application the interceptor is mapped to.  */ @Nullable public String[] getPathPatterns() {     return this.includePatterns. }
true;public;0;3;/**  * The actual {@link HandlerInterceptor} reference.  */ ;/**  * The actual {@link HandlerInterceptor} reference.  */ public HandlerInterceptor getInterceptor() {     return this.interceptor. }
true;public;2;19;/**  * Determine a match for the given lookup path.  * @param lookupPath the current request path  * @param pathMatcher a path matcher for path pattern matching  * @return {@code true} if the interceptor applies to the given request path  */ ;/**  * Determine a match for the given lookup path.  * @param lookupPath the current request path  * @param pathMatcher a path matcher for path pattern matching  * @return {@code true} if the interceptor applies to the given request path  */ public boolean matches(String lookupPath, PathMatcher pathMatcher) {     PathMatcher pathMatcherToUse = (this.pathMatcher != null ? this.pathMatcher : pathMatcher).     if (!ObjectUtils.isEmpty(this.excludePatterns)) {         for (String pattern : this.excludePatterns) {             if (pathMatcherToUse.match(pattern, lookupPath)) {                 return false.             }         }     }     if (ObjectUtils.isEmpty(this.includePatterns)) {         return true.     }     for (String pattern : this.includePatterns) {         if (pathMatcherToUse.match(pattern, lookupPath)) {             return true.         }     }     return false. }
false;public;3;6;;@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {     return this.interceptor.preHandle(request, response, handler). }
false;public;4;6;;@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {     this.interceptor.postHandle(request, response, handler, modelAndView). }
false;public;4;6;;@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {     this.interceptor.afterCompletion(request, response, handler, ex). }
