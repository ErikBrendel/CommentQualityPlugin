commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set HTML escaping for this tag, as boolean value.  * Overrides the default HTML escaping setting for the current page.  * @see HtmlEscapeTag#setDefaultHtmlEscape  */ ;/**  * Set HTML escaping for this tag, as boolean value.  * Overrides the default HTML escaping setting for the current page.  * @see HtmlEscapeTag#setDefaultHtmlEscape  */ public void setHtmlEscape(boolean htmlEscape) throws JspException {     this.htmlEscape = htmlEscape. }
true;protected;0;8;/**  * Return the HTML escaping setting for this tag,  * or the default setting if not overridden.  * @see #isDefaultHtmlEscape()  */ ;/**  * Return the HTML escaping setting for this tag,  * or the default setting if not overridden.  * @see #isDefaultHtmlEscape()  */ protected boolean isHtmlEscape() {     if (this.htmlEscape != null) {         return this.htmlEscape.booleanValue().     } else {         return isDefaultHtmlEscape().     } }
true;protected;0;3;/**  * Return the applicable default HTML escape setting for this tag.  * <p>The default implementation checks the RequestContext's setting,  * falling back to {@code false} in case of no explicit default given.  * @see #getRequestContext()  */ ;/**  * Return the applicable default HTML escape setting for this tag.  * <p>The default implementation checks the RequestContext's setting,  * falling back to {@code false} in case of no explicit default given.  * @see #getRequestContext()  */ protected boolean isDefaultHtmlEscape() {     return getRequestContext().isDefaultHtmlEscape(). }
true;protected;0;3;/**  * Return the applicable default for the use of response encoding with  * HTML escaping for this tag.  * <p>The default implementation checks the RequestContext's setting,  * falling back to {@code false} in case of no explicit default given.  * @since 4.1.2  * @see #getRequestContext()  */ ;/**  * Return the applicable default for the use of response encoding with  * HTML escaping for this tag.  * <p>The default implementation checks the RequestContext's setting,  * falling back to {@code false} in case of no explicit default given.  * @since 4.1.2  * @see #getRequestContext()  */ protected boolean isResponseEncodedHtmlEscape() {     return getRequestContext().isResponseEncodedHtmlEscape(). }
true;protected;1;12;/**  * HTML-encodes the given String, only if the "htmlEscape" setting is enabled.  * <p>The response encoding will be taken into account if the  * "responseEncodedHtmlEscape" setting is enabled as well.  * @param content the String to escape  * @return the escaped String  * @since 4.1.2  * @see #isHtmlEscape()  * @see #isResponseEncodedHtmlEscape()  */ ;/**  * HTML-encodes the given String, only if the "htmlEscape" setting is enabled.  * <p>The response encoding will be taken into account if the  * "responseEncodedHtmlEscape" setting is enabled as well.  * @param content the String to escape  * @return the escaped String  * @since 4.1.2  * @see #isHtmlEscape()  * @see #isResponseEncodedHtmlEscape()  */ protected String htmlEscape(String content) {     String out = content.     if (isHtmlEscape()) {         if (isResponseEncodedHtmlEscape()) {             out = HtmlUtils.htmlEscape(content, this.pageContext.getResponse().getCharacterEncoding()).         } else {             out = HtmlUtils.htmlEscape(content).         }     }     return out. }
