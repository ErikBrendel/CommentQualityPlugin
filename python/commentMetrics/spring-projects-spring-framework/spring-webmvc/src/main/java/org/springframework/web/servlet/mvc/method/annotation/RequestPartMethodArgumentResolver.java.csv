# id;timestamp;commentText;codeText;commentWords;codeWords
RequestPartMethodArgumentResolver -> public boolean supportsParameter(MethodParameter parameter);1328020251;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> public boolean supportsParameter(MethodParameter parameter);1329142650;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> public boolean supportsParameter(MethodParameter parameter);1345574045;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> public boolean supportsParameter(MethodParameter parameter);1357119239;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1356735495;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1368482696;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1375236077;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1385412762;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1390842569;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1390916684;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1416868464;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1423592910;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1424272627;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1424274850;Supports the following:_<ul>_<li>Annotated with {@code @RequestPart}_<li>Of type {@link MultipartFile} unless annotated with {@code @RequestParam}._<li>Of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}._</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1424385427;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1427679734;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class.equals(parameter.getParameterType())) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,equals,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1432125256;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class == parameter.getParameterType()) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1433082765;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class == parameter.getParameterType()) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1435615322;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)){_				return false__			}_			else if (MultipartFile.class == parameter.getParameterType()) {_				return true__			}_			else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {_				return true__			}_			else {_				return false__			}_		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,else,if,multipart,file,class,parameter,get,parameter,type,return,true,else,if,javax,servlet,http,part,equals,parameter,get,parameter,type,get,name,return,true,else,return,false
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1453827975;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1453828707;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1467677340;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1480004335;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1480008530;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1481630403;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1487760984;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1496837955;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1502974979;Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with {@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1530174524;Whether the given {@linkplain MethodParameter method parameter} is a multi-part_supported. Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with_{@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};whether,the,given,linkplain,method,parameter,method,parameter,is,a,multi,part,supported,supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> @Override 	public boolean supportsParameter(MethodParameter parameter);1540406786;Whether the given {@linkplain MethodParameter method parameter} is a multi-part_supported. Supports the following:_<ul>_<li>annotated with {@code @RequestPart}_<li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}_<li>of type {@code javax.servlet.http.Part} unless annotated with_{@code @RequestParam}_</ul>;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(RequestPart.class)) {_			return true__		}_		else {_			if (parameter.hasParameterAnnotation(RequestParam.class)) {_				return false__			}_			return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional())__		}_	};whether,the,given,linkplain,method,parameter,method,parameter,is,a,multi,part,supported,supports,the,following,ul,li,annotated,with,code,request,part,li,of,type,link,multipart,file,unless,annotated,with,code,request,param,li,of,type,code,javax,servlet,http,part,unless,annotated,with,code,request,param,ul;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,request,part,class,return,true,else,if,parameter,has,parameter,annotation,request,param,class,return,false,return,multipart,resolution,delegate,is,multipart,argument,parameter,nested,if,optional
RequestPartMethodArgumentResolver -> private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1345574045;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1356735495;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1357119239;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1368482696;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1375236077;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1385412762;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1390842569;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1427679734;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1432125256;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1433082765;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1435615322;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1453827975;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1453828707;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1467677340;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1480004335;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1480008530;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1481630403;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1487760984;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1496837955;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1502974979;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1530174524;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters);1540406786;Basic constructor with converters only.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters) {_		super(messageConverters)__	};basic,constructor,with,converters,only;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,super,message,converters
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1427679734;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1432125256;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1433082765;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1435615322;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1453827975;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1453828707;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1467677340;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1480004335;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1480008530;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1481630403;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1487760984;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1496837955;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1502974979;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1530174524;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters, 			List<Object> requestResponseBodyAdvice);1540406786;Constructor with converters and {@code Request~} and_{@code ResponseBodyAdvice}.;public RequestPartMethodArgumentResolver(List<HttpMessageConverter<?>> messageConverters,_			List<Object> requestResponseBodyAdvice) {__		super(messageConverters, requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice;public,request,part,method,argument,resolver,list,http,message,converter,message,converters,list,object,request,response,body,advice,super,message,converters,request,response,body,advice
RequestPartMethodArgumentResolver -> private boolean isBindingErrorFatal(MethodParameter parameter);1390916684;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors};private boolean isBindingErrorFatal(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,binding,error,fatal,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> private boolean isBindingErrorFatal(MethodParameter parameter);1416868464;Whether to raise a {@link MethodArgumentNotValidException} on validation errors._@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors};private boolean isBindingErrorFatal(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,link,method,argument,not,valid,exception,on,validation,errors,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;private,boolean,is,binding,error,fatal,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
RequestPartMethodArgumentResolver -> protected void validate(WebDataBinder binder, MethodParameter param) throws MethodArgumentNotValidException;1424272627;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param param the method parameter_@throws MethodArgumentNotValidException in case of a binding error which_is meant to be fatal (i.e. without a declared {@link Errors} parameter)_@see #isBindingErrorFatal;protected void validate(WebDataBinder binder, MethodParameter param) throws MethodArgumentNotValidException {_		Annotation[] annotations = param.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				BindingResult bindingResult = binder.getBindingResult()__				if (bindingResult.hasErrors()) {_					if (isBindingErrorFatal(param)) {_						throw new MethodArgumentNotValidException(param, bindingResult)__					}_				}_			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,param,the,method,parameter,throws,method,argument,not,valid,exception,in,case,of,a,binding,error,which,is,meant,to,be,fatal,i,e,without,a,declared,link,errors,parameter,see,is,binding,error,fatal;protected,void,validate,web,data,binder,binder,method,parameter,param,throws,method,argument,not,valid,exception,annotation,annotations,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,binding,result,binding,result,binder,get,binding,result,if,binding,result,has,errors,if,is,binding,error,fatal,param,throw,new,method,argument,not,valid,exception,param,binding,result
RequestPartMethodArgumentResolver -> protected void validate(WebDataBinder binder, MethodParameter param) throws MethodArgumentNotValidException;1424274850;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param param the method parameter_@throws MethodArgumentNotValidException in case of a binding error which_is meant to be fatal (i.e. without a declared {@link Errors} parameter)_@see #isBindingErrorFatal;protected void validate(WebDataBinder binder, MethodParameter param) throws MethodArgumentNotValidException {_		Annotation[] annotations = param.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				BindingResult bindingResult = binder.getBindingResult()__				if (bindingResult.hasErrors()) {_					if (isBindingErrorFatal(param)) {_						throw new MethodArgumentNotValidException(param, bindingResult)__					}_				}_			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,param,the,method,parameter,throws,method,argument,not,valid,exception,in,case,of,a,binding,error,which,is,meant,to,be,fatal,i,e,without,a,declared,link,errors,parameter,see,is,binding,error,fatal;protected,void,validate,web,data,binder,binder,method,parameter,param,throws,method,argument,not,valid,exception,annotation,annotations,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,binding,result,binding,result,binder,get,binding,result,if,binding,result,has,errors,if,is,binding,error,fatal,param,throw,new,method,argument,not,valid,exception,param,binding,result
