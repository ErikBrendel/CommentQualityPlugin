commented;modifiers;parameterAmount;loc;comment;code
true;public;1;12;/**  * Whether the given {@linkplain MethodParameter method parameter} is a multi-part  * supported. Supports the following:  * <ul>  * <li>annotated with {@code @RequestPart}  * <li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}  * <li>of type {@code javax.servlet.http.Part} unless annotated with  * {@code @RequestParam}  * </ul>  */ ;/**  * Whether the given {@linkplain MethodParameter method parameter} is a multi-part  * supported. Supports the following:  * <ul>  * <li>annotated with {@code @RequestPart}  * <li>of type {@link MultipartFile} unless annotated with {@code @RequestParam}  * <li>of type {@code javax.servlet.http.Part} unless annotated with  * {@code @RequestParam}  * </ul>  */ @Override public boolean supportsParameter(MethodParameter parameter) {     if (parameter.hasParameterAnnotation(RequestPart.class)) {         return true.     } else {         if (parameter.hasParameterAnnotation(RequestParam.class)) {             return false.         }         return MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional()).     } }
false;public;4;53;;@Override @Nullable public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest request, @Nullable WebDataBinderFactory binderFactory) throws Exception {     HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class).     Assert.state(servletRequest != null, "No HttpServletRequest").     RequestPart requestPart = parameter.getParameterAnnotation(RequestPart.class).     boolean isRequired = ((requestPart == null || requestPart.required()) && !parameter.isOptional()).     String name = getPartName(parameter, requestPart).     parameter = parameter.nestedIfOptional().     Object arg = null.     Object mpArg = MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest).     if (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) {         arg = mpArg.     } else {         try {             HttpInputMessage inputMessage = new RequestPartServletServerHttpRequest(servletRequest, name).             arg = readWithMessageConverters(inputMessage, parameter, parameter.getNestedGenericParameterType()).             if (binderFactory != null) {                 WebDataBinder binder = binderFactory.createBinder(request, arg, name).                 if (arg != null) {                     validateIfApplicable(binder, parameter).                     if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {                         throw new MethodArgumentNotValidException(parameter, binder.getBindingResult()).                     }                 }                 if (mavContainer != null) {                     mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult()).                 }             }         } catch (MissingServletRequestPartException | MultipartException ex) {             if (isRequired) {                 throw ex.             }         }     }     if (arg == null && isRequired) {         if (!MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {             throw new MultipartException("Current request is not a multipart request").         } else {             throw new MissingServletRequestPartException(name).         }     }     return adaptArgumentIfNecessary(arg, parameter). }
false;private;2;12;;private String getPartName(MethodParameter methodParam, @Nullable RequestPart requestPart) {     String partName = (requestPart != null ? requestPart.name() : "").     if (partName.isEmpty()) {         partName = methodParam.getParameterName().         if (partName == null) {             throw new IllegalArgumentException("Request part name for argument type [" + methodParam.getNestedParameterType().getName() + "] not specified, and parameter name information not found in class file either.").         }     }     return partName. }
