# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1345237516;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1351301394;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1351648724;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1354139803;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1362408075;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1413848647;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1467730834;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1491341544;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.__@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1496837955;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3._@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1500495740;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3._@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1508532146;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3._@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setDefaultTimeout(long timeout);1531321803;Specify the amount of time, in milliseconds, before asynchronous request_handling times out. In Servlet 3, the timeout begins after the main request_processing thread has exited and ends when the request is dispatched again_for further processing of the concurrently produced result._<p>If this value is not set, the default timeout of the underlying_implementation is used, e.g. 10 seconds on Tomcat with Servlet 3._@param timeout the timeout value in milliseconds;public AsyncSupportConfigurer setDefaultTimeout(long timeout) {_		this.timeout = timeout__		return this__	};specify,the,amount,of,time,in,milliseconds,before,asynchronous,request,handling,times,out,in,servlet,3,the,timeout,begins,after,the,main,request,processing,thread,has,exited,and,ends,when,the,request,is,dispatched,again,for,further,processing,of,the,concurrently,produced,result,p,if,this,value,is,not,set,the,default,timeout,of,the,underlying,implementation,is,used,e,g,10,seconds,on,tomcat,with,servlet,3,param,timeout,the,timeout,value,in,milliseconds;public,async,support,configurer,set,default,timeout,long,timeout,this,timeout,timeout,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors( 			DeferredResultProcessingInterceptor... interceptors);1508532146;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(_			DeferredResultProcessingInterceptor... interceptors) {__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors( 			DeferredResultProcessingInterceptor... interceptors);1531321803;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(_			DeferredResultProcessingInterceptor... interceptors) {__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1351301394;Configure lifecycle intercepters with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,intercepters,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1351648724;Configure lifecycle intercepters with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,intercepters,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1354139803;Configure lifecycle intercepters with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,intercepters,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1362408075;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1413848647;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1467730834;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1491341544;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1496837955;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1500495740;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1508532146;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1531321803;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a_{@link java.util.concurrent.Callable}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		this.callableInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,java,util,concurrent,callable,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,callable,interceptors,callable,processing,interceptor,interceptors,this,callable,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1351301394;Configure lifecycle intercepters with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,intercepters,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1351648724;Configure lifecycle intercepters with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,intercepters,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1354139803;Configure lifecycle intercepters with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,intercepters,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1362408075;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1413848647;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1467730834;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1491341544;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}.__@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "Interceptors are required")__		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,interceptors,are,required,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1496837955;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1500495740;Configure lifecycle interceptors with callbacks around concurrent request_execution that starts when a controller returns a {@link DeferredResult}._@param interceptors the interceptors to register;public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		this.deferredResultInterceptors.addAll(Arrays.asList(interceptors))__		return this__	};configure,lifecycle,interceptors,with,callbacks,around,concurrent,request,execution,that,starts,when,a,controller,returns,a,link,deferred,result,param,interceptors,the,interceptors,to,register;public,async,support,configurer,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,this,deferred,result,interceptors,add,all,arrays,as,list,interceptors,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1345237516;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning an {@link AsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,an,link,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1351301394;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning an {@link AsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,an,link,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1351648724;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning an {@link MvcAsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,an,link,mvc,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1354139803;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning an {@link WebAsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,an,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1362408075;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning a {@link WebAsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,a,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1413848647;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning a {@link WebAsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,a,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1467730834;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning a {@link WebAsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,a,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1491341544;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning a {@link WebAsyncTask}.__<p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's_highly recommended to change that default in production since the simple_executor does not re-use threads.__<p>As of 5.0 this executor is also used when a controller returns a reactive_type that does streaming (e.g. "text/event-stream" or_"application/stream+json") for the blocking writes to the_{@link javax.servlet.ServletOutputStream}.__@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,a,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,p,as,of,5,0,this,executor,is,also,used,when,a,controller,returns,a,reactive,type,that,does,streaming,e,g,text,event,stream,or,application,stream,json,for,the,blocking,writes,to,the,link,javax,servlet,servlet,output,stream,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1496837955;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning a {@link WebAsyncTask}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's_highly recommended to change that default in production since the simple_executor does not re-use threads._<p>As of 5.0 this executor is also used when a controller returns a reactive_type that does streaming (e.g. "text/event-stream" or_"application/stream+json") for the blocking writes to the_{@link javax.servlet.ServletOutputStream}._@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,a,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,p,as,of,5,0,this,executor,is,also,used,when,a,controller,returns,a,reactive,type,that,does,streaming,e,g,text,event,stream,or,application,stream,json,for,the,blocking,writes,to,the,link,javax,servlet,servlet,output,stream,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1500495740;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning a {@link WebAsyncTask}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's_highly recommended to change that default in production since the simple_executor does not re-use threads._<p>As of 5.0 this executor is also used when a controller returns a reactive_type that does streaming (e.g. "text/event-stream" or_"application/stream+json") for the blocking writes to the_{@link javax.servlet.ServletOutputStream}._@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,a,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,p,as,of,5,0,this,executor,is,also,used,when,a,controller,returns,a,reactive,type,that,does,streaming,e,g,text,event,stream,or,application,stream,json,for,the,blocking,writes,to,the,link,javax,servlet,servlet,output,stream,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1508532146;Set the default {@link AsyncTaskExecutor} to use when a controller method_returns a {@link Callable}. Controller methods can override this default on_a per-request basis by returning a {@link WebAsyncTask}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used, and it's_highly recommended to change that default in production since the simple_executor does not re-use threads._<p>As of 5.0 this executor is also used when a controller returns a reactive_type that does streaming (e.g. "text/event-stream" or_"application/stream+json") for the blocking writes to the_{@link javax.servlet.ServletOutputStream}._@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};set,the,default,link,async,task,executor,to,use,when,a,controller,method,returns,a,link,callable,controller,methods,can,override,this,default,on,a,per,request,basis,by,returning,a,link,web,async,task,p,by,default,a,link,simple,async,task,executor,instance,is,used,and,it,s,highly,recommended,to,change,that,default,in,production,since,the,simple,executor,does,not,re,use,threads,p,as,of,5,0,this,executor,is,also,used,when,a,controller,returns,a,reactive,type,that,does,streaming,e,g,text,event,stream,or,application,stream,json,for,the,blocking,writes,to,the,link,javax,servlet,servlet,output,stream,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
AsyncSupportConfigurer -> public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor);1531321803;The provided task executor is used to:_<ol>_<li>Handle {@link Callable} controller method return values._<li>Perform blocking writes when streaming to the response_through a reactive (e.g. Reactor, RxJava) controller method return value._</ol>_<p>By default only a {@link SimpleAsyncTaskExecutor} is used. However when_using the above two use cases, it's recommended to configure an executor_backed by a thread pool such as {@link ThreadPoolTaskExecutor}._@param taskExecutor the task executor instance to use by default;public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__		return this__	};the,provided,task,executor,is,used,to,ol,li,handle,link,callable,controller,method,return,values,li,perform,blocking,writes,when,streaming,to,the,response,through,a,reactive,e,g,reactor,rx,java,controller,method,return,value,ol,p,by,default,only,a,link,simple,async,task,executor,is,used,however,when,using,the,above,two,use,cases,it,s,recommended,to,configure,an,executor,backed,by,a,thread,pool,such,as,link,thread,pool,task,executor,param,task,executor,the,task,executor,instance,to,use,by,default;public,async,support,configurer,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor,return,this
