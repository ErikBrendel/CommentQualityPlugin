commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * The provided task executor is used to:  * <ol>  * <li>Handle {@link Callable} controller method return values.  * <li>Perform blocking writes when streaming to the response  * through a reactive (e.g. Reactor, RxJava) controller method return value.  * </ol>  * <p>By default only a {@link SimpleAsyncTaskExecutor} is used. However when  * using the above two use cases, it's recommended to configure an executor  * backed by a thread pool such as {@link ThreadPoolTaskExecutor}.  * @param taskExecutor the task executor instance to use by default  */ ;/**  * The provided task executor is used to:  * <ol>  * <li>Handle {@link Callable} controller method return values.  * <li>Perform blocking writes when streaming to the response  * through a reactive (e.g. Reactor, RxJava) controller method return value.  * </ol>  * <p>By default only a {@link SimpleAsyncTaskExecutor} is used. However when  * using the above two use cases, it's recommended to configure an executor  * backed by a thread pool such as {@link ThreadPoolTaskExecutor}.  * @param taskExecutor the task executor instance to use by default  */ public AsyncSupportConfigurer setTaskExecutor(AsyncTaskExecutor taskExecutor) {     this.taskExecutor = taskExecutor.     return this. }
true;public;1;4;/**  * Specify the amount of time, in milliseconds, before asynchronous request  * handling times out. In Servlet 3, the timeout begins after the main request  * processing thread has exited and ends when the request is dispatched again  * for further processing of the concurrently produced result.  * <p>If this value is not set, the default timeout of the underlying  * implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.  * @param timeout the timeout value in milliseconds  */ ;/**  * Specify the amount of time, in milliseconds, before asynchronous request  * handling times out. In Servlet 3, the timeout begins after the main request  * processing thread has exited and ends when the request is dispatched again  * for further processing of the concurrently produced result.  * <p>If this value is not set, the default timeout of the underlying  * implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.  * @param timeout the timeout value in milliseconds  */ public AsyncSupportConfigurer setDefaultTimeout(long timeout) {     this.timeout = timeout.     return this. }
true;public;1;4;/**  * Configure lifecycle interceptors with callbacks around concurrent request  * execution that starts when a controller returns a  * {@link java.util.concurrent.Callable}.  * @param interceptors the interceptors to register  */ ;/**  * Configure lifecycle interceptors with callbacks around concurrent request  * execution that starts when a controller returns a  * {@link java.util.concurrent.Callable}.  * @param interceptors the interceptors to register  */ public AsyncSupportConfigurer registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {     this.callableInterceptors.addAll(Arrays.asList(interceptors)).     return this. }
true;public;1;6;/**  * Configure lifecycle interceptors with callbacks around concurrent request  * execution that starts when a controller returns a {@link DeferredResult}.  * @param interceptors the interceptors to register  */ ;/**  * Configure lifecycle interceptors with callbacks around concurrent request  * execution that starts when a controller returns a {@link DeferredResult}.  * @param interceptors the interceptors to register  */ public AsyncSupportConfigurer registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {     this.deferredResultInterceptors.addAll(Arrays.asList(interceptors)).     return this. }
false;protected;0;4;;@Nullable protected AsyncTaskExecutor getTaskExecutor() {     return this.taskExecutor. }
false;protected;0;4;;@Nullable protected Long getTimeout() {     return this.timeout. }
false;protected;0;3;;protected List<CallableProcessingInterceptor> getCallableInterceptors() {     return this.callableInterceptors. }
false;protected;0;3;;protected List<DeferredResultProcessingInterceptor> getDeferredResultInterceptors() {     return this.deferredResultInterceptors. }
