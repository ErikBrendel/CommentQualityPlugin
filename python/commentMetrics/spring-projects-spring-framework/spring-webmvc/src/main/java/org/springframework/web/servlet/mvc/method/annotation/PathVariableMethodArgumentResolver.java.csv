commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public boolean supportsParameter(MethodParameter parameter) {     if (!parameter.hasParameterAnnotation(PathVariable.class)) {         return false.     }     if (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) {         PathVariable pathVariable = parameter.getParameterAnnotation(PathVariable.class).         return (pathVariable != null && StringUtils.hasText(pathVariable.value())).     }     return true. }
false;protected;1;6;;@Override protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {     PathVariable ann = parameter.getParameterAnnotation(PathVariable.class).     Assert.state(ann != null, "No PathVariable annotation").     return new PathVariableNamedValueInfo(ann). }
false;protected;3;8;;@Override @SuppressWarnings("unchecked") @Nullable protected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {     Map<String, String> uriTemplateVars = (Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST).     return (uriTemplateVars != null ? uriTemplateVars.get(name) : null). }
false;protected;2;4;;@Override protected void handleMissingValue(String name, MethodParameter parameter) throws ServletRequestBindingException {     throw new MissingPathVariableException(name, parameter). }
false;protected;5;14;;@Override @SuppressWarnings("unchecked") protected void handleResolvedValue(@Nullable Object arg, String name, MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest request) {     String key = View.PATH_VARIABLES.     int scope = RequestAttributes.SCOPE_REQUEST.     Map<String, Object> pathVars = (Map<String, Object>) request.getAttribute(key, scope).     if (pathVars == null) {         pathVars = new HashMap<>().         request.setAttribute(key, pathVars, scope).     }     pathVars.put(name, arg). }
false;public;5;13;;@Override public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {     if (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) {         return.     }     PathVariable ann = parameter.getParameterAnnotation(PathVariable.class).     String name = (ann != null && !StringUtils.isEmpty(ann.value()) ? ann.value() : parameter.getParameterName()).     String formatted = formatUriValue(conversionService, new TypeDescriptor(parameter.nestedIfOptional()), value).     uriVariables.put(name, formatted). }
false;protected;3;12;;@Nullable protected String formatUriValue(@Nullable ConversionService cs, @Nullable TypeDescriptor sourceType, Object value) {     if (value instanceof String) {         return (String) value.     } else if (cs != null) {         return (String) cs.convert(value, sourceType, STRING_TYPE_DESCRIPTOR).     } else {         return value.toString().     } }
