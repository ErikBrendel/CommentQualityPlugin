commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the class of the servlet to wrap.  * Needs to implement {@code javax.servlet.Servlet}.  * @see javax.servlet.Servlet  */ ;/**  * Set the class of the servlet to wrap.  * Needs to implement {@code javax.servlet.Servlet}.  * @see javax.servlet.Servlet  */ public void setServletClass(Class<? extends Servlet> servletClass) {     this.servletClass = servletClass. }
true;public;1;3;/**  * Set the name of the servlet to wrap.  * Default is the bean name of this controller.  */ ;/**  * Set the name of the servlet to wrap.  * Default is the bean name of this controller.  */ public void setServletName(String servletName) {     this.servletName = servletName. }
true;public;1;3;/**  * Specify init parameters for the servlet to wrap,  * as name-value pairs.  */ ;/**  * Specify init parameters for the servlet to wrap,  * as name-value pairs.  */ public void setInitParameters(Properties initParameters) {     this.initParameters = initParameters. }
false;public;1;4;;@Override public void setBeanName(String name) {     this.beanName = name. }
true;public;0;11;/**  * Initialize the wrapped Servlet instance.  * @see javax.servlet.Servlet#init(javax.servlet.ServletConfig)  */ ;/**  * Initialize the wrapped Servlet instance.  * @see javax.servlet.Servlet#init(javax.servlet.ServletConfig)  */ @Override public void afterPropertiesSet() throws Exception {     if (this.servletClass == null) {         throw new IllegalArgumentException("'servletClass' is required").     }     if (this.servletName == null) {         this.servletName = this.beanName.     }     this.servletInstance = ReflectionUtils.accessibleConstructor(this.servletClass).newInstance().     this.servletInstance.init(new DelegatingServletConfig()). }
true;protected;2;8;/**  * Invoke the wrapped Servlet instance.  * @see javax.servlet.Servlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)  */ ;/**  * Invoke the wrapped Servlet instance.  * @see javax.servlet.Servlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)  */ @Override protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {     Assert.state(this.servletInstance != null, "No Servlet instance").     this.servletInstance.service(request, response).     return null. }
true;public;0;6;/**  * Destroy the wrapped Servlet instance.  * @see javax.servlet.Servlet#destroy()  */ ;/**  * Destroy the wrapped Servlet instance.  * @see javax.servlet.Servlet#destroy()  */ @Override public void destroy() {     if (this.servletInstance != null) {         this.servletInstance.destroy().     } }
false;public;0;5;;@Override @Nullable public String getServletName() {     return servletName. }
false;public;0;5;;@Override @Nullable public ServletContext getServletContext() {     return ServletWrappingController.this.getServletContext(). }
false;public;1;4;;@Override public String getInitParameter(String paramName) {     return initParameters.getProperty(paramName). }
false;public;0;5;;@Override @SuppressWarnings({ "unchecked", "rawtypes" }) public Enumeration<String> getInitParameterNames() {     return (Enumeration) initParameters.keys(). }
