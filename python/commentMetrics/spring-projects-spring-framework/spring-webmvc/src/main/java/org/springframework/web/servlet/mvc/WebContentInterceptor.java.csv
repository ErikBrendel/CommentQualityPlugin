# id;timestamp;commentText;codeText;commentWords;codeWords
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1328020251;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1356735495;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1357119239;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1368482696;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1385412762;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1427130064;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1436310496;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1437472622;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1437503583;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1467730834;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1468613531;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1484684890;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1486634978;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1486635693;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1495868221;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1496242568;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1500043922;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1500495740;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1522273692;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1529361191;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1530174524;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) 			throws Exception;1496242568;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) 			throws Exception;1500043922;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1356735495;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1368482696;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1385412762;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1427130064;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1436310496;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1437472622;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1437503583;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1467730834;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1468613531;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1484684890;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1486634978;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1486635693;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1495868221;This implementation is empty.;@Override_	public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1436310496;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl == null) {_			_			for (String registeredPath : this.cacheControlMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheControl = this.cacheControlMappings.get(registeredPath)__				}_			}_		}_		return cacheControl__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,control,this,cache,control,mappings,get,registered,path,return,cache,control
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1437472622;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl == null) {_			_			for (String registeredPath : this.cacheControlMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheControl = this.cacheControlMappings.get(registeredPath)__				}_			}_		}_		return cacheControl__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,control,this,cache,control,mappings,get,registered,path,return,cache,control
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1437503583;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl == null) {_			_			for (String registeredPath : this.cacheControlMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheControl = this.cacheControlMappings.get(registeredPath)__				}_			}_		}_		return cacheControl__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,control,this,cache,control,mappings,get,registered,path,return,cache,control
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1467730834;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl == null) {_			_			for (String registeredPath : this.cacheControlMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheControl = this.cacheControlMappings.get(registeredPath)__				}_			}_		}_		return cacheControl__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,control,this,cache,control,mappings,get,registered,path,return,cache,control
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1468613531;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl == null) {_			_			for (String registeredPath : this.cacheControlMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheControl = this.cacheControlMappings.get(registeredPath)__				}_			}_		}_		return cacheControl__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,control,this,cache,control,mappings,get,registered,path,return,cache,control
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1484684890;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1486634978;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> protected CacheControl lookupCacheControl(String urlPath);1486635693;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1328020251;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1356735495;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1357119239;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1368482696;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1385412762;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1427130064;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1436310496;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1437472622;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1437503583;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1467730834;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper_@see org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper,see,org,springframework,web,servlet,mvc,multiaction,abstract,url,method,name,resolver,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1468613531;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1484684890;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1486634978;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1486635693;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1495868221;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1496242568;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1500043922;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1500495740;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1522273692;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1529361191;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1530174524;Set the UrlPathHelper to use for resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple HandlerMappings_and MethodNameResolvers._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,handler,mappings,and,method,name,resolvers,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
WebContentInterceptor -> public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1328020251;This implementation is empty.;public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1357119239;This implementation is empty.;public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Nullable 	protected CacheControl lookupCacheControl(String urlPath);1495868221;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected CacheControl lookupCacheControl(String urlPath);1496242568;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected CacheControl lookupCacheControl(String urlPath);1500043922;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected CacheControl lookupCacheControl(String urlPath);1500495740;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected CacheControl lookupCacheControl(String urlPath);1522273692;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected CacheControl lookupCacheControl(String urlPath);1529361191;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected CacheControl lookupCacheControl(String urlPath);1530174524;Look up a {@link org.springframework.http.CacheControl} instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath the URL the bean is mapped to_@return the associated {@code CacheControl}, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected CacheControl lookupCacheControl(String urlPath) {_		_		CacheControl cacheControl = this.cacheControlMappings.get(urlPath)__		if (cacheControl != null) {_			return cacheControl__		}_		_		for (String registeredPath : this.cacheControlMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheControlMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,link,org,springframework,http,cache,control,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,the,url,the,bean,is,mapped,to,return,the,associated,code,cache,control,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,cache,control,lookup,cache,control,string,url,path,cache,control,cache,control,this,cache,control,mappings,get,url,path,if,cache,control,null,return,cache,control,for,string,registered,path,this,cache,control,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,control,mappings,get,registered,path,return,null
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1328020251;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			this.cacheMappings.put(path, Integer.valueOf(cacheMappings.getProperty(path)))__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,this,cache,mappings,put,path,integer,value,of,cache,mappings,get,property,path
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1356735495;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			this.cacheMappings.put(path, Integer.valueOf(cacheMappings.getProperty(path)))__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,this,cache,mappings,put,path,integer,value,of,cache,mappings,get,property,path
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1357119239;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			this.cacheMappings.put(path, Integer.valueOf(cacheMappings.getProperty(path)))__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,this,cache,mappings,put,path,integer,value,of,cache,mappings,get,property,path
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1368482696;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			this.cacheMappings.put(path, Integer.valueOf(cacheMappings.getProperty(path)))__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,this,cache,mappings,put,path,integer,value,of,cache,mappings,get,property,path
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1385412762;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			this.cacheMappings.put(path, Integer.valueOf(cacheMappings.getProperty(path)))__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,this,cache,mappings,put,path,integer,value,of,cache,mappings,get,property,path
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1427130064;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			if (cacheSeconds > 0) {_				this.cacheMappings.put(path, CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS))__			}_			else if (cacheSeconds == 0) {_				this.cacheMappings.put(path, CacheControl.noStore())__			}_			else {_				this.cacheMappings.put(path, CacheControl.empty())__			}_		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,if,cache,seconds,0,this,cache,mappings,put,path,cache,control,max,age,cache,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,mappings,put,path,cache,control,no,store,else,this,cache,mappings,put,path,cache,control,empty
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1436310496;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1437472622;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1437503583;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1467730834;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1468613531;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1484684890;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1486634978;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1486635693;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1495868221;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1496242568;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1500043922;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1500495740;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.valueOf(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,value,of,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1522273692;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.parseInt(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,parse,int,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1529361191;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.parseInt(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,parse,int,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> public void setCacheMappings(Properties cacheMappings);1530174524;Map specific URL paths to specific cache seconds._<p>Overrides the default cache seconds setting of this interceptor._Can specify "-1" to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in {@code java.util.Properties})._@param cacheMappings a mapping between URL paths (as keys) and_cache seconds (as values, need to be integer-parsable)_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void setCacheMappings(Properties cacheMappings) {_		this.cacheMappings.clear()__		Enumeration<?> propNames = cacheMappings.propertyNames()__		while (propNames.hasMoreElements()) {_			String path = (String) propNames.nextElement()__			int cacheSeconds = Integer.parseInt(cacheMappings.getProperty(path))__			this.cacheMappings.put(path, cacheSeconds)__		}_	};map,specific,url,paths,to,specific,cache,seconds,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,1,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,code,java,util,properties,param,cache,mappings,a,mapping,between,url,paths,as,keys,and,cache,seconds,as,values,need,to,be,integer,parsable,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,set,cache,mappings,properties,cache,mappings,this,cache,mappings,clear,enumeration,prop,names,cache,mappings,property,names,while,prop,names,has,more,elements,string,path,string,prop,names,next,element,int,cache,seconds,integer,parse,int,cache,mappings,get,property,path,this,cache,mappings,put,path,cache,seconds
WebContentInterceptor -> @Override 	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable Exception ex) throws Exception;1500495740;This implementation is empty.;@Override_	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable Exception ex) throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable Exception ex) throws Exception;1522273692;This implementation is empty.;@Override_	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable Exception ex) throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable Exception ex) throws Exception;1529361191;This implementation is empty.;@Override_	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable Exception ex) throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable Exception ex) throws Exception;1530174524;This implementation is empty.;@Override_	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable Exception ex) throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,exception,ex,throws,exception
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1328020251;Look up a cache seconds value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated cache seconds, or <code>null</code> if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,cache,seconds,or,code,null,code,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1356735495;Look up a cache seconds value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated cache seconds, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,cache,seconds,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1357119239;Look up a cache seconds value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated cache seconds, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,cache,seconds,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1368482696;Look up a cache seconds value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated cache seconds, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,cache,seconds,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1385412762;Look up a cache seconds value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the associated cache seconds, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,associated,cache,seconds,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1436310496;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1437472622;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1437503583;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1467730834;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1468613531;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds == null) {_			_			for (String registeredPath : this.cacheMappings.keySet()) {_				if (this.pathMatcher.match(registeredPath, urlPath)) {_					cacheSeconds = this.cacheMappings.get(registeredPath)__				}_			}_		}_		return cacheSeconds__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,cache,seconds,this,cache,mappings,get,registered,path,return,cache,seconds
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1484684890;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1486634978;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> protected Integer lookupCacheSeconds(String urlPath);1486635693;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected Integer lookupCacheSeconds(String urlPath);1495868221;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected Integer lookupCacheSeconds(String urlPath);1496242568;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected Integer lookupCacheSeconds(String urlPath);1500043922;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected Integer lookupCacheSeconds(String urlPath);1500495740;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected Integer lookupCacheSeconds(String urlPath);1522273692;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected Integer lookupCacheSeconds(String urlPath);1529361191;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> @Nullable 	protected Integer lookupCacheSeconds(String urlPath);1530174524;Look up a cacheSeconds integer value for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._@param urlPath the URL the bean is mapped to_@return the cacheSeconds integer value, or {@code null} if not found_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Integer lookupCacheSeconds(String urlPath) {_		_		Integer cacheSeconds = this.cacheMappings.get(urlPath)__		if (cacheSeconds != null) {_			return cacheSeconds__		}_		_		for (String registeredPath : this.cacheMappings.keySet()) {_			if (this.pathMatcher.match(registeredPath, urlPath)) {_				return this.cacheMappings.get(registeredPath)__			}_		}_		return null__	};look,up,a,cache,seconds,integer,value,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,param,url,path,the,url,the,bean,is,mapped,to,return,the,cache,seconds,integer,value,or,code,null,if,not,found,see,org,springframework,util,ant,path,matcher;nullable,protected,integer,lookup,cache,seconds,string,url,path,integer,cache,seconds,this,cache,mappings,get,url,path,if,cache,seconds,null,return,cache,seconds,for,string,registered,path,this,cache,mappings,key,set,if,this,path,matcher,match,registered,path,url,path,return,this,cache,mappings,get,registered,path,return,null
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1427130064;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching.__<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc.__@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher_@since 4.2;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher,since,4,2;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1436310496;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching.__<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc.__@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher_@since 4.2;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher,since,4,2;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1437472622;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching.__<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc.__@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher_@since 4.2;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher,since,4,2;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1437503583;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher_@since 4.2;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher,since,4,2;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1467730834;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher_@since 4.2;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher,since,4,2;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1468613531;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher_@since 4.2;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher,since,4,2;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1484684890;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1486634978;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1486635693;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1495868221;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1496242568;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1500043922;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1500495740;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1522273692;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1529361191;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void addCacheMapping(CacheControl cacheControl, String... paths);1530174524;Map specific URL paths to a specific {@link org.springframework.http.CacheControl}._<p>Overrides the default cache seconds setting of this interceptor._Can specify a empty {@link org.springframework.http.CacheControl} instance_to exclude a URL path from default caching._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and a various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher javadoc._<p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request_matches several mappings, it is effectively undefined which one will apply_(due to the lack of key ordering in the underlying {@code java.util.HashMap})._@param cacheControl the {@code CacheControl} to use_@param paths the URL paths that will map to the given {@code CacheControl}_@since 4.2_@see #setCacheSeconds_@see org.springframework.util.AntPathMatcher;public void addCacheMapping(CacheControl cacheControl, String... paths) {_		for (String path : paths) {_			this.cacheControlMappings.put(path, cacheControl)__		}_	};map,specific,url,paths,to,a,specific,link,org,springframework,http,cache,control,p,overrides,the,default,cache,seconds,setting,of,this,interceptor,can,specify,a,empty,link,org,springframework,http,cache,control,instance,to,exclude,a,url,path,from,default,caching,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,a,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,javadoc,p,b,note,b,path,patterns,are,not,supposed,to,overlap,if,a,request,matches,several,mappings,it,is,effectively,undefined,which,one,will,apply,due,to,the,lack,of,key,ordering,in,the,underlying,code,java,util,hash,map,param,cache,control,the,code,cache,control,to,use,param,paths,the,url,paths,that,will,map,to,the,given,code,cache,control,since,4,2,see,set,cache,seconds,see,org,springframework,util,ant,path,matcher;public,void,add,cache,mapping,cache,control,cache,control,string,paths,for,string,path,paths,this,cache,control,mappings,put,path,cache,control
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1328020251;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1356735495;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1357119239;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1368482696;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1385412762;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1427130064;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1436310496;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1437472622;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1437503583;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1467730834;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1468613531;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1484684890;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1486634978;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1486635693;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1495868221;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1496242568;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1500043922;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1500495740;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1522273692;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1529361191;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> public void setPathMatcher(PathMatcher pathMatcher);1530174524;Set the PathMatcher implementation to use for matching URL paths_against registered URL patterns, for determining cache mappings._Default is AntPathMatcher._@see #addCacheMapping_@see #setCacheMappings_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,matching,url,paths,against,registered,url,patterns,for,determining,cache,mappings,default,is,ant,path,matcher,see,add,cache,mapping,see,set,cache,mappings,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
WebContentInterceptor -> @Override 	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable ModelAndView modelAndView) throws Exception;1500495740;This implementation is empty.;@Override_	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable ModelAndView modelAndView) throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable ModelAndView modelAndView) throws Exception;1522273692;This implementation is empty.;@Override_	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable ModelAndView modelAndView) throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable ModelAndView modelAndView) throws Exception;1529361191;This implementation is empty.;@Override_	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable ModelAndView modelAndView) throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, 			@Nullable ModelAndView modelAndView) throws Exception;1530174524;This implementation is empty.;@Override_	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,_			@Nullable ModelAndView modelAndView) throws Exception {_	};this,implementation,is,empty;override,public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1328020251;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1356735495;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1357119239;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1368482696;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1385412762;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1427130064;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1436310496;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1437472622;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1437503583;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1467730834;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1468613531;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1484684890;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1486634978;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1486635693;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1495868221;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1496242568;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1500043922;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1500495740;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1522273692;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1529361191;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void setUrlDecode(boolean urlDecode);1530174524;Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}._<p>Only relevant for the "cacheMappings" setting._@see #setCacheMappings_@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};shortcut,to,same,property,on,underlying,link,set,url,path,helper,url,path,helper,p,only,relevant,for,the,cache,mappings,setting,see,set,cache,mappings,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
WebContentInterceptor -> public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1328020251;This implementation is empty.;public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> public void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception;1357119239;This implementation is empty.;public void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception {_	};this,implementation,is,empty;public,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1356735495;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1368482696;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1385412762;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1427130064;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1436310496;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1437472622;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1437503583;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1467730834;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1468613531;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1484684890;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1486634978;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1486635693;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1495868221;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1496242568;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
WebContentInterceptor -> @Override 	public void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1500043922;This implementation is empty.;@Override_	public void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};this,implementation,is,empty;override,public,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
