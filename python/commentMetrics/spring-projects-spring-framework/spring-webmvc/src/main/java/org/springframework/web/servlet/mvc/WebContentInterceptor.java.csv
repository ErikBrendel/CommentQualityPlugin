commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * <p>Only relevant for the "cacheMappings" setting.  * @see #setCacheMappings  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ ;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * <p>Only relevant for the "cacheMappings" setting.  * @see #setCacheMappings  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {     this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath). }
true;public;1;3;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * <p>Only relevant for the "cacheMappings" setting.  * @see #setCacheMappings  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ ;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * <p>Only relevant for the "cacheMappings" setting.  * @see #setCacheMappings  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ public void setUrlDecode(boolean urlDecode) {     this.urlPathHelper.setUrlDecode(urlDecode). }
true;public;1;4;/**  * Set the UrlPathHelper to use for resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple HandlerMappings  * and MethodNameResolvers.  * <p>Only relevant for the "cacheMappings" setting.  * @see #setCacheMappings  * @see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper  */ ;/**  * Set the UrlPathHelper to use for resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple HandlerMappings  * and MethodNameResolvers.  * <p>Only relevant for the "cacheMappings" setting.  * @see #setCacheMappings  * @see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper  */ public void setUrlPathHelper(UrlPathHelper urlPathHelper) {     Assert.notNull(urlPathHelper, "UrlPathHelper must not be null").     this.urlPathHelper = urlPathHelper. }
true;public;1;9;/**  * Map specific URL paths to specific cache seconds.  * <p>Overrides the default cache seconds setting of this interceptor.  * Can specify "-1" to exclude a URL path from default caching.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and a various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher javadoc.  * <p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request  * matches several mappings, it is effectively undefined which one will apply  * (due to the lack of key ordering in {@code java.util.Properties}).  * @param cacheMappings a mapping between URL paths (as keys) and  * cache seconds (as values, need to be integer-parsable)  * @see #setCacheSeconds  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Map specific URL paths to specific cache seconds.  * <p>Overrides the default cache seconds setting of this interceptor.  * Can specify "-1" to exclude a URL path from default caching.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and a various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher javadoc.  * <p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request  * matches several mappings, it is effectively undefined which one will apply  * (due to the lack of key ordering in {@code java.util.Properties}).  * @param cacheMappings a mapping between URL paths (as keys) and  * cache seconds (as values, need to be integer-parsable)  * @see #setCacheSeconds  * @see org.springframework.util.AntPathMatcher  */ public void setCacheMappings(Properties cacheMappings) {     this.cacheMappings.clear().     Enumeration<?> propNames = cacheMappings.propertyNames().     while (propNames.hasMoreElements()) {         String path = (String) propNames.nextElement().         int cacheSeconds = Integer.parseInt(cacheMappings.getProperty(path)).         this.cacheMappings.put(path, cacheSeconds).     } }
true;public;2;5;/**  * Map specific URL paths to a specific {@link org.springframework.http.CacheControl}.  * <p>Overrides the default cache seconds setting of this interceptor.  * Can specify a empty {@link org.springframework.http.CacheControl} instance  * to exclude a URL path from default caching.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and a various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher javadoc.  * <p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request  * matches several mappings, it is effectively undefined which one will apply  * (due to the lack of key ordering in the underlying {@code java.util.HashMap}).  * @param cacheControl the {@code CacheControl} to use  * @param paths the URL paths that will map to the given {@code CacheControl}  * @since 4.2  * @see #setCacheSeconds  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Map specific URL paths to a specific {@link org.springframework.http.CacheControl}.  * <p>Overrides the default cache seconds setting of this interceptor.  * Can specify a empty {@link org.springframework.http.CacheControl} instance  * to exclude a URL path from default caching.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and a various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher javadoc.  * <p><b>NOTE:</b> Path patterns are not supposed to overlap. If a request  * matches several mappings, it is effectively undefined which one will apply  * (due to the lack of key ordering in the underlying {@code java.util.HashMap}).  * @param cacheControl the {@code CacheControl} to use  * @param paths the URL paths that will map to the given {@code CacheControl}  * @since 4.2  * @see #setCacheSeconds  * @see org.springframework.util.AntPathMatcher  */ public void addCacheMapping(CacheControl cacheControl, String... paths) {     for (String path : paths) {         this.cacheControlMappings.put(path, cacheControl).     } }
true;public;1;4;/**  * Set the PathMatcher implementation to use for matching URL paths  * against registered URL patterns, for determining cache mappings.  * Default is AntPathMatcher.  * @see #addCacheMapping  * @see #setCacheMappings  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Set the PathMatcher implementation to use for matching URL paths  * against registered URL patterns, for determining cache mappings.  * Default is AntPathMatcher.  * @see #addCacheMapping  * @see #setCacheMappings  * @see org.springframework.util.AntPathMatcher  */ public void setPathMatcher(PathMatcher pathMatcher) {     Assert.notNull(pathMatcher, "PathMatcher must not be null").     this.pathMatcher = pathMatcher. }
false;public;3;31;;@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException {     checkRequest(request).     String lookupPath = this.urlPathHelper.getLookupPathForRequest(request).     CacheControl cacheControl = lookupCacheControl(lookupPath).     Integer cacheSeconds = lookupCacheSeconds(lookupPath).     if (cacheControl != null) {         if (logger.isTraceEnabled()) {             logger.trace("Applying " + cacheControl).         }         applyCacheControl(response, cacheControl).     } else if (cacheSeconds != null) {         if (logger.isTraceEnabled()) {             logger.trace("Applying cacheSeconds " + cacheSeconds).         }         applyCacheSeconds(response, cacheSeconds).     } else {         if (logger.isTraceEnabled()) {             logger.trace("Applying default cacheSeconds").         }         prepareResponse(response).     }     return true. }
true;protected;1;15;/**  * Look up a {@link org.springframework.http.CacheControl} instance for the given URL path.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher class.  * @param urlPath the URL the bean is mapped to  * @return the associated {@code CacheControl}, or {@code null} if not found  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Look up a {@link org.springframework.http.CacheControl} instance for the given URL path.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher class.  * @param urlPath the URL the bean is mapped to  * @return the associated {@code CacheControl}, or {@code null} if not found  * @see org.springframework.util.AntPathMatcher  */ @Nullable protected CacheControl lookupCacheControl(String urlPath) {     // Direct match?     CacheControl cacheControl = this.cacheControlMappings.get(urlPath).     if (cacheControl != null) {         return cacheControl.     }     // Pattern match?     for (String registeredPath : this.cacheControlMappings.keySet()) {         if (this.pathMatcher.match(registeredPath, urlPath)) {             return this.cacheControlMappings.get(registeredPath).         }     }     return null. }
true;protected;1;15;/**  * Look up a cacheSeconds integer value for the given URL path.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher class.  * @param urlPath the URL the bean is mapped to  * @return the cacheSeconds integer value, or {@code null} if not found  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Look up a cacheSeconds integer value for the given URL path.  * <p>Supports direct matches, e.g. a registered "/test" matches "/test",  * and various Ant-style pattern matches, e.g. a registered "/t*" matches  * both "/test" and "/team". For details, see the AntPathMatcher class.  * @param urlPath the URL the bean is mapped to  * @return the cacheSeconds integer value, or {@code null} if not found  * @see org.springframework.util.AntPathMatcher  */ @Nullable protected Integer lookupCacheSeconds(String urlPath) {     // Direct match?     Integer cacheSeconds = this.cacheMappings.get(urlPath).     if (cacheSeconds != null) {         return cacheSeconds.     }     // Pattern match?     for (String registeredPath : this.cacheMappings.keySet()) {         if (this.pathMatcher.match(registeredPath, urlPath)) {             return this.cacheMappings.get(registeredPath).         }     }     return null. }
true;public;4;4;/**  * This implementation is empty.  */ ;/**  * This implementation is empty.  */ @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception { }
true;public;4;4;/**  * This implementation is empty.  */ ;/**  * This implementation is empty.  */ @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception { }
