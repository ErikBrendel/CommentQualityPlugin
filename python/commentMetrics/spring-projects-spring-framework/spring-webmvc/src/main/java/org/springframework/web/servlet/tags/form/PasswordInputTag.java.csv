commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Is the password value to be rendered?  * @param showPassword {@code true} if the password value is to be rendered  */ ;/**  * Is the password value to be rendered?  * @param showPassword {@code true} if the password value is to be rendered  */ public void setShowPassword(boolean showPassword) {     this.showPassword = showPassword. }
true;public;0;3;/**  * Is the password value to be rendered?  * @return {@code true} if the password value to be rendered  */ ;/**  * Is the password value to be rendered?  * @return {@code true} if the password value to be rendered  */ public boolean isShowPassword() {     return this.showPassword. }
true;protected;2;4;/**  * Flags "type" as an illegal dynamic attribute.  */ ;/**  * Flags "type" as an illegal dynamic attribute.  */ @Override protected boolean isValidDynamicAttribute(String localName, Object value) {     return !"type".equals(localName). }
true;protected;0;4;/**  * Return '{@code password}' causing the rendered HTML '{@code input}'  * element to have a '{@code type}' of '{@code password}'.  */ ;/**  * Return '{@code password}' causing the rendered HTML '{@code input}'  * element to have a '{@code type}' of '{@code password}'.  */ @Override protected String getType() {     return "password". }
true;protected;1;9;/**  * The {@link PasswordInputTag} only writes it's value if the  * {@link #setShowPassword(boolean) 'showPassword'} property value is  * {@link Boolean#TRUE true}.  */ ;/**  * The {@link PasswordInputTag} only writes it's value if the  * {@link #setShowPassword(boolean) 'showPassword'} property value is  * {@link Boolean#TRUE true}.  */ @Override protected void writeValue(TagWriter tagWriter) throws JspException {     if (this.showPassword) {         super.writeValue(tagWriter).     } else {         tagWriter.writeAttribute("value", processFieldValue(getName(), "", getType())).     } }
