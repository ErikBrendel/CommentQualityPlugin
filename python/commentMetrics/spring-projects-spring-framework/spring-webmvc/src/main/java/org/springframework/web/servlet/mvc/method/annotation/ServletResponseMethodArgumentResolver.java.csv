commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public boolean supportsParameter(MethodParameter parameter) {     Class<?> paramType = parameter.getParameterType().     return (ServletResponse.class.isAssignableFrom(paramType) || OutputStream.class.isAssignableFrom(paramType) || Writer.class.isAssignableFrom(paramType)). }
true;public;4;18;/**  * Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to  * {@code false} to indicate that the method signature provides access  * to the response. If subsequently the underlying method returns  * {@code null}, the request is considered directly handled.  */ ;/**  * Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to  * {@code false} to indicate that the method signature provides access  * to the response. If subsequently the underlying method returns  * {@code null}, the request is considered directly handled.  */ @Override public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     if (mavContainer != null) {         mavContainer.setRequestHandled(true).     }     Class<?> paramType = parameter.getParameterType().     // ServletResponse, HttpServletResponse     if (ServletResponse.class.isAssignableFrom(paramType)) {         return resolveNativeResponse(webRequest, paramType).     }     // ServletResponse required for all further argument types     return resolveArgument(paramType, resolveNativeResponse(webRequest, ServletResponse.class)). }
false;private;2;8;;private <T> T resolveNativeResponse(NativeWebRequest webRequest, Class<T> requiredType) {     T nativeResponse = webRequest.getNativeResponse(requiredType).     if (nativeResponse == null) {         throw new IllegalStateException("Current response is not of type [" + requiredType.getName() + "]: " + webRequest).     }     return nativeResponse. }
false;private;2;11;;private Object resolveArgument(Class<?> paramType, ServletResponse response) throws IOException {     if (OutputStream.class.isAssignableFrom(paramType)) {         return response.getOutputStream().     } else if (Writer.class.isAssignableFrom(paramType)) {         return response.getWriter().     }     // Should never happen...     throw new UnsupportedOperationException("Unknown parameter type: " + paramType). }
