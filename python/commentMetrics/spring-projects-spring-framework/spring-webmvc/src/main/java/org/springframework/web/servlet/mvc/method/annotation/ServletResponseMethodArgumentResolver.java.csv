# id;timestamp;commentText;codeText;commentWords;codeWords
ServletResponseMethodArgumentResolver -> public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws IOException;1328020251;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws IOException {_		_		mavContainer.setRequestHandled(true)___		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Class<?> paramType = parameter.getParameterType()___		if (ServletResponse.class.isAssignableFrom(paramType)) {_			Object nativeResponse = webRequest.getNativeResponse(paramType)__			if (nativeResponse == null) {_				throw new IllegalStateException(_						"Current response is not of type [" + paramType.getName() + "]: " + response)__			}_			return nativeResponse__		}_		else if (OutputStream.class.isAssignableFrom(paramType)) {_			return response.getOutputStream()__		}_		else if (Writer.class.isAssignableFrom(paramType)) {_			return response.getWriter()__		}_		else {_			_			Method method = parameter.getMethod()__			throw new UnsupportedOperationException("Unknown parameter type: " + paramType + " in method: " + method)__		}_	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,ioexception,mav,container,set,request,handled,true,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,object,native,response,web,request,get,native,response,param,type,if,native,response,null,throw,new,illegal,state,exception,current,response,is,not,of,type,param,type,get,name,response,return,native,response,else,if,output,stream,class,is,assignable,from,param,type,return,response,get,output,stream,else,if,writer,class,is,assignable,from,param,type,return,response,get,writer,else,method,method,parameter,get,method,throw,new,unsupported,operation,exception,unknown,parameter,type,param,type,in,method,method
ServletResponseMethodArgumentResolver -> public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws IOException;1329393628;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws IOException {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Class<?> paramType = parameter.getParameterType()___		if (ServletResponse.class.isAssignableFrom(paramType)) {_			Object nativeResponse = webRequest.getNativeResponse(paramType)__			if (nativeResponse == null) {_				throw new IllegalStateException(_						"Current response is not of type [" + paramType.getName() + "]: " + response)__			}_			return nativeResponse__		}_		else if (OutputStream.class.isAssignableFrom(paramType)) {_			return response.getOutputStream()__		}_		else if (Writer.class.isAssignableFrom(paramType)) {_			return response.getWriter()__		}_		else {_			_			Method method = parameter.getMethod()__			throw new UnsupportedOperationException("Unknown parameter type: " + paramType + " in method: " + method)__		}_	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,ioexception,if,mav,container,null,mav,container,set,request,handled,true,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,object,native,response,web,request,get,native,response,param,type,if,native,response,null,throw,new,illegal,state,exception,current,response,is,not,of,type,param,type,get,name,response,return,native,response,else,if,output,stream,class,is,assignable,from,param,type,return,response,get,output,stream,else,if,writer,class,is,assignable,from,param,type,return,response,get,writer,else,method,method,parameter,get,method,throw,new,unsupported,operation,exception,unknown,parameter,type,param,type,in,method,method
ServletResponseMethodArgumentResolver -> public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws IOException;1357119239;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws IOException {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Class<?> paramType = parameter.getParameterType()___		if (ServletResponse.class.isAssignableFrom(paramType)) {_			Object nativeResponse = webRequest.getNativeResponse(paramType)__			if (nativeResponse == null) {_				throw new IllegalStateException(_						"Current response is not of type [" + paramType.getName() + "]: " + response)__			}_			return nativeResponse__		}_		else if (OutputStream.class.isAssignableFrom(paramType)) {_			return response.getOutputStream()__		}_		else if (Writer.class.isAssignableFrom(paramType)) {_			return response.getWriter()__		}_		else {_			_			Method method = parameter.getMethod()__			throw new UnsupportedOperationException("Unknown parameter type: " + paramType + " in method: " + method)__		}_	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,ioexception,if,mav,container,null,mav,container,set,request,handled,true,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,object,native,response,web,request,get,native,response,param,type,if,native,response,null,throw,new,illegal,state,exception,current,response,is,not,of,type,param,type,get,name,response,return,native,response,else,if,output,stream,class,is,assignable,from,param,type,return,response,get,output,stream,else,if,writer,class,is,assignable,from,param,type,return,response,get,writer,else,method,method,parameter,get,method,throw,new,unsupported,operation,exception,unknown,parameter,type,param,type,in,method,method
ServletResponseMethodArgumentResolver -> @Override 	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1496837955;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;@Override_	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		Class<?> paramType = parameter.getParameterType()___		_		if (ServletResponse.class.isAssignableFrom(paramType)) {_			return resolveNativeResponse(webRequest, paramType)__		}__		_		return resolveArgument(paramType, resolveNativeResponse(webRequest, ServletResponse.class))__	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;override,public,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,if,mav,container,null,mav,container,set,request,handled,true,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,return,resolve,native,response,web,request,param,type,return,resolve,argument,param,type,resolve,native,response,web,request,servlet,response,class
ServletResponseMethodArgumentResolver -> @Override 	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1530174524;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;@Override_	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		Class<?> paramType = parameter.getParameterType()___		_		if (ServletResponse.class.isAssignableFrom(paramType)) {_			return resolveNativeResponse(webRequest, paramType)__		}__		_		return resolveArgument(paramType, resolveNativeResponse(webRequest, ServletResponse.class))__	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;override,public,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,if,mav,container,null,mav,container,set,request,handled,true,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,return,resolve,native,response,web,request,param,type,return,resolve,argument,param,type,resolve,native,response,web,request,servlet,response,class
ServletResponseMethodArgumentResolver -> @Override 	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1411657245;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;@Override_	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Class<?> paramType = parameter.getParameterType()___		if (ServletResponse.class.isAssignableFrom(paramType)) {_			Object nativeResponse = webRequest.getNativeResponse(paramType)__			if (nativeResponse == null) {_				throw new IllegalStateException(_						"Current response is not of type [" + paramType.getName() + "]: " + response)__			}_			return nativeResponse__		}_		else if (OutputStream.class.isAssignableFrom(paramType)) {_			return response.getOutputStream()__		}_		else if (Writer.class.isAssignableFrom(paramType)) {_			return response.getWriter()__		}_		else {_			_			Method method = parameter.getMethod()__			throw new UnsupportedOperationException("Unknown parameter type: " + paramType + " in method: " + method)__		}_	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,if,mav,container,null,mav,container,set,request,handled,true,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,object,native,response,web,request,get,native,response,param,type,if,native,response,null,throw,new,illegal,state,exception,current,response,is,not,of,type,param,type,get,name,response,return,native,response,else,if,output,stream,class,is,assignable,from,param,type,return,response,get,output,stream,else,if,writer,class,is,assignable,from,param,type,return,response,get,writer,else,method,method,parameter,get,method,throw,new,unsupported,operation,exception,unknown,parameter,type,param,type,in,method,method
ServletResponseMethodArgumentResolver -> @Override 	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1486994819;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;@Override_	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		Class<?> paramType = parameter.getParameterType()___		_		if (ServletResponse.class.isAssignableFrom(paramType)) {_			return resolveNativeResponse(webRequest, paramType)__		}__		_		return resolveArgument(paramType, resolveNativeResponse(webRequest, ServletResponse.class))__	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,if,mav,container,null,mav,container,set,request,handled,true,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,return,resolve,native,response,web,request,param,type,return,resolve,argument,param,type,resolve,native,response,web,request,servlet,response,class
ServletResponseMethodArgumentResolver -> @Override 	public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws IOException;1356735495;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;@Override_	public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws IOException {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Class<?> paramType = parameter.getParameterType()___		if (ServletResponse.class.isAssignableFrom(paramType)) {_			Object nativeResponse = webRequest.getNativeResponse(paramType)__			if (nativeResponse == null) {_				throw new IllegalStateException(_						"Current response is not of type [" + paramType.getName() + "]: " + response)__			}_			return nativeResponse__		}_		else if (OutputStream.class.isAssignableFrom(paramType)) {_			return response.getOutputStream()__		}_		else if (Writer.class.isAssignableFrom(paramType)) {_			return response.getWriter()__		}_		else {_			_			Method method = parameter.getMethod()__			throw new UnsupportedOperationException("Unknown parameter type: " + paramType + " in method: " + method)__		}_	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,ioexception,if,mav,container,null,mav,container,set,request,handled,true,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,object,native,response,web,request,get,native,response,param,type,if,native,response,null,throw,new,illegal,state,exception,current,response,is,not,of,type,param,type,get,name,response,return,native,response,else,if,output,stream,class,is,assignable,from,param,type,return,response,get,output,stream,else,if,writer,class,is,assignable,from,param,type,return,response,get,writer,else,method,method,parameter,get,method,throw,new,unsupported,operation,exception,unknown,parameter,type,param,type,in,method,method
ServletResponseMethodArgumentResolver -> @Override 	public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws IOException;1368482696;Set {@link ModelAndViewContainer#setRequestHandled(boolean)} to_{@code false} to indicate that the method signature provides access_to the response. If subsequently the underlying method returns_{@code null}, the request is considered directly handled.;@Override_	public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws IOException {__		if (mavContainer != null) {_			mavContainer.setRequestHandled(true)__		}__		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)__		Class<?> paramType = parameter.getParameterType()___		if (ServletResponse.class.isAssignableFrom(paramType)) {_			Object nativeResponse = webRequest.getNativeResponse(paramType)__			if (nativeResponse == null) {_				throw new IllegalStateException(_						"Current response is not of type [" + paramType.getName() + "]: " + response)__			}_			return nativeResponse__		}_		else if (OutputStream.class.isAssignableFrom(paramType)) {_			return response.getOutputStream()__		}_		else if (Writer.class.isAssignableFrom(paramType)) {_			return response.getWriter()__		}_		else {_			_			Method method = parameter.getMethod()__			throw new UnsupportedOperationException("Unknown parameter type: " + paramType + " in method: " + method)__		}_	};set,link,model,and,view,container,set,request,handled,boolean,to,code,false,to,indicate,that,the,method,signature,provides,access,to,the,response,if,subsequently,the,underlying,method,returns,code,null,the,request,is,considered,directly,handled;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,ioexception,if,mav,container,null,mav,container,set,request,handled,true,http,servlet,response,response,web,request,get,native,response,http,servlet,response,class,class,param,type,parameter,get,parameter,type,if,servlet,response,class,is,assignable,from,param,type,object,native,response,web,request,get,native,response,param,type,if,native,response,null,throw,new,illegal,state,exception,current,response,is,not,of,type,param,type,get,name,response,return,native,response,else,if,output,stream,class,is,assignable,from,param,type,return,response,get,output,stream,else,if,writer,class,is,assignable,from,param,type,return,response,get,writer,else,method,method,parameter,get,method,throw,new,unsupported,operation,exception,unknown,parameter,type,param,type,in,method,method
