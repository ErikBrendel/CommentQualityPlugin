commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;@Override protected void extendResponse(ServerHttpResponse outputMessage) {     super.extendResponse(outputMessage).     HttpHeaders headers = outputMessage.getHeaders().     if (headers.getContentType() == null) {         headers.setContentType(UTF8_TEXT_EVENTSTREAM).     } }
true;public;1;4;/**  * Send the object formatted as a single SSE "data" line. It's equivalent to:  * <pre>  * // static import of SseEmitter.*  *  * SseEmitter emitter = new SseEmitter().  * emitter.send(event().data(myObject)).  * </pre>  *  * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}  * for important notes on exception handling.  *  * @param object the object to write  * @throws IOException raised when an I/O error occurs  * @throws java.lang.IllegalStateException wraps any other errors  */ ;/**  * Send the object formatted as a single SSE "data" line. It's equivalent to:  * <pre>  * // static import of SseEmitter.*  *  * SseEmitter emitter = new SseEmitter().  * emitter.send(event().data(myObject)).  * </pre>  *  * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}  * for important notes on exception handling.  *  * @param object the object to write  * @throws IOException raised when an I/O error occurs  * @throws java.lang.IllegalStateException wraps any other errors  */ @Override public void send(Object object) throws IOException {     send(object, null). }
true;public;2;4;/**  * Send the object formatted as a single SSE "data" line. It's equivalent to:  * <pre>  * // static import of SseEmitter.*  *  * SseEmitter emitter = new SseEmitter().  * emitter.send(event().data(myObject, MediaType.APPLICATION_JSON)).  * </pre>  *  * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}  * for important notes on exception handling.  *  * @param object the object to write  * @param mediaType a MediaType hint for selecting an HttpMessageConverter  * @throws IOException raised when an I/O error occurs  */ ;/**  * Send the object formatted as a single SSE "data" line. It's equivalent to:  * <pre>  * // static import of SseEmitter.*  *  * SseEmitter emitter = new SseEmitter().  * emitter.send(event().data(myObject, MediaType.APPLICATION_JSON)).  * </pre>  *  * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}  * for important notes on exception handling.  *  * @param object the object to write  * @param mediaType a MediaType hint for selecting an HttpMessageConverter  * @throws IOException raised when an I/O error occurs  */ @Override public void send(Object object, @Nullable MediaType mediaType) throws IOException {     send(event().data(object, mediaType)). }
true;public;1;8;/**  * Send an SSE event prepared with the given builder. For example:  * <pre>  * // static import of SseEmitter  * SseEmitter emitter = new SseEmitter().  * emitter.send(event().name("update").id("1").data(myObject)).  * </pre>  * @param builder a builder for an SSE formatted event.  * @throws IOException raised when an I/O error occurs  */ ;/**  * Send an SSE event prepared with the given builder. For example:  * <pre>  * // static import of SseEmitter  * SseEmitter emitter = new SseEmitter().  * emitter.send(event().name("update").id("1").data(myObject)).  * </pre>  * @param builder a builder for an SSE formatted event.  * @throws IOException raised when an I/O error occurs  */ public void send(SseEventBuilder builder) throws IOException {     Set<DataWithMediaType> dataToSend = builder.build().     synchronized (this) {         for (DataWithMediaType entry : dataToSend) {             super.send(entry.getData(), entry.getMediaType()).         }     } }
false;public;0;4;;@Override public String toString() {     return "SseEmitter@" + ObjectUtils.getIdentityHexString(this). }
false;public,static;0;3;;public static SseEventBuilder event() {     return new SseEventBuilderImpl(). }
true;;1;1;/**  * Add an SSE "id" line.  */ ;/**  * Add an SSE "id" line.  */ SseEventBuilder id(String id).
true;;1;1;/**  * Add an SSE "event" line.  */ ;/**  * Add an SSE "event" line.  */ SseEventBuilder name(String eventName).
true;;1;1;/**  * Add an SSE "retry" line.  */ ;/**  * Add an SSE "retry" line.  */ SseEventBuilder reconnectTime(long reconnectTimeMillis).
true;;1;1;/**  * Add an SSE "comment" line.  */ ;/**  * Add an SSE "comment" line.  */ SseEventBuilder comment(String comment).
true;;1;1;/**  * Add an SSE "data" line.  */ ;/**  * Add an SSE "data" line.  */ SseEventBuilder data(Object object).
true;;2;1;/**  * Add an SSE "data" line.  */ ;/**  * Add an SSE "data" line.  */ SseEventBuilder data(Object object, @Nullable MediaType mediaType).
true;;0;1;/**  * Return one or more Object-MediaType  pairs to write via  * {@link #send(Object, MediaType)}.  * @since 4.2.3  */ ;/**  * Return one or more Object-MediaType  pairs to write via  * {@link #send(Object, MediaType)}.  * @since 4.2.3  */ Set<DataWithMediaType> build().
false;public;1;5;;@Override public SseEventBuilder id(String id) {     append("id:").append(id).append("\n").     return this. }
false;public;1;5;;@Override public SseEventBuilder name(String name) {     append("event:").append(name).append("\n").     return this. }
false;public;1;5;;@Override public SseEventBuilder reconnectTime(long reconnectTimeMillis) {     append("retry:").append(String.valueOf(reconnectTimeMillis)).append("\n").     return this. }
false;public;1;5;;@Override public SseEventBuilder comment(String comment) {     append(":").append(comment).append("\n").     return this. }
false;public;1;4;;@Override public SseEventBuilder data(Object object) {     return data(object, null). }
false;public;2;8;;@Override public SseEventBuilder data(Object object, @Nullable MediaType mediaType) {     append("data:").     saveAppendedText().     this.dataToSend.add(new DataWithMediaType(object, mediaType)).     append("\n").     return this. }
false;;1;7;;SseEventBuilderImpl append(String text) {     if (this.sb == null) {         this.sb = new StringBuilder().     }     this.sb.append(text).     return this. }
false;public;0;9;;@Override public Set<DataWithMediaType> build() {     if (!StringUtils.hasLength(this.sb) && this.dataToSend.isEmpty()) {         return Collections.emptySet().     }     append("\n").     saveAppendedText().     return this.dataToSend. }
false;private;0;6;;private void saveAppendedText() {     if (this.sb != null) {         this.dataToSend.add(new DataWithMediaType(this.sb.toString(), TEXT_PLAIN)).         this.sb = null.     } }
