commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;/**  * This resolver requires {@link TilesView}.  */ ;/**  * This resolver requires {@link TilesView}.  */ @Override protected Class<?> requiredViewClass() {     return TilesView.class. }
true;public;1;3;/**  * Set the {@link Renderer} to use. If not specified, a default  * {@link org.apache.tiles.renderer.DefinitionRenderer} will be used.  * @see TilesView#setRenderer(Renderer)  */ ;/**  * Set the {@link Renderer} to use. If not specified, a default  * {@link org.apache.tiles.renderer.DefinitionRenderer} will be used.  * @see TilesView#setRenderer(Renderer)  */ public void setRenderer(Renderer renderer) {     this.renderer = renderer. }
true;public;1;3;/**  * Specify whether to always include the view rather than forward to it.  * <p>Default is "false". Switch this flag on to enforce the use of a  * Servlet include, even if a forward would be possible.  * @since 4.1.2  * @see TilesView#setAlwaysInclude  */ ;/**  * Specify whether to always include the view rather than forward to it.  * <p>Default is "false". Switch this flag on to enforce the use of a  * Servlet include, even if a forward would be possible.  * @since 4.1.2  * @see TilesView#setAlwaysInclude  */ public void setAlwaysInclude(Boolean alwaysInclude) {     this.alwaysInclude = alwaysInclude. }
false;protected;1;11;;@Override protected TilesView buildView(String viewName) throws Exception {     TilesView view = (TilesView) super.buildView(viewName).     if (this.renderer != null) {         view.setRenderer(this.renderer).     }     if (this.alwaysInclude != null) {         view.setAlwaysInclude(this.alwaysInclude).     }     return view. }
