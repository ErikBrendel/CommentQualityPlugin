# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractUrlViewController -> protected UrlPathHelper getUrlPathHelper();1328020251;Return the UrlPathHelper to use for the resolution of lookup paths.;protected UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths;protected,url,path,helper,get,url,path,helper,return,this,url,path,helper
AbstractUrlViewController -> protected UrlPathHelper getUrlPathHelper();1346174472;Return the UrlPathHelper to use for the resolution of lookup paths.;protected UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths;protected,url,path,helper,get,url,path,helper,return,this,url,path,helper
AbstractUrlViewController -> protected UrlPathHelper getUrlPathHelper();1356735495;Return the UrlPathHelper to use for the resolution of lookup paths.;protected UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths;protected,url,path,helper,get,url,path,helper,return,this,url,path,helper
AbstractUrlViewController -> protected UrlPathHelper getUrlPathHelper();1529361191;Return the UrlPathHelper to use for the resolution of lookup paths.;protected UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths;protected,url,path,helper,get,url,path,helper,return,this,url,path,helper
AbstractUrlViewController -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1328020251;Set the UrlPathHelper to use for the resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple MethodNameResolvers_and HandlerMappings._@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,method,name,resolvers,and,handler,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
AbstractUrlViewController -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1346174472;Set the UrlPathHelper to use for the resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple MethodNameResolvers_and HandlerMappings._@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,method,name,resolvers,and,handler,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
AbstractUrlViewController -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1356735495;Set the UrlPathHelper to use for the resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple MethodNameResolvers_and HandlerMappings._@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,method,name,resolvers,and,handler,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
AbstractUrlViewController -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1529361191;Set the UrlPathHelper to use for the resolution of lookup paths._<p>Use this to override the default UrlPathHelper with a custom subclass,_or to share common UrlPathHelper settings across multiple MethodNameResolvers_and HandlerMappings._@see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null")__		this.urlPathHelper = urlPathHelper__	};set,the,url,path,helper,to,use,for,the,resolution,of,lookup,paths,p,use,this,to,override,the,default,url,path,helper,with,a,custom,subclass,or,to,share,common,url,path,helper,settings,across,multiple,method,name,resolvers,and,handler,mappings,see,org,springframework,web,servlet,handler,abstract,url,handler,mapping,set,url,path,helper;public,void,set,url,path,helper,url,path,helper,url,path,helper,assert,not,null,url,path,helper,url,path,helper,must,not,be,null,this,url,path,helper,url,path,helper
AbstractUrlViewController -> public void setRemoveSemicolonContent(boolean removeSemicolonContent);1346174472;Set if "_" (semicolon) content should be stripped from the request URI._@see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean);public void setRemoveSemicolonContent(boolean removeSemicolonContent) {_		this.urlPathHelper.setRemoveSemicolonContent(removeSemicolonContent)__	};set,if,semicolon,content,should,be,stripped,from,the,request,uri,see,org,springframework,web,util,url,path,helper,set,remove,semicolon,content,boolean;public,void,set,remove,semicolon,content,boolean,remove,semicolon,content,this,url,path,helper,set,remove,semicolon,content,remove,semicolon,content
AbstractUrlViewController -> public void setRemoveSemicolonContent(boolean removeSemicolonContent);1356735495;Set if "_" (semicolon) content should be stripped from the request URI._@see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean);public void setRemoveSemicolonContent(boolean removeSemicolonContent) {_		this.urlPathHelper.setRemoveSemicolonContent(removeSemicolonContent)__	};set,if,semicolon,content,should,be,stripped,from,the,request,uri,see,org,springframework,web,util,url,path,helper,set,remove,semicolon,content,boolean;public,void,set,remove,semicolon,content,boolean,remove,semicolon,content,this,url,path,helper,set,remove,semicolon,content,remove,semicolon,content
AbstractUrlViewController -> public void setRemoveSemicolonContent(boolean removeSemicolonContent);1529361191;Set if "_" (semicolon) content should be stripped from the request URI._@see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean);public void setRemoveSemicolonContent(boolean removeSemicolonContent) {_		this.urlPathHelper.setRemoveSemicolonContent(removeSemicolonContent)__	};set,if,semicolon,content,should,be,stripped,from,the,request,uri,see,org,springframework,web,util,url,path,helper,set,remove,semicolon,content,boolean;public,void,set,remove,semicolon,content,boolean,remove,semicolon,content,this,url,path,helper,set,remove,semicolon,content,remove,semicolon,content
AbstractUrlViewController -> public void setUrlDecode(boolean urlDecode);1328020251;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
AbstractUrlViewController -> public void setUrlDecode(boolean urlDecode);1346174472;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
AbstractUrlViewController -> public void setUrlDecode(boolean urlDecode);1356735495;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
AbstractUrlViewController -> public void setUrlDecode(boolean urlDecode);1529361191;Set if context path and request URI should be URL-decoded._Both are returned <i>undecoded</i> by the Servlet API,_in contrast to the servlet path._<p>Uses either the request encoding or the default encoding according_to the Servlet spec (ISO-8859-1)._@see org.springframework.web.util.UrlPathHelper#setUrlDecode;public void setUrlDecode(boolean urlDecode) {_		this.urlPathHelper.setUrlDecode(urlDecode)__	};set,if,context,path,and,request,uri,should,be,url,decoded,both,are,returned,i,undecoded,i,by,the,servlet,api,in,contrast,to,the,servlet,path,p,uses,either,the,request,encoding,or,the,default,encoding,according,to,the,servlet,spec,iso,8859,1,see,org,springframework,web,util,url,path,helper,set,url,decode;public,void,set,url,decode,boolean,url,decode,this,url,path,helper,set,url,decode,url,decode
AbstractUrlViewController -> protected abstract String getViewNameForRequest(HttpServletRequest request)_;1328020251;Return the name of the view to render for this request, based on the_given lookup path. Called by {@link #handleRequestInternal}._@param request current HTTP request_@return a view name for this request (never <code>null</code>)_@see #handleRequestInternal_@see #setAlwaysUseFullPath_@see #setUrlDecode;protected abstract String getViewNameForRequest(HttpServletRequest request)_;return,the,name,of,the,view,to,render,for,this,request,based,on,the,given,lookup,path,called,by,link,handle,request,internal,param,request,current,http,request,return,a,view,name,for,this,request,never,code,null,code,see,handle,request,internal,see,set,always,use,full,path,see,set,url,decode;protected,abstract,string,get,view,name,for,request,http,servlet,request,request
AbstractUrlViewController -> protected abstract String getViewNameForRequest(HttpServletRequest request)_;1346174472;Return the name of the view to render for this request, based on the_given lookup path. Called by {@link #handleRequestInternal}._@param request current HTTP request_@return a view name for this request (never <code>null</code>)_@see #handleRequestInternal_@see #setAlwaysUseFullPath_@see #setUrlDecode;protected abstract String getViewNameForRequest(HttpServletRequest request)_;return,the,name,of,the,view,to,render,for,this,request,based,on,the,given,lookup,path,called,by,link,handle,request,internal,param,request,current,http,request,return,a,view,name,for,this,request,never,code,null,code,see,handle,request,internal,see,set,always,use,full,path,see,set,url,decode;protected,abstract,string,get,view,name,for,request,http,servlet,request,request
AbstractUrlViewController -> protected abstract String getViewNameForRequest(HttpServletRequest request)_;1356735495;Return the name of the view to render for this request, based on the_given lookup path. Called by {@link #handleRequestInternal}._@param request current HTTP request_@return a view name for this request (never {@code null})_@see #handleRequestInternal_@see #setAlwaysUseFullPath_@see #setUrlDecode;protected abstract String getViewNameForRequest(HttpServletRequest request)_;return,the,name,of,the,view,to,render,for,this,request,based,on,the,given,lookup,path,called,by,link,handle,request,internal,param,request,current,http,request,return,a,view,name,for,this,request,never,code,null,see,handle,request,internal,see,set,always,use,full,path,see,set,url,decode;protected,abstract,string,get,view,name,for,request,http,servlet,request,request
AbstractUrlViewController -> protected abstract String getViewNameForRequest(HttpServletRequest request)_;1529361191;Return the name of the view to render for this request, based on the_given lookup path. Called by {@link #handleRequestInternal}._@param request current HTTP request_@return a view name for this request (never {@code null})_@see #handleRequestInternal_@see #setAlwaysUseFullPath_@see #setUrlDecode;protected abstract String getViewNameForRequest(HttpServletRequest request)_;return,the,name,of,the,view,to,render,for,this,request,based,on,the,given,lookup,path,called,by,link,handle,request,internal,param,request,current,http,request,return,a,view,name,for,this,request,never,code,null,see,handle,request,internal,see,set,always,use,full,path,see,set,url,decode;protected,abstract,string,get,view,name,for,request,http,servlet,request,request
AbstractUrlViewController -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1328020251;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
AbstractUrlViewController -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1346174472;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
AbstractUrlViewController -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1356735495;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
AbstractUrlViewController -> public void setAlwaysUseFullPath(boolean alwaysUseFullPath);1529361191;Set if URL lookup should always use full path within current servlet_context. Else, the path within the current servlet mapping is used_if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml)._Default is "false"._@see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath;public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {_		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath)__	};set,if,url,lookup,should,always,use,full,path,within,current,servlet,context,else,the,path,within,the,current,servlet,mapping,is,used,if,applicable,i,e,in,the,case,of,a,servlet,mapping,in,web,xml,default,is,false,see,org,springframework,web,util,url,path,helper,set,always,use,full,path;public,void,set,always,use,full,path,boolean,always,use,full,path,this,url,path,helper,set,always,use,full,path,always,use,full,path
AbstractUrlViewController -> @Override 	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response);1328020251;Retrieves the URL path to use for lookup and delegates to_{@link #getViewNameForRequest}. Also adds the content of_{@link RequestContextUtils#getInputFlashMap} to the model.;@Override_	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		String viewName = getViewNameForRequest(request)__		if (logger.isDebugEnabled()) {_			logger.debug("Returning view name '" + viewName + "' for lookup path [" + lookupPath + "]")__		}_		return new ModelAndView(viewName, RequestContextUtils.getInputFlashMap(request))__	};retrieves,the,url,path,to,use,for,lookup,and,delegates,to,link,get,view,name,for,request,also,adds,the,content,of,link,request,context,utils,get,input,flash,map,to,the,model;override,protected,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,string,view,name,get,view,name,for,request,request,if,logger,is,debug,enabled,logger,debug,returning,view,name,view,name,for,lookup,path,lookup,path,return,new,model,and,view,view,name,request,context,utils,get,input,flash,map,request
AbstractUrlViewController -> @Override 	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response);1346174472;Retrieves the URL path to use for lookup and delegates to_{@link #getViewNameForRequest}. Also adds the content of_{@link RequestContextUtils#getInputFlashMap} to the model.;@Override_	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		String viewName = getViewNameForRequest(request)__		if (logger.isDebugEnabled()) {_			logger.debug("Returning view name '" + viewName + "' for lookup path [" + lookupPath + "]")__		}_		return new ModelAndView(viewName, RequestContextUtils.getInputFlashMap(request))__	};retrieves,the,url,path,to,use,for,lookup,and,delegates,to,link,get,view,name,for,request,also,adds,the,content,of,link,request,context,utils,get,input,flash,map,to,the,model;override,protected,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,string,view,name,get,view,name,for,request,request,if,logger,is,debug,enabled,logger,debug,returning,view,name,view,name,for,lookup,path,lookup,path,return,new,model,and,view,view,name,request,context,utils,get,input,flash,map,request
AbstractUrlViewController -> @Override 	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response);1356735495;Retrieves the URL path to use for lookup and delegates to_{@link #getViewNameForRequest}. Also adds the content of_{@link RequestContextUtils#getInputFlashMap} to the model.;@Override_	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		String viewName = getViewNameForRequest(request)__		if (logger.isDebugEnabled()) {_			logger.debug("Returning view name '" + viewName + "' for lookup path [" + lookupPath + "]")__		}_		return new ModelAndView(viewName, RequestContextUtils.getInputFlashMap(request))__	};retrieves,the,url,path,to,use,for,lookup,and,delegates,to,link,get,view,name,for,request,also,adds,the,content,of,link,request,context,utils,get,input,flash,map,to,the,model;override,protected,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,string,view,name,get,view,name,for,request,request,if,logger,is,debug,enabled,logger,debug,returning,view,name,view,name,for,lookup,path,lookup,path,return,new,model,and,view,view,name,request,context,utils,get,input,flash,map,request
AbstractUrlViewController -> @Override 	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response);1529361191;Retrieves the URL path to use for lookup and delegates to_{@link #getViewNameForRequest}. Also adds the content of_{@link RequestContextUtils#getInputFlashMap} to the model.;@Override_	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) {_		String viewName = getViewNameForRequest(request)__		if (logger.isTraceEnabled()) {_			logger.trace("Returning view name '" + viewName + "'")__		}_		return new ModelAndView(viewName, RequestContextUtils.getInputFlashMap(request))__	};retrieves,the,url,path,to,use,for,lookup,and,delegates,to,link,get,view,name,for,request,also,adds,the,content,of,link,request,context,utils,get,input,flash,map,to,the,model;override,protected,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,string,view,name,get,view,name,for,request,request,if,logger,is,trace,enabled,logger,trace,returning,view,name,view,name,return,new,model,and,view,view,name,request,context,utils,get,input,flash,map,request
