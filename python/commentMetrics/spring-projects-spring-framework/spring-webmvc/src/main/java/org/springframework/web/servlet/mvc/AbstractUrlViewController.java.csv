commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set if URL lookup should always use full path within current servlet  * context. Else, the path within the current servlet mapping is used  * if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml).  * Default is "false".  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ ;/**  * Set if URL lookup should always use full path within current servlet  * context. Else, the path within the current servlet mapping is used  * if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml).  * Default is "false".  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {     this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath). }
true;public;1;3;/**  * Set if context path and request URI should be URL-decoded.  * Both are returned <i>undecoded</i> by the Servlet API,  * in contrast to the servlet path.  * <p>Uses either the request encoding or the default encoding according  * to the Servlet spec (ISO-8859-1).  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ ;/**  * Set if context path and request URI should be URL-decoded.  * Both are returned <i>undecoded</i> by the Servlet API,  * in contrast to the servlet path.  * <p>Uses either the request encoding or the default encoding according  * to the Servlet spec (ISO-8859-1).  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ public void setUrlDecode(boolean urlDecode) {     this.urlPathHelper.setUrlDecode(urlDecode). }
true;public;1;3;/**  * Set if "." (semicolon) content should be stripped from the request URI.  * @see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean)  */ ;/**  * Set if "." (semicolon) content should be stripped from the request URI.  * @see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean)  */ public void setRemoveSemicolonContent(boolean removeSemicolonContent) {     this.urlPathHelper.setRemoveSemicolonContent(removeSemicolonContent). }
true;public;1;4;/**  * Set the UrlPathHelper to use for the resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple MethodNameResolvers  * and HandlerMappings.  * @see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper  */ ;/**  * Set the UrlPathHelper to use for the resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple MethodNameResolvers  * and HandlerMappings.  * @see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper  */ public void setUrlPathHelper(UrlPathHelper urlPathHelper) {     Assert.notNull(urlPathHelper, "UrlPathHelper must not be null").     this.urlPathHelper = urlPathHelper. }
true;protected;0;3;/**  * Return the UrlPathHelper to use for the resolution of lookup paths.  */ ;/**  * Return the UrlPathHelper to use for the resolution of lookup paths.  */ protected UrlPathHelper getUrlPathHelper() {     return this.urlPathHelper. }
true;protected;2;8;/**  * Retrieves the URL path to use for lookup and delegates to  * {@link #getViewNameForRequest}. Also adds the content of  * {@link RequestContextUtils#getInputFlashMap} to the model.  */ ;/**  * Retrieves the URL path to use for lookup and delegates to  * {@link #getViewNameForRequest}. Also adds the content of  * {@link RequestContextUtils#getInputFlashMap} to the model.  */ @Override protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) {     String viewName = getViewNameForRequest(request).     if (logger.isTraceEnabled()) {         logger.trace("Returning view name '" + viewName + "'").     }     return new ModelAndView(viewName, RequestContextUtils.getInputFlashMap(request)). }
true;protected,abstract;1;1;/**  * Return the name of the view to render for this request, based on the  * given lookup path. Called by {@link #handleRequestInternal}.  * @param request current HTTP request  * @return a view name for this request (never {@code null})  * @see #handleRequestInternal  * @see #setAlwaysUseFullPath  * @see #setUrlDecode  */ ;/**  * Return the name of the view to render for this request, based on the  * given lookup path. Called by {@link #handleRequestInternal}.  * @param request current HTTP request  * @return a view name for this request (never {@code null})  * @see #handleRequestInternal  * @see #setAlwaysUseFullPath  * @see #setUrlDecode  */ protected abstract String getViewNameForRequest(HttpServletRequest request).
