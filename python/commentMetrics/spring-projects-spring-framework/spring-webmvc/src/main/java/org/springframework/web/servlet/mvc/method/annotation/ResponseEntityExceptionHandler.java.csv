commented;modifiers;parameterAmount;loc;comment;code
true;public,final;2;89;/**  * Provides handling for standard Spring MVC exceptions.  * @param ex the target exception  * @param request the current request  */ ;/**  * Provides handling for standard Spring MVC exceptions.  * @param ex the target exception  * @param request the current request  */ @ExceptionHandler({ HttpRequestMethodNotSupportedException.class, HttpMediaTypeNotSupportedException.class, HttpMediaTypeNotAcceptableException.class, MissingPathVariableException.class, MissingServletRequestParameterException.class, ServletRequestBindingException.class, ConversionNotSupportedException.class, TypeMismatchException.class, HttpMessageNotReadableException.class, HttpMessageNotWritableException.class, MethodArgumentNotValidException.class, MissingServletRequestPartException.class, BindException.class, NoHandlerFoundException.class, AsyncRequestTimeoutException.class }) @Nullable public final ResponseEntity<Object> handleException(Exception ex, WebRequest request) throws Exception {     HttpHeaders headers = new HttpHeaders().     if (ex instanceof HttpRequestMethodNotSupportedException) {         HttpStatus status = HttpStatus.METHOD_NOT_ALLOWED.         return handleHttpRequestMethodNotSupported((HttpRequestMethodNotSupportedException) ex, headers, status, request).     } else if (ex instanceof HttpMediaTypeNotSupportedException) {         HttpStatus status = HttpStatus.UNSUPPORTED_MEDIA_TYPE.         return handleHttpMediaTypeNotSupported((HttpMediaTypeNotSupportedException) ex, headers, status, request).     } else if (ex instanceof HttpMediaTypeNotAcceptableException) {         HttpStatus status = HttpStatus.NOT_ACCEPTABLE.         return handleHttpMediaTypeNotAcceptable((HttpMediaTypeNotAcceptableException) ex, headers, status, request).     } else if (ex instanceof MissingPathVariableException) {         HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR.         return handleMissingPathVariable((MissingPathVariableException) ex, headers, status, request).     } else if (ex instanceof MissingServletRequestParameterException) {         HttpStatus status = HttpStatus.BAD_REQUEST.         return handleMissingServletRequestParameter((MissingServletRequestParameterException) ex, headers, status, request).     } else if (ex instanceof ServletRequestBindingException) {         HttpStatus status = HttpStatus.BAD_REQUEST.         return handleServletRequestBindingException((ServletRequestBindingException) ex, headers, status, request).     } else if (ex instanceof ConversionNotSupportedException) {         HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR.         return handleConversionNotSupported((ConversionNotSupportedException) ex, headers, status, request).     } else if (ex instanceof TypeMismatchException) {         HttpStatus status = HttpStatus.BAD_REQUEST.         return handleTypeMismatch((TypeMismatchException) ex, headers, status, request).     } else if (ex instanceof HttpMessageNotReadableException) {         HttpStatus status = HttpStatus.BAD_REQUEST.         return handleHttpMessageNotReadable((HttpMessageNotReadableException) ex, headers, status, request).     } else if (ex instanceof HttpMessageNotWritableException) {         HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR.         return handleHttpMessageNotWritable((HttpMessageNotWritableException) ex, headers, status, request).     } else if (ex instanceof MethodArgumentNotValidException) {         HttpStatus status = HttpStatus.BAD_REQUEST.         return handleMethodArgumentNotValid((MethodArgumentNotValidException) ex, headers, status, request).     } else if (ex instanceof MissingServletRequestPartException) {         HttpStatus status = HttpStatus.BAD_REQUEST.         return handleMissingServletRequestPart((MissingServletRequestPartException) ex, headers, status, request).     } else if (ex instanceof BindException) {         HttpStatus status = HttpStatus.BAD_REQUEST.         return handleBindException((BindException) ex, headers, status, request).     } else if (ex instanceof NoHandlerFoundException) {         HttpStatus status = HttpStatus.NOT_FOUND.         return handleNoHandlerFoundException((NoHandlerFoundException) ex, headers, status, request).     } else if (ex instanceof AsyncRequestTimeoutException) {         HttpStatus status = HttpStatus.SERVICE_UNAVAILABLE.         return handleAsyncRequestTimeoutException((AsyncRequestTimeoutException) ex, headers, status, request).     } else {         // exception for further processing through the HandlerExceptionResolver chain.         throw ex.     } }
true;protected;4;11;/**  * Customize the response for HttpRequestMethodNotSupportedException.  * <p>This method logs a warning, sets the "Allow" header, and delegates to  * {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for HttpRequestMethodNotSupportedException.  * <p>This method logs a warning, sets the "Allow" header, and delegates to  * {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     pageNotFoundLogger.warn(ex.getMessage()).     Set<HttpMethod> supportedMethods = ex.getSupportedHttpMethods().     if (!CollectionUtils.isEmpty(supportedMethods)) {         headers.setAllow(supportedMethods).     }     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;10;/**  * Customize the response for HttpMediaTypeNotSupportedException.  * <p>This method sets the "Accept" header and delegates to  * {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for HttpMediaTypeNotSupportedException.  * <p>This method sets the "Accept" header and delegates to  * {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     List<MediaType> mediaTypes = ex.getSupportedMediaTypes().     if (!CollectionUtils.isEmpty(mediaTypes)) {         headers.setAccept(mediaTypes).     }     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for HttpMediaTypeNotAcceptableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for HttpMediaTypeNotAcceptableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for MissingPathVariableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  * @since 4.2  */ ;/**  * Customize the response for MissingPathVariableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  * @since 4.2  */ protected ResponseEntity<Object> handleMissingPathVariable(MissingPathVariableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for MissingServletRequestParameterException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for MissingServletRequestParameterException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleMissingServletRequestParameter(MissingServletRequestParameterException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for ServletRequestBindingException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for ServletRequestBindingException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleServletRequestBindingException(ServletRequestBindingException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for ConversionNotSupportedException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for ConversionNotSupportedException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleConversionNotSupported(ConversionNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for TypeMismatchException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for TypeMismatchException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleTypeMismatch(TypeMismatchException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for HttpMessageNotReadableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for HttpMessageNotReadableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for HttpMessageNotWritableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for HttpMessageNotWritableException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleHttpMessageNotWritable(HttpMessageNotWritableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for MethodArgumentNotValidException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for MethodArgumentNotValidException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for MissingServletRequestPartException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for MissingServletRequestPartException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleMissingServletRequestPart(MissingServletRequestPartException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for BindException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ ;/**  * Customize the response for BindException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  */ protected ResponseEntity<Object> handleBindException(BindException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;5;/**  * Customize the response for NoHandlerFoundException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  * @since 4.0  */ ;/**  * Customize the response for NoHandlerFoundException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param request the current request  * @return a {@code ResponseEntity} instance  * @since 4.0  */ protected ResponseEntity<Object> handleNoHandlerFoundException(NoHandlerFoundException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     return handleExceptionInternal(ex, null, headers, status, request). }
true;protected;4;17;/**  * Customize the response for NoHandlerFoundException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param webRequest the current request  * @return a {@code ResponseEntity} instance  * @since 4.2.8  */ ;/**  * Customize the response for NoHandlerFoundException.  * <p>This method delegates to {@link #handleExceptionInternal}.  * @param ex the exception  * @param headers the headers to be written to the response  * @param status the selected response status  * @param webRequest the current request  * @return a {@code ResponseEntity} instance  * @since 4.2.8  */ @Nullable protected ResponseEntity<Object> handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex, HttpHeaders headers, HttpStatus status, WebRequest webRequest) {     if (webRequest instanceof ServletWebRequest) {         ServletWebRequest servletWebRequest = (ServletWebRequest) webRequest.         HttpServletResponse response = servletWebRequest.getResponse().         if (response != null && response.isCommitted()) {             if (logger.isWarnEnabled()) {                 logger.warn("Async request timed out").             }             return null.         }     }     return handleExceptionInternal(ex, null, headers, status, webRequest). }
true;protected;5;8;/**  * A single place to customize the response body of all Exception types.  * <p>The default implementation sets the {@link WebUtils#ERROR_EXCEPTION_ATTRIBUTE}  * request attribute and creates a {@link ResponseEntity} from the given  * body, headers, and status.  * @param ex the exception  * @param body the body for the response  * @param headers the headers for the response  * @param status the response status  * @param request the current request  */ ;/**  * A single place to customize the response body of all Exception types.  * <p>The default implementation sets the {@link WebUtils#ERROR_EXCEPTION_ATTRIBUTE}  * request attribute and creates a {@link ResponseEntity} from the given  * body, headers, and status.  * @param ex the exception  * @param body the body for the response  * @param headers the headers for the response  * @param status the response status  * @param request the current request  */ protected ResponseEntity<Object> handleExceptionInternal(Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {     if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {         request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST).     }     return new ResponseEntity<>(body, headers, status). }
