commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the 'value' attribute of the rendered HTML {@code <option>} tag.  */ ;/**  * Set the 'value' attribute of the rendered HTML {@code <option>} tag.  */ public void setValue(Object value) {     this.value = value. }
true;protected;0;4;/**  * Get the 'value' attribute of the rendered HTML {@code <option>} tag.  */ ;/**  * Get the 'value' attribute of the rendered HTML {@code <option>} tag.  */ @Nullable protected Object getValue() {     return this.value. }
true;public;1;3;/**  * Set the value of the '{@code disabled}' attribute.  */ ;/**  * Set the value of the '{@code disabled}' attribute.  */ public void setDisabled(boolean disabled) {     this.disabled = disabled. }
true;protected;0;3;/**  * Get the value of the '{@code disabled}' attribute.  */ ;/**  * Get the value of the '{@code disabled}' attribute.  */ protected boolean isDisabled() {     return this.disabled. }
true;public;1;3;/**  * Set the text body of the rendered HTML {@code <option>} tag.  * <p>May be a runtime expression.  */ ;/**  * Set the text body of the rendered HTML {@code <option>} tag.  * <p>May be a runtime expression.  */ public void setLabel(String label) {     this.label = label. }
true;protected;0;4;/**  * Get the text body of the rendered HTML {@code <option>} tag.  */ ;/**  * Get the text body of the rendered HTML {@code <option>} tag.  */ @Nullable protected String getLabel() {     return this.label. }
false;protected;1;6;;@Override protected void renderDefaultContent(TagWriter tagWriter) throws JspException {     Object value = this.pageContext.getAttribute(VALUE_VARIABLE_NAME).     String label = getLabelValue(value).     renderOption(value, label, tagWriter). }
false;protected;2;6;;@Override protected void renderFromBodyContent(BodyContent bodyContent, TagWriter tagWriter) throws JspException {     Object value = this.pageContext.getAttribute(VALUE_VARIABLE_NAME).     String label = bodyContent.getString().     renderOption(value, label, tagWriter). }
true;protected;0;4;/**  * Make sure we are under a '{@code select}' tag before proceeding.  */ ;/**  * Make sure we are under a '{@code select}' tag before proceeding.  */ @Override protected void onWriteTagContent() {     assertUnderSelectTag(). }
false;protected;0;8;;@Override protected void exposeAttributes() throws JspException {     Object value = resolveValue().     this.oldValue = this.pageContext.getAttribute(VALUE_VARIABLE_NAME).     this.pageContext.setAttribute(VALUE_VARIABLE_NAME, value).     this.oldDisplayValue = this.pageContext.getAttribute(DISPLAY_VALUE_VARIABLE_NAME).     this.pageContext.setAttribute(DISPLAY_VALUE_VARIABLE_NAME, getDisplayString(value, getBindStatus().getEditor())). }
false;protected;0;4;;@Override protected BindStatus getBindStatus() {     return (BindStatus) this.pageContext.getAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE). }
false;protected;0;18;;@Override protected void removeAttributes() {     if (this.oldValue != null) {         this.pageContext.setAttribute(VALUE_ATTRIBUTE, this.oldValue).         this.oldValue = null.     } else {         this.pageContext.removeAttribute(VALUE_VARIABLE_NAME).     }     if (this.oldDisplayValue != null) {         this.pageContext.setAttribute(DISPLAY_VALUE_VARIABLE_NAME, this.oldDisplayValue).         this.oldDisplayValue = null.     } else {         this.pageContext.removeAttribute(DISPLAY_VALUE_VARIABLE_NAME).     } }
false;private;3;16;;private void renderOption(Object value, String label, TagWriter tagWriter) throws JspException {     tagWriter.startTag("option").     writeOptionalAttribute(tagWriter, "id", resolveId()).     writeOptionalAttributes(tagWriter).     String renderedValue = getDisplayString(value, getBindStatus().getEditor()).     renderedValue = processFieldValue(getSelectTag().getName(), renderedValue, "option").     tagWriter.writeAttribute(VALUE_ATTRIBUTE, renderedValue).     if (isSelected(value)) {         tagWriter.writeAttribute(SELECTED_ATTRIBUTE, SELECTED_ATTRIBUTE).     }     if (isDisabled()) {         tagWriter.writeAttribute(DISABLED_ATTRIBUTE, "disabled").     }     tagWriter.appendValue(label).     tagWriter.endTag(). }
false;protected;0;4;;@Override protected String autogenerateId() throws JspException {     return null. }
true;private;1;5;/**  * Return the value of the label for this '{@code option}' element.  * <p>If the {@link #setLabel label} property is set then the resolved value  * of that property is used, otherwise the value of the {@code resolvedValue}  * argument is used.  */ ;/**  * Return the value of the label for this '{@code option}' element.  * <p>If the {@link #setLabel label} property is set then the resolved value  * of that property is used, otherwise the value of the {@code resolvedValue}  * argument is used.  */ private String getLabelValue(Object resolvedValue) throws JspException {     String label = getLabel().     Object labelObj = (label == null ? resolvedValue : evaluate("label", label)).     return getDisplayString(labelObj, getBindStatus().getEditor()). }
false;private;0;3;;private void assertUnderSelectTag() {     TagUtils.assertHasAncestorOfType(this, SelectTag.class, "option", "select"). }
false;private;0;3;;private SelectTag getSelectTag() {     return (SelectTag) findAncestorWithClass(this, SelectTag.class). }
false;private;1;3;;private boolean isSelected(Object resolvedValue) {     return SelectedValueComparator.isSelected(getBindStatus(), resolvedValue). }
false;private;0;4;;@Nullable private Object resolveValue() throws JspException {     return evaluate(VALUE_VARIABLE_NAME, getValue()). }
