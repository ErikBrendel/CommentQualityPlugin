commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the value of the '{@code disabled}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code disabled}' attribute.  * May be a runtime expression.  */ public void setDisabled(boolean disabled) {     this.disabled = disabled. }
true;public;0;3;/**  * Get the value of the '{@code disabled}' attribute.  */ ;/**  * Get the value of the '{@code disabled}' attribute.  */ public boolean isDisabled() {     return this.disabled. }
true;protected;2;4;/**  * Flags "type" as an illegal dynamic attribute.  */ ;/**  * Flags "type" as an illegal dynamic attribute.  */ @Override protected boolean isValidDynamicAttribute(String localName, Object value) {     return !"type".equals(localName). }
true;protected;1;13;/**  * Writes the HTML '{@code input}' tag to the supplied {@link TagWriter} including the  * databound value.  * @see #writeDefaultAttributes(TagWriter)  * @see #getBoundValue()  */ ;/**  * Writes the HTML '{@code input}' tag to the supplied {@link TagWriter} including the  * databound value.  * @see #writeDefaultAttributes(TagWriter)  * @see #getBoundValue()  */ @Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     tagWriter.startTag("input").     writeDefaultAttributes(tagWriter).     tagWriter.writeAttribute("type", "hidden").     if (isDisabled()) {         tagWriter.writeAttribute(DISABLED_ATTRIBUTE, "disabled").     }     String value = getDisplayString(getBoundValue(), getPropertyEditor()).     tagWriter.writeAttribute("value", processFieldValue(getName(), value, "hidden")).     tagWriter.endTag().     return SKIP_BODY. }
