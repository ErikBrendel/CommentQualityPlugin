# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMultiCheckedElementTag -> protected String getItemValue();1328020251;Get the name of the property mapped to the '<code>value</code>' attribute_of the '<code>input type="checkbox/radio"</code>' tag.;protected String getItemValue() {_		return this.itemValue__	};get,the,name,of,the,property,mapped,to,the,code,value,code,attribute,of,the,code,input,type,checkbox,radio,code,tag;protected,string,get,item,value,return,this,item,value
AbstractMultiCheckedElementTag -> protected String getItemValue();1356735495;Get the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag.;protected String getItemValue() {_		return this.itemValue__	};get,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,value,return,this,item,value
AbstractMultiCheckedElementTag -> protected String getItemValue();1385412762;Get the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag.;protected String getItemValue() {_		return this.itemValue__	};get,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,value,return,this,item,value
AbstractMultiCheckedElementTag -> protected String getItemValue();1413848647;Get the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag.;protected String getItemValue() {_		return this.itemValue__	};get,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,value,return,this,item,value
AbstractMultiCheckedElementTag -> protected String getItemValue();1447323728;Get the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag.;protected String getItemValue() {_		return this.itemValue__	};get,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,value,return,this,item,value
AbstractMultiCheckedElementTag -> public void setItemLabel(String itemLabel);1328020251;Set the value to be displayed as part of the_'<code>input type="checkbox/radio"</code>' tag._<p>May be a runtime expression.;public void setItemLabel(String itemLabel) {_		Assert.hasText(itemLabel, "'itemLabel' must not be empty")__		this.itemLabel = itemLabel__	};set,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,code,tag,p,may,be,a,runtime,expression;public,void,set,item,label,string,item,label,assert,has,text,item,label,item,label,must,not,be,empty,this,item,label,item,label
AbstractMultiCheckedElementTag -> public void setItemLabel(String itemLabel);1356735495;Set the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemLabel(String itemLabel) {_		Assert.hasText(itemLabel, "'itemLabel' must not be empty")__		this.itemLabel = itemLabel__	};set,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,label,string,item,label,assert,has,text,item,label,item,label,must,not,be,empty,this,item,label,item,label
AbstractMultiCheckedElementTag -> public void setItemLabel(String itemLabel);1385412762;Set the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemLabel(String itemLabel) {_		Assert.hasText(itemLabel, "'itemLabel' must not be empty")__		this.itemLabel = itemLabel__	};set,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,label,string,item,label,assert,has,text,item,label,item,label,must,not,be,empty,this,item,label,item,label
AbstractMultiCheckedElementTag -> public void setItemLabel(String itemLabel);1413848647;Set the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemLabel(String itemLabel) {_		Assert.hasText(itemLabel, "'itemLabel' must not be empty")__		this.itemLabel = itemLabel__	};set,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,label,string,item,label,assert,has,text,item,label,item,label,must,not,be,empty,this,item,label,item,label
AbstractMultiCheckedElementTag -> public void setItemLabel(String itemLabel);1447323728;Set the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemLabel(String itemLabel) {_		Assert.hasText(itemLabel, "'itemLabel' must not be empty")__		this.itemLabel = itemLabel__	};set,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,label,string,item,label,assert,has,text,item,label,item,label,must,not,be,empty,this,item,label,item,label
AbstractMultiCheckedElementTag -> public void setItemLabel(String itemLabel);1532981291;Set the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemLabel(String itemLabel) {_		Assert.hasText(itemLabel, "'itemLabel' must not be empty")__		this.itemLabel = itemLabel__	};set,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,label,string,item,label,assert,has,text,item,label,item,label,must,not,be,empty,this,item,label,item,label
AbstractMultiCheckedElementTag -> @Override 	protected int writeTagContent(TagWriter tagWriter) throws JspException;1328020251;Renders the '<code>input type="radio"</code>' element with the configured_{@link #setItems(Object)} values. Marks the element as checked if the_value matches the bound value.;@Override_	protected int writeTagContent(TagWriter tagWriter) throws JspException {_		Object items = getItems()__		Object itemsObject = (items instanceof String ? evaluate("items", items) : items)___		String itemValue = getItemValue()__		String itemLabel = getItemLabel()__		String valueProperty =_				(itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null)__		String labelProperty =_				(itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null)___		Class<?> boundType = getBindStatus().getValueType()__		if (itemsObject == null && boundType != null && boundType.isEnum()) {_			itemsObject = boundType.getEnumConstants()__		}_		_		if (itemsObject == null) {_			throw new IllegalArgumentException("Attribute 'items' is required and must be a Collection, an Array or a Map")__		}__		if (itemsObject.getClass().isArray()) {_			Object[] itemsArray = (Object[]) itemsObject__			for (int i = 0_ i < itemsArray.length_ i++) {_				Object item = itemsArray[i]__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i)__			}_		}_		else if (itemsObject instanceof Collection) {_			final Collection optionCollection = (Collection) itemsObject__			int itemIndex = 0__			for (Iterator it = optionCollection.iterator()_ it.hasNext()_ itemIndex++) {_				Object item = it.next()__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex)__			}_		}_		else if (itemsObject instanceof Map) {_			final Map optionMap = (Map) itemsObject__			int itemIndex = 0__			for (Iterator it = optionMap.entrySet().iterator()_ it.hasNext()_ itemIndex++) {_				Map.Entry entry = (Map.Entry) it.next()__				writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex)__			}_		}_		else {_			throw new IllegalArgumentException("Attribute 'items' must be an array, a Collection or a Map")__		}__		return SKIP_BODY__	};renders,the,code,input,type,radio,code,element,with,the,configured,link,set,items,object,values,marks,the,element,as,checked,if,the,value,matches,the,bound,value;override,protected,int,write,tag,content,tag,writer,tag,writer,throws,jsp,exception,object,items,get,items,object,items,object,items,instanceof,string,evaluate,items,items,items,string,item,value,get,item,value,string,item,label,get,item,label,string,value,property,item,value,null,object,utils,get,display,string,evaluate,item,value,item,value,null,string,label,property,item,label,null,object,utils,get,display,string,evaluate,item,label,item,label,null,class,bound,type,get,bind,status,get,value,type,if,items,object,null,bound,type,null,bound,type,is,enum,items,object,bound,type,get,enum,constants,if,items,object,null,throw,new,illegal,argument,exception,attribute,items,is,required,and,must,be,a,collection,an,array,or,a,map,if,items,object,get,class,is,array,object,items,array,object,items,object,for,int,i,0,i,items,array,length,i,object,item,items,array,i,write,object,entry,tag,writer,value,property,label,property,item,i,else,if,items,object,instanceof,collection,final,collection,option,collection,collection,items,object,int,item,index,0,for,iterator,it,option,collection,iterator,it,has,next,item,index,object,item,it,next,write,object,entry,tag,writer,value,property,label,property,item,item,index,else,if,items,object,instanceof,map,final,map,option,map,map,items,object,int,item,index,0,for,iterator,it,option,map,entry,set,iterator,it,has,next,item,index,map,entry,entry,map,entry,it,next,write,map,entry,tag,writer,value,property,label,property,entry,item,index,else,throw,new,illegal,argument,exception,attribute,items,must,be,an,array,a,collection,or,a,map,return
AbstractMultiCheckedElementTag -> @Override 	protected int writeTagContent(TagWriter tagWriter) throws JspException;1356735495;Renders the '{@code input type="radio"}' element with the configured_{@link #setItems(Object)} values. Marks the element as checked if the_value matches the bound value.;@Override_	protected int writeTagContent(TagWriter tagWriter) throws JspException {_		Object items = getItems()__		Object itemsObject = (items instanceof String ? evaluate("items", items) : items)___		String itemValue = getItemValue()__		String itemLabel = getItemLabel()__		String valueProperty =_				(itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null)__		String labelProperty =_				(itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null)___		Class<?> boundType = getBindStatus().getValueType()__		if (itemsObject == null && boundType != null && boundType.isEnum()) {_			itemsObject = boundType.getEnumConstants()__		}__		if (itemsObject == null) {_			throw new IllegalArgumentException("Attribute 'items' is required and must be a Collection, an Array or a Map")__		}__		if (itemsObject.getClass().isArray()) {_			Object[] itemsArray = (Object[]) itemsObject__			for (int i = 0_ i < itemsArray.length_ i++) {_				Object item = itemsArray[i]__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i)__			}_		}_		else if (itemsObject instanceof Collection) {_			final Collection optionCollection = (Collection) itemsObject__			int itemIndex = 0__			for (Iterator it = optionCollection.iterator()_ it.hasNext()_ itemIndex++) {_				Object item = it.next()__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex)__			}_		}_		else if (itemsObject instanceof Map) {_			final Map optionMap = (Map) itemsObject__			int itemIndex = 0__			for (Iterator it = optionMap.entrySet().iterator()_ it.hasNext()_ itemIndex++) {_				Map.Entry entry = (Map.Entry) it.next()__				writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex)__			}_		}_		else {_			throw new IllegalArgumentException("Attribute 'items' must be an array, a Collection or a Map")__		}__		return SKIP_BODY__	};renders,the,code,input,type,radio,element,with,the,configured,link,set,items,object,values,marks,the,element,as,checked,if,the,value,matches,the,bound,value;override,protected,int,write,tag,content,tag,writer,tag,writer,throws,jsp,exception,object,items,get,items,object,items,object,items,instanceof,string,evaluate,items,items,items,string,item,value,get,item,value,string,item,label,get,item,label,string,value,property,item,value,null,object,utils,get,display,string,evaluate,item,value,item,value,null,string,label,property,item,label,null,object,utils,get,display,string,evaluate,item,label,item,label,null,class,bound,type,get,bind,status,get,value,type,if,items,object,null,bound,type,null,bound,type,is,enum,items,object,bound,type,get,enum,constants,if,items,object,null,throw,new,illegal,argument,exception,attribute,items,is,required,and,must,be,a,collection,an,array,or,a,map,if,items,object,get,class,is,array,object,items,array,object,items,object,for,int,i,0,i,items,array,length,i,object,item,items,array,i,write,object,entry,tag,writer,value,property,label,property,item,i,else,if,items,object,instanceof,collection,final,collection,option,collection,collection,items,object,int,item,index,0,for,iterator,it,option,collection,iterator,it,has,next,item,index,object,item,it,next,write,object,entry,tag,writer,value,property,label,property,item,item,index,else,if,items,object,instanceof,map,final,map,option,map,map,items,object,int,item,index,0,for,iterator,it,option,map,entry,set,iterator,it,has,next,item,index,map,entry,entry,map,entry,it,next,write,map,entry,tag,writer,value,property,label,property,entry,item,index,else,throw,new,illegal,argument,exception,attribute,items,must,be,an,array,a,collection,or,a,map,return
AbstractMultiCheckedElementTag -> protected Object getItems();1328020251;Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '<code>input type="checkbox/radio"</code>' tags.;protected Object getItems() {_		return this.items__	};get,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,code,tags;protected,object,get,items,return,this,items
AbstractMultiCheckedElementTag -> protected Object getItems();1356735495;Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags.;protected Object getItems() {_		return this.items__	};get,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags;protected,object,get,items,return,this,items
AbstractMultiCheckedElementTag -> protected Object getItems();1385412762;Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags.;protected Object getItems() {_		return this.items__	};get,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags;protected,object,get,items,return,this,items
AbstractMultiCheckedElementTag -> protected Object getItems();1413848647;Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags.;protected Object getItems() {_		return this.items__	};get,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags;protected,object,get,items,return,this,items
AbstractMultiCheckedElementTag -> protected Object getItems();1447323728;Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags.;protected Object getItems() {_		return this.items__	};get,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags;protected,object,get,items,return,this,items
AbstractMultiCheckedElementTag -> protected String getItemLabel();1328020251;Get the value to be displayed as part of the_'<code>input type="checkbox/radio"</code>' tag.;protected String getItemLabel() {_		return this.itemLabel__	};get,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,code,tag;protected,string,get,item,label,return,this,item,label
AbstractMultiCheckedElementTag -> protected String getItemLabel();1356735495;Get the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag.;protected String getItemLabel() {_		return this.itemLabel__	};get,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,label,return,this,item,label
AbstractMultiCheckedElementTag -> protected String getItemLabel();1385412762;Get the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag.;protected String getItemLabel() {_		return this.itemLabel__	};get,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,label,return,this,item,label
AbstractMultiCheckedElementTag -> protected String getItemLabel();1413848647;Get the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag.;protected String getItemLabel() {_		return this.itemLabel__	};get,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,label,return,this,item,label
AbstractMultiCheckedElementTag -> protected String getItemLabel();1447323728;Get the value to be displayed as part of the_'{@code input type="checkbox/radio"}' tag.;protected String getItemLabel() {_		return this.itemLabel__	};get,the,value,to,be,displayed,as,part,of,the,code,input,type,checkbox,radio,tag;protected,string,get,item,label,return,this,item,label
AbstractMultiCheckedElementTag -> public void setItems(Object items);1328020251;Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '<code>input type="checkbox/radio"</code>' tags._<p>Typically a runtime expression._@param items said items;public void setItems(Object items) {_		Assert.notNull(items, "'items' must not be null")__		this.items = items__	};set,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,code,tags,p,typically,a,runtime,expression,param,items,said,items;public,void,set,items,object,items,assert,not,null,items,items,must,not,be,null,this,items,items
AbstractMultiCheckedElementTag -> public void setItems(Object items);1356735495;Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags._<p>Typically a runtime expression._@param items said items;public void setItems(Object items) {_		Assert.notNull(items, "'items' must not be null")__		this.items = items__	};set,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags,p,typically,a,runtime,expression,param,items,said,items;public,void,set,items,object,items,assert,not,null,items,items,must,not,be,null,this,items,items
AbstractMultiCheckedElementTag -> public void setItems(Object items);1385412762;Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags._<p>Typically a runtime expression._@param items said items;public void setItems(Object items) {_		Assert.notNull(items, "'items' must not be null")__		this.items = items__	};set,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags,p,typically,a,runtime,expression,param,items,said,items;public,void,set,items,object,items,assert,not,null,items,items,must,not,be,null,this,items,items
AbstractMultiCheckedElementTag -> public void setItems(Object items);1413848647;Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags._<p>Typically a runtime expression._@param items said items;public void setItems(Object items) {_		Assert.notNull(items, "'items' must not be null")__		this.items = items__	};set,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags,p,typically,a,runtime,expression,param,items,said,items;public,void,set,items,object,items,assert,not,null,items,items,must,not,be,null,this,items,items
AbstractMultiCheckedElementTag -> public void setItems(Object items);1447323728;Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags._<p>Typically a runtime expression._@param items said items;public void setItems(Object items) {_		Assert.notNull(items, "'items' must not be null")__		this.items = items__	};set,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags,p,typically,a,runtime,expression,param,items,said,items;public,void,set,items,object,items,assert,not,null,items,items,must,not,be,null,this,items,items
AbstractMultiCheckedElementTag -> public void setItems(Object items);1532981291;Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects_used to generate the '{@code input type="checkbox/radio"}' tags._<p>Typically a runtime expression._@param items said items;public void setItems(Object items) {_		Assert.notNull(items, "'items' must not be null")__		this.items = items__	};set,the,link,java,util,collection,link,java,util,map,or,array,of,objects,used,to,generate,the,code,input,type,checkbox,radio,tags,p,typically,a,runtime,expression,param,items,said,items;public,void,set,items,object,items,assert,not,null,items,items,must,not,be,null,this,items,items
AbstractMultiCheckedElementTag -> public void setElement(String element);1328020251;Set the HTML element used to enclose the_'<code>input type="checkbox/radio"</code>' tag._<p>Defaults to an HTML '<code>&lt_span/&gt_</code>' tag.;public void setElement(String element) {_		Assert.hasText(element, "'element' cannot be null or blank")__		this.element = element__	};set,the,html,element,used,to,enclose,the,code,input,type,checkbox,radio,code,tag,p,defaults,to,an,html,code,lt,span,gt,code,tag;public,void,set,element,string,element,assert,has,text,element,element,cannot,be,null,or,blank,this,element,element
AbstractMultiCheckedElementTag -> public void setElement(String element);1356735495;Set the HTML element used to enclose the_'{@code input type="checkbox/radio"}' tag._<p>Defaults to an HTML '{@code &lt_span/&gt_}' tag.;public void setElement(String element) {_		Assert.hasText(element, "'element' cannot be null or blank")__		this.element = element__	};set,the,html,element,used,to,enclose,the,code,input,type,checkbox,radio,tag,p,defaults,to,an,html,code,lt,span,gt,tag;public,void,set,element,string,element,assert,has,text,element,element,cannot,be,null,or,blank,this,element,element
AbstractMultiCheckedElementTag -> public void setElement(String element);1385412762;Set the HTML element used to enclose the_'{@code input type="checkbox/radio"}' tag._<p>Defaults to an HTML '{@code &lt_span/&gt_}' tag.;public void setElement(String element) {_		Assert.hasText(element, "'element' cannot be null or blank")__		this.element = element__	};set,the,html,element,used,to,enclose,the,code,input,type,checkbox,radio,tag,p,defaults,to,an,html,code,lt,span,gt,tag;public,void,set,element,string,element,assert,has,text,element,element,cannot,be,null,or,blank,this,element,element
AbstractMultiCheckedElementTag -> public void setElement(String element);1413848647;Set the HTML element used to enclose the_'{@code input type="checkbox/radio"}' tag._<p>Defaults to an HTML '{@code &lt_span/&gt_}' tag.;public void setElement(String element) {_		Assert.hasText(element, "'element' cannot be null or blank")__		this.element = element__	};set,the,html,element,used,to,enclose,the,code,input,type,checkbox,radio,tag,p,defaults,to,an,html,code,lt,span,gt,tag;public,void,set,element,string,element,assert,has,text,element,element,cannot,be,null,or,blank,this,element,element
AbstractMultiCheckedElementTag -> public void setElement(String element);1447323728;Set the HTML element used to enclose the_'{@code input type="checkbox/radio"}' tag._<p>Defaults to an HTML '{@code <span/>}' tag.;public void setElement(String element) {_		Assert.hasText(element, "'element' cannot be null or blank")__		this.element = element__	};set,the,html,element,used,to,enclose,the,code,input,type,checkbox,radio,tag,p,defaults,to,an,html,code,span,tag;public,void,set,element,string,element,assert,has,text,element,element,cannot,be,null,or,blank,this,element,element
AbstractMultiCheckedElementTag -> public void setElement(String element);1532981291;Set the HTML element used to enclose the_'{@code input type="checkbox/radio"}' tag._<p>Defaults to an HTML '{@code <span/>}' tag.;public void setElement(String element) {_		Assert.hasText(element, "'element' cannot be null or blank")__		this.element = element__	};set,the,html,element,used,to,enclose,the,code,input,type,checkbox,radio,tag,p,defaults,to,an,html,code,span,tag;public,void,set,element,string,element,assert,has,text,element,element,cannot,be,null,or,blank,this,element,element
AbstractMultiCheckedElementTag -> @Override 	protected String resolveId() throws JspException;1328020251;Appends a counter to a specified id as well,_since we're dealing with multiple HTML elements.;@Override_	protected String resolveId() throws JspException {_		Object id = evaluate("id", getId())__		if (id != null) {_			String idString = id.toString()__			return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null)__		}_		return autogenerateId()__	};appends,a,counter,to,a,specified,id,as,well,since,we,re,dealing,with,multiple,html,elements;override,protected,string,resolve,id,throws,jsp,exception,object,id,evaluate,id,get,id,if,id,null,string,id,string,id,to,string,return,string,utils,has,text,id,string,tag,id,generator,next,id,id,string,this,page,context,null,return,autogenerate,id
AbstractMultiCheckedElementTag -> @Override 	protected String resolveId() throws JspException;1356735495;Appends a counter to a specified id as well,_since we're dealing with multiple HTML elements.;@Override_	protected String resolveId() throws JspException {_		Object id = evaluate("id", getId())__		if (id != null) {_			String idString = id.toString()__			return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null)__		}_		return autogenerateId()__	};appends,a,counter,to,a,specified,id,as,well,since,we,re,dealing,with,multiple,html,elements;override,protected,string,resolve,id,throws,jsp,exception,object,id,evaluate,id,get,id,if,id,null,string,id,string,id,to,string,return,string,utils,has,text,id,string,tag,id,generator,next,id,id,string,this,page,context,null,return,autogenerate,id
AbstractMultiCheckedElementTag -> @Override 	protected String resolveId() throws JspException;1385412762;Appends a counter to a specified id as well,_since we're dealing with multiple HTML elements.;@Override_	protected String resolveId() throws JspException {_		Object id = evaluate("id", getId())__		if (id != null) {_			String idString = id.toString()__			return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null)__		}_		return autogenerateId()__	};appends,a,counter,to,a,specified,id,as,well,since,we,re,dealing,with,multiple,html,elements;override,protected,string,resolve,id,throws,jsp,exception,object,id,evaluate,id,get,id,if,id,null,string,id,string,id,to,string,return,string,utils,has,text,id,string,tag,id,generator,next,id,id,string,this,page,context,null,return,autogenerate,id
AbstractMultiCheckedElementTag -> @Override 	protected String resolveId() throws JspException;1413848647;Appends a counter to a specified id as well,_since we're dealing with multiple HTML elements.;@Override_	protected String resolveId() throws JspException {_		Object id = evaluate("id", getId())__		if (id != null) {_			String idString = id.toString()__			return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null)__		}_		return autogenerateId()__	};appends,a,counter,to,a,specified,id,as,well,since,we,re,dealing,with,multiple,html,elements;override,protected,string,resolve,id,throws,jsp,exception,object,id,evaluate,id,get,id,if,id,null,string,id,string,id,to,string,return,string,utils,has,text,id,string,tag,id,generator,next,id,id,string,this,page,context,null,return,autogenerate,id
AbstractMultiCheckedElementTag -> @Override 	protected String resolveId() throws JspException;1447323728;Appends a counter to a specified id as well,_since we're dealing with multiple HTML elements.;@Override_	protected String resolveId() throws JspException {_		Object id = evaluate("id", getId())__		if (id != null) {_			String idString = id.toString()__			return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null)__		}_		return autogenerateId()__	};appends,a,counter,to,a,specified,id,as,well,since,we,re,dealing,with,multiple,html,elements;override,protected,string,resolve,id,throws,jsp,exception,object,id,evaluate,id,get,id,if,id,null,string,id,string,id,to,string,return,string,utils,has,text,id,string,tag,id,generator,next,id,id,string,this,page,context,null,return,autogenerate,id
AbstractMultiCheckedElementTag -> @Override 	protected String resolveId() throws JspException;1532981291;Appends a counter to a specified id as well,_since we're dealing with multiple HTML elements.;@Override_	protected String resolveId() throws JspException {_		Object id = evaluate("id", getId())__		if (id != null) {_			String idString = id.toString()__			return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null)__		}_		return autogenerateId()__	};appends,a,counter,to,a,specified,id,as,well,since,we,re,dealing,with,multiple,html,elements;override,protected,string,resolve,id,throws,jsp,exception,object,id,evaluate,id,get,id,if,id,null,string,id,string,id,to,string,return,string,utils,has,text,id,string,tag,id,generator,next,id,id,string,this,page,context,null,return,autogenerate,id
AbstractMultiCheckedElementTag -> public String getDelimiter();1328020251;Return the delimiter to be used between each_'<code>input type="radio"</code>' tag.;public String getDelimiter() {_		return this.delimiter__	};return,the,delimiter,to,be,used,between,each,code,input,type,radio,code,tag;public,string,get,delimiter,return,this,delimiter
AbstractMultiCheckedElementTag -> public String getDelimiter();1356735495;Return the delimiter to be used between each_'{@code input type="radio"}' tag.;public String getDelimiter() {_		return this.delimiter__	};return,the,delimiter,to,be,used,between,each,code,input,type,radio,tag;public,string,get,delimiter,return,this,delimiter
AbstractMultiCheckedElementTag -> public String getDelimiter();1385412762;Return the delimiter to be used between each_'{@code input type="radio"}' tag.;public String getDelimiter() {_		return this.delimiter__	};return,the,delimiter,to,be,used,between,each,code,input,type,radio,tag;public,string,get,delimiter,return,this,delimiter
AbstractMultiCheckedElementTag -> public String getDelimiter();1413848647;Return the delimiter to be used between each_'{@code input type="radio"}' tag.;public String getDelimiter() {_		return this.delimiter__	};return,the,delimiter,to,be,used,between,each,code,input,type,radio,tag;public,string,get,delimiter,return,this,delimiter
AbstractMultiCheckedElementTag -> public String getDelimiter();1447323728;Return the delimiter to be used between each_'{@code input type="radio"}' tag.;public String getDelimiter() {_		return this.delimiter__	};return,the,delimiter,to,be,used,between,each,code,input,type,radio,tag;public,string,get,delimiter,return,this,delimiter
AbstractMultiCheckedElementTag -> public String getElement();1328020251;Get the HTML element used to enclose_'<code>input type="checkbox/radio"</code>' tag.;public String getElement() {_		return this.element__	};get,the,html,element,used,to,enclose,code,input,type,checkbox,radio,code,tag;public,string,get,element,return,this,element
AbstractMultiCheckedElementTag -> public String getElement();1356735495;Get the HTML element used to enclose_'{@code input type="checkbox/radio"}' tag.;public String getElement() {_		return this.element__	};get,the,html,element,used,to,enclose,code,input,type,checkbox,radio,tag;public,string,get,element,return,this,element
AbstractMultiCheckedElementTag -> public String getElement();1385412762;Get the HTML element used to enclose_'{@code input type="checkbox/radio"}' tag.;public String getElement() {_		return this.element__	};get,the,html,element,used,to,enclose,code,input,type,checkbox,radio,tag;public,string,get,element,return,this,element
AbstractMultiCheckedElementTag -> public String getElement();1413848647;Get the HTML element used to enclose_'{@code input type="checkbox/radio"}' tag.;public String getElement() {_		return this.element__	};get,the,html,element,used,to,enclose,code,input,type,checkbox,radio,tag;public,string,get,element,return,this,element
AbstractMultiCheckedElementTag -> public String getElement();1447323728;Get the HTML element used to enclose_'{@code input type="checkbox/radio"}' tag.;public String getElement() {_		return this.element__	};get,the,html,element,used,to,enclose,code,input,type,checkbox,radio,tag;public,string,get,element,return,this,element
AbstractMultiCheckedElementTag -> public String getElement();1532981291;Get the HTML element used to enclose_'{@code input type="checkbox/radio"}' tag.;public String getElement() {_		return this.element__	};get,the,html,element,used,to,enclose,code,input,type,checkbox,radio,tag;public,string,get,element,return,this,element
AbstractMultiCheckedElementTag -> @Override 	@SuppressWarnings("rawtypes") 	protected int writeTagContent(TagWriter tagWriter) throws JspException;1385412762;Renders the '{@code input type="radio"}' element with the configured_{@link #setItems(Object)} values. Marks the element as checked if the_value matches the bound value.;@Override_	@SuppressWarnings("rawtypes")_	protected int writeTagContent(TagWriter tagWriter) throws JspException {_		Object items = getItems()__		Object itemsObject = (items instanceof String ? evaluate("items", items) : items)___		String itemValue = getItemValue()__		String itemLabel = getItemLabel()__		String valueProperty =_				(itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null)__		String labelProperty =_				(itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null)___		Class<?> boundType = getBindStatus().getValueType()__		if (itemsObject == null && boundType != null && boundType.isEnum()) {_			itemsObject = boundType.getEnumConstants()__		}__		if (itemsObject == null) {_			throw new IllegalArgumentException("Attribute 'items' is required and must be a Collection, an Array or a Map")__		}__		if (itemsObject.getClass().isArray()) {_			Object[] itemsArray = (Object[]) itemsObject__			for (int i = 0_ i < itemsArray.length_ i++) {_				Object item = itemsArray[i]__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i)__			}_		}_		else if (itemsObject instanceof Collection) {_			final Collection<?> optionCollection = (Collection<?>) itemsObject__			int itemIndex = 0__			for (Iterator<?> it = optionCollection.iterator()_ it.hasNext()_ itemIndex++) {_				Object item = it.next()__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex)__			}_		}_		else if (itemsObject instanceof Map) {_			final Map<?, ?> optionMap = (Map<?, ?>) itemsObject__			int itemIndex = 0__			for (Iterator it = optionMap.entrySet().iterator()_ it.hasNext()_ itemIndex++) {_				Map.Entry entry = (Map.Entry) it.next()__				writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex)__			}_		}_		else {_			throw new IllegalArgumentException("Attribute 'items' must be an array, a Collection or a Map")__		}__		return SKIP_BODY__	};renders,the,code,input,type,radio,element,with,the,configured,link,set,items,object,values,marks,the,element,as,checked,if,the,value,matches,the,bound,value;override,suppress,warnings,rawtypes,protected,int,write,tag,content,tag,writer,tag,writer,throws,jsp,exception,object,items,get,items,object,items,object,items,instanceof,string,evaluate,items,items,items,string,item,value,get,item,value,string,item,label,get,item,label,string,value,property,item,value,null,object,utils,get,display,string,evaluate,item,value,item,value,null,string,label,property,item,label,null,object,utils,get,display,string,evaluate,item,label,item,label,null,class,bound,type,get,bind,status,get,value,type,if,items,object,null,bound,type,null,bound,type,is,enum,items,object,bound,type,get,enum,constants,if,items,object,null,throw,new,illegal,argument,exception,attribute,items,is,required,and,must,be,a,collection,an,array,or,a,map,if,items,object,get,class,is,array,object,items,array,object,items,object,for,int,i,0,i,items,array,length,i,object,item,items,array,i,write,object,entry,tag,writer,value,property,label,property,item,i,else,if,items,object,instanceof,collection,final,collection,option,collection,collection,items,object,int,item,index,0,for,iterator,it,option,collection,iterator,it,has,next,item,index,object,item,it,next,write,object,entry,tag,writer,value,property,label,property,item,item,index,else,if,items,object,instanceof,map,final,map,option,map,map,items,object,int,item,index,0,for,iterator,it,option,map,entry,set,iterator,it,has,next,item,index,map,entry,entry,map,entry,it,next,write,map,entry,tag,writer,value,property,label,property,entry,item,index,else,throw,new,illegal,argument,exception,attribute,items,must,be,an,array,a,collection,or,a,map,return
AbstractMultiCheckedElementTag -> @Override 	@SuppressWarnings("rawtypes") 	protected int writeTagContent(TagWriter tagWriter) throws JspException;1413848647;Renders the '{@code input type="radio"}' element with the configured_{@link #setItems(Object)} values. Marks the element as checked if the_value matches the bound value.;@Override_	@SuppressWarnings("rawtypes")_	protected int writeTagContent(TagWriter tagWriter) throws JspException {_		Object items = getItems()__		Object itemsObject = (items instanceof String ? evaluate("items", items) : items)___		String itemValue = getItemValue()__		String itemLabel = getItemLabel()__		String valueProperty =_				(itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null)__		String labelProperty =_				(itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null)___		Class<?> boundType = getBindStatus().getValueType()__		if (itemsObject == null && boundType != null && boundType.isEnum()) {_			itemsObject = boundType.getEnumConstants()__		}__		if (itemsObject == null) {_			throw new IllegalArgumentException("Attribute 'items' is required and must be a Collection, an Array or a Map")__		}__		if (itemsObject.getClass().isArray()) {_			Object[] itemsArray = (Object[]) itemsObject__			for (int i = 0_ i < itemsArray.length_ i++) {_				Object item = itemsArray[i]__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i)__			}_		}_		else if (itemsObject instanceof Collection) {_			final Collection<?> optionCollection = (Collection<?>) itemsObject__			int itemIndex = 0__			for (Iterator<?> it = optionCollection.iterator()_ it.hasNext()_ itemIndex++) {_				Object item = it.next()__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex)__			}_		}_		else if (itemsObject instanceof Map) {_			final Map<?, ?> optionMap = (Map<?, ?>) itemsObject__			int itemIndex = 0__			for (Iterator it = optionMap.entrySet().iterator()_ it.hasNext()_ itemIndex++) {_				Map.Entry entry = (Map.Entry) it.next()__				writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex)__			}_		}_		else {_			throw new IllegalArgumentException("Attribute 'items' must be an array, a Collection or a Map")__		}__		return SKIP_BODY__	};renders,the,code,input,type,radio,element,with,the,configured,link,set,items,object,values,marks,the,element,as,checked,if,the,value,matches,the,bound,value;override,suppress,warnings,rawtypes,protected,int,write,tag,content,tag,writer,tag,writer,throws,jsp,exception,object,items,get,items,object,items,object,items,instanceof,string,evaluate,items,items,items,string,item,value,get,item,value,string,item,label,get,item,label,string,value,property,item,value,null,object,utils,get,display,string,evaluate,item,value,item,value,null,string,label,property,item,label,null,object,utils,get,display,string,evaluate,item,label,item,label,null,class,bound,type,get,bind,status,get,value,type,if,items,object,null,bound,type,null,bound,type,is,enum,items,object,bound,type,get,enum,constants,if,items,object,null,throw,new,illegal,argument,exception,attribute,items,is,required,and,must,be,a,collection,an,array,or,a,map,if,items,object,get,class,is,array,object,items,array,object,items,object,for,int,i,0,i,items,array,length,i,object,item,items,array,i,write,object,entry,tag,writer,value,property,label,property,item,i,else,if,items,object,instanceof,collection,final,collection,option,collection,collection,items,object,int,item,index,0,for,iterator,it,option,collection,iterator,it,has,next,item,index,object,item,it,next,write,object,entry,tag,writer,value,property,label,property,item,item,index,else,if,items,object,instanceof,map,final,map,option,map,map,items,object,int,item,index,0,for,iterator,it,option,map,entry,set,iterator,it,has,next,item,index,map,entry,entry,map,entry,it,next,write,map,entry,tag,writer,value,property,label,property,entry,item,index,else,throw,new,illegal,argument,exception,attribute,items,must,be,an,array,a,collection,or,a,map,return
AbstractMultiCheckedElementTag -> @Override 	@SuppressWarnings("rawtypes") 	protected int writeTagContent(TagWriter tagWriter) throws JspException;1447323728;Renders the '{@code input type="radio"}' element with the configured_{@link #setItems(Object)} values. Marks the element as checked if the_value matches the bound value.;@Override_	@SuppressWarnings("rawtypes")_	protected int writeTagContent(TagWriter tagWriter) throws JspException {_		Object items = getItems()__		Object itemsObject = (items instanceof String ? evaluate("items", items) : items)___		String itemValue = getItemValue()__		String itemLabel = getItemLabel()__		String valueProperty =_				(itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null)__		String labelProperty =_				(itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null)___		Class<?> boundType = getBindStatus().getValueType()__		if (itemsObject == null && boundType != null && boundType.isEnum()) {_			itemsObject = boundType.getEnumConstants()__		}__		if (itemsObject == null) {_			throw new IllegalArgumentException("Attribute 'items' is required and must be a Collection, an Array or a Map")__		}__		if (itemsObject.getClass().isArray()) {_			Object[] itemsArray = (Object[]) itemsObject__			for (int i = 0_ i < itemsArray.length_ i++) {_				Object item = itemsArray[i]__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i)__			}_		}_		else if (itemsObject instanceof Collection) {_			final Collection<?> optionCollection = (Collection<?>) itemsObject__			int itemIndex = 0__			for (Iterator<?> it = optionCollection.iterator()_ it.hasNext()_ itemIndex++) {_				Object item = it.next()__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex)__			}_		}_		else if (itemsObject instanceof Map) {_			final Map<?, ?> optionMap = (Map<?, ?>) itemsObject__			int itemIndex = 0__			for (Iterator it = optionMap.entrySet().iterator()_ it.hasNext()_ itemIndex++) {_				Map.Entry entry = (Map.Entry) it.next()__				writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex)__			}_		}_		else {_			throw new IllegalArgumentException("Attribute 'items' must be an array, a Collection or a Map")__		}__		return SKIP_BODY__	};renders,the,code,input,type,radio,element,with,the,configured,link,set,items,object,values,marks,the,element,as,checked,if,the,value,matches,the,bound,value;override,suppress,warnings,rawtypes,protected,int,write,tag,content,tag,writer,tag,writer,throws,jsp,exception,object,items,get,items,object,items,object,items,instanceof,string,evaluate,items,items,items,string,item,value,get,item,value,string,item,label,get,item,label,string,value,property,item,value,null,object,utils,get,display,string,evaluate,item,value,item,value,null,string,label,property,item,label,null,object,utils,get,display,string,evaluate,item,label,item,label,null,class,bound,type,get,bind,status,get,value,type,if,items,object,null,bound,type,null,bound,type,is,enum,items,object,bound,type,get,enum,constants,if,items,object,null,throw,new,illegal,argument,exception,attribute,items,is,required,and,must,be,a,collection,an,array,or,a,map,if,items,object,get,class,is,array,object,items,array,object,items,object,for,int,i,0,i,items,array,length,i,object,item,items,array,i,write,object,entry,tag,writer,value,property,label,property,item,i,else,if,items,object,instanceof,collection,final,collection,option,collection,collection,items,object,int,item,index,0,for,iterator,it,option,collection,iterator,it,has,next,item,index,object,item,it,next,write,object,entry,tag,writer,value,property,label,property,item,item,index,else,if,items,object,instanceof,map,final,map,option,map,map,items,object,int,item,index,0,for,iterator,it,option,map,entry,set,iterator,it,has,next,item,index,map,entry,entry,map,entry,it,next,write,map,entry,tag,writer,value,property,label,property,entry,item,index,else,throw,new,illegal,argument,exception,attribute,items,must,be,an,array,a,collection,or,a,map,return
AbstractMultiCheckedElementTag -> @Override 	@SuppressWarnings("rawtypes") 	protected int writeTagContent(TagWriter tagWriter) throws JspException;1532981291;Renders the '{@code input type="radio"}' element with the configured_{@link #setItems(Object)} values. Marks the element as checked if the_value matches the bound value.;@Override_	@SuppressWarnings("rawtypes")_	protected int writeTagContent(TagWriter tagWriter) throws JspException {_		Object items = getItems()__		Object itemsObject = (items instanceof String ? evaluate("items", items) : items)___		String itemValue = getItemValue()__		String itemLabel = getItemLabel()__		String valueProperty =_				(itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null)__		String labelProperty =_				(itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null)___		Class<?> boundType = getBindStatus().getValueType()__		if (itemsObject == null && boundType != null && boundType.isEnum()) {_			itemsObject = boundType.getEnumConstants()__		}__		if (itemsObject == null) {_			throw new IllegalArgumentException("Attribute 'items' is required and must be a Collection, an Array or a Map")__		}__		if (itemsObject.getClass().isArray()) {_			Object[] itemsArray = (Object[]) itemsObject__			for (int i = 0_ i < itemsArray.length_ i++) {_				Object item = itemsArray[i]__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i)__			}_		}_		else if (itemsObject instanceof Collection) {_			final Collection<?> optionCollection = (Collection<?>) itemsObject__			int itemIndex = 0__			for (Iterator<?> it = optionCollection.iterator()_ it.hasNext()_ itemIndex++) {_				Object item = it.next()__				writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex)__			}_		}_		else if (itemsObject instanceof Map) {_			final Map<?, ?> optionMap = (Map<?, ?>) itemsObject__			int itemIndex = 0__			for (Iterator it = optionMap.entrySet().iterator()_ it.hasNext()_ itemIndex++) {_				Map.Entry entry = (Map.Entry) it.next()__				writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex)__			}_		}_		else {_			throw new IllegalArgumentException("Attribute 'items' must be an array, a Collection or a Map")__		}__		return SKIP_BODY__	};renders,the,code,input,type,radio,element,with,the,configured,link,set,items,object,values,marks,the,element,as,checked,if,the,value,matches,the,bound,value;override,suppress,warnings,rawtypes,protected,int,write,tag,content,tag,writer,tag,writer,throws,jsp,exception,object,items,get,items,object,items,object,items,instanceof,string,evaluate,items,items,items,string,item,value,get,item,value,string,item,label,get,item,label,string,value,property,item,value,null,object,utils,get,display,string,evaluate,item,value,item,value,null,string,label,property,item,label,null,object,utils,get,display,string,evaluate,item,label,item,label,null,class,bound,type,get,bind,status,get,value,type,if,items,object,null,bound,type,null,bound,type,is,enum,items,object,bound,type,get,enum,constants,if,items,object,null,throw,new,illegal,argument,exception,attribute,items,is,required,and,must,be,a,collection,an,array,or,a,map,if,items,object,get,class,is,array,object,items,array,object,items,object,for,int,i,0,i,items,array,length,i,object,item,items,array,i,write,object,entry,tag,writer,value,property,label,property,item,i,else,if,items,object,instanceof,collection,final,collection,option,collection,collection,items,object,int,item,index,0,for,iterator,it,option,collection,iterator,it,has,next,item,index,object,item,it,next,write,object,entry,tag,writer,value,property,label,property,item,item,index,else,if,items,object,instanceof,map,final,map,option,map,map,items,object,int,item,index,0,for,iterator,it,option,map,entry,set,iterator,it,has,next,item,index,map,entry,entry,map,entry,it,next,write,map,entry,tag,writer,value,property,label,property,entry,item,index,else,throw,new,illegal,argument,exception,attribute,items,must,be,an,array,a,collection,or,a,map,return
AbstractMultiCheckedElementTag -> public void setItemValue(String itemValue);1328020251;Set the name of the property mapped to the '<code>value</code>' attribute_of the '<code>input type="checkbox/radio"</code>' tag._<p>May be a runtime expression.;public void setItemValue(String itemValue) {_		Assert.hasText(itemValue, "'itemValue' must not be empty")__		this.itemValue = itemValue__	};set,the,name,of,the,property,mapped,to,the,code,value,code,attribute,of,the,code,input,type,checkbox,radio,code,tag,p,may,be,a,runtime,expression;public,void,set,item,value,string,item,value,assert,has,text,item,value,item,value,must,not,be,empty,this,item,value,item,value
AbstractMultiCheckedElementTag -> public void setItemValue(String itemValue);1356735495;Set the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemValue(String itemValue) {_		Assert.hasText(itemValue, "'itemValue' must not be empty")__		this.itemValue = itemValue__	};set,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,value,string,item,value,assert,has,text,item,value,item,value,must,not,be,empty,this,item,value,item,value
AbstractMultiCheckedElementTag -> public void setItemValue(String itemValue);1385412762;Set the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemValue(String itemValue) {_		Assert.hasText(itemValue, "'itemValue' must not be empty")__		this.itemValue = itemValue__	};set,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,value,string,item,value,assert,has,text,item,value,item,value,must,not,be,empty,this,item,value,item,value
AbstractMultiCheckedElementTag -> public void setItemValue(String itemValue);1413848647;Set the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemValue(String itemValue) {_		Assert.hasText(itemValue, "'itemValue' must not be empty")__		this.itemValue = itemValue__	};set,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,value,string,item,value,assert,has,text,item,value,item,value,must,not,be,empty,this,item,value,item,value
AbstractMultiCheckedElementTag -> public void setItemValue(String itemValue);1447323728;Set the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemValue(String itemValue) {_		Assert.hasText(itemValue, "'itemValue' must not be empty")__		this.itemValue = itemValue__	};set,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,value,string,item,value,assert,has,text,item,value,item,value,must,not,be,empty,this,item,value,item,value
AbstractMultiCheckedElementTag -> public void setItemValue(String itemValue);1532981291;Set the name of the property mapped to the '{@code value}' attribute_of the '{@code input type="checkbox/radio"}' tag._<p>May be a runtime expression.;public void setItemValue(String itemValue) {_		Assert.hasText(itemValue, "'itemValue' must not be empty")__		this.itemValue = itemValue__	};set,the,name,of,the,property,mapped,to,the,code,value,attribute,of,the,code,input,type,checkbox,radio,tag,p,may,be,a,runtime,expression;public,void,set,item,value,string,item,value,assert,has,text,item,value,item,value,must,not,be,empty,this,item,value,item,value
AbstractMultiCheckedElementTag -> public void setDelimiter(String delimiter);1328020251;Set the delimiter to be used between each_'<code>input type="checkbox/radio"</code>' tag._<p>By default, there is <em>no</em> delimiter.;public void setDelimiter(String delimiter) {_		this.delimiter = delimiter__	};set,the,delimiter,to,be,used,between,each,code,input,type,checkbox,radio,code,tag,p,by,default,there,is,em,no,em,delimiter;public,void,set,delimiter,string,delimiter,this,delimiter,delimiter
AbstractMultiCheckedElementTag -> public void setDelimiter(String delimiter);1356735495;Set the delimiter to be used between each_'{@code input type="checkbox/radio"}' tag._<p>By default, there is <em>no</em> delimiter.;public void setDelimiter(String delimiter) {_		this.delimiter = delimiter__	};set,the,delimiter,to,be,used,between,each,code,input,type,checkbox,radio,tag,p,by,default,there,is,em,no,em,delimiter;public,void,set,delimiter,string,delimiter,this,delimiter,delimiter
AbstractMultiCheckedElementTag -> public void setDelimiter(String delimiter);1385412762;Set the delimiter to be used between each_'{@code input type="checkbox/radio"}' tag._<p>By default, there is <em>no</em> delimiter.;public void setDelimiter(String delimiter) {_		this.delimiter = delimiter__	};set,the,delimiter,to,be,used,between,each,code,input,type,checkbox,radio,tag,p,by,default,there,is,em,no,em,delimiter;public,void,set,delimiter,string,delimiter,this,delimiter,delimiter
AbstractMultiCheckedElementTag -> public void setDelimiter(String delimiter);1413848647;Set the delimiter to be used between each_'{@code input type="checkbox/radio"}' tag._<p>By default, there is <em>no</em> delimiter.;public void setDelimiter(String delimiter) {_		this.delimiter = delimiter__	};set,the,delimiter,to,be,used,between,each,code,input,type,checkbox,radio,tag,p,by,default,there,is,em,no,em,delimiter;public,void,set,delimiter,string,delimiter,this,delimiter,delimiter
AbstractMultiCheckedElementTag -> public void setDelimiter(String delimiter);1447323728;Set the delimiter to be used between each_'{@code input type="checkbox/radio"}' tag._<p>By default, there is <em>no</em> delimiter.;public void setDelimiter(String delimiter) {_		this.delimiter = delimiter__	};set,the,delimiter,to,be,used,between,each,code,input,type,checkbox,radio,tag,p,by,default,there,is,em,no,em,delimiter;public,void,set,delimiter,string,delimiter,this,delimiter,delimiter
AbstractMultiCheckedElementTag -> public void setDelimiter(String delimiter);1532981291;Set the delimiter to be used between each_'{@code input type="checkbox/radio"}' tag._<p>By default, there is <em>no</em> delimiter.;public void setDelimiter(String delimiter) {_		this.delimiter = delimiter__	};set,the,delimiter,to,be,used,between,each,code,input,type,checkbox,radio,tag,p,by,default,there,is,em,no,em,delimiter;public,void,set,delimiter,string,delimiter,this,delimiter,delimiter
