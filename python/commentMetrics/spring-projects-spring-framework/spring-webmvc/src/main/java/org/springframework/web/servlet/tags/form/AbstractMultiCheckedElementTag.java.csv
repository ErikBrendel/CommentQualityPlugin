commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects  * used to generate the '{@code input type="checkbox/radio"}' tags.  * <p>Typically a runtime expression.  * @param items said items  */ ;/**  * Set the {@link java.util.Collection}, {@link java.util.Map} or array of objects  * used to generate the '{@code input type="checkbox/radio"}' tags.  * <p>Typically a runtime expression.  * @param items said items  */ public void setItems(Object items) {     Assert.notNull(items, "'items' must not be null").     this.items = items. }
true;protected;0;4;/**  * Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects  * used to generate the '{@code input type="checkbox/radio"}' tags.  */ ;/**  * Get the {@link java.util.Collection}, {@link java.util.Map} or array of objects  * used to generate the '{@code input type="checkbox/radio"}' tags.  */ @Nullable protected Object getItems() {     return this.items. }
true;public;1;4;/**  * Set the name of the property mapped to the '{@code value}' attribute  * of the '{@code input type="checkbox/radio"}' tag.  * <p>May be a runtime expression.  */ ;/**  * Set the name of the property mapped to the '{@code value}' attribute  * of the '{@code input type="checkbox/radio"}' tag.  * <p>May be a runtime expression.  */ public void setItemValue(String itemValue) {     Assert.hasText(itemValue, "'itemValue' must not be empty").     this.itemValue = itemValue. }
true;protected;0;4;/**  * Get the name of the property mapped to the '{@code value}' attribute  * of the '{@code input type="checkbox/radio"}' tag.  */ ;/**  * Get the name of the property mapped to the '{@code value}' attribute  * of the '{@code input type="checkbox/radio"}' tag.  */ @Nullable protected String getItemValue() {     return this.itemValue. }
true;public;1;4;/**  * Set the value to be displayed as part of the  * '{@code input type="checkbox/radio"}' tag.  * <p>May be a runtime expression.  */ ;/**  * Set the value to be displayed as part of the  * '{@code input type="checkbox/radio"}' tag.  * <p>May be a runtime expression.  */ public void setItemLabel(String itemLabel) {     Assert.hasText(itemLabel, "'itemLabel' must not be empty").     this.itemLabel = itemLabel. }
true;protected;0;4;/**  * Get the value to be displayed as part of the  * '{@code input type="checkbox/radio"}' tag.  */ ;/**  * Get the value to be displayed as part of the  * '{@code input type="checkbox/radio"}' tag.  */ @Nullable protected String getItemLabel() {     return this.itemLabel. }
true;public;1;3;/**  * Set the delimiter to be used between each  * '{@code input type="checkbox/radio"}' tag.  * <p>By default, there is <em>no</em> delimiter.  */ ;/**  * Set the delimiter to be used between each  * '{@code input type="checkbox/radio"}' tag.  * <p>By default, there is <em>no</em> delimiter.  */ public void setDelimiter(String delimiter) {     this.delimiter = delimiter. }
true;public;0;4;/**  * Return the delimiter to be used between each  * '{@code input type="radio"}' tag.  */ ;/**  * Return the delimiter to be used between each  * '{@code input type="radio"}' tag.  */ @Nullable public String getDelimiter() {     return this.delimiter. }
true;public;1;4;/**  * Set the HTML element used to enclose the  * '{@code input type="checkbox/radio"}' tag.  * <p>Defaults to an HTML '{@code <span/>}' tag.  */ ;/**  * Set the HTML element used to enclose the  * '{@code input type="checkbox/radio"}' tag.  * <p>Defaults to an HTML '{@code <span/>}' tag.  */ public void setElement(String element) {     Assert.hasText(element, "'element' cannot be null or blank").     this.element = element. }
true;public;0;3;/**  * Get the HTML element used to enclose  * '{@code input type="checkbox/radio"}' tag.  */ ;/**  * Get the HTML element used to enclose  * '{@code input type="checkbox/radio"}' tag.  */ public String getElement() {     return this.element. }
true;protected;0;9;/**  * Appends a counter to a specified id as well,  * since we're dealing with multiple HTML elements.  */ ;/**  * Appends a counter to a specified id as well,  * since we're dealing with multiple HTML elements.  */ @Override protected String resolveId() throws JspException {     Object id = evaluate("id", getId()).     if (id != null) {         String idString = id.toString().         return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null).     }     return autogenerateId(). }
true;protected;1;51;/**  * Renders the '{@code input type="radio"}' element with the configured  * {@link #setItems(Object)} values. Marks the element as checked if the  * value matches the bound value.  */ ;/**  * Renders the '{@code input type="radio"}' element with the configured  * {@link #setItems(Object)} values. Marks the element as checked if the  * value matches the bound value.  */ @Override @SuppressWarnings("rawtypes") protected int writeTagContent(TagWriter tagWriter) throws JspException {     Object items = getItems().     Object itemsObject = (items instanceof String ? evaluate("items", items) : items).     String itemValue = getItemValue().     String itemLabel = getItemLabel().     String valueProperty = (itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null).     String labelProperty = (itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null).     Class<?> boundType = getBindStatus().getValueType().     if (itemsObject == null && boundType != null && boundType.isEnum()) {         itemsObject = boundType.getEnumConstants().     }     if (itemsObject == null) {         throw new IllegalArgumentException("Attribute 'items' is required and must be a Collection, an Array or a Map").     }     if (itemsObject.getClass().isArray()) {         Object[] itemsArray = (Object[]) itemsObject.         for (int i = 0. i < itemsArray.length. i++) {             Object item = itemsArray[i].             writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i).         }     } else if (itemsObject instanceof Collection) {         final Collection<?> optionCollection = (Collection<?>) itemsObject.         int itemIndex = 0.         for (Iterator<?> it = optionCollection.iterator(). it.hasNext(). itemIndex++) {             Object item = it.next().             writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex).         }     } else if (itemsObject instanceof Map) {         final Map<?, ?> optionMap = (Map<?, ?>) itemsObject.         int itemIndex = 0.         for (Iterator it = optionMap.entrySet().iterator(). it.hasNext(). itemIndex++) {             Map.Entry entry = (Map.Entry) it.next().             writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex).         }     } else {         throw new IllegalArgumentException("Attribute 'items' must be an array, a Collection or a Map").     }     return SKIP_BODY. }
false;private;5;17;;private void writeObjectEntry(TagWriter tagWriter, @Nullable String valueProperty, @Nullable String labelProperty, Object item, int itemIndex) throws JspException {     BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item).     Object renderValue.     if (valueProperty != null) {         renderValue = wrapper.getPropertyValue(valueProperty).     } else if (item instanceof Enum) {         renderValue = ((Enum<?>) item).name().     } else {         renderValue = item.     }     Object renderLabel = (labelProperty != null ? wrapper.getPropertyValue(labelProperty) : item).     writeElementTag(tagWriter, item, renderValue, renderLabel, itemIndex). }
false;private;5;13;;private void writeMapEntry(TagWriter tagWriter, @Nullable String valueProperty, @Nullable String labelProperty, Map.Entry<?, ?> entry, int itemIndex) throws JspException {     Object mapKey = entry.getKey().     Object mapValue = entry.getValue().     BeanWrapper mapKeyWrapper = PropertyAccessorFactory.forBeanPropertyAccess(mapKey).     BeanWrapper mapValueWrapper = PropertyAccessorFactory.forBeanPropertyAccess(mapValue).     Object renderValue = (valueProperty != null ? mapKeyWrapper.getPropertyValue(valueProperty) : mapKey.toString()).     Object renderLabel = (labelProperty != null ? mapValueWrapper.getPropertyValue(labelProperty) : mapValue.toString()).     writeElementTag(tagWriter, mapKey, renderValue, renderLabel, itemIndex). }
false;private;5;25;;private void writeElementTag(TagWriter tagWriter, Object item, @Nullable Object value, @Nullable Object label, int itemIndex) throws JspException {     tagWriter.startTag(getElement()).     if (itemIndex > 0) {         Object resolvedDelimiter = evaluate("delimiter", getDelimiter()).         if (resolvedDelimiter != null) {             tagWriter.appendValue(resolvedDelimiter.toString()).         }     }     tagWriter.startTag("input").     String id = resolveId().     Assert.state(id != null, "Attribute 'id' is required").     writeOptionalAttribute(tagWriter, "id", id).     writeOptionalAttribute(tagWriter, "name", getName()).     writeOptionalAttributes(tagWriter).     tagWriter.writeAttribute("type", getInputType()).     renderFromValue(item, value, tagWriter).     tagWriter.endTag().     tagWriter.startTag("label").     tagWriter.writeAttribute("for", id).     tagWriter.appendValue(convertToDisplayString(label)).     tagWriter.endTag().     tagWriter.endTag(). }
