commented;modifiers;parameterAmount;loc;comment;code
false;public;3;43;;@SuppressWarnings("deprecation") @Override public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException {     resource = transformerChain.transform(request, resource).     String filename = resource.getFilename().     if (!"css".equals(StringUtils.getFilenameExtension(filename)) || resource instanceof EncodedResourceResolver.EncodedResource || resource instanceof GzipResourceResolver.GzippedResource) {         return resource.     }     byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream()).     String content = new String(bytes, DEFAULT_CHARSET).     SortedSet<ContentChunkInfo> links = new TreeSet<>().     for (LinkParser parser : this.linkParsers) {         parser.parse(content, links).     }     if (links.isEmpty()) {         return resource.     }     int index = 0.     StringWriter writer = new StringWriter().     for (ContentChunkInfo linkContentChunkInfo : links) {         writer.write(content.substring(index, linkContentChunkInfo.getStart())).         String link = content.substring(linkContentChunkInfo.getStart(), linkContentChunkInfo.getEnd()).         String newLink = null.         if (!hasScheme(link)) {             String absolutePath = toAbsolutePath(link, request).             newLink = resolveUrlPath(absolutePath, request, resource, transformerChain).         }         writer.write(newLink != null ? newLink : link).         index = linkContentChunkInfo.getEnd().     }     writer.write(content.substring(index)).     return new TransformedResource(resource, writer.toString().getBytes(DEFAULT_CHARSET)). }
false;private;1;4;;private boolean hasScheme(String link) {     int schemeIndex = link.indexOf(':').     return ((schemeIndex > 0 && !link.substring(0, schemeIndex).contains("/")) || link.indexOf("//") == 0). }
false;;2;1;;void parse(String content, SortedSet<ContentChunkInfo> result).
true;protected,abstract;0;1;/**  * Return the keyword to use to search for links, e.g. "@import", "url("  */ ;/**  * Return the keyword to use to search for links, e.g. "@import", "url("  */ protected abstract String getKeyword().
false;public;2;24;;@Override public void parse(String content, SortedSet<ContentChunkInfo> result) {     int position = 0.     while (true) {         position = content.indexOf(getKeyword(), position).         if (position == -1) {             return.         }         position += getKeyword().length().         while (Character.isWhitespace(content.charAt(position))) {             position++.         }         if (content.charAt(position) == '\'') {             position = extractLink(position, "'", content, result).         } else if (content.charAt(position) == '"') {             position = extractLink(position, "\"", content, result).         } else {             position = extractLink(position, content, result).         }     } }
false;protected;4;6;;protected int extractLink(int index, String endKey, String content, SortedSet<ContentChunkInfo> linksToAdd) {     int start = index + 1.     int end = content.indexOf(endKey, start).     linksToAdd.add(new ContentChunkInfo(start, end)).     return end + endKey.length(). }
true;protected,abstract;3;1;/**  * Invoked after a keyword match, after whitespaces removed, and when  * the next char is neither a single nor double quote.  */ ;/**  * Invoked after a keyword match, after whitespaces removed, and when  * the next char is neither a single nor double quote.  */ protected abstract int extractLink(int index, String content, SortedSet<ContentChunkInfo> linksToAdd).
false;protected;0;4;;@Override protected String getKeyword() {     return "@import". }
false;protected;3;10;;@Override protected int extractLink(int index, String content, SortedSet<ContentChunkInfo> linksToAdd) {     if (content.substring(index, index + 4).equals("url(")) {     // Ignore, UrlLinkParser will take care     } else if (logger.isTraceEnabled()) {         logger.trace("Unexpected syntax for @import link at index " + index).     }     return index. }
false;protected;0;4;;@Override protected String getKeyword() {     return "url(". }
false;protected;3;5;;@Override protected int extractLink(int index, String content, SortedSet<ContentChunkInfo> linksToAdd) {     // A url() function without unquoted     return extractLink(index - 1, ")", content, linksToAdd). }
false;public;0;3;;public int getStart() {     return this.start. }
false;public;0;3;;public int getEnd() {     return this.end. }
false;public;1;4;;@Override public int compareTo(ContentChunkInfo other) {     return Integer.compare(this.start, other.start). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ContentChunkInfo)) {         return false.     }     ContentChunkInfo otherCci = (ContentChunkInfo) other.     return (this.start == otherCci.start && this.end == otherCci.end). }
false;public;0;4;;@Override public int hashCode() {     return this.start * 31 + this.end. }
