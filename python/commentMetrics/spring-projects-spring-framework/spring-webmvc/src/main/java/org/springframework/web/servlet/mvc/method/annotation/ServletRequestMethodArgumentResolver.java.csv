commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public boolean supportsParameter(MethodParameter parameter) {     Class<?> paramType = parameter.getParameterType().     return (WebRequest.class.isAssignableFrom(paramType) || ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType) || HttpSession.class.isAssignableFrom(paramType) || (pushBuilder != null && pushBuilder.isAssignableFrom(paramType)) || Principal.class.isAssignableFrom(paramType) || InputStream.class.isAssignableFrom(paramType) || Reader.class.isAssignableFrom(paramType) || HttpMethod.class == paramType || Locale.class == paramType || TimeZone.class == paramType || ZoneId.class == paramType). }
false;public;4;23;;@Override public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     Class<?> paramType = parameter.getParameterType().     // WebRequest / NativeWebRequest / ServletWebRequest     if (WebRequest.class.isAssignableFrom(paramType)) {         if (!paramType.isInstance(webRequest)) {             throw new IllegalStateException("Current request is not of type [" + paramType.getName() + "]: " + webRequest).         }         return webRequest.     }     // ServletRequest / HttpServletRequest / MultipartRequest / MultipartHttpServletRequest     if (ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType)) {         return resolveNativeRequest(webRequest, paramType).     }     // HttpServletRequest required for all further argument types     return resolveArgument(paramType, resolveNativeRequest(webRequest, HttpServletRequest.class)). }
false;private;2;8;;private <T> T resolveNativeRequest(NativeWebRequest webRequest, Class<T> requiredType) {     T nativeRequest = webRequest.getNativeRequest(requiredType).     if (nativeRequest == null) {         throw new IllegalStateException("Current request is not of type [" + requiredType.getName() + "]: " + webRequest).     }     return nativeRequest. }
false;private;2;55;;@Nullable private Object resolveArgument(Class<?> paramType, HttpServletRequest request) throws IOException {     if (HttpSession.class.isAssignableFrom(paramType)) {         HttpSession session = request.getSession().         if (session != null && !paramType.isInstance(session)) {             throw new IllegalStateException("Current session is not of type [" + paramType.getName() + "]: " + session).         }         return session.     } else if (pushBuilder != null && pushBuilder.isAssignableFrom(paramType)) {         return PushBuilderDelegate.resolvePushBuilder(request, paramType).     } else if (InputStream.class.isAssignableFrom(paramType)) {         InputStream inputStream = request.getInputStream().         if (inputStream != null && !paramType.isInstance(inputStream)) {             throw new IllegalStateException("Request input stream is not of type [" + paramType.getName() + "]: " + inputStream).         }         return inputStream.     } else if (Reader.class.isAssignableFrom(paramType)) {         Reader reader = request.getReader().         if (reader != null && !paramType.isInstance(reader)) {             throw new IllegalStateException("Request body reader is not of type [" + paramType.getName() + "]: " + reader).         }         return reader.     } else if (Principal.class.isAssignableFrom(paramType)) {         Principal userPrincipal = request.getUserPrincipal().         if (userPrincipal != null && !paramType.isInstance(userPrincipal)) {             throw new IllegalStateException("Current user principal is not of type [" + paramType.getName() + "]: " + userPrincipal).         }         return userPrincipal.     } else if (HttpMethod.class == paramType) {         return HttpMethod.resolve(request.getMethod()).     } else if (Locale.class == paramType) {         return RequestContextUtils.getLocale(request).     } else if (TimeZone.class == paramType) {         TimeZone timeZone = RequestContextUtils.getTimeZone(request).         return (timeZone != null ? timeZone : TimeZone.getDefault()).     } else if (ZoneId.class == paramType) {         TimeZone timeZone = RequestContextUtils.getTimeZone(request).         return (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault()).     }     // Should never happen...     throw new UnsupportedOperationException("Unknown parameter type: " + paramType.getName()). }
false;public,static;2;10;;@Nullable public static Object resolvePushBuilder(HttpServletRequest request, Class<?> paramType) {     PushBuilder pushBuilder = request.newPushBuilder().     if (pushBuilder != null && !paramType.isInstance(pushBuilder)) {         throw new IllegalStateException("Current push builder is not of type [" + paramType.getName() + "]: " + pushBuilder).     }     return pushBuilder. }
