commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Class<?> requiredViewClass() {     return AbstractTemplateView.class. }
true;public;1;3;/**  * Set whether all request attributes should be added to the  * model prior to merging with the template. Default is "false".  * @see AbstractTemplateView#setExposeRequestAttributes  */ ;/**  * Set whether all request attributes should be added to the  * model prior to merging with the template. Default is "false".  * @see AbstractTemplateView#setExposeRequestAttributes  */ public void setExposeRequestAttributes(boolean exposeRequestAttributes) {     this.exposeRequestAttributes = exposeRequestAttributes. }
true;public;1;3;/**  * Set whether HttpServletRequest attributes are allowed to override (hide)  * controller generated model attributes of the same name. Default is "false",  * which causes an exception to be thrown if request attributes of the same  * name as model attributes are found.  * @see AbstractTemplateView#setAllowRequestOverride  */ ;/**  * Set whether HttpServletRequest attributes are allowed to override (hide)  * controller generated model attributes of the same name. Default is "false",  * which causes an exception to be thrown if request attributes of the same  * name as model attributes are found.  * @see AbstractTemplateView#setAllowRequestOverride  */ public void setAllowRequestOverride(boolean allowRequestOverride) {     this.allowRequestOverride = allowRequestOverride. }
true;public;1;3;/**  * Set whether all HttpSession attributes should be added to the  * model prior to merging with the template. Default is "false".  * @see AbstractTemplateView#setExposeSessionAttributes  */ ;/**  * Set whether all HttpSession attributes should be added to the  * model prior to merging with the template. Default is "false".  * @see AbstractTemplateView#setExposeSessionAttributes  */ public void setExposeSessionAttributes(boolean exposeSessionAttributes) {     this.exposeSessionAttributes = exposeSessionAttributes. }
true;public;1;3;/**  * Set whether HttpSession attributes are allowed to override (hide)  * controller generated model attributes of the same name. Default is "false",  * which causes an exception to be thrown if session attributes of the same  * name as model attributes are found.  * @see AbstractTemplateView#setAllowSessionOverride  */ ;/**  * Set whether HttpSession attributes are allowed to override (hide)  * controller generated model attributes of the same name. Default is "false",  * which causes an exception to be thrown if session attributes of the same  * name as model attributes are found.  * @see AbstractTemplateView#setAllowSessionOverride  */ public void setAllowSessionOverride(boolean allowSessionOverride) {     this.allowSessionOverride = allowSessionOverride. }
true;public;1;3;/**  * Set whether to expose a RequestContext for use by Spring's macro library,  * under the name "springMacroRequestContext". Default is "true".  * @see AbstractTemplateView#setExposeSpringMacroHelpers  */ ;/**  * Set whether to expose a RequestContext for use by Spring's macro library,  * under the name "springMacroRequestContext". Default is "true".  * @see AbstractTemplateView#setExposeSpringMacroHelpers  */ public void setExposeSpringMacroHelpers(boolean exposeSpringMacroHelpers) {     this.exposeSpringMacroHelpers = exposeSpringMacroHelpers. }
false;protected;1;10;;@Override protected AbstractUrlBasedView buildView(String viewName) throws Exception {     AbstractTemplateView view = (AbstractTemplateView) super.buildView(viewName).     view.setExposeRequestAttributes(this.exposeRequestAttributes).     view.setAllowRequestOverride(this.allowRequestOverride).     view.setExposeSessionAttributes(this.exposeSessionAttributes).     view.setAllowSessionOverride(this.allowSessionOverride).     view.setExposeSpringMacroHelpers(this.exposeSpringMacroHelpers).     return view. }
