commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the handler object to execute.  */ ;/**  * Return the handler object to execute.  */ public Object getHandler() {     return this.handler. }
false;public;1;3;;public void addInterceptor(HandlerInterceptor interceptor) {     initInterceptorList().add(interceptor). }
false;public;1;5;;public void addInterceptors(HandlerInterceptor... interceptors) {     if (!ObjectUtils.isEmpty(interceptors)) {         CollectionUtils.mergeArrayIntoCollection(interceptors, initInterceptorList()).     } }
false;private;0;11;;private List<HandlerInterceptor> initInterceptorList() {     if (this.interceptorList == null) {         this.interceptorList = new ArrayList<>().         if (this.interceptors != null) {             // An interceptor array specified through the constructor             CollectionUtils.mergeArrayIntoCollection(this.interceptors, this.interceptorList).         }     }     this.interceptors = null.     return this.interceptorList. }
true;public;0;7;/**  * Return the array of interceptors to apply (in the given order).  * @return the array of HandlerInterceptors instances (may be {@code null})  */ ;/**  * Return the array of interceptors to apply (in the given order).  * @return the array of HandlerInterceptors instances (may be {@code null})  */ @Nullable public HandlerInterceptor[] getInterceptors() {     if (this.interceptors == null && this.interceptorList != null) {         this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[0]).     }     return this.interceptors. }
true;;2;14;/**  * Apply preHandle methods of registered interceptors.  * @return {@code true} if the execution chain should proceed with the  * next interceptor or the handler itself. Else, DispatcherServlet assumes  * that this interceptor has already dealt with the response itself.  */ ;/**  * Apply preHandle methods of registered interceptors.  * @return {@code true} if the execution chain should proceed with the  * next interceptor or the handler itself. Else, DispatcherServlet assumes  * that this interceptor has already dealt with the response itself.  */ boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {     HandlerInterceptor[] interceptors = getInterceptors().     if (!ObjectUtils.isEmpty(interceptors)) {         for (int i = 0. i < interceptors.length. i++) {             HandlerInterceptor interceptor = interceptors[i].             if (!interceptor.preHandle(request, response, this.handler)) {                 triggerAfterCompletion(request, response, null).                 return false.             }             this.interceptorIndex = i.         }     }     return true. }
true;;3;11;/**  * Apply postHandle methods of registered interceptors.  */ ;/**  * Apply postHandle methods of registered interceptors.  */ void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) throws Exception {     HandlerInterceptor[] interceptors = getInterceptors().     if (!ObjectUtils.isEmpty(interceptors)) {         for (int i = interceptors.length - 1. i >= 0. i--) {             HandlerInterceptor interceptor = interceptors[i].             interceptor.postHandle(request, response, this.handler, mv).         }     } }
true;;3;16;/**  * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.  * Will just invoke afterCompletion for all interceptors whose preHandle invocation  * has successfully completed and returned true.  */ ;/**  * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.  * Will just invoke afterCompletion for all interceptors whose preHandle invocation  * has successfully completed and returned true.  */ void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) throws Exception {     HandlerInterceptor[] interceptors = getInterceptors().     if (!ObjectUtils.isEmpty(interceptors)) {         for (int i = this.interceptorIndex. i >= 0. i--) {             HandlerInterceptor interceptor = interceptors[i].             try {                 interceptor.afterCompletion(request, response, this.handler, ex).             } catch (Throwable ex2) {                 logger.error("HandlerInterceptor.afterCompletion threw exception", ex2).             }         }     } }
true;;2;16;/**  * Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.  */ ;/**  * Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.  */ void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {     HandlerInterceptor[] interceptors = getInterceptors().     if (!ObjectUtils.isEmpty(interceptors)) {         for (int i = interceptors.length - 1. i >= 0. i--) {             if (interceptors[i] instanceof AsyncHandlerInterceptor) {                 try {                     AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i].                     asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler).                 } catch (Throwable ex) {                     logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex).                 }             }         }     } }
true;public;0;16;/**  * Delegates to the handler and interceptors' {@code toString()}.  */ ;/**  * Delegates to the handler and interceptors' {@code toString()}.  */ @Override public String toString() {     Object handler = getHandler().     StringBuilder sb = new StringBuilder().     sb.append("HandlerExecutionChain with [").append(handler).append("] and ").     if (this.interceptorList != null) {         sb.append(this.interceptorList.size()).     } else if (this.interceptors != null) {         sb.append(this.interceptors.length).     } else {         sb.append(0).     }     return sb.append(" interceptors").toString(). }
