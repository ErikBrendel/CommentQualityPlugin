# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1328020251;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1334781369;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1336162578;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1341266199;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1342803001;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1344035753;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1347908336;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1356735495;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors);1413848647;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) 			throws Exception;1496259743;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,nullable,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) 			throws Exception;1496837955;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,nullable,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) 			throws Exception;1498780456;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,nullable,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) 			throws Exception;1519295386;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,nullable,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) 			throws Exception;1529361191;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,nullable,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) 			throws Exception;1530174524;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,nullable,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors);1419355669;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<HandlerInterceptor>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,handler,interceptor,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors);1467730834;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors);1494183916;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors);1495868221;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> @Nullable 	public Object getHandler();1495868221;Return the handler object to execute._@return the handler object (may be {@code null});@Nullable_	public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object,may,be,code,null;nullable,public,object,get,handler,return,this,handler
HandlerExecutionChain -> @Nullable 	public Object getHandler();1496243689;Return the handler object to execute._@return the handler object (may be {@code null});@Nullable_	public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object,may,be,code,null;nullable,public,object,get,handler,return,this,handler
HandlerExecutionChain -> @Nullable 	public Object getHandler();1496259743;Return the handler object to execute._@return the handler object (may be {@code null});@Nullable_	public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object,may,be,code,null;nullable,public,object,get,handler,return,this,handler
HandlerExecutionChain -> @Nullable 	public Object getHandler();1496837955;Return the handler object to execute._@return the handler object (may be {@code null});@Nullable_	public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object,may,be,code,null;nullable,public,object,get,handler,return,this,handler
HandlerExecutionChain -> void addDelegatingCallables(HttpServletRequest request, HttpServletResponse response) 			throws Exception;1336162578;Add delegating, async Callable instances to the {@link AsyncExecutionChain}_for use in case of asynchronous request processing.;void addDelegatingCallables(HttpServletRequest request, HttpServletResponse response)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			if (interceptor instanceof AsyncHandlerInterceptor) {_				try {_					AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptor__					AsyncExecutionChain chain = AsyncExecutionChain.getForCurrentRequest(request)__					chain.addDelegatingCallable(asyncInterceptor.getAsyncCallable(request, response, this.handler))__				}_				catch (Throwable ex) {_					logger.error("HandlerInterceptor.addAsyncCallables threw exception", ex)__				}_			}_		}_	};add,delegating,async,callable,instances,to,the,link,async,execution,chain,for,use,in,case,of,asynchronous,request,processing;void,add,delegating,callables,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptor,async,execution,chain,chain,async,execution,chain,get,for,current,request,request,chain,add,delegating,callable,async,interceptor,get,async,callable,request,response,this,handler,catch,throwable,ex,logger,error,handler,interceptor,add,async,callables,threw,exception,ex
HandlerExecutionChain -> void addDelegatingCallables(HttpServletRequest request, HttpServletResponse response) 			throws Exception;1341266199;Add delegating, async Callable instances to the {@link AsyncExecutionChain}_for use in case of asynchronous request processing.;void addDelegatingCallables(HttpServletRequest request, HttpServletResponse response)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			if (interceptor instanceof AsyncHandlerInterceptor) {_				try {_					AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptor__					AsyncExecutionChain chain = AsyncExecutionChain.getForCurrentRequest(request)__					AbstractDelegatingCallable callable = asyncInterceptor.getAsyncCallable(request, response, this.handler)__					if (callable != null) {_						chain.addDelegatingCallable(callable)__					}_				}_				catch (Throwable ex) {_					logger.error("HandlerInterceptor.addAsyncCallables threw exception", ex)__				}_			}_		}_	};add,delegating,async,callable,instances,to,the,link,async,execution,chain,for,use,in,case,of,asynchronous,request,processing;void,add,delegating,callables,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptor,async,execution,chain,chain,async,execution,chain,get,for,current,request,request,abstract,delegating,callable,callable,async,interceptor,get,async,callable,request,response,this,handler,if,callable,null,chain,add,delegating,callable,callable,catch,throwable,ex,logger,error,handler,interceptor,add,async,callables,threw,exception,ex
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1342803001;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1344035753;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1347908336;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1356735495;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1413848647;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1419355669;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1467730834;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1494183916;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1495868221;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1496243689;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception;1496259743;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors);1498780456;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,nullable,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors);1519295386;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,nullable,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors);1529361191;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,nullable,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors);1530174524;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(Object handler, @Nullable HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,object,handler,nullable,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) 			throws Exception;1334781369;Apply preHandle methods of registered interceptors._@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response)_			throws Exception {__		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) 			throws Exception;1336162578;Apply preHandle methods of registered interceptors._@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response)_			throws Exception {__		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) 			throws Exception;1341266199;Apply preHandle methods of registered interceptors._@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response)_			throws Exception {__		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> @Override 	public String toString();1328020251;Delegates to the handler's <code>toString()</code>.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string,code;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1334781369;Delegates to the handler's <code>toString()</code>.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string,code;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1336162578;Delegates to the handler's <code>toString()</code>.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string,code;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1341266199;Delegates to the handler's <code>toString()</code>.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string,code;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1342803001;Delegates to the handler's <code>toString()</code>.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string,code;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1344035753;Delegates to the handler's <code>toString()</code>.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string,code;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1347908336;Delegates to the handler's <code>toString()</code>.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string,code;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1356735495;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1413848647;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1419355669;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1467730834;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		if (this.handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(this.handler).append("]")__		if (!CollectionUtils.isEmpty(this.interceptorList)) {_			sb.append(" and ").append(this.interceptorList.size()).append(" interceptor")__			if (this.interceptorList.size() > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,if,this,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,this,handler,append,if,collection,utils,is,empty,this,interceptor,list,sb,append,and,append,this,interceptor,list,size,append,interceptor,if,this,interceptor,list,size,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1494183916;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		if (handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(handler).append("]")__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			sb.append(" and ").append(interceptors.length).append(" interceptor")__			if (interceptors.length > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,object,handler,get,handler,if,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,handler,append,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,sb,append,and,append,interceptors,length,append,interceptor,if,interceptors,length,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1495868221;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		if (handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(handler).append("]")__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			sb.append(" and ").append(interceptors.length).append(" interceptor")__			if (interceptors.length > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,object,handler,get,handler,if,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,handler,append,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,sb,append,and,append,interceptors,length,append,interceptor,if,interceptors,length,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1496243689;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		if (handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(handler).append("]")__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			sb.append(" and ").append(interceptors.length).append(" interceptor")__			if (interceptors.length > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,object,handler,get,handler,if,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,handler,append,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,sb,append,and,append,interceptors,length,append,interceptor,if,interceptors,length,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1496259743;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		if (handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(handler).append("]")__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			sb.append(" and ").append(interceptors.length).append(" interceptor")__			if (interceptors.length > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,object,handler,get,handler,if,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,handler,append,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,sb,append,and,append,interceptors,length,append,interceptor,if,interceptors,length,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1496837955;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		if (handler == null) {_			return "HandlerExecutionChain with no handler"__		}_		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(handler).append("]")__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			sb.append(" and ").append(interceptors.length).append(" interceptor")__			if (interceptors.length > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,object,handler,get,handler,if,handler,null,return,handler,execution,chain,with,no,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,handler,append,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,sb,append,and,append,interceptors,length,append,interceptor,if,interceptors,length,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1498780456;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(handler).append("]")__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			sb.append(" and ").append(interceptors.length).append(" interceptor")__			if (interceptors.length > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,object,handler,get,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,handler,append,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,sb,append,and,append,interceptors,length,append,interceptor,if,interceptors,length,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1519295386;Delegates to the handler's {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with handler [").append(handler).append("]")__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			sb.append(" and ").append(interceptors.length).append(" interceptor")__			if (interceptors.length > 1) {_				sb.append("s")__			}_		}_		return sb.toString()__	};delegates,to,the,handler,s,code,to,string;override,public,string,to,string,object,handler,get,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,handler,append,handler,append,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,sb,append,and,append,interceptors,length,append,interceptor,if,interceptors,length,1,sb,append,s,return,sb,to,string
HandlerExecutionChain -> @Override 	public String toString();1529361191;Delegates to the handler and interceptors' {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with [").append(handler).append("] and ")__		if (this.interceptorList != null) {_			sb.append(this.interceptorList.size())__		}_		else if (this.interceptors != null) {_			sb.append(this.interceptors.length)__		}_		else {_			sb.append(0)__		}_		return sb.append(" interceptors").toString()__	};delegates,to,the,handler,and,interceptors,code,to,string;override,public,string,to,string,object,handler,get,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,append,handler,append,and,if,this,interceptor,list,null,sb,append,this,interceptor,list,size,else,if,this,interceptors,null,sb,append,this,interceptors,length,else,sb,append,0,return,sb,append,interceptors,to,string
HandlerExecutionChain -> @Override 	public String toString();1530174524;Delegates to the handler and interceptors' {@code toString()}.;@Override_	public String toString() {_		Object handler = getHandler()__		StringBuilder sb = new StringBuilder()__		sb.append("HandlerExecutionChain with [").append(handler).append("] and ")__		if (this.interceptorList != null) {_			sb.append(this.interceptorList.size())__		}_		else if (this.interceptors != null) {_			sb.append(this.interceptors.length)__		}_		else {_			sb.append(0)__		}_		return sb.append(" interceptors").toString()__	};delegates,to,the,handler,and,interceptors,code,to,string;override,public,string,to,string,object,handler,get,handler,string,builder,sb,new,string,builder,sb,append,handler,execution,chain,with,append,handler,append,and,if,this,interceptor,list,null,sb,append,this,interceptor,list,size,else,if,this,interceptors,null,sb,append,this,interceptors,length,else,sb,append,0,return,sb,append,interceptors,to,string
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1342803001;Apply preHandle methods of registered interceptors._@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1344035753;Apply preHandle methods of registered interceptors._@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1347908336;Apply preHandle methods of registered interceptors._@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1356735495;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1413848647;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		if (getInterceptors() != null) {_			for (int i = 0_ i < getInterceptors().length_ i++) {_				HandlerInterceptor interceptor = getInterceptors()[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,for,int,i,0,i,get,interceptors,length,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1419355669;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1467730834;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1494183916;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1495868221;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1496243689;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1496259743;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1496837955;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1498780456;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1519295386;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1529361191;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception;1530174524;Apply preHandle methods of registered interceptors._@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself.;boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = 0_ i < interceptors.length_ i++) {_				HandlerInterceptor interceptor = interceptors[i]__				if (!interceptor.preHandle(request, response, this.handler)) {_					triggerAfterCompletion(request, response, null)__					return false__				}_				this.interceptorIndex = i__			}_		}_		return true__	};apply,pre,handle,methods,of,registered,interceptors,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself;boolean,apply,pre,handle,http,servlet,request,request,http,servlet,response,response,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,0,i,interceptors,length,i,handler,interceptor,interceptor,interceptors,i,if,interceptor,pre,handle,request,response,this,handler,trigger,after,completion,request,response,null,return,false,this,interceptor,index,i,return,true
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1495868221;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1496243689;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1496259743;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1496837955;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1498780456;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1519295386;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[0])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,0,return,this,interceptors
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1529361191;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[0])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,0,return,this,interceptors
HandlerExecutionChain -> @Nullable 	public HandlerInterceptor[] getInterceptors();1530174524;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});@Nullable_	public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[0])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;nullable,public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,0,return,this,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1328020251;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1334781369;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1336162578;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1341266199;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1342803001;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1344035753;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1347908336;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1356735495;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1413848647;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1419355669;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1467730834;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1494183916;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1495868221;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1498780456;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1519295386;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1529361191;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(Object handler);1530174524;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> void applyPostHandleAsyncStarted(HttpServletRequest request, HttpServletResponse response) 			throws Exception;1336162578;Trigger postHandleAsyncStarted callbacks on the mapped HandlerInterceptors.;void applyPostHandleAsyncStarted(HttpServletRequest request, HttpServletResponse response)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			if (interceptor instanceof AsyncHandlerInterceptor) {_				try {_					((AsyncHandlerInterceptor) interceptor).postHandleAsyncStarted(request, response, this.handler)__				}_				catch (Throwable ex) {_					logger.error("HandlerInterceptor.postHandleAsyncStarted threw exception", ex)__				}_			}_		}_	};trigger,post,handle,async,started,callbacks,on,the,mapped,handler,interceptors;void,apply,post,handle,async,started,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,instanceof,async,handler,interceptor,try,async,handler,interceptor,interceptor,post,handle,async,started,request,response,this,handler,catch,throwable,ex,logger,error,handler,interceptor,post,handle,async,started,threw,exception,ex
HandlerExecutionChain -> void applyPostHandleAsyncStarted(HttpServletRequest request, HttpServletResponse response) 			throws Exception;1341266199;Trigger postHandleAsyncStarted callbacks on the mapped HandlerInterceptors.;void applyPostHandleAsyncStarted(HttpServletRequest request, HttpServletResponse response)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			if (interceptor instanceof AsyncHandlerInterceptor) {_				try {_					((AsyncHandlerInterceptor) interceptor).postHandleAsyncStarted(request, response, this.handler)__				}_				catch (Throwable ex) {_					logger.error("HandlerInterceptor.postHandleAsyncStarted threw exception", ex)__				}_			}_		}_	};trigger,post,handle,async,started,callbacks,on,the,mapped,handler,interceptors;void,apply,post,handle,async,started,http,servlet,request,request,http,servlet,response,response,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,if,interceptor,instanceof,async,handler,interceptor,try,async,handler,interceptor,interceptor,post,handle,async,started,request,response,this,handler,catch,throwable,ex,logger,error,handler,interceptor,post,handle,async,started,threw,exception,ex
HandlerExecutionChain -> public Object getHandler();1328020251;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1334781369;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1336162578;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1341266199;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1342803001;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1344035753;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1347908336;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1356735495;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1413848647;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1419355669;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1467730834;Return the handler object to execute._@return the handler object;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1494183916;Return the handler object to execute._@return the handler object (may be {@code null});public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute,return,the,handler,object,may,be,code,null;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1498780456;Return the handler object to execute.;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1519295386;Return the handler object to execute.;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1529361191;Return the handler object to execute.;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public Object getHandler();1530174524;Return the handler object to execute.;public Object getHandler() {_		return this.handler__	};return,the,handler,object,to,execute;public,object,get,handler,return,this,handler
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1328020251;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be <code>null</code>);public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null,code;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1334781369;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be <code>null</code>);public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null,code;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1336162578;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be <code>null</code>);public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null,code;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1341266199;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be <code>null</code>);public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null,code;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1342803001;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be <code>null</code>);public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null,code;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1344035753;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be <code>null</code>);public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null,code;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1347908336;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be <code>null</code>);public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null,code;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1356735495;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1413848647;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1419355669;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1467730834;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerInterceptor[] getInterceptors();1494183916;Return the array of interceptors to apply (in the given order)._@return the array of HandlerInterceptors instances (may be {@code null});public HandlerInterceptor[] getInterceptors() {_		if (this.interceptors == null && this.interceptorList != null) {_			this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()])__		}_		return this.interceptors__	};return,the,array,of,interceptors,to,apply,in,the,given,order,return,the,array,of,handler,interceptors,instances,may,be,code,null;public,handler,interceptor,get,interceptors,if,this,interceptors,null,this,interceptor,list,null,this,interceptors,this,interceptor,list,to,array,new,handler,interceptor,this,interceptor,list,size,return,this,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(@Nullable Object handler);1496243689;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(@Nullable Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,nullable,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(@Nullable Object handler);1496259743;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(@Nullable Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,nullable,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> public HandlerExecutionChain(@Nullable Object handler);1496837955;Create a new HandlerExecutionChain._@param handler the handler object to execute;public HandlerExecutionChain(@Nullable Object handler) {_		this(handler, (HandlerInterceptor[]) null)__	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute;public,handler,execution,chain,nullable,object,handler,this,handler,handler,interceptor,null
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1334781369;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1336162578;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1341266199;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1342803001;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1344035753;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1347908336;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1356735495;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1413848647;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = this.interceptorIndex_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			try {_				interceptor.afterCompletion(request, response, this.handler, ex)__			}_			catch (Throwable ex2) {_				logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,if,get,interceptors,null,return,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,get,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1419355669;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1467730834;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1494183916;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1495868221;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex) 			throws Exception;1496243689;Trigger afterCompletion callbacks on the mapped HandlerInterceptors._Will just invoke afterCompletion for all interceptors whose preHandle invocation_has successfully completed and returned true.;void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = this.interceptorIndex_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				try {_					interceptor.afterCompletion(request, response, this.handler, ex)__				}_				catch (Throwable ex2) {_					logger.error("HandlerInterceptor.afterCompletion threw exception", ex2)__				}_			}_		}_	};trigger,after,completion,callbacks,on,the,mapped,handler,interceptors,will,just,invoke,after,completion,for,all,interceptors,whose,pre,handle,invocation,has,successfully,completed,and,returned,true;void,trigger,after,completion,http,servlet,request,request,http,servlet,response,response,exception,ex,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,this,interceptor,index,i,0,i,handler,interceptor,interceptor,interceptors,i,try,interceptor,after,completion,request,response,this,handler,ex,catch,throwable,ex2,logger,error,handler,interceptor,after,completion,threw,exception,ex2
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1344035753;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			if (interceptors[i] instanceof AsyncHandlerInterceptor) {_				try {_					AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__					asyncInterceptor.afterConcurrentHandlingStarted(request, response)__				}_				catch (Throwable ex) {_					logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1347908336;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			if (interceptors[i] instanceof AsyncHandlerInterceptor) {_				try {_					AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) this.interceptors[i]__					asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__				}_				catch (Throwable ex) {_					logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,this,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1356735495;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			if (interceptors[i] instanceof AsyncHandlerInterceptor) {_				try {_					AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) this.interceptors[i]__					asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__				}_				catch (Throwable ex) {_					logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,this,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1413848647;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			if (interceptors[i] instanceof AsyncHandlerInterceptor) {_				try {_					AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) this.interceptors[i]__					asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__				}_				catch (Throwable ex) {_					logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,this,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1419355669;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1467730834;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1494183916;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1495868221;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1496243689;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1496259743;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1496837955;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1498780456;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1519295386;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1529361191;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response);1530174524;Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.;void applyAfterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response) {_		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				if (interceptors[i] instanceof AsyncHandlerInterceptor) {_					try {_						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i]__						asyncInterceptor.afterConcurrentHandlingStarted(request, response, this.handler)__					}_					catch (Throwable ex) {_						logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex)__					}_				}_			}_		}_	};apply,after,concurrent,handler,started,callback,on,mapped,async,handler,interceptors;void,apply,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,if,interceptors,i,instanceof,async,handler,interceptor,try,async,handler,interceptor,async,interceptor,async,handler,interceptor,interceptors,i,async,interceptor,after,concurrent,handling,started,request,response,this,handler,catch,throwable,ex,logger,error,interceptor,interceptors,i,failed,in,after,concurrent,handling,started,ex
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) 			throws Exception;1334781369;Apply preHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,pre,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) 			throws Exception;1336162578;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) 			throws Exception;1341266199;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)_			throws Exception {__		if (getInterceptors() == null) {_			return__		}_		for (int i = getInterceptors().length - 1_ i >= 0_ i--) {_			HandlerInterceptor interceptor = getInterceptors()[i]__			interceptor.postHandle(request, response, this.handler, mv)__		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,model,and,view,mv,throws,exception,if,get,interceptors,null,return,for,int,i,get,interceptors,length,1,i,0,i,handler,interceptor,interceptor,get,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> public HandlerExecutionChain(@Nullable Object handler, HandlerInterceptor... interceptors);1496243689;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(@Nullable Object handler, HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,nullable,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> public HandlerExecutionChain(@Nullable Object handler, HandlerInterceptor... interceptors);1496259743;Create a new HandlerExecutionChain._@param handler the handler object to execute_@param interceptors the array of interceptors to apply_(in the given order) before the handler itself executes;public HandlerExecutionChain(@Nullable Object handler, HandlerInterceptor... interceptors) {_		if (handler instanceof HandlerExecutionChain) {_			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler__			this.handler = originalChain.getHandler()__			this.interceptorList = new ArrayList<>()__			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList)__			CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList)__		}_		else {_			this.handler = handler__			this.interceptors = interceptors__		}_	};create,a,new,handler,execution,chain,param,handler,the,handler,object,to,execute,param,interceptors,the,array,of,interceptors,to,apply,in,the,given,order,before,the,handler,itself,executes;public,handler,execution,chain,nullable,object,handler,handler,interceptor,interceptors,if,handler,instanceof,handler,execution,chain,handler,execution,chain,original,chain,handler,execution,chain,handler,this,handler,original,chain,get,handler,this,interceptor,list,new,array,list,collection,utils,merge,array,into,collection,original,chain,get,interceptors,this,interceptor,list,collection,utils,merge,array,into,collection,interceptors,this,interceptor,list,else,this,handler,handler,this,interceptors,interceptors
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) 			throws Exception;1496837955;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,nullable,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) 			throws Exception;1498780456;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,nullable,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) 			throws Exception;1519295386;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,nullable,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) 			throws Exception;1529361191;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,nullable,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
HandlerExecutionChain -> void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) 			throws Exception;1530174524;Apply postHandle methods of registered interceptors.;void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)_			throws Exception {__		HandlerInterceptor[] interceptors = getInterceptors()__		if (!ObjectUtils.isEmpty(interceptors)) {_			for (int i = interceptors.length - 1_ i >= 0_ i--) {_				HandlerInterceptor interceptor = interceptors[i]__				interceptor.postHandle(request, response, this.handler, mv)__			}_		}_	};apply,post,handle,methods,of,registered,interceptors;void,apply,post,handle,http,servlet,request,request,http,servlet,response,response,nullable,model,and,view,mv,throws,exception,handler,interceptor,interceptors,get,interceptors,if,object,utils,is,empty,interceptors,for,int,i,interceptors,length,1,i,0,i,handler,interceptor,interceptor,interceptors,i,interceptor,post,handle,request,response,this,handler,mv
