# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1337697865;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1346207363;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1355313310;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1362408075;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1375722796;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1390584631;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1393599406;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1396010083;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1427815317;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1436791386;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1446037220;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1495868221;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1508291397;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected void customizeRegistration(ServletRegistration.Dynamic registration);1521050150;Optionally perform further registration customization once_{@link #registerDispatcherServlet(ServletContext)} has completed._@param registration the {@code DispatcherServlet} registration to be customized_@see #registerDispatcherServlet(ServletContext);protected void customizeRegistration(ServletRegistration.Dynamic registration) {_	};optionally,perform,further,registration,customization,once,link,register,dispatcher,servlet,servlet,context,has,completed,param,registration,the,code,dispatcher,servlet,registration,to,be,customized,see,register,dispatcher,servlet,servlet,context;protected,void,customize,registration,servlet,registration,dynamic,registration
AbstractDispatcherServletInitializer -> protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext);1446037220;Create a {@link DispatcherServlet} (or other kind of {@link FrameworkServlet}-derived_dispatcher) with the specified {@link WebApplicationContext}._<p>Note: This allows for any {@link FrameworkServlet} subclass as of 4.2.3._Previously, it insisted on returning a {@link DispatcherServlet} or subclass thereof.;protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext) {_		return new DispatcherServlet(servletAppContext)__	};create,a,link,dispatcher,servlet,or,other,kind,of,link,framework,servlet,derived,dispatcher,with,the,specified,link,web,application,context,p,note,this,allows,for,any,link,framework,servlet,subclass,as,of,4,2,3,previously,it,insisted,on,returning,a,link,dispatcher,servlet,or,subclass,thereof;protected,framework,servlet,create,dispatcher,servlet,web,application,context,servlet,app,context,return,new,dispatcher,servlet,servlet,app,context
AbstractDispatcherServletInitializer -> protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext);1495868221;Create a {@link DispatcherServlet} (or other kind of {@link FrameworkServlet}-derived_dispatcher) with the specified {@link WebApplicationContext}._<p>Note: This allows for any {@link FrameworkServlet} subclass as of 4.2.3._Previously, it insisted on returning a {@link DispatcherServlet} or subclass thereof.;protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext) {_		return new DispatcherServlet(servletAppContext)__	};create,a,link,dispatcher,servlet,or,other,kind,of,link,framework,servlet,derived,dispatcher,with,the,specified,link,web,application,context,p,note,this,allows,for,any,link,framework,servlet,subclass,as,of,4,2,3,previously,it,insisted,on,returning,a,link,dispatcher,servlet,or,subclass,thereof;protected,framework,servlet,create,dispatcher,servlet,web,application,context,servlet,app,context,return,new,dispatcher,servlet,servlet,app,context
AbstractDispatcherServletInitializer -> protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext);1508291397;Create a {@link DispatcherServlet} (or other kind of {@link FrameworkServlet}-derived_dispatcher) with the specified {@link WebApplicationContext}._<p>Note: This allows for any {@link FrameworkServlet} subclass as of 4.2.3._Previously, it insisted on returning a {@link DispatcherServlet} or subclass thereof.;protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext) {_		return new DispatcherServlet(servletAppContext)__	};create,a,link,dispatcher,servlet,or,other,kind,of,link,framework,servlet,derived,dispatcher,with,the,specified,link,web,application,context,p,note,this,allows,for,any,link,framework,servlet,subclass,as,of,4,2,3,previously,it,insisted,on,returning,a,link,dispatcher,servlet,or,subclass,thereof;protected,framework,servlet,create,dispatcher,servlet,web,application,context,servlet,app,context,return,new,dispatcher,servlet,servlet,app,context
AbstractDispatcherServletInitializer -> protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext);1521050150;Create a {@link DispatcherServlet} (or other kind of {@link FrameworkServlet}-derived_dispatcher) with the specified {@link WebApplicationContext}._<p>Note: This allows for any {@link FrameworkServlet} subclass as of 4.2.3._Previously, it insisted on returning a {@link DispatcherServlet} or subclass thereof.;protected FrameworkServlet createDispatcherServlet(WebApplicationContext servletAppContext) {_		return new DispatcherServlet(servletAppContext)__	};create,a,link,dispatcher,servlet,or,other,kind,of,link,framework,servlet,derived,dispatcher,with,the,specified,link,web,application,context,p,note,this,allows,for,any,link,framework,servlet,subclass,as,of,4,2,3,previously,it,insisted,on,returning,a,link,dispatcher,servlet,or,subclass,thereof;protected,framework,servlet,create,dispatcher,servlet,web,application,context,servlet,app,context,return,new,dispatcher,servlet,servlet,app,context
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1337697865;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = this.getServletName()__		Assert.hasLength(servletName,_				"getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = this.createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_						"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)___		ServletRegistration.Dynamic registration =_				servletContext.addServlet(servletName, dispatcherServlet)__		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())___		this.customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,this,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,this,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,this,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1346207363;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = this.getServletName()__		Assert.hasLength(servletName,_				"getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = this.createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_						"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)___		ServletRegistration.Dynamic registration =_				servletContext.addServlet(servletName, dispatcherServlet)__		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		this.customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,this,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,this,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,this,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1355313310;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = this.getServletName()__		Assert.hasLength(servletName,_				"getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = this.createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_						"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)___		ServletRegistration.Dynamic registration =_				servletContext.addServlet(servletName, dispatcherServlet)__		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		this.customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,this,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,this,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,this,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1362408075;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = this.getServletName()__		Assert.hasLength(servletName,_				"getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = this.createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_						"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)___		ServletRegistration.Dynamic registration =_				servletContext.addServlet(servletName, dispatcherServlet)___		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		this.customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,this,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,this,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,this,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1375722796;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned from_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = this.getServletName()__		Assert.hasLength(servletName, "getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = this.createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_						"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)___		ServletRegistration.Dynamic registration =_				servletContext.addServlet(servletName, dispatcherServlet)___		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'. " +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		this.customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,from,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,this,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,this,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,this,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1390584631;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)__		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1393599406;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)__		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1396010083;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() may not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)__		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,may,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1427815317;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() must not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext)__		dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers())___		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,must,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,new,dispatcher,servlet,servlet,app,context,dispatcher,servlet,set,context,initializers,get,servlet,application,context,initializers,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1436791386;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)} or_{@link #createDispatcherServlet(WebApplicationContext)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() must not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		DispatcherServlet dispatcherServlet = createDispatcherServlet(servletAppContext)__		dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers())___		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,or,link,create,dispatcher,servlet,web,application,context,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,must,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,dispatcher,servlet,dispatcher,servlet,create,dispatcher,servlet,servlet,app,context,dispatcher,servlet,set,context,initializers,get,servlet,application,context,initializers,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1446037220;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)} or_{@link #createDispatcherServlet(WebApplicationContext)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() must not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext)__		dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers())___		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,or,link,create,dispatcher,servlet,web,application,context,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,must,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,framework,servlet,dispatcher,servlet,create,dispatcher,servlet,servlet,app,context,dispatcher,servlet,set,context,initializers,get,servlet,application,context,initializers,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1495868221;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)} or_{@link #createDispatcherServlet(WebApplicationContext)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() must not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext)__		dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers())___		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,or,link,create,dispatcher,servlet,web,application,context,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,must,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,framework,servlet,dispatcher,servlet,create,dispatcher,servlet,servlet,app,context,dispatcher,servlet,set,context,initializers,get,servlet,application,context,initializers,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1508291397;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)} or_{@link #createDispatcherServlet(WebApplicationContext)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() must not return empty or null")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext,_				"createServletApplicationContext() did not return an application " +_				"context for servlet [" + servletName + "]")___		FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext)__		dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers())___		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		Assert.notNull(registration,_				"Failed to register servlet with name '" + servletName + "'." +_				"Check if there is another servlet registered under the same name.")___		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,or,link,create,dispatcher,servlet,web,application,context,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,must,not,return,empty,or,null,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,did,not,return,an,application,context,for,servlet,servlet,name,framework,servlet,dispatcher,servlet,create,dispatcher,servlet,servlet,app,context,dispatcher,servlet,set,context,initializers,get,servlet,application,context,initializers,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,assert,not,null,registration,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected void registerDispatcherServlet(ServletContext servletContext);1521050150;Register a {@link DispatcherServlet} against the given servlet context._<p>This method will create a {@code DispatcherServlet} with the name returned by_{@link #getServletName()}, initializing it with the application context returned_from {@link #createServletApplicationContext()}, and mapping it to the patterns_returned from {@link #getServletMappings()}._<p>Further customization can be achieved by overriding {@link_#customizeRegistration(ServletRegistration.Dynamic)} or_{@link #createDispatcherServlet(WebApplicationContext)}._@param servletContext the context to register the servlet against;protected void registerDispatcherServlet(ServletContext servletContext) {_		String servletName = getServletName()__		Assert.hasLength(servletName, "getServletName() must not return null or empty")___		WebApplicationContext servletAppContext = createServletApplicationContext()__		Assert.notNull(servletAppContext, "createServletApplicationContext() must not return null")___		FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext)__		Assert.notNull(dispatcherServlet, "createDispatcherServlet(WebApplicationContext) must not return null")__		dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers())___		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet)__		if (registration == null) {_			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +_					"Check if there is another servlet registered under the same name.")__		}__		registration.setLoadOnStartup(1)__		registration.addMapping(getServletMappings())__		registration.setAsyncSupported(isAsyncSupported())___		Filter[] filters = getServletFilters()__		if (!ObjectUtils.isEmpty(filters)) {_			for (Filter filter : filters) {_				registerServletFilter(servletContext, filter)__			}_		}__		customizeRegistration(registration)__	};register,a,link,dispatcher,servlet,against,the,given,servlet,context,p,this,method,will,create,a,code,dispatcher,servlet,with,the,name,returned,by,link,get,servlet,name,initializing,it,with,the,application,context,returned,from,link,create,servlet,application,context,and,mapping,it,to,the,patterns,returned,from,link,get,servlet,mappings,p,further,customization,can,be,achieved,by,overriding,link,customize,registration,servlet,registration,dynamic,or,link,create,dispatcher,servlet,web,application,context,param,servlet,context,the,context,to,register,the,servlet,against;protected,void,register,dispatcher,servlet,servlet,context,servlet,context,string,servlet,name,get,servlet,name,assert,has,length,servlet,name,get,servlet,name,must,not,return,null,or,empty,web,application,context,servlet,app,context,create,servlet,application,context,assert,not,null,servlet,app,context,create,servlet,application,context,must,not,return,null,framework,servlet,dispatcher,servlet,create,dispatcher,servlet,servlet,app,context,assert,not,null,dispatcher,servlet,create,dispatcher,servlet,web,application,context,must,not,return,null,dispatcher,servlet,set,context,initializers,get,servlet,application,context,initializers,servlet,registration,dynamic,registration,servlet,context,add,servlet,servlet,name,dispatcher,servlet,if,registration,null,throw,new,illegal,state,exception,failed,to,register,servlet,with,name,servlet,name,check,if,there,is,another,servlet,registered,under,the,same,name,registration,set,load,on,startup,1,registration,add,mapping,get,servlet,mappings,registration,set,async,supported,is,async,supported,filter,filters,get,servlet,filters,if,object,utils,is,empty,filters,for,filter,filter,filters,register,servlet,filter,servlet,context,filter,customize,registration,registration
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1346207363;Specify filters to add and also map to the {@code DispatcherServlet}.__@return an array of filters or {@code null}_@see #registerServletFilters(ServletContext, String, Filter...);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,also,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filters,servlet,context,string,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1355313310;Specify filters to add and also map to the {@code DispatcherServlet}.__@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,also,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1362408075;Specify filters to add and also map to the {@code DispatcherServlet}.__@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,also,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1375722796;Specify filters to add and map to the {@code DispatcherServlet}.__@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1390584631;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1393599406;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1396010083;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1427815317;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1436791386;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected Filter[] getServletFilters();1446037220;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1346207363;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1355313310;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1362408075;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1375722796;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1390584631;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1393599406;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1396010083;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1427815317;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1436791386;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1446037220;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1495868221;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1508291397;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected boolean isAsyncSupported();1521050150;A single place to control the {@code asyncSupported} flag for the_{@code DispatcherServlet} and all filters added via {@link #getServletFilters()}._<p>The default value is "true".;protected boolean isAsyncSupported() {_		return true__	};a,single,place,to,control,the,code,async,supported,flag,for,the,code,dispatcher,servlet,and,all,filters,added,via,link,get,servlet,filters,p,the,default,value,is,true;protected,boolean,is,async,supported,return,true
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1337697865;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)} As such, it_typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1346207363;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)} As such, it_typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1355313310;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)} As such, it_typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1362408075;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)} As such, it_typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1375722796;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such, it_typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1390584631;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1393599406;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1396010083;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1427815317;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1436791386;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1446037220;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1495868221;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1508291397;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract WebApplicationContext createServletApplicationContext()_;1521050150;Create a servlet application context to be provided to the {@code DispatcherServlet}._<p>The returned context is delegated to Spring's_{@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,_it typically contains controllers, view resolvers, locale resolvers, and other_web-related beans._@see #registerDispatcherServlet(ServletContext);protected abstract WebApplicationContext createServletApplicationContext()_;create,a,servlet,application,context,to,be,provided,to,the,code,dispatcher,servlet,p,the,returned,context,is,delegated,to,spring,s,link,dispatcher,servlet,dispatcher,servlet,web,application,context,as,such,it,typically,contains,controllers,view,resolvers,locale,resolvers,and,other,web,related,beans,see,register,dispatcher,servlet,servlet,context;protected,abstract,web,application,context,create,servlet,application,context
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1337697865;Specify the servlet mapping(s) for the {@code DispatcherServlet}, e.g. '/', '/app',_etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,e,g,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1346207363;Specify the servlet mapping(s) for the {@code DispatcherServlet}, e.g. '/', '/app', etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,e,g,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1355313310;Specify the servlet mapping(s) for the {@code DispatcherServlet}, e.g. '/', '/app', etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,e,g,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1362408075;Specify the servlet mapping(s) for the {@code DispatcherServlet}, e.g. '/', '/app', etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,e,g,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1375722796;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1390584631;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1393599406;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1396010083;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1427815317;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1436791386;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1446037220;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1495868221;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1508291397;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected abstract String[] getServletMappings()_;1521050150;Specify the servlet mapping(s) for the {@code DispatcherServlet} &mdash__for example {@code "/"}, {@code "/app"}, etc._@see #registerDispatcherServlet(ServletContext);protected abstract String[] getServletMappings()_;specify,the,servlet,mapping,s,for,the,code,dispatcher,servlet,mdash,for,example,code,code,app,etc,see,register,dispatcher,servlet,servlet,context;protected,abstract,string,get,servlet,mappings
AbstractDispatcherServletInitializer -> protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers();1427815317;Specify application context initializers to be applied to the servlet-specific_application context that the {@code DispatcherServlet} is being created with._@since 4.2_@see #createServletApplicationContext()_@see DispatcherServlet#setContextInitializers_@see #getRootApplicationContextInitializers();protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers() {_		return null__	};specify,application,context,initializers,to,be,applied,to,the,servlet,specific,application,context,that,the,code,dispatcher,servlet,is,being,created,with,since,4,2,see,create,servlet,application,context,see,dispatcher,servlet,set,context,initializers,see,get,root,application,context,initializers;protected,application,context,initializer,get,servlet,application,context,initializers,return,null
AbstractDispatcherServletInitializer -> protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers();1436791386;Specify application context initializers to be applied to the servlet-specific_application context that the {@code DispatcherServlet} is being created with._@since 4.2_@see #createServletApplicationContext()_@see DispatcherServlet#setContextInitializers_@see #getRootApplicationContextInitializers();protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers() {_		return null__	};specify,application,context,initializers,to,be,applied,to,the,servlet,specific,application,context,that,the,code,dispatcher,servlet,is,being,created,with,since,4,2,see,create,servlet,application,context,see,dispatcher,servlet,set,context,initializers,see,get,root,application,context,initializers;protected,application,context,initializer,get,servlet,application,context,initializers,return,null
AbstractDispatcherServletInitializer -> protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers();1446037220;Specify application context initializers to be applied to the servlet-specific_application context that the {@code DispatcherServlet} is being created with._@since 4.2_@see #createServletApplicationContext()_@see DispatcherServlet#setContextInitializers_@see #getRootApplicationContextInitializers();protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers() {_		return null__	};specify,application,context,initializers,to,be,applied,to,the,servlet,specific,application,context,that,the,code,dispatcher,servlet,is,being,created,with,since,4,2,see,create,servlet,application,context,see,dispatcher,servlet,set,context,initializers,see,get,root,application,context,initializers;protected,application,context,initializer,get,servlet,application,context,initializers,return,null
AbstractDispatcherServletInitializer -> @Nullable 	protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers();1495868221;Specify application context initializers to be applied to the servlet-specific_application context that the {@code DispatcherServlet} is being created with._@since 4.2_@see #createServletApplicationContext()_@see DispatcherServlet#setContextInitializers_@see #getRootApplicationContextInitializers();@Nullable_	protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers() {_		return null__	};specify,application,context,initializers,to,be,applied,to,the,servlet,specific,application,context,that,the,code,dispatcher,servlet,is,being,created,with,since,4,2,see,create,servlet,application,context,see,dispatcher,servlet,set,context,initializers,see,get,root,application,context,initializers;nullable,protected,application,context,initializer,get,servlet,application,context,initializers,return,null
AbstractDispatcherServletInitializer -> @Nullable 	protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers();1508291397;Specify application context initializers to be applied to the servlet-specific_application context that the {@code DispatcherServlet} is being created with._@since 4.2_@see #createServletApplicationContext()_@see DispatcherServlet#setContextInitializers_@see #getRootApplicationContextInitializers();@Nullable_	protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers() {_		return null__	};specify,application,context,initializers,to,be,applied,to,the,servlet,specific,application,context,that,the,code,dispatcher,servlet,is,being,created,with,since,4,2,see,create,servlet,application,context,see,dispatcher,servlet,set,context,initializers,see,get,root,application,context,initializers;nullable,protected,application,context,initializer,get,servlet,application,context,initializers,return,null
AbstractDispatcherServletInitializer -> @Nullable 	protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers();1521050150;Specify application context initializers to be applied to the servlet-specific_application context that the {@code DispatcherServlet} is being created with._@since 4.2_@see #createServletApplicationContext()_@see DispatcherServlet#setContextInitializers_@see #getRootApplicationContextInitializers();@Nullable_	protected ApplicationContextInitializer<?>[] getServletApplicationContextInitializers() {_		return null__	};specify,application,context,initializers,to,be,applied,to,the,servlet,specific,application,context,that,the,code,dispatcher,servlet,is,being,created,with,since,4,2,see,create,servlet,application,context,see,dispatcher,servlet,set,context,initializers,see,get,root,application,context,initializers;nullable,protected,application,context,initializer,get,servlet,application,context,initializers,return,null
AbstractDispatcherServletInitializer -> protected String getServletName();1337697865;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1346207363;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1355313310;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1362408075;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1375722796;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1390584631;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1393599406;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1396010083;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1427815317;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1436791386;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1446037220;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1495868221;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1508291397;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected String getServletName();1521050150;Return the name under which the {@link DispatcherServlet} will be registered._Defaults to {@link #DEFAULT_SERVLET_NAME}._@see #registerDispatcherServlet(ServletContext);protected String getServletName() {_		return DEFAULT_SERVLET_NAME__	};return,the,name,under,which,the,link,dispatcher,servlet,will,be,registered,defaults,to,link,see,register,dispatcher,servlet,servlet,context;protected,string,get,servlet,name,return
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1346207363;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, register_filters directly with the {@code ServletContext}.__@param servletContext the servlet context to register filters with_@param servletName the name of the servlet to map the filters to_@param filters the filters to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,servlet,name,the,name,of,the,servlet,to,map,the,filters,to,param,filters,the,filters,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1355313310;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, register_filters directly with the {@code ServletContext}.__@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1362408075;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, register_filters directly with the {@code ServletContext}.__@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1375722796;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}.__@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1390584631;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1393599406;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		if (registration == null) {_			int counter = -1__			while (counter == -1 || registration == null) {_				counter++__				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				Assert.isTrue(counter < 100,_						"Failed to register filter '" + filter + "'." +_						"Could the same Filter instance have been registered already?")__			}_		}_		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,1,while,counter,1,registration,null,counter,registration,servlet,context,add,filter,filter,name,counter,filter,assert,is,true,counter,100,failed,to,register,filter,filter,could,the,same,filter,instance,have,been,registered,already,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1396010083;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		if (registration == null) {_			int counter = -1__			while (counter == -1 || registration == null) {_				counter++__				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				Assert.isTrue(counter < 100,_						"Failed to register filter '" + filter + "'." +_						"Could the same Filter instance have been registered already?")__			}_		}_		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,1,while,counter,1,registration,null,counter,registration,servlet,context,add,filter,filter,name,counter,filter,assert,is,true,counter,100,failed,to,register,filter,filter,could,the,same,filter,instance,have,been,registered,already,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1427815317;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		if (registration == null) {_			int counter = -1__			while (counter == -1 || registration == null) {_				counter++__				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				Assert.isTrue(counter < 100,_						"Failed to register filter '" + filter + "'." +_						"Could the same Filter instance have been registered already?")__			}_		}_		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,1,while,counter,1,registration,null,counter,registration,servlet,context,add,filter,filter,name,counter,filter,assert,is,true,counter,100,failed,to,register,filter,filter,could,the,same,filter,instance,have,been,registered,already,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1436791386;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		if (registration == null) {_			int counter = -1__			while (counter == -1 || registration == null) {_				counter++__				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				Assert.isTrue(counter < 100,_						"Failed to register filter '" + filter + "'." +_						"Could the same Filter instance have been registered already?")__			}_		}_		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,1,while,counter,1,registration,null,counter,registration,servlet,context,add,filter,filter,name,counter,filter,assert,is,true,counter,100,failed,to,register,filter,filter,could,the,same,filter,instance,have,been,registered,already,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1446037220;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		if (registration == null) {_			int counter = -1__			while (counter == -1 || registration == null) {_				counter++__				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				Assert.isTrue(counter < 100,_						"Failed to register filter '" + filter + "'." +_						"Could the same Filter instance have been registered already?")__			}_		}_		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,1,while,counter,1,registration,null,counter,registration,servlet,context,add,filter,filter,name,counter,filter,assert,is,true,counter,100,failed,to,register,filter,filter,could,the,same,filter,instance,have,been,registered,already,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1495868221;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		if (registration == null) {_			int counter = -1__			while (counter == -1 || registration == null) {_				counter++__				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				Assert.isTrue(counter < 100,_						"Failed to register filter '" + filter + "'." +_						"Could the same Filter instance have been registered already?")__			}_		}_		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,1,while,counter,1,registration,null,counter,registration,servlet,context,add,filter,filter,name,counter,filter,assert,is,true,counter,100,failed,to,register,filter,filter,could,the,same,filter,instance,have,been,registered,already,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1508291397;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)__		if (registration == null) {_			int counter = -1__			while (counter == -1 || registration == null) {_				counter++__				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				Assert.isTrue(counter < 100,_						"Failed to register filter '" + filter + "'." +_						"Could the same Filter instance have been registered already?")__			}_		}_		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,1,while,counter,1,registration,null,counter,registration,servlet,context,add,filter,filter,name,counter,filter,assert,is,true,counter,100,failed,to,register,filter,filter,could,the,same,filter,instance,have,been,registered,already,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter);1521050150;Add the given filter to the ServletContext and map it to the_{@code DispatcherServlet} as follows:_<ul>_<li>a default filter name is chosen based on its concrete type_<li>the {@code asyncSupported} flag is set depending on the_return value of {@link #isAsyncSupported() asyncSupported}_<li>a filter mapping is created with dispatcher types {@code REQUEST},_{@code FORWARD}, {@code INCLUDE}, and conditionally {@code ASYNC} depending_on the return value of {@link #isAsyncSupported() asyncSupported}_</ul>_<p>If the above defaults are not suitable or insufficient, override this_method and register filters directly with the {@code ServletContext}._@param servletContext the servlet context to register filters with_@param filter the filter to be registered_@return the filter registration;protected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter) {_		String filterName = Conventions.getVariableName(filter)__		Dynamic registration = servletContext.addFilter(filterName, filter)___		if (registration == null) {_			int counter = 0__			while (registration == null) {_				if (counter == 100) {_					throw new IllegalStateException("Failed to register filter with name '" + filterName + "'. " +_							"Check if there is another filter registered under the same name.")__				}_				registration = servletContext.addFilter(filterName + "#" + counter, filter)__				counter++__			}_		}__		registration.setAsyncSupported(isAsyncSupported())__		registration.addMappingForServletNames(getDispatcherTypes(), false, getServletName())__		return registration__	};add,the,given,filter,to,the,servlet,context,and,map,it,to,the,code,dispatcher,servlet,as,follows,ul,li,a,default,filter,name,is,chosen,based,on,its,concrete,type,li,the,code,async,supported,flag,is,set,depending,on,the,return,value,of,link,is,async,supported,async,supported,li,a,filter,mapping,is,created,with,dispatcher,types,code,request,code,forward,code,include,and,conditionally,code,async,depending,on,the,return,value,of,link,is,async,supported,async,supported,ul,p,if,the,above,defaults,are,not,suitable,or,insufficient,override,this,method,and,register,filters,directly,with,the,code,servlet,context,param,servlet,context,the,servlet,context,to,register,filters,with,param,filter,the,filter,to,be,registered,return,the,filter,registration;protected,filter,registration,dynamic,register,servlet,filter,servlet,context,servlet,context,filter,filter,string,filter,name,conventions,get,variable,name,filter,dynamic,registration,servlet,context,add,filter,filter,name,filter,if,registration,null,int,counter,0,while,registration,null,if,counter,100,throw,new,illegal,state,exception,failed,to,register,filter,with,name,filter,name,check,if,there,is,another,filter,registered,under,the,same,name,registration,servlet,context,add,filter,filter,name,counter,filter,counter,registration,set,async,supported,is,async,supported,registration,add,mapping,for,servlet,names,get,dispatcher,types,false,get,servlet,name,return,registration
AbstractDispatcherServletInitializer -> @Nullable 	protected Filter[] getServletFilters();1495868221;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);@Nullable_	protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;nullable,protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> @Nullable 	protected Filter[] getServletFilters();1508291397;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);@Nullable_	protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;nullable,protected,filter,get,servlet,filters,return,null
AbstractDispatcherServletInitializer -> @Nullable 	protected Filter[] getServletFilters();1521050150;Specify filters to add and map to the {@code DispatcherServlet}._@return an array of filters or {@code null}_@see #registerServletFilter(ServletContext, Filter);@Nullable_	protected Filter[] getServletFilters() {_		return null__	};specify,filters,to,add,and,map,to,the,code,dispatcher,servlet,return,an,array,of,filters,or,code,null,see,register,servlet,filter,servlet,context,filter;nullable,protected,filter,get,servlet,filters,return,null
