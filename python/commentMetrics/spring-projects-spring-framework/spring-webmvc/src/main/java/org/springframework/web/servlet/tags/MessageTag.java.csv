commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the MessageSourceResolvable for this tag.  * <p>If a MessageSourceResolvable is specified, it effectively overrides  * any code, arguments or text specified on this tag.  */ ;/**  * Set the MessageSourceResolvable for this tag.  * <p>If a MessageSourceResolvable is specified, it effectively overrides  * any code, arguments or text specified on this tag.  */ public void setMessage(MessageSourceResolvable message) {     this.message = message. }
true;public;1;3;/**  * Set the message code for this tag.  */ ;/**  * Set the message code for this tag.  */ public void setCode(String code) {     this.code = code. }
true;public;1;3;/**  * Set optional message arguments for this tag, as a comma-delimited  * String (each String argument can contain JSP EL), an Object array  * (used as argument array), or a single Object (used as single argument).  */ ;/**  * Set optional message arguments for this tag, as a comma-delimited  * String (each String argument can contain JSP EL), an Object array  * (used as argument array), or a single Object (used as single argument).  */ public void setArguments(Object arguments) {     this.arguments = arguments. }
true;public;1;3;/**  * Set the separator to use for splitting an arguments String.  * Default is a comma (",").  * @see #setArguments  */ ;/**  * Set the separator to use for splitting an arguments String.  * Default is a comma (",").  * @see #setArguments  */ public void setArgumentSeparator(String argumentSeparator) {     this.argumentSeparator = argumentSeparator. }
false;public;1;4;;@Override public void addArgument(@Nullable Object argument) throws JspTagException {     this.nestedArguments.add(argument). }
true;public;1;3;/**  * Set the message text for this tag.  */ ;/**  * Set the message text for this tag.  */ public void setText(String text) {     this.text = text. }
true;public;1;3;/**  * Set PageContext attribute name under which to expose  * a variable that contains the resolved message.  * @see #setScope  * @see javax.servlet.jsp.PageContext#setAttribute  */ ;/**  * Set PageContext attribute name under which to expose  * a variable that contains the resolved message.  * @see #setScope  * @see javax.servlet.jsp.PageContext#setAttribute  */ public void setVar(String var) {     this.var = var. }
true;public;1;3;/**  * Set the scope to export the variable to.  * Default is SCOPE_PAGE ("page").  * @see #setVar  * @see org.springframework.web.util.TagUtils#SCOPE_PAGE  * @see javax.servlet.jsp.PageContext#setAttribute  */ ;/**  * Set the scope to export the variable to.  * Default is SCOPE_PAGE ("page").  * @see #setVar  * @see org.springframework.web.util.TagUtils#SCOPE_PAGE  * @see javax.servlet.jsp.PageContext#setAttribute  */ public void setScope(String scope) {     this.scope = scope. }
true;public;1;3;/**  * Set JavaScript escaping for this tag, as boolean value.  * Default is "false".  */ ;/**  * Set JavaScript escaping for this tag, as boolean value.  * Default is "false".  */ public void setJavaScriptEscape(boolean javaScriptEscape) throws JspException {     this.javaScriptEscape = javaScriptEscape. }
false;protected,final;0;5;;@Override protected final int doStartTagInternal() throws JspException, IOException {     this.nestedArguments = new LinkedList<>().     return EVAL_BODY_INCLUDE. }
true;public;0;27;/**  * Resolves the message, escapes it if demanded,  * and writes it to the page (or exposes it as variable).  * @see #resolveMessage()  * @see org.springframework.web.util.HtmlUtils#htmlEscape(String)  * @see org.springframework.web.util.JavaScriptUtils#javaScriptEscape(String)  * @see #writeMessage(String)  */ ;/**  * Resolves the message, escapes it if demanded,  * and writes it to the page (or exposes it as variable).  * @see #resolveMessage()  * @see org.springframework.web.util.HtmlUtils#htmlEscape(String)  * @see org.springframework.web.util.JavaScriptUtils#javaScriptEscape(String)  * @see #writeMessage(String)  */ @Override public int doEndTag() throws JspException {     try {         // Resolve the unescaped message.         String msg = resolveMessage().         // HTML and/or JavaScript escape, if demanded.         msg = htmlEscape(msg).         msg = this.javaScriptEscape ? JavaScriptUtils.javaScriptEscape(msg) : msg.         // Expose as variable, if demanded, else write to the page.         if (this.var != null) {             this.pageContext.setAttribute(this.var, msg, TagUtils.getScope(this.scope)).         } else {             writeMessage(msg).         }         return EVAL_PAGE.     } catch (IOException ex) {         throw new JspTagException(ex.getMessage(), ex).     } catch (NoSuchMessageException ex) {         throw new JspTagException(getNoSuchMessageExceptionDescription(ex)).     } }
false;public;0;5;;@Override public void release() {     super.release().     this.arguments = null. }
true;protected;0;31;/**  * Resolve the specified message into a concrete message String.  * The returned message String should be unescaped.  */ ;/**  * Resolve the specified message into a concrete message String.  * The returned message String should be unescaped.  */ protected String resolveMessage() throws JspException, NoSuchMessageException {     MessageSource messageSource = getMessageSource().     // Evaluate the specified MessageSourceResolvable, if any.     if (this.message != null) {         // We have a given MessageSourceResolvable.         return messageSource.getMessage(this.message, getRequestContext().getLocale()).     }     if (this.code != null || this.text != null) {         // We have a code or default text that we need to resolve.         Object[] argumentsArray = resolveArguments(this.arguments).         if (!this.nestedArguments.isEmpty()) {             argumentsArray = appendArguments(argumentsArray, this.nestedArguments.toArray()).         }         if (this.text != null) {             // We have a fallback text to consider.             String msg = messageSource.getMessage(this.code, argumentsArray, this.text, getRequestContext().getLocale()).             return (msg != null ? msg : "").         } else {             // We have no fallback text to consider.             return messageSource.getMessage(this.code, argumentsArray, getRequestContext().getLocale()).         }     }     throw new JspTagException("No resolvable message"). }
false;private;2;9;;private Object[] appendArguments(@Nullable Object[] sourceArguments, Object[] additionalArguments) {     if (ObjectUtils.isEmpty(sourceArguments)) {         return additionalArguments.     }     Object[] arguments = new Object[sourceArguments.length + additionalArguments.length].     System.arraycopy(sourceArguments, 0, arguments, 0, sourceArguments.length).     System.arraycopy(additionalArguments, 0, arguments, sourceArguments.length, additionalArguments.length).     return arguments. }
true;protected;1;32;/**  * Resolve the given arguments Object into an arguments array.  * @param arguments the specified arguments Object  * @return the resolved arguments as array  * @throws JspException if argument conversion failed  * @see #setArguments  */ ;/**  * Resolve the given arguments Object into an arguments array.  * @param arguments the specified arguments Object  * @return the resolved arguments as array  * @throws JspException if argument conversion failed  * @see #setArguments  */ @Nullable protected Object[] resolveArguments(@Nullable Object arguments) throws JspException {     if (arguments instanceof String) {         String[] stringArray = StringUtils.delimitedListToStringArray((String) arguments, this.argumentSeparator).         if (stringArray.length == 1) {             Object argument = stringArray[0].             if (argument != null && argument.getClass().isArray()) {                 return ObjectUtils.toObjectArray(argument).             } else {                 return new Object[] { argument }.             }         } else {             return stringArray.         }     } else if (arguments instanceof Object[]) {         return (Object[]) arguments.     } else if (arguments instanceof Collection) {         return ((Collection<?>) arguments).toArray().     } else if (arguments != null) {         // Assume a single argument object.         return new Object[] { arguments }.     } else {         return null.     } }
true;protected;1;3;/**  * Write the message to the page.  * <p>Can be overridden in subclasses, e.g. for testing purposes.  * @param msg the message to write  * @throws IOException if writing failed  */ ;/**  * Write the message to the page.  * <p>Can be overridden in subclasses, e.g. for testing purposes.  * @param msg the message to write  * @throws IOException if writing failed  */ protected void writeMessage(String msg) throws IOException {     this.pageContext.getOut().write(String.valueOf(msg)). }
true;protected;0;3;/**  * Use the current RequestContext's application context as MessageSource.  */ ;/**  * Use the current RequestContext's application context as MessageSource.  */ protected MessageSource getMessageSource() {     return getRequestContext().getMessageSource(). }
true;protected;1;3;/**  * Return default exception message.  */ ;/**  * Return default exception message.  */ protected String getNoSuchMessageExceptionDescription(NoSuchMessageException ex) {     return ex.getMessage(). }
