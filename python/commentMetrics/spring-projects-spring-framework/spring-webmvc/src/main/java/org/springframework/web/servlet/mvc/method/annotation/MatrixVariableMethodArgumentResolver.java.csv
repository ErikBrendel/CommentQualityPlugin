commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public boolean supportsParameter(MethodParameter parameter) {     if (!parameter.hasParameterAnnotation(MatrixVariable.class)) {         return false.     }     if (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) {         MatrixVariable matrixVariable = parameter.getParameterAnnotation(MatrixVariable.class).         return (matrixVariable != null && StringUtils.hasText(matrixVariable.name())).     }     return true. }
false;protected;1;6;;@Override protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {     MatrixVariable ann = parameter.getParameterAnnotation(MatrixVariable.class).     Assert.state(ann != null, "No MatrixVariable annotation").     return new MatrixVariableNamedValueInfo(ann). }
false;protected;3;47;;@Override @SuppressWarnings("unchecked") @Nullable protected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {     Map<String, MultiValueMap<String, String>> pathParameters = (Map<String, MultiValueMap<String, String>>) request.getAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST).     if (CollectionUtils.isEmpty(pathParameters)) {         return null.     }     MatrixVariable ann = parameter.getParameterAnnotation(MatrixVariable.class).     Assert.state(ann != null, "No MatrixVariable annotation").     String pathVar = ann.pathVar().     List<String> paramValues = null.     if (!pathVar.equals(ValueConstants.DEFAULT_NONE)) {         if (pathParameters.containsKey(pathVar)) {             paramValues = pathParameters.get(pathVar).get(name).         }     } else {         boolean found = false.         paramValues = new ArrayList<>().         for (MultiValueMap<String, String> params : pathParameters.values()) {             if (params.containsKey(name)) {                 if (found) {                     String paramType = parameter.getNestedParameterType().getName().                     throw new ServletRequestBindingException("Found more than one match for URI path parameter '" + name + "' for parameter type [" + paramType + "]. Use 'pathVar' attribute to disambiguate.").                 }                 paramValues.addAll(params.get(name)).                 found = true.             }         }     }     if (CollectionUtils.isEmpty(paramValues)) {         return null.     } else if (paramValues.size() == 1) {         return paramValues.get(0).     } else {         return paramValues.     } }
false;protected;2;4;;@Override protected void handleMissingValue(String name, MethodParameter parameter) throws ServletRequestBindingException {     throw new MissingMatrixVariableException(name, parameter). }
