# id;timestamp;commentText;codeText;commentWords;codeWords
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1328020251;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1335774711;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1336681154;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1337102166;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1340380546;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1340674210;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1354836692;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1354878381;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1356735495;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1362408075;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1380750451;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1389727699;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1392410324;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1399404473;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1427983931;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1429513478;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1429886024;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1429888980;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1430734106;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1432856630;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1433089072;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1433089252;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1433166486;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1433511178;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1434208198;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1434234880;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1436539370;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1438166435;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1438277673;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1442949849;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1443636308;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1457705056;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1458754760;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1467051782;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1467290306;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1468415682;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1476136811;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1476909116;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1477860027;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1495868221;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1496280344;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1496837955;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1498780456;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1502974979;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1528409922;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1528486327;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1529028713;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1532520962;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, 			RequestCondition<?> customCondition);1380750451;Created a RequestMappingInfo from a RequestMapping annotation.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation,_			RequestCondition<?> customCondition) {__		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value())__		return new RequestMappingInfo(_				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,string,patterns,resolve,embedded,values,in,patterns,annotation,value,return,new,request,mapping,info,new,patterns,request,condition,patterns,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, 			RequestCondition<?> customCondition);1389727699;Created a RequestMappingInfo from a RequestMapping annotation.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation,_			RequestCondition<?> customCondition) {__		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value())__		return new RequestMappingInfo(_				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,string,patterns,resolve,embedded,values,in,patterns,annotation,value,return,new,request,mapping,info,new,patterns,request,condition,patterns,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1495868221;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1496280344;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1496837955;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1498780456;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1502974979;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1528409922;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1528486327;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1529028713;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1532520962;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1328020251;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(), _						getUrlPathHelper(), getPathMatcher(), this.useSuffixPatternMatch, this.useTrailingSlashMatch),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers()), _				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1335774711;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(),_						getUrlPathHelper(), getPathMatcher(), this.useSuffixPatternMatch, this.useTrailingSlashMatch),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1336681154;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(),_						getUrlPathHelper(), getPathMatcher(), this.useSuffixPatternMatch, this.useTrailingSlashMatch),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1337102166;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(),_						getUrlPathHelper(), getPathMatcher(), this.useSuffixPatternMatch, this.useTrailingSlashMatch),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1340380546;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(),_						getUrlPathHelper(), getPathMatcher(), this.useSuffixPatternMatch, this.useTrailingSlashMatch),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1340674210;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(), getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.contentNegotiationFileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,content,negotiation,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1354836692;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(), getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1354878381;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(), getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1356735495;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		return new RequestMappingInfo(_				new PatternsRequestCondition(annotation.value(), getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,new,request,mapping,info,new,patterns,request,condition,annotation,value,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1362408075;Created a RequestMappingInfo from a RequestMapping annotation.;private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value())__		return new RequestMappingInfo(_				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), getContentNegotiationManager()),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;private,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,string,patterns,resolve,embedded,values,in,patterns,annotation,value,return,new,request,mapping,info,new,patterns,request,condition,patterns,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,get,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1496837955;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1498780456;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1502974979;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1528409922;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1528486327;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1529028713;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1532520962;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1502974979;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1528409922;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1528486327;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1529028713;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1532520962;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement);1429886024;Transitional method used to invoke one of two createRequestMappingInfo_variants one of which is deprecated.;private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement) {_		RequestMapping annotation__		AnnotationAttributes attributes__		RequestCondition<?> customCondition__		String annotationType = RequestMapping.class.getName()__		if (annotatedElement instanceof Class<?>) {_			Class<?> type = (Class<?>) annotatedElement__			annotation = AnnotationUtils.findAnnotation(type, RequestMapping.class)__			attributes = AnnotatedElementUtils.getAnnotationAttributes(type, annotationType)__			customCondition = getCustomTypeCondition(type)__		}_		else {_			Method method = (Method) annotatedElement__			annotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__			attributes = AnnotatedElementUtils.getAnnotationAttributes(method, annotationType)__			customCondition = getCustomMethodCondition(method)__		}_		RequestMappingInfo info = null__		if (annotation != null) {_			info = createRequestMappingInfo(annotation, customCondition)__			if (info == null) {_				info = createRequestMappingInfo(attributes, customCondition)__			}_		}_		return info__	};transitional,method,used,to,invoke,one,of,two,create,request,mapping,info,variants,one,of,which,is,deprecated;private,request,mapping,info,create,request,mapping,info,annotated,element,annotated,element,request,mapping,annotation,annotation,attributes,attributes,request,condition,custom,condition,string,annotation,type,request,mapping,class,get,name,if,annotated,element,instanceof,class,class,type,class,annotated,element,annotation,annotation,utils,find,annotation,type,request,mapping,class,attributes,annotated,element,utils,get,annotation,attributes,type,annotation,type,custom,condition,get,custom,type,condition,type,else,method,method,method,annotated,element,annotation,annotation,utils,find,annotation,method,request,mapping,class,attributes,annotated,element,utils,get,annotation,attributes,method,annotation,type,custom,condition,get,custom,method,condition,method,request,mapping,info,info,null,if,annotation,null,info,create,request,mapping,info,annotation,custom,condition,if,info,null,info,create,request,mapping,info,attributes,custom,condition,return,info
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement);1429888980;Transitional method used to invoke one of two createRequestMappingInfo_variants one of which is deprecated.;private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement) {_		RequestMapping annotation__		AnnotationAttributes attributes__		RequestCondition<?> customCondition__		String annotationType = RequestMapping.class.getName()__		if (annotatedElement instanceof Class<?>) {_			Class<?> type = (Class<?>) annotatedElement__			annotation = AnnotationUtils.findAnnotation(type, RequestMapping.class)__			attributes = AnnotatedElementUtils.findAnnotationAttributes(type, annotationType)__			customCondition = getCustomTypeCondition(type)__		}_		else {_			Method method = (Method) annotatedElement__			annotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__			attributes = AnnotatedElementUtils.findAnnotationAttributes(method, annotationType)__			customCondition = getCustomMethodCondition(method)__		}_		RequestMappingInfo info = null__		if (annotation != null) {_			info = createRequestMappingInfo(annotation, customCondition)__			if (info == null) {_				info = createRequestMappingInfo(attributes, customCondition)__			}_		}_		return info__	};transitional,method,used,to,invoke,one,of,two,create,request,mapping,info,variants,one,of,which,is,deprecated;private,request,mapping,info,create,request,mapping,info,annotated,element,annotated,element,request,mapping,annotation,annotation,attributes,attributes,request,condition,custom,condition,string,annotation,type,request,mapping,class,get,name,if,annotated,element,instanceof,class,class,type,class,annotated,element,annotation,annotation,utils,find,annotation,type,request,mapping,class,attributes,annotated,element,utils,find,annotation,attributes,type,annotation,type,custom,condition,get,custom,type,condition,type,else,method,method,method,annotated,element,annotation,annotation,utils,find,annotation,method,request,mapping,class,attributes,annotated,element,utils,find,annotation,attributes,method,annotation,type,custom,condition,get,custom,method,condition,method,request,mapping,info,info,null,if,annotation,null,info,create,request,mapping,info,annotation,custom,condition,if,info,null,info,create,request,mapping,info,attributes,custom,condition,return,info
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement);1432856630;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement) {_		RequestMapping requestMapping = AnnotatedElementUtils.findAnnotation(annotatedElement, RequestMapping.class)__		RequestCondition<?> customCondition = ((annotatedElement instanceof Class<?>) ? getCustomTypeCondition((Class<?>) annotatedElement)_				: getCustomMethodCondition((Method) annotatedElement))__		return ((requestMapping != null) ? createRequestMappingInfo(requestMapping, customCondition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,annotated,element,request,mapping,request,mapping,annotated,element,utils,find,annotation,annotated,element,request,mapping,class,request,condition,custom,condition,annotated,element,instanceof,class,get,custom,type,condition,class,annotated,element,get,custom,method,condition,method,annotated,element,return,request,mapping,null,create,request,mapping,info,request,mapping,custom,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement);1433089072;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement) {_		RequestMapping requestMapping = AnnotatedElementUtils.findAnnotation(annotatedElement, RequestMapping.class)__		RequestCondition<?> customCondition = ((annotatedElement instanceof Class<?>) ? getCustomTypeCondition((Class<?>) annotatedElement)_				: getCustomMethodCondition((Method) annotatedElement))__		return ((requestMapping != null) ? createRequestMappingInfo(requestMapping, customCondition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,annotated,element,request,mapping,request,mapping,annotated,element,utils,find,annotation,annotated,element,request,mapping,class,request,condition,custom,condition,annotated,element,instanceof,class,get,custom,type,condition,class,annotated,element,get,custom,method,condition,method,annotated,element,return,request,mapping,null,create,request,mapping,info,request,mapping,custom,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement);1433089252;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement annotatedElement) {_		RequestMapping requestMapping = AnnotatedElementUtils.findAnnotation(annotatedElement, RequestMapping.class)__		RequestCondition<?> customCondition = ((annotatedElement instanceof Class<?>) ? getCustomTypeCondition((Class<?>) annotatedElement)_				: getCustomMethodCondition((Method) annotatedElement))__		return ((requestMapping != null) ? createRequestMappingInfo(requestMapping, customCondition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,annotated,element,request,mapping,request,mapping,annotated,element,utils,find,annotation,annotated,element,request,mapping,class,request,condition,custom,condition,annotated,element,instanceof,class,get,custom,type,condition,class,annotated,element,get,custom,method,condition,method,annotated,element,return,request,mapping,null,create,request,mapping,info,request,mapping,custom,condition,null
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1328020251;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1335774711;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1336681154;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1337102166;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1340380546;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1340674210;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1354836692;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1354878381;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1356735495;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1362408075;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1380750451;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1389727699;Whether to match to URLs irrespective of the presence of a trailing  slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1392410324;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1399404473;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1427983931;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1429513478;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1429886024;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1429888980;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1430734106;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1432856630;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1433089072;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1433089252;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1433166486;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1433511178;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1434208198;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1434234880;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1436539370;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1438166435;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1438277673;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1442949849;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1443636308;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1457705056;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1458754760;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1467051782;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1467290306;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1468415682;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1476136811;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1476909116;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1477860027;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1495868221;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1496280344;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1496837955;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1498780456;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1502974979;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1528409922;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1528486327;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1529028713;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1532520962;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1354836692;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1354878381;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1356735495;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1362408075;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1380750451;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1389727699;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1392410324;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1399404473;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1427983931;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1429513478;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1429886024;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1429888980;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1430734106;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1432856630;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1433089072;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1433089252;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1433166486;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1433511178;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1434208198;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1434234880;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1436539370;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1438166435;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1438277673;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1442949849;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1443636308;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1457705056;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1458754760;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1467051782;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1467290306;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1468415682;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1476136811;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1476909116;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1477860027;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1495868221;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1496280344;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1496837955;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1498780456;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1502974979;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1528409922;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1528486327;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1529028713;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1532520962;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1328020251;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1335774711;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1336681154;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1337102166;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1340380546;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1340674210;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1354836692;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1354878381;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1356735495;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1362408075;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1380750451;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1389727699;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1392410324;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1399404473;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1427983931;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1429513478;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1429886024;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1429888980;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1430734106;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1432856630;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1433089072;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1433089252;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1433166486;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1433511178;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1434208198;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1434234880;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1436539370;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1438166435;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1438277673;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1442949849;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1443636308;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1457705056;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1458754760;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1467051782;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1467290306;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1468415682;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1476136811;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1476909116;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1477860027;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1495868221;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1496280344;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1496837955;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1498780456;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1502974979;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1528409922;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1528486327;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1529028713;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1532520962;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> @Deprecated 	protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, 			RequestCondition<?> customCondition);1429886024;Create a RequestMappingInfo from a RequestMapping annotation._@deprecated as of 4.2 after the introduction of support for_{@code @RequestMapping} as meta-annotation. Please use_{@link #createRequestMappingInfo(AnnotationAttributes, RequestCondition)}.;@Deprecated_	protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation,_			RequestCondition<?> customCondition) {__		return null__	};create,a,request,mapping,info,from,a,request,mapping,annotation,deprecated,as,of,4,2,after,the,introduction,of,support,for,code,request,mapping,as,meta,annotation,please,use,link,create,request,mapping,info,annotation,attributes,request,condition;deprecated,protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,null
RequestMappingHandlerMapping -> @Deprecated 	protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, 			RequestCondition<?> customCondition);1429888980;Create a RequestMappingInfo from a RequestMapping annotation._@deprecated as of 4.2 after the introduction of support for_{@code @RequestMapping} as meta-annotation. Please use_{@link #createRequestMappingInfo(AnnotationAttributes, RequestCondition)}.;@Deprecated_	protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation,_			RequestCondition<?> customCondition) {__		return null__	};create,a,request,mapping,info,from,a,request,mapping,annotation,deprecated,as,of,4,2,after,the,introduction,of,support,for,code,request,mapping,as,meta,annotation,please,use,link,create,request,mapping,info,annotation,attributes,request,condition;deprecated,protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,return,null
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1340380546;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1340674210;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1354836692;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1354878381;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1356735495;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1362408075;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1380750451;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1389727699;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1392410324;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1399404473;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1427983931;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1429513478;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1429886024;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1429888980;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1430734106;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1432856630;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1433089072;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1433089252;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1433166486;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1433511178;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1434208198;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1434234880;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1436539370;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1438166435;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1438277673;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1442949849;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1443636308;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1457705056;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1458754760;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1467051782;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1467290306;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1468415682;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1476136811;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1476909116;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1477860027;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1495868221;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1496280344;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1496837955;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1498780456;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1502974979;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1528409922;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1528486327;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1529028713;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> public ContentNegotiationManager getContentNegotiationManager();1532520962;Return the configured {@link ContentNegotiationManager}.;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,link,content,negotiation,manager;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1433166486;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) :_				getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1433511178;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) :_				getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1434208198;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) :_				getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1434234880;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) :_				getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1436539370;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method.__@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) :_				getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1438166435;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1438277673;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1442949849;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1443636308;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1457705056;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1458754760;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1467051782;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1467290306;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1468415682;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1476136811;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1476909116;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class<?> ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1477860027;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1495868221;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1496280344;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1496837955;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1498780456;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1495868221;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1496280344;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1496837955;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1498780456;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1502974979;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1528409922;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1528486327;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1529028713;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1532520962;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes);1528486327;Configure path prefixes to apply to controller methods._<p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}_method whose controller type is matched by the corresponding_{@code Predicate}. The prefix for the first matching predicate is used._<p>Consider using {@link org.springframework.web.method.HandlerTypePredicate_HandlerTypePredicate} to group controllers._@param prefixes a map with path prefixes as key_@since 5.1;public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes) {_		this.pathPrefixes.clear()__		prefixes.entrySet().stream()_				.filter(entry -> StringUtils.hasText(entry.getKey()))_				.forEach(entry -> this.pathPrefixes.put(entry.getKey(), entry.getValue()))__	};configure,path,prefixes,to,apply,to,controller,methods,p,prefixes,are,used,to,enrich,the,mappings,of,every,code,request,mapping,method,whose,controller,type,is,matched,by,the,corresponding,code,predicate,the,prefix,for,the,first,matching,predicate,is,used,p,consider,using,link,org,springframework,web,method,handler,type,predicate,handler,type,predicate,to,group,controllers,param,prefixes,a,map,with,path,prefixes,as,key,since,5,1;public,void,set,path,prefixes,map,string,predicate,class,prefixes,this,path,prefixes,clear,prefixes,entry,set,stream,filter,entry,string,utils,has,text,entry,get,key,for,each,entry,this,path,prefixes,put,entry,get,key,entry,get,value
RequestMappingHandlerMapping -> public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes);1529028713;Configure path prefixes to apply to controller methods._<p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}_method whose controller type is matched by the corresponding_{@code Predicate}. The prefix for the first matching predicate is used._<p>Consider using {@link org.springframework.web.method.HandlerTypePredicate_HandlerTypePredicate} to group controllers._@param prefixes a map with path prefixes as key_@since 5.1;public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes) {_		this.pathPrefixes = Collections.unmodifiableMap(new LinkedHashMap<>(prefixes))__	};configure,path,prefixes,to,apply,to,controller,methods,p,prefixes,are,used,to,enrich,the,mappings,of,every,code,request,mapping,method,whose,controller,type,is,matched,by,the,corresponding,code,predicate,the,prefix,for,the,first,matching,predicate,is,used,p,consider,using,link,org,springframework,web,method,handler,type,predicate,handler,type,predicate,to,group,controllers,param,prefixes,a,map,with,path,prefixes,as,key,since,5,1;public,void,set,path,prefixes,map,string,predicate,class,prefixes,this,path,prefixes,collections,unmodifiable,map,new,linked,hash,map,prefixes
RequestMappingHandlerMapping -> public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes);1532520962;Configure path prefixes to apply to controller methods._<p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}_method whose controller type is matched by the corresponding_{@code Predicate}. The prefix for the first matching predicate is used._<p>Consider using {@link org.springframework.web.method.HandlerTypePredicate_HandlerTypePredicate} to group controllers._@param prefixes a map with path prefixes as key_@since 5.1;public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes) {_		this.pathPrefixes = Collections.unmodifiableMap(new LinkedHashMap<>(prefixes))__	};configure,path,prefixes,to,apply,to,controller,methods,p,prefixes,are,used,to,enrich,the,mappings,of,every,code,request,mapping,method,whose,controller,type,is,matched,by,the,corresponding,code,predicate,the,prefix,for,the,first,matching,predicate,is,used,p,consider,using,link,org,springframework,web,method,handler,type,predicate,handler,type,predicate,to,group,controllers,param,prefixes,a,map,with,path,prefixes,as,key,since,5,1;public,void,set,path,prefixes,map,string,predicate,class,prefixes,this,path,prefixes,collections,unmodifiable,map,new,linked,hash,map,prefixes
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1354836692;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1354878381;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1356735495;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1362408075;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1380750451;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1389727699;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1392410324;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1399404473;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1427983931;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1429513478;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1429886024;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1429888980;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.fileExtensions__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1430734106;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1432856630;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1433089072;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1433089252;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1433166486;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1433511178;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1434208198;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1434234880;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1436539370;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1438166435;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1438277673;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1442949849;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1443636308;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1457705056;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1458754760;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1467051782;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1467290306;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1468415682;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1476136811;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1476909116;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1477860027;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1495868221;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public List<String> getFileExtensions();1496280344;Return the file extensions to use for suffix pattern matching.;public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1328020251;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1335774711;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1336681154;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1337102166;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1340380546;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1340674210;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1354836692;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffices to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffices,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1354878381;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1356735495;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1362408075;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1380750451;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1389727699;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1392410324;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1399404473;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1427983931;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1429513478;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1429886024;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1429888980;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1430734106;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1432856630;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1433089072;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1433089252;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1433166486;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1433511178;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1434208198;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1434234880;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1436539370;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1438166435;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1438277673;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1442949849;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1443636308;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1457705056;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1458754760;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1467051782;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1467290306;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1468415682;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1476136811;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1476909116;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1477860027;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1495868221;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1496280344;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1496837955;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1498780456;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1502974979;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1528409922;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1528486327;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1529028713;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1532520962;Whether to use suffix pattern match (".*") when matching patterns to_requests. If enabled a method mapped to "/users" also matches to "/users.*"._<p>The default value is {@code true}._<p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for_more fine-grained control over specific suffixes to allow.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,when,matching,patterns,to,requests,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true,p,also,see,link,set,use,registered,suffix,pattern,match,boolean,for,more,fine,grained,control,over,specific,suffixes,to,allow;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> @SuppressWarnings("unused") 	protected RequestCondition<?> getCustomMethodCondition(Method method);1430734106;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("unused")_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("unused") 	protected RequestCondition<?> getCustomMethodCondition(Method method);1433166486;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("unused")_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("unused") 	protected RequestCondition<?> getCustomMethodCondition(Method method);1433511178;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("unused")_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1392410324;Created a RequestMappingInfo from a RequestMapping annotation.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value())__		return new RequestMappingInfo(_				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), this.contentNegotiationManager),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,string,patterns,resolve,embedded,values,in,patterns,annotation,value,return,new,request,mapping,info,new,patterns,request,condition,patterns,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,this,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1399404473;Created a RequestMappingInfo from a RequestMapping annotation.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value())__		return new RequestMappingInfo(_				annotation.name(),_				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), this.contentNegotiationManager),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,string,patterns,resolve,embedded,values,in,patterns,annotation,value,return,new,request,mapping,info,annotation,name,new,patterns,request,condition,patterns,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,this,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1427983931;Created a RequestMappingInfo from a RequestMapping annotation.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value())__		return new RequestMappingInfo(_				annotation.name(),_				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), this.contentNegotiationManager),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,string,patterns,resolve,embedded,values,in,patterns,annotation,value,return,new,request,mapping,info,annotation,name,new,patterns,request,condition,patterns,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,this,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition);1429513478;Created a RequestMappingInfo from a RequestMapping annotation.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {_		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value())__		return new RequestMappingInfo(_				annotation.name(),_				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),_						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),_				new RequestMethodsRequestCondition(annotation.method()),_				new ParamsRequestCondition(annotation.params()),_				new HeadersRequestCondition(annotation.headers()),_				new ConsumesRequestCondition(annotation.consumes(), annotation.headers()),_				new ProducesRequestCondition(annotation.produces(), annotation.headers(), this.contentNegotiationManager),_				customCondition)__	};created,a,request,mapping,info,from,a,request,mapping,annotation;protected,request,mapping,info,create,request,mapping,info,request,mapping,annotation,request,condition,custom,condition,string,patterns,resolve,embedded,values,in,patterns,annotation,value,return,new,request,mapping,info,annotation,name,new,patterns,request,condition,patterns,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,new,request,methods,request,condition,annotation,method,new,params,request,condition,annotation,params,new,headers,request,condition,annotation,headers,new,consumes,request,condition,annotation,consumes,annotation,headers,new,produces,request,condition,annotation,produces,annotation,headers,this,content,negotiation,manager,custom,condition
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch);1354836692;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests.__<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json").__<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch__		this.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,regsitered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,regsitered,suffix,pattern,match,this,use,suffix,pattern,match,use,regsitered,suffix,pattern,match,true,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch);1354878381;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests.__<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json").__<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch__		this.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,regsitered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,regsitered,suffix,pattern,match,this,use,suffix,pattern,match,use,regsitered,suffix,pattern,match,true,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch);1356735495;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests.__<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json").__<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch__		this.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,regsitered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,regsitered,suffix,pattern,match,this,use,suffix,pattern,match,use,regsitered,suffix,pattern,match,true,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch);1362408075;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests.__<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json").__<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch__		this.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,regsitered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,regsitered,suffix,pattern,match,this,use,suffix,pattern,match,use,regsitered,suffix,pattern,match,true,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch);1380750451;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests.__<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json").__<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch__		this.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,regsitered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,regsitered,suffix,pattern,match,this,use,suffix,pattern,match,use,regsitered,suffix,pattern,match,true,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1438166435;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1438277673;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1442949849;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1443636308;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1457705056;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1458754760;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1467051782;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1467290306;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1468415682;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1476136811;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1476909116;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1477860027;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1495868221;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1496280344;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> @Nullable 	public List<String> getFileExtensions();1496837955;Return the file extensions to use for suffix pattern matching.;@Nullable_	public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;nullable,public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> @Nullable 	public List<String> getFileExtensions();1498780456;Return the file extensions to use for suffix pattern matching.;@Nullable_	public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;nullable,public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> @Nullable 	public List<String> getFileExtensions();1502974979;Return the file extensions to use for suffix pattern matching.;@Nullable_	public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;nullable,public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> @Nullable 	public List<String> getFileExtensions();1528409922;Return the file extensions to use for suffix pattern matching.;@Nullable_	public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;nullable,public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> @Nullable 	public List<String> getFileExtensions();1528486327;Return the file extensions to use for suffix pattern matching.;@Nullable_	public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;nullable,public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> @Nullable 	public List<String> getFileExtensions();1529028713;Return the file extensions to use for suffix pattern matching.;@Nullable_	public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;nullable,public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> @Nullable 	public List<String> getFileExtensions();1532520962;Return the file extensions to use for suffix pattern matching.;@Nullable_	public List<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;nullable,public,list,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1328020251;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1335774711;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1336681154;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1337102166;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1340380546;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1340674210;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1354836692;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1354878381;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1356735495;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1362408075;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1380750451;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1389727699;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1392410324;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1399404473;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1427983931;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1429513478;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1429886024;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1429888980;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1432856630;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1433089072;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1433089252;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1434208198;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1434234880;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1436539370;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1438166435;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1438277673;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1442949849;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1443636308;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1457705056;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1458754760;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1467051782;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1467290306;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1468415682;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1476136811;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1476909116;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomMethodCondition(Method method);1477860027;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1362408075;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i=0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1380750451;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i=0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1389727699;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i=0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1392410324;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1399404473;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1427983931;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1429513478;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1429886024;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1429888980;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1430734106;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1432856630;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1433089072;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1433089252;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1433166486;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1433511178;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1434208198;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1434234880;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1436539370;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1438166435;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1438277673;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1442949849;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1443636308;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1457705056;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1458754760;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1467051782;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1467290306;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1468415682;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1476136811;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1476909116;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1477860027;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1495868221;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1496280344;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1496837955;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1498780456;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1502974979;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1528409922;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1528486327;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1529028713;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1532520962;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1432856630;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1433089072;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1433089252;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1433166486;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1433511178;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1434208198;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1434234880;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping, 			RequestCondition<?> customCondition);1436539370;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,_			RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1328020251;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._@param method the handler method for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1335774711;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1336681154;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1337102166;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1340380546;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1340674210;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1354836692;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1354878381;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1356735495;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1362408075;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1380750451;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1389727699;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared.__<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions.__@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1392410324;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1399404473;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1427983931;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1429513478;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1429886024;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1429888980;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1432856630;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1433089072;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1433089252;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1434208198;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1434234880;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1436539370;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1438166435;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1438277673;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1442949849;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1443636308;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1457705056;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1458754760;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1467051782;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1467290306;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1468415682;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1476136811;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1476909116;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1477860027;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1328020251;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return AnnotationUtils.findAnnotation(beanType, Controller.class) != null__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1335774711;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return AnnotationUtils.findAnnotation(beanType, Controller.class) != null__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1336681154;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1337102166;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1340380546;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1340674210;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1354836692;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1354878381;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1356735495;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1362408075;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1380750451;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1389727699;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1392410324;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1399404473;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1427983931;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1429513478;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1429886024;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1429888980;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1430734106;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1432856630;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1433089072;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1433089252;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1433166486;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1433511178;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1434208198;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1434234880;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1436539370;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1438166435;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1438277673;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1442949849;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1443636308;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1457705056;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||_				(AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotation,utils,find,annotation,bean,type,controller,class,null,annotation,utils,find,annotation,bean,type,request,mapping,class,null
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1458754760;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1467051782;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1467290306;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1468415682;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1476136811;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1476909116;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1477860027;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1495868221;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1496280344;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1496837955;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1498780456;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1502974979;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1528409922;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1528486327;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1529028713;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1532520962;{@inheritDoc}_<p>Expects a handler to have either a type-level @{@link Controller}_annotation or a type-level @{@link RequestMapping} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,p,expects,a,handler,to,have,either,a,type,level,link,controller,annotation,or,a,type,level,link,request,mapping,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	@Nullable 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1502974979;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	@Nullable_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,nullable,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	@Nullable 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1528409922;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	@Nullable_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_			for (Map.Entry<String, HandlerTypePredicate> entry : this.pathPrefixes.entrySet()) {_				if (entry.getValue().test(handlerType)) {_					String prefix = entry.getKey()__					if (this.embeddedValueResolver != null) {_						prefix = this.embeddedValueResolver.resolveStringValue(prefix)__					}_					info = RequestMappingInfo.paths(prefix).build().combine(info)__					break__				}_			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,nullable,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,for,map,entry,string,handler,type,predicate,entry,this,path,prefixes,entry,set,if,entry,get,value,test,handler,type,string,prefix,entry,get,key,if,this,embedded,value,resolver,null,prefix,this,embedded,value,resolver,resolve,string,value,prefix,info,request,mapping,info,paths,prefix,build,combine,info,break,return,info
RequestMappingHandlerMapping -> @Override 	@Nullable 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1528486327;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	@Nullable_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_			for (Map.Entry<String, Predicate<Class<?>>> entry : this.pathPrefixes.entrySet()) {_				if (entry.getValue().test(handlerType)) {_					String prefix = entry.getKey()__					if (this.embeddedValueResolver != null) {_						prefix = this.embeddedValueResolver.resolveStringValue(prefix)__					}_					info = RequestMappingInfo.paths(prefix).build().combine(info)__					break__				}_			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,nullable,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,for,map,entry,string,predicate,class,entry,this,path,prefixes,entry,set,if,entry,get,value,test,handler,type,string,prefix,entry,get,key,if,this,embedded,value,resolver,null,prefix,this,embedded,value,resolver,resolve,string,value,prefix,info,request,mapping,info,paths,prefix,build,combine,info,break,return,info
RequestMappingHandlerMapping -> @Override 	@Nullable 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1529028713;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	@Nullable_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_			String prefix = getPathPrefix(handlerType)__			if (prefix != null) {_				info = RequestMappingInfo.paths(prefix).build().combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,nullable,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,string,prefix,get,path,prefix,handler,type,if,prefix,null,info,request,mapping,info,paths,prefix,build,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	@Nullable 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1532520962;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	@Nullable_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_			String prefix = getPathPrefix(handlerType)__			if (prefix != null) {_				info = RequestMappingInfo.paths(prefix).build().combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,nullable,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,string,prefix,get,path,prefix,handler,type,if,prefix,null,info,request,mapping,info,paths,prefix,build,combine,info,return,info
RequestMappingHandlerMapping -> public Map<String, Predicate<Class<?>>> getPathPrefixes();1528486327;The configured path prefixes as a read-only, possibly empty map._@since 5.1;public Map<String, Predicate<Class<?>>> getPathPrefixes() {_		return Collections.unmodifiableMap(this.pathPrefixes)__	};the,configured,path,prefixes,as,a,read,only,possibly,empty,map,since,5,1;public,map,string,predicate,class,get,path,prefixes,return,collections,unmodifiable,map,this,path,prefixes
RequestMappingHandlerMapping -> public Map<String, Predicate<Class<?>>> getPathPrefixes();1529028713;The configured path prefixes as a read-only, possibly empty map._@since 5.1;public Map<String, Predicate<Class<?>>> getPathPrefixes() {_		return this.pathPrefixes__	};the,configured,path,prefixes,as,a,read,only,possibly,empty,map,since,5,1;public,map,string,predicate,class,get,path,prefixes,return,this,path,prefixes
RequestMappingHandlerMapping -> public Map<String, Predicate<Class<?>>> getPathPrefixes();1532520962;The configured path prefixes as a read-only, possibly empty map._@since 5.1;public Map<String, Predicate<Class<?>>> getPathPrefixes() {_		return this.pathPrefixes__	};the,configured,path,prefixes,as,a,read,only,possibly,empty,map,since,5,1;public,map,string,predicate,class,get,path,prefixes,return,this,path,prefixes
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1389727699;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests.__<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json").__<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = useRegisteredSuffixPatternMatch ? true : this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,true,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1392410324;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1399404473;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1427983931;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1429513478;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1429886024;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1429888980;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1430734106;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1432856630;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1433089072;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1433089252;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1433166486;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1433511178;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1434208198;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1434234880;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1436539370;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1438166435;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1438277673;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1442949849;Whether to use suffix pattern match for registered file extensions only_when matching patterns to requests._<p>If enabled, a controller method mapped to "/users" also matches to_"/users.json" assuming ".json" is a file extension registered with the_provided {@link #setContentNegotiationManager(ContentNegotiationManager)_contentNegotiationManager}. This can be useful for allowing only specific_URL extensions to be used as well as in cases where a "." in the URL path_can lead to ambiguous interpretation of path variable content, (e.g. given_"/users/{user}" and incoming URLs such as "/users/john.j.joe" and_"/users/john.j.joe.json")._<p>If enabled, this flag also enables_{@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The_default value is {@code false}.;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,to,use,suffix,pattern,match,for,registered,file,extensions,only,when,matching,patterns,to,requests,p,if,enabled,a,controller,method,mapped,to,users,also,matches,to,users,json,assuming,json,is,a,file,extension,registered,with,the,provided,link,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,can,be,useful,for,allowing,only,specific,url,extensions,to,be,used,as,well,as,in,cases,where,a,in,the,url,path,can,lead,to,ambiguous,interpretation,of,path,variable,content,e,g,given,users,user,and,incoming,urls,such,as,users,john,j,joe,and,users,john,j,joe,json,p,if,enabled,this,flag,also,enables,link,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,the,default,value,is,code,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1443636308;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1457705056;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1458754760;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1467051782;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1467290306;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1468415682;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1476136811;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1476909116;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1477860027;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1495868221;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1496280344;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1496837955;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1498780456;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1502974979;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1528409922;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1528486327;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1529028713;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1532520962;Whether suffix pattern matching should work only against path extensions_explicitly registered with the {@link ContentNegotiationManager}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "false".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,link,content,negotiation,manager,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,false;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1340380546;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1340674210;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager)__		this.contentNegotiationManager = contentNegotiationManager__		this.contentNegotiationFileExtensions.addAll(contentNegotiationManager.getAllFileExtensions())__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,file,extensions,add,all,content,negotiation,manager,get,all,file,extensions
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1354836692;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager)__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1354878381;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager)__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1356735495;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager)__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1362408075;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager)__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1380750451;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager)__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1389727699;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager)__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1392410324;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1399404473;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1427983931;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1429513478;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1429886024;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1429888980;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1430734106;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1432856630;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1433089072;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1433089252;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1433166486;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1433511178;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1434208198;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1434234880;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1436539370;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1438166435;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1438277673;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1442949849;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1443636308;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1457705056;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1458754760;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1467051782;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1467290306;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1468415682;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1476136811;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1476909116;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1477860027;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1495868221;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1496280344;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1496837955;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1498780456;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1502974979;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1528409922;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1528486327;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1529028713;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1532520962;Set the {@link ContentNegotiationManager} to use to determine requested media types._If not set, the default constructor is used.;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		Assert.notNull(contentNegotiationManager, "ContentNegotiationManager must not be null")__		this.contentNegotiationManager = contentNegotiationManager__	};set,the,link,content,negotiation,manager,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,assert,not,null,content,negotiation,manager,content,negotiation,manager,must,not,be,null,this,content,negotiation,manager,content,negotiation,manager
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1328020251;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1335774711;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1336681154;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1337102166;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1340380546;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1340674210;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1354836692;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1354878381;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1356735495;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1362408075;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1380750451;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1389727699;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo.__@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation.__@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1392410324;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1399404473;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1427983931;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1429513478;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = null__		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class)__		if (methodAnnotation != null) {_			RequestCondition<?> methodCondition = getCustomMethodCondition(method)__			info = createRequestMappingInfo(methodAnnotation, methodCondition)__			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)__			if (typeAnnotation != null) {_				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType)__				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,null,request,mapping,method,annotation,annotation,utils,find,annotation,method,request,mapping,class,if,method,annotation,null,request,condition,method,condition,get,custom,method,condition,method,info,create,request,mapping,info,method,annotation,method,condition,request,mapping,type,annotation,annotation,utils,find,annotation,handler,type,request,mapping,class,if,type,annotation,null,request,condition,type,condition,get,custom,type,condition,handler,type,info,create,request,mapping,info,type,annotation,type,condition,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1429886024;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1429888980;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1430734106;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1432856630;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1433089072;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1433089252;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1433166486;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1433511178;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1434208198;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1434234880;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1436539370;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1438166435;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1438277673;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1442949849;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1443636308;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1457705056;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1458754760;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1467051782;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1467290306;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1468415682;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1476136811;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1476909116;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1477860027;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1495868221;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1496280344;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1496837955;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1498780456;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @SuppressWarnings("unused") 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1430734106;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("unused")_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("unused") 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1433166486;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("unused")_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("unused") 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1433511178;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending {@link AbstractRequestCondition} for custom_condition types and using {@link CompositeRequestCondition} to provide_multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("unused")_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,abstract,request,condition,for,custom,condition,types,and,using,link,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(AnnotationAttributes attributes, 			RequestCondition<?> customCondition);1429886024;Create a RequestMappingInfo from the attributes of an_{@code @RequestMapping} annotation or a meta-annotation, i.e. a custom_annotation annotated with {@code @RequestMapping}._@since 4.2;protected RequestMappingInfo createRequestMappingInfo(AnnotationAttributes attributes,_			RequestCondition<?> customCondition) {__		String mappingName = attributes.getString("name")___		String[] paths = attributes.getStringArray("path")__		paths = ObjectUtils.isEmpty(paths) ? attributes.getStringArray("value") : paths__		PatternsRequestCondition patternsCondition = new PatternsRequestCondition(_				resolveEmbeddedValuesInPatterns(paths), getUrlPathHelper(), getPathMatcher(),_				this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions)___		RequestMethod[] methods = (RequestMethod[]) attributes.get("method")__		RequestMethodsRequestCondition methodsCondition = new RequestMethodsRequestCondition(methods)___		String[] params = attributes.getStringArray("params")__		ParamsRequestCondition paramsCondition = new ParamsRequestCondition(params)___		String[] headers = attributes.getStringArray("headers")__		String[] consumes = attributes.getStringArray("consumes")__		String[] produces = attributes.getStringArray("produces")___		HeadersRequestCondition headersCondition = new HeadersRequestCondition(headers)__		ConsumesRequestCondition consumesCondition = new ConsumesRequestCondition(consumes, headers)__		ProducesRequestCondition producesCondition = new ProducesRequestCondition(produces,_				headers, this.contentNegotiationManager)___		return new RequestMappingInfo(mappingName, patternsCondition, methodsCondition, paramsCondition,_				headersCondition, consumesCondition, producesCondition, customCondition)__	};create,a,request,mapping,info,from,the,attributes,of,an,code,request,mapping,annotation,or,a,meta,annotation,i,e,a,custom,annotation,annotated,with,code,request,mapping,since,4,2;protected,request,mapping,info,create,request,mapping,info,annotation,attributes,attributes,request,condition,custom,condition,string,mapping,name,attributes,get,string,name,string,paths,attributes,get,string,array,path,paths,object,utils,is,empty,paths,attributes,get,string,array,value,paths,patterns,request,condition,patterns,condition,new,patterns,request,condition,resolve,embedded,values,in,patterns,paths,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,request,method,methods,request,method,attributes,get,method,request,methods,request,condition,methods,condition,new,request,methods,request,condition,methods,string,params,attributes,get,string,array,params,params,request,condition,params,condition,new,params,request,condition,params,string,headers,attributes,get,string,array,headers,string,consumes,attributes,get,string,array,consumes,string,produces,attributes,get,string,array,produces,headers,request,condition,headers,condition,new,headers,request,condition,headers,consumes,request,condition,consumes,condition,new,consumes,request,condition,consumes,headers,produces,request,condition,produces,condition,new,produces,request,condition,produces,headers,this,content,negotiation,manager,return,new,request,mapping,info,mapping,name,patterns,condition,methods,condition,params,condition,headers,condition,consumes,condition,produces,condition,custom,condition
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(AnnotationAttributes attributes, 			RequestCondition<?> customCondition);1429888980;Create a RequestMappingInfo from the attributes of an_{@code @RequestMapping} annotation or a meta-annotation, i.e. a custom_annotation annotated with {@code @RequestMapping}._@since 4.2;protected RequestMappingInfo createRequestMappingInfo(AnnotationAttributes attributes,_			RequestCondition<?> customCondition) {__		String mappingName = attributes.getString("name")___		String[] paths = attributes.getStringArray("path")__		paths = ObjectUtils.isEmpty(paths) ? attributes.getStringArray("value") : paths__		PatternsRequestCondition patternsCondition = new PatternsRequestCondition(_				resolveEmbeddedValuesInPatterns(paths), getUrlPathHelper(), getPathMatcher(),_				this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions)___		RequestMethod[] methods = (RequestMethod[]) attributes.get("method")__		RequestMethodsRequestCondition methodsCondition = new RequestMethodsRequestCondition(methods)___		String[] params = attributes.getStringArray("params")__		ParamsRequestCondition paramsCondition = new ParamsRequestCondition(params)___		String[] headers = attributes.getStringArray("headers")__		String[] consumes = attributes.getStringArray("consumes")__		String[] produces = attributes.getStringArray("produces")___		HeadersRequestCondition headersCondition = new HeadersRequestCondition(headers)__		ConsumesRequestCondition consumesCondition = new ConsumesRequestCondition(consumes, headers)__		ProducesRequestCondition producesCondition = new ProducesRequestCondition(produces,_				headers, this.contentNegotiationManager)___		return new RequestMappingInfo(mappingName, patternsCondition, methodsCondition, paramsCondition,_				headersCondition, consumesCondition, producesCondition, customCondition)__	};create,a,request,mapping,info,from,the,attributes,of,an,code,request,mapping,annotation,or,a,meta,annotation,i,e,a,custom,annotation,annotated,with,code,request,mapping,since,4,2;protected,request,mapping,info,create,request,mapping,info,annotation,attributes,attributes,request,condition,custom,condition,string,mapping,name,attributes,get,string,name,string,paths,attributes,get,string,array,path,paths,object,utils,is,empty,paths,attributes,get,string,array,value,paths,patterns,request,condition,patterns,condition,new,patterns,request,condition,resolve,embedded,values,in,patterns,paths,get,url,path,helper,get,path,matcher,this,use,suffix,pattern,match,this,use,trailing,slash,match,this,file,extensions,request,method,methods,request,method,attributes,get,method,request,methods,request,condition,methods,condition,new,request,methods,request,condition,methods,string,params,attributes,get,string,array,params,params,request,condition,params,condition,new,params,request,condition,params,string,headers,attributes,get,string,array,headers,string,consumes,attributes,get,string,array,consumes,string,produces,attributes,get,string,array,produces,headers,request,condition,headers,condition,new,headers,request,condition,headers,consumes,request,condition,consumes,condition,new,consumes,request,condition,consumes,headers,produces,request,condition,produces,condition,new,produces,request,condition,produces,headers,this,content,negotiation,manager,return,new,request,mapping,info,mapping,name,patterns,condition,methods,condition,params,condition,headers,condition,consumes,condition,produces,condition,custom,condition
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo(AnnotationAttributes attributes, 			RequestCondition<?> customCondition);1430734106;Create a RequestMappingInfo from the attributes of an_{@code @RequestMapping} annotation or a meta-annotation, i.e. a custom_annotation annotated with {@code @RequestMapping}._@since 4.2;protected RequestMappingInfo createRequestMappingInfo(AnnotationAttributes attributes,_			RequestCondition<?> customCondition) {__		String[] paths = attributes.getStringArray("path")__		paths = ObjectUtils.isEmpty(paths) ? attributes.getStringArray("value") : paths__		paths = resolveEmbeddedValuesInPatterns(paths)___		return RequestMappingInfo.paths(paths)_				.methods((RequestMethod[]) attributes.get("method"))_				.params(attributes.getStringArray("params"))_				.headers(attributes.getStringArray("headers"))_				.consumes(attributes.getStringArray("consumes"))_				.produces(attributes.getStringArray("produces"))_				.mappingName(attributes.getString("name"))_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,request,mapping,info,from,the,attributes,of,an,code,request,mapping,annotation,or,a,meta,annotation,i,e,a,custom,annotation,annotated,with,code,request,mapping,since,4,2;protected,request,mapping,info,create,request,mapping,info,annotation,attributes,attributes,request,condition,custom,condition,string,paths,attributes,get,string,array,path,paths,object,utils,is,empty,paths,attributes,get,string,array,value,paths,paths,resolve,embedded,values,in,patterns,paths,return,request,mapping,info,paths,paths,methods,request,method,attributes,get,method,params,attributes,get,string,array,params,headers,attributes,get,string,array,headers,consumes,attributes,get,string,array,consumes,produces,attributes,get,string,array,produces,mapping,name,attributes,get,string,name,custom,condition,custom,condition,options,this,config,build
