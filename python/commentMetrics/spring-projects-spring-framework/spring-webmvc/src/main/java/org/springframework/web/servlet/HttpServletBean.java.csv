commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;1;3;/**  * Subclasses can invoke this method to specify that this property  * (which must match a JavaBean property they expose) is mandatory,  * and must be supplied as a config parameter. This should be called  * from the constructor of a subclass.  * <p>This method is only relevant in case of traditional initialization  * driven by a ServletConfig instance.  * @param property name of the required property  */ ;/**  * Subclasses can invoke this method to specify that this property  * (which must match a JavaBean property they expose) is mandatory,  * and must be supplied as a config parameter. This should be called  * from the constructor of a subclass.  * <p>This method is only relevant in case of traditional initialization  * driven by a ServletConfig instance.  * @param property name of the required property  */ protected final void addRequiredProperty(String property) {     this.requiredProperties.add(property). }
true;public;1;5;/**  * Set the {@code Environment} that this servlet runs in.  * <p>Any environment set here overrides the {@link StandardServletEnvironment}  * provided by default.  * @throws IllegalArgumentException if environment is not assignable to  * {@code ConfigurableEnvironment}  */ ;/**  * Set the {@code Environment} that this servlet runs in.  * <p>Any environment set here overrides the {@link StandardServletEnvironment}  * provided by default.  * @throws IllegalArgumentException if environment is not assignable to  * {@code ConfigurableEnvironment}  */ @Override public void setEnvironment(Environment environment) {     Assert.isInstanceOf(ConfigurableEnvironment.class, environment, "ConfigurableEnvironment required").     this.environment = (ConfigurableEnvironment) environment. }
true;public;0;7;/**  * Return the {@link Environment} associated with this servlet.  * <p>If none specified, a default environment will be initialized via  * {@link #createEnvironment()}.  */ ;/**  * Return the {@link Environment} associated with this servlet.  * <p>If none specified, a default environment will be initialized via  * {@link #createEnvironment()}.  */ @Override public ConfigurableEnvironment getEnvironment() {     if (this.environment == null) {         this.environment = createEnvironment().     }     return this.environment. }
true;protected;0;3;/**  * Create and return a new {@link StandardServletEnvironment}.  * <p>Subclasses may override this in order to configure the environment or  * specialize the environment type returned.  */ ;/**  * Create and return a new {@link StandardServletEnvironment}.  * <p>Subclasses may override this in order to configure the environment or  * specialize the environment type returned.  */ protected ConfigurableEnvironment createEnvironment() {     return new StandardServletEnvironment(). }
true;public,final;0;24;/**  * Map config parameters onto bean properties of this servlet, and  * invoke subclass initialization.  * @throws ServletException if bean properties are invalid (or required  * properties are missing), or if subclass initialization fails.  */ ;/**  * Map config parameters onto bean properties of this servlet, and  * invoke subclass initialization.  * @throws ServletException if bean properties are invalid (or required  * properties are missing), or if subclass initialization fails.  */ @Override public final void init() throws ServletException {     // Set bean properties from init parameters.     PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties).     if (!pvs.isEmpty()) {         try {             BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this).             ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext()).             bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment())).             initBeanWrapper(bw).             bw.setPropertyValues(pvs, true).         } catch (BeansException ex) {             if (logger.isErrorEnabled()) {                 logger.error("Failed to set bean properties on servlet '" + getServletName() + "'", ex).             }             throw ex.         }     }     // Let subclasses do whatever initialization they like.     initServletBean(). }
true;protected;1;2;/**  * Initialize the BeanWrapper for this HttpServletBean,  * possibly with custom editors.  * <p>This default implementation is empty.  * @param bw the BeanWrapper to initialize  * @throws BeansException if thrown by BeanWrapper methods  * @see org.springframework.beans.BeanWrapper#registerCustomEditor  */ ;/**  * Initialize the BeanWrapper for this HttpServletBean,  * possibly with custom editors.  * <p>This default implementation is empty.  * @param bw the BeanWrapper to initialize  * @throws BeansException if thrown by BeanWrapper methods  * @see org.springframework.beans.BeanWrapper#registerCustomEditor  */ protected void initBeanWrapper(BeanWrapper bw) throws BeansException { }
true;protected;0;2;/**  * Subclasses may override this to perform custom initialization.  * All bean properties of this servlet will have been set before this  * method is invoked.  * <p>This default implementation is empty.  * @throws ServletException if subclass initialization fails  */ ;/**  * Subclasses may override this to perform custom initialization.  * All bean properties of this servlet will have been set before this  * method is invoked.  * <p>This default implementation is empty.  * @throws ServletException if subclass initialization fails  */ protected void initServletBean() throws ServletException { }
true;public;0;5;/**  * Overridden method that simply returns {@code null} when no  * ServletConfig set yet.  * @see #getServletConfig()  */ ;/**  * Overridden method that simply returns {@code null} when no  * ServletConfig set yet.  * @see #getServletConfig()  */ @Override @Nullable public String getServletName() {     return (getServletConfig() != null ? getServletConfig().getServletName() : null). }
