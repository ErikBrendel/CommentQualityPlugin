commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the value of the '{@code size}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code size}' attribute.  * May be a runtime expression.  */ public void setSize(String size) {     this.size = size. }
true;protected;0;4;/**  * Get the value of the '{@code size}' attribute.  */ ;/**  * Get the value of the '{@code size}' attribute.  */ @Nullable protected String getSize() {     return this.size. }
true;public;1;3;/**  * Set the value of the '{@code maxlength}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code maxlength}' attribute.  * May be a runtime expression.  */ public void setMaxlength(String maxlength) {     this.maxlength = maxlength. }
true;protected;0;4;/**  * Get the value of the '{@code maxlength}' attribute.  */ ;/**  * Get the value of the '{@code maxlength}' attribute.  */ @Nullable protected String getMaxlength() {     return this.maxlength. }
true;public;1;3;/**  * Set the value of the '{@code alt}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code alt}' attribute.  * May be a runtime expression.  */ public void setAlt(String alt) {     this.alt = alt. }
true;protected;0;4;/**  * Get the value of the '{@code alt}' attribute.  */ ;/**  * Get the value of the '{@code alt}' attribute.  */ @Nullable protected String getAlt() {     return this.alt. }
true;public;1;3;/**  * Set the value of the '{@code onselect}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onselect}' attribute.  * May be a runtime expression.  */ public void setOnselect(String onselect) {     this.onselect = onselect. }
true;protected;0;4;/**  * Get the value of the '{@code onselect}' attribute.  */ ;/**  * Get the value of the '{@code onselect}' attribute.  */ @Nullable protected String getOnselect() {     return this.onselect. }
true;public;1;3;/**  * Set the value of the '{@code autocomplete}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code autocomplete}' attribute.  * May be a runtime expression.  */ public void setAutocomplete(String autocomplete) {     this.autocomplete = autocomplete. }
true;protected;0;4;/**  * Get the value of the '{@code autocomplete}' attribute.  */ ;/**  * Get the value of the '{@code autocomplete}' attribute.  */ @Nullable protected String getAutocomplete() {     return this.autocomplete. }
true;protected;1;21;/**  * Writes the '{@code input}' tag to the supplied {@link TagWriter}.  * Uses the value returned by {@link #getType()} to determine which  * type of '{@code input}' element to render.  */ ;/**  * Writes the '{@code input}' tag to the supplied {@link TagWriter}.  * Uses the value returned by {@link #getType()} to determine which  * type of '{@code input}' element to render.  */ @Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     tagWriter.startTag("input").     writeDefaultAttributes(tagWriter).     Map<String, Object> attributes = getDynamicAttributes().     if (attributes == null || !attributes.containsKey("type")) {         tagWriter.writeAttribute("type", getType()).     }     writeValue(tagWriter).     // custom optional attributes     writeOptionalAttribute(tagWriter, SIZE_ATTRIBUTE, getSize()).     writeOptionalAttribute(tagWriter, MAXLENGTH_ATTRIBUTE, getMaxlength()).     writeOptionalAttribute(tagWriter, ALT_ATTRIBUTE, getAlt()).     writeOptionalAttribute(tagWriter, ONSELECT_ATTRIBUTE, getOnselect()).     writeOptionalAttribute(tagWriter, AUTOCOMPLETE_ATTRIBUTE, getAutocomplete()).     tagWriter.endTag().     return SKIP_BODY. }
true;protected;1;12;/**  * Writes the '{@code value}' attribute to the supplied {@link TagWriter}.  * Subclasses may choose to override this implementation to control exactly  * when the value is written.  */ ;/**  * Writes the '{@code value}' attribute to the supplied {@link TagWriter}.  * Subclasses may choose to override this implementation to control exactly  * when the value is written.  */ protected void writeValue(TagWriter tagWriter) throws JspException {     String value = getDisplayString(getBoundValue(), getPropertyEditor()).     String type = null.     Map<String, Object> attributes = getDynamicAttributes().     if (attributes != null) {         type = (String) attributes.get("type").     }     if (type == null) {         type = getType().     }     tagWriter.writeAttribute("value", processFieldValue(getName(), value, type)). }
true;protected;2;4;/**  * Flags {@code type="checkbox"} and {@code type="radio"} as illegal  * dynamic attributes.  */ ;/**  * Flags {@code type="checkbox"} and {@code type="radio"} as illegal  * dynamic attributes.  */ @Override protected boolean isValidDynamicAttribute(String localName, Object value) {     return !("type".equals(localName) && ("checkbox".equals(value) || "radio".equals(value))). }
true;protected;0;3;/**  * Get the value of the '{@code type}' attribute. Subclasses  * can override this to change the type of '{@code input}' element  * rendered. Default value is '{@code text}'.  */ ;/**  * Get the value of the '{@code type}' attribute. Subclasses  * can override this to change the type of '{@code input}' element  * rendered. Default value is '{@code text}'.  */ protected String getType() {     return "text". }
