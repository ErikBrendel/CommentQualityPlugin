commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {     this.requestInterceptor.preHandle(new DispatcherServletWebRequest(request, response)).     return true. }
false;public;4;7;;@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {     this.requestInterceptor.postHandle(new DispatcherServletWebRequest(request, response), (modelAndView != null && !modelAndView.wasCleared() ? modelAndView.getModelMap() : null)). }
false;public;4;6;;@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {     this.requestInterceptor.afterCompletion(new DispatcherServletWebRequest(request, response), ex). }
false;public;3;8;;@Override public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) {     if (this.requestInterceptor instanceof AsyncWebRequestInterceptor) {         AsyncWebRequestInterceptor asyncInterceptor = (AsyncWebRequestInterceptor) this.requestInterceptor.         DispatcherServletWebRequest webRequest = new DispatcherServletWebRequest(request, response).         asyncInterceptor.afterConcurrentHandlingStarted(webRequest).     } }
