# id;timestamp;commentText;codeText;commentWords;codeWords
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1495868221;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1496837955;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1497546719;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1498500776;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1498780456;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1511215342;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1520528267;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1529361191;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1529948549;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1530174524;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1530174524;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1530294255;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric()__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1530304568;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric()__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1531321803;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric()__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,log,executor,warning,return,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1532520919;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric()__		Class<?> elementClass = elementType.toClass()___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,class,element,class,element,type,to,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,log,executor,warning,return,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1533034998;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, () -> "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric()__		Class<?> elementClass = elementType.toClass()___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,class,element,class,element,type,to,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,log,executor,warning,return,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> @Nullable 	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1533074239;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming, or {@code null} if handled internally_with a {@link DeferredResult};@Nullable_	public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, () -> "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric()__		Class<?> elementClass = elementType.toClass()___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				SseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE)__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				logExecutorWarning(returnType)__				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;nullable,public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,class,element,class,element,type,to,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,log,executor,warning,return,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,log,executor,warning,return,type,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1491224509;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1491319360;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1491330227;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1491497689;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1491497689;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1491501709;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1492694378;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1493136239;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1493138833;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1495569915;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1495868221;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1496837955;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1497546719;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1498500776;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1498780456;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1511215342;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1520528267;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1529361191;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1529948549;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1530174524;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1530174524;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1530294255;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1530304568;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1531321803;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1532520919;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1533034998;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public boolean isReactiveType(Class<?> type);1533074239;Whether the type can be adapted to a Reactive Streams {@link Publisher}.;public boolean isReactiveType(Class<?> type) {_		return (this.reactiveRegistry.hasAdapters() && this.reactiveRegistry.getAdapter(type) != null)__	};whether,the,type,can,be,adapted,to,a,reactive,streams,link,publisher;public,boolean,is,reactive,type,class,type,return,this,reactive,registry,has,adapters,this,reactive,registry,get,adapter,type,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1491224509;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		Class<?> elementType = returnType.nested().getNestedParameterType()__		_		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()__		boolean jsonArrayOfStrings = isJsonArrayOfStrings(elementType, mediaType)___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementType)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementType) && !jsonArrayOfStrings) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, jsonArrayOfStrings).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,class,element,type,return,type,nested,get,nested,parameter,type,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,boolean,json,array,of,strings,is,json,array,of,strings,element,type,media,type,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,type,json,array,of,strings,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,json,array,of,strings,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1491319360;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		Class<?> elementType = returnType.nested().getNestedParameterType()__		_		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()__		boolean jsonArrayOfStrings = isJsonArrayOfStrings(elementType, mediaType)___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementType)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementType) && !jsonArrayOfStrings) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, jsonArrayOfStrings).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,class,element,type,return,type,nested,get,nested,parameter,type,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,boolean,json,array,of,strings,is,json,array,of,strings,element,type,media,type,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,type,json,array,of,strings,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,json,array,of,strings,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1491330227;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		Class<?> elementType = returnType.nested().getNestedParameterType()__		_		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()__		boolean jsonArrayOfStrings = isJsonArrayOfStrings(elementType, mediaType)___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementType)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementType) && !jsonArrayOfStrings) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, jsonArrayOfStrings).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,class,element,type,return,type,nested,get,nested,parameter,type,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,boolean,json,array,of,strings,is,json,array,of,strings,element,type,media,type,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,type,json,array,of,strings,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,json,array,of,strings,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1491497689;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		Class<?> elementType = returnType.nested().getNestedParameterType()__		_		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()__		boolean jsonArrayOfStrings = isJsonArrayOfStrings(elementType, mediaType)___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementType)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementType) && !jsonArrayOfStrings) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, jsonArrayOfStrings).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,class,element,type,return,type,nested,get,nested,parameter,type,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,boolean,json,array,of,strings,is,json,array,of,strings,element,type,media,type,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,type,json,array,of,strings,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,json,array,of,strings,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1491497689;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		Class<?> elementType = returnType.nested().getNestedParameterType()__		_		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()__		boolean jsonArrayOfStrings = isJsonArrayOfStrings(elementType, mediaType)___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementType)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementType) && !jsonArrayOfStrings) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, jsonArrayOfStrings).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,class,element,type,return,type,nested,get,nested,parameter,type,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,boolean,json,array,of,strings,is,json,array,of,strings,element,type,media,type,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,type,json,array,of,strings,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,json,array,of,strings,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1491501709;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		Class<?> elementType = returnType.nested().getNestedParameterType()__		_		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()__		boolean jsonArrayOfStrings = isJsonArrayOfStrings(elementType, mediaType)___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementType)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementType) && !jsonArrayOfStrings) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, jsonArrayOfStrings).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,class,element,type,return,type,nested,get,nested,parameter,type,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,boolean,json,array,of,strings,is,json,array,of,strings,element,type,media,type,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,type,json,array,of,strings,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,json,array,of,strings,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1492694378;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		Class<?> elementType = returnType.nested().getNestedParameterType()__		_		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementType)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementType) && !isJsonStringArray(elementType, mediaType)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,class,element,type,return,type,nested,get,nested,parameter,type,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,type,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,type,is,json,string,array,element,type,media,type,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1493136239;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass) && !isJsonStringArray(elementClass, mediaType)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,is,json,string,array,element,class,media,type,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1493138833;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}.__@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
ReactiveTypeHandler -> public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mav, NativeWebRequest request) throws Exception;1495569915;Process the given reactive return value and decide whether to adapt it_to a {@link ResponseBodyEmitter} or a {@link DeferredResult}._@return an emitter for streaming or {@code null} if handled internally_with a {@link DeferredResult}.;public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mav, NativeWebRequest request) throws Exception {__		Assert.notNull(returnValue, "Expected return value")__		ReactiveAdapter adapter = this.reactiveRegistry.getAdapter(returnValue.getClass())__		Assert.state(adapter != null, "Unexpected return value: " + returnValue)___		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0)__		Class<?> elementClass = elementType.resolve(Object.class)___		Collection<MediaType> mediaTypes = getMediaTypes(request)__		Optional<MediaType> mediaType = mediaTypes.stream().filter(MimeType::isConcrete).findFirst()___		if (adapter.isMultiValue()) {_			if (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||_					ServerSentEvent.class.isAssignableFrom(elementClass)) {_				SseEmitter emitter = new SseEmitter()__				new SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (CharSequence.class.isAssignableFrom(elementClass)) {_				ResponseBodyEmitter emitter = getEmitter(mediaType.orElse(MediaType.TEXT_PLAIN))__				new TextEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_			if (mediaTypes.stream().anyMatch(MediaType.APPLICATION_STREAM_JSON::includes)) {_				ResponseBodyEmitter emitter = getEmitter(MediaType.APPLICATION_STREAM_JSON)__				new JsonEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue)__				return emitter__			}_		}__		_		DeferredResult<Object> result = new DeferredResult<>()__		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue)__		WebAsyncUtils.getAsyncManager(request).startDeferredResultProcessing(result, mav)___		return null__	};process,the,given,reactive,return,value,and,decide,whether,to,adapt,it,to,a,link,response,body,emitter,or,a,link,deferred,result,return,an,emitter,for,streaming,or,code,null,if,handled,internally,with,a,link,deferred,result;public,response,body,emitter,handle,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,native,web,request,request,throws,exception,assert,not,null,return,value,expected,return,value,reactive,adapter,adapter,this,reactive,registry,get,adapter,return,value,get,class,assert,state,adapter,null,unexpected,return,value,return,value,resolvable,type,element,type,resolvable,type,for,method,parameter,return,type,get,generic,0,class,element,class,element,type,resolve,object,class,collection,media,type,media,types,get,media,types,request,optional,media,type,media,type,media,types,stream,filter,mime,type,is,concrete,find,first,if,adapter,is,multi,value,if,media,types,stream,any,match,media,type,includes,server,sent,event,class,is,assignable,from,element,class,sse,emitter,emitter,new,sse,emitter,new,sse,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,char,sequence,class,is,assignable,from,element,class,response,body,emitter,emitter,get,emitter,media,type,or,else,media,type,new,text,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,if,media,types,stream,any,match,media,type,includes,response,body,emitter,emitter,get,emitter,media,type,new,json,emitter,subscriber,emitter,this,task,executor,connect,adapter,return,value,return,emitter,deferred,result,object,result,new,deferred,result,new,deferred,result,subscriber,result,adapter,element,type,connect,adapter,return,value,web,async,utils,get,async,manager,request,start,deferred,result,processing,result,mav,return,null
