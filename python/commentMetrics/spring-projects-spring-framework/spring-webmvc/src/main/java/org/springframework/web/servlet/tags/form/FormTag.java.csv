commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the name of the form attribute in the model.  * <p>May be a runtime expression.  */ ;/**  * Set the name of the form attribute in the model.  * <p>May be a runtime expression.  */ public void setModelAttribute(String modelAttribute) {     this.modelAttribute = modelAttribute. }
true;protected;0;3;/**  * Get the name of the form attribute in the model.  */ ;/**  * Get the name of the form attribute in the model.  */ protected String getModelAttribute() {     return this.modelAttribute. }
true;public;1;3;/**  * Set the value of the '{@code name}' attribute.  * <p>May be a runtime expression.  * <p>Name is not a valid attribute for form on XHTML 1.0. However,  * it is sometimes needed for backward compatibility.  */ ;/**  * Set the value of the '{@code name}' attribute.  * <p>May be a runtime expression.  * <p>Name is not a valid attribute for form on XHTML 1.0. However,  * it is sometimes needed for backward compatibility.  */ public void setName(String name) {     this.name = name. }
true;protected;0;5;/**  * Get the value of the '{@code name}' attribute.  */ ;/**  * Get the value of the '{@code name}' attribute.  */ @Override @Nullable protected String getName() throws JspException {     return this.name. }
true;public;1;3;/**  * Set the value of the '{@code action}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Set the value of the '{@code action}' attribute.  * <p>May be a runtime expression.  */ public void setAction(@Nullable String action) {     this.action = (action != null ? action : ""). }
true;protected;0;4;/**  * Get the value of the '{@code action}' attribute.  */ ;/**  * Get the value of the '{@code action}' attribute.  */ @Nullable protected String getAction() {     return this.action. }
true;public;1;3;/**  * Set the value of the '{@code action}' attribute through a value  * that is to be appended to the current servlet path.  * <p>May be a runtime expression.  * @since 3.2.3  */ ;/**  * Set the value of the '{@code action}' attribute through a value  * that is to be appended to the current servlet path.  * <p>May be a runtime expression.  * @since 3.2.3  */ public void setServletRelativeAction(@Nullable String servletRelativeAction) {     this.servletRelativeAction = servletRelativeAction. }
true;protected;0;4;/**  * Get the servlet-relative value of the '{@code action}' attribute.  * @since 3.2.3  */ ;/**  * Get the servlet-relative value of the '{@code action}' attribute.  * @since 3.2.3  */ @Nullable protected String getServletRelativeAction() {     return this.servletRelativeAction. }
true;public;1;3;/**  * Set the value of the '{@code method}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Set the value of the '{@code method}' attribute.  * <p>May be a runtime expression.  */ public void setMethod(String method) {     this.method = method. }
true;protected;0;3;/**  * Get the value of the '{@code method}' attribute.  */ ;/**  * Get the value of the '{@code method}' attribute.  */ protected String getMethod() {     return this.method. }
true;public;1;3;/**  * Set the value of the '{@code target}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Set the value of the '{@code target}' attribute.  * <p>May be a runtime expression.  */ public void setTarget(String target) {     this.target = target. }
true;public;0;4;/**  * Get the value of the '{@code target}' attribute.  */ ;/**  * Get the value of the '{@code target}' attribute.  */ @Nullable public String getTarget() {     return this.target. }
true;public;1;3;/**  * Set the value of the '{@code enctype}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Set the value of the '{@code enctype}' attribute.  * <p>May be a runtime expression.  */ public void setEnctype(String enctype) {     this.enctype = enctype. }
true;protected;0;4;/**  * Get the value of the '{@code enctype}' attribute.  */ ;/**  * Get the value of the '{@code enctype}' attribute.  */ @Nullable protected String getEnctype() {     return this.enctype. }
true;public;1;3;/**  * Set the value of the '{@code acceptCharset}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Set the value of the '{@code acceptCharset}' attribute.  * <p>May be a runtime expression.  */ public void setAcceptCharset(String acceptCharset) {     this.acceptCharset = acceptCharset. }
true;protected;0;4;/**  * Get the value of the '{@code acceptCharset}' attribute.  */ ;/**  * Get the value of the '{@code acceptCharset}' attribute.  */ @Nullable protected String getAcceptCharset() {     return this.acceptCharset. }
true;public;1;3;/**  * Set the value of the '{@code onsubmit}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Set the value of the '{@code onsubmit}' attribute.  * <p>May be a runtime expression.  */ public void setOnsubmit(String onsubmit) {     this.onsubmit = onsubmit. }
true;protected;0;4;/**  * Get the value of the '{@code onsubmit}' attribute.  */ ;/**  * Get the value of the '{@code onsubmit}' attribute.  */ @Nullable protected String getOnsubmit() {     return this.onsubmit. }
true;public;1;3;/**  * Set the value of the '{@code onreset}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Set the value of the '{@code onreset}' attribute.  * <p>May be a runtime expression.  */ public void setOnreset(String onreset) {     this.onreset = onreset. }
true;protected;0;4;/**  * Get the value of the '{@code onreset}' attribute.  */ ;/**  * Get the value of the '{@code onreset}' attribute.  */ @Nullable protected String getOnreset() {     return this.onreset. }
true;public;1;3;/**  * Set the value of the '{@code autocomplete}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code autocomplete}' attribute.  * May be a runtime expression.  */ public void setAutocomplete(String autocomplete) {     this.autocomplete = autocomplete. }
true;protected;0;4;/**  * Get the value of the '{@code autocomplete}' attribute.  */ ;/**  * Get the value of the '{@code autocomplete}' attribute.  */ @Nullable protected String getAutocomplete() {     return this.autocomplete. }
true;public;1;3;/**  * Set the name of the request param for non-browser supported HTTP methods.  */ ;/**  * Set the name of the request param for non-browser supported HTTP methods.  */ public void setMethodParam(String methodParam) {     this.methodParam = methodParam. }
true;protected;0;3;/**  * Get the name of the request param for non-browser supported HTTP methods.  * @since 4.2.3  */ ;/**  * Get the name of the request param for non-browser supported HTTP methods.  * @since 4.2.3  */ protected String getMethodParam() {     return this.methodParam. }
true;protected;1;3;/**  * Determine if the HTTP method is supported by browsers (i.e. GET or POST).  */ ;/**  * Determine if the HTTP method is supported by browsers (i.e. GET or POST).  */ protected boolean isMethodBrowserSupported(String method) {     return ("get".equalsIgnoreCase(method) || "post".equalsIgnoreCase(method)). }
true;protected;1;41;/**  * Writes the opening part of the block	'{@code form}' tag and exposes  * the form object name in the {@link javax.servlet.jsp.PageContext}.  * @param tagWriter the {@link TagWriter} to which the form content is to be written  * @return {@link javax.servlet.jsp.tagext.Tag#EVAL_BODY_INCLUDE}  */ ;/**  * Writes the opening part of the block	'{@code form}' tag and exposes  * the form object name in the {@link javax.servlet.jsp.PageContext}.  * @param tagWriter the {@link TagWriter} to which the form content is to be written  * @return {@link javax.servlet.jsp.tagext.Tag#EVAL_BODY_INCLUDE}  */ @Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     this.tagWriter = tagWriter.     tagWriter.startTag(FORM_TAG).     writeDefaultAttributes(tagWriter).     tagWriter.writeAttribute(ACTION_ATTRIBUTE, resolveAction()).     writeOptionalAttribute(tagWriter, METHOD_ATTRIBUTE, getHttpMethod()).     writeOptionalAttribute(tagWriter, TARGET_ATTRIBUTE, getTarget()).     writeOptionalAttribute(tagWriter, ENCTYPE_ATTRIBUTE, getEnctype()).     writeOptionalAttribute(tagWriter, ACCEPT_CHARSET_ATTRIBUTE, getAcceptCharset()).     writeOptionalAttribute(tagWriter, ONSUBMIT_ATTRIBUTE, getOnsubmit()).     writeOptionalAttribute(tagWriter, ONRESET_ATTRIBUTE, getOnreset()).     writeOptionalAttribute(tagWriter, AUTOCOMPLETE_ATTRIBUTE, getAutocomplete()).     tagWriter.forceBlock().     if (!isMethodBrowserSupported(getMethod())) {         assertHttpMethod(getMethod()).         String inputName = getMethodParam().         String inputType = "hidden".         tagWriter.startTag(INPUT_TAG).         writeOptionalAttribute(tagWriter, TYPE_ATTRIBUTE, inputType).         writeOptionalAttribute(tagWriter, NAME_ATTRIBUTE, inputName).         writeOptionalAttribute(tagWriter, VALUE_ATTRIBUTE, processFieldValue(inputName, getMethod(), inputType)).         tagWriter.endTag().     }     // Expose the form object name for nested tags...     String modelAttribute = resolveModelAttribute().     this.pageContext.setAttribute(MODEL_ATTRIBUTE_VARIABLE_NAME, modelAttribute, PageContext.REQUEST_SCOPE).     // Save previous nestedPath value, build and expose current nestedPath value.     // Use request scope to expose nestedPath to included pages too.     this.previousNestedPath = (String) this.pageContext.getAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     this.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, modelAttribute + PropertyAccessor.NESTED_PROPERTY_SEPARATOR, PageContext.REQUEST_SCOPE).     return EVAL_BODY_INCLUDE. }
false;private;0;3;;private String getHttpMethod() {     return (isMethodBrowserSupported(getMethod()) ? getMethod() : DEFAULT_METHOD). }
false;private;1;8;;private void assertHttpMethod(String method) {     for (HttpMethod httpMethod : HttpMethod.values()) {         if (httpMethod.name().equalsIgnoreCase(method)) {             return.         }     }     throw new IllegalArgumentException("Invalid HTTP method: " + method). }
true;protected;0;4;/**  * Autogenerated IDs correspond to the form object name.  */ ;/**  * Autogenerated IDs correspond to the form object name.  */ @Override protected String autogenerateId() throws JspException {     return resolveModelAttribute(). }
true;protected;0;7;/**  * {@link #evaluate Resolves} and returns the name of the form object.  * @throws IllegalArgumentException if the form object resolves to {@code null}  */ ;/**  * {@link #evaluate Resolves} and returns the name of the form object.  * @throws IllegalArgumentException if the form object resolves to {@code null}  */ protected String resolveModelAttribute() throws JspException {     Object resolvedModelAttribute = evaluate(MODEL_ATTRIBUTE, getModelAttribute()).     if (resolvedModelAttribute == null) {         throw new IllegalArgumentException(MODEL_ATTRIBUTE + " must not be null").     }     return (String) resolvedModelAttribute. }
true;protected;0;42;/**  * Resolve the value of the '{@code action}' attribute.  * <p>If the user configured an '{@code action}' value then the result of  * evaluating this value is used. If the user configured an  * '{@code servletRelativeAction}' value then the value is prepended  * with the context and servlet paths, and the result is used. Otherwise, the  * {@link org.springframework.web.servlet.support.RequestContext#getRequestUri()  * originating URI} is used.  * @return the value that is to be used for the '{@code action}' attribute  */ ;/**  * Resolve the value of the '{@code action}' attribute.  * <p>If the user configured an '{@code action}' value then the result of  * evaluating this value is used. If the user configured an  * '{@code servletRelativeAction}' value then the value is prepended  * with the context and servlet paths, and the result is used. Otherwise, the  * {@link org.springframework.web.servlet.support.RequestContext#getRequestUri()  * originating URI} is used.  * @return the value that is to be used for the '{@code action}' attribute  */ protected String resolveAction() throws JspException {     String action = getAction().     String servletRelativeAction = getServletRelativeAction().     if (StringUtils.hasText(action)) {         action = getDisplayString(evaluate(ACTION_ATTRIBUTE, action)).         return processAction(action).     } else if (StringUtils.hasText(servletRelativeAction)) {         String pathToServlet = getRequestContext().getPathToServlet().         if (servletRelativeAction.startsWith("/") && !servletRelativeAction.startsWith(getRequestContext().getContextPath())) {             servletRelativeAction = pathToServlet + servletRelativeAction.         }         servletRelativeAction = getDisplayString(evaluate(ACTION_ATTRIBUTE, servletRelativeAction)).         return processAction(servletRelativeAction).     } else {         String requestUri = getRequestContext().getRequestUri().         String encoding = this.pageContext.getResponse().getCharacterEncoding().         try {             requestUri = UriUtils.encodePath(requestUri, encoding).         } catch (UnsupportedCharsetException ex) {         // shouldn't happen - if it does, proceed with requestUri as-is         }         ServletResponse response = this.pageContext.getResponse().         if (response instanceof HttpServletResponse) {             requestUri = ((HttpServletResponse) response).encodeURL(requestUri).             String queryString = getRequestContext().getQueryString().             if (StringUtils.hasText(queryString)) {                 requestUri += "?" + HtmlUtils.htmlEscape(queryString).             }         }         if (StringUtils.hasText(requestUri)) {             return processAction(requestUri).         } else {             throw new IllegalArgumentException("Attribute 'action' is required. " + "Attempted to resolve against current request URI but request URI was null.").         }     } }
true;private;1;8;/**  * Process the action through a {@link RequestDataValueProcessor} instance  * if one is configured or otherwise returns the action unmodified.  */ ;/**  * Process the action through a {@link RequestDataValueProcessor} instance  * if one is configured or otherwise returns the action unmodified.  */ private String processAction(String action) {     RequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor().     ServletRequest request = this.pageContext.getRequest().     if (processor != null && request instanceof HttpServletRequest) {         action = processor.processAction((HttpServletRequest) request, action, getHttpMethod()).     }     return action. }
true;public;0;11;/**  * Closes the '{@code form}' block tag and removes the form object name  * from the {@link javax.servlet.jsp.PageContext}.  */ ;/**  * Closes the '{@code form}' block tag and removes the form object name  * from the {@link javax.servlet.jsp.PageContext}.  */ @Override public int doEndTag() throws JspException {     RequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor().     ServletRequest request = this.pageContext.getRequest().     if (processor != null && request instanceof HttpServletRequest) {         writeHiddenFields(processor.getExtraHiddenFields((HttpServletRequest) request)).     }     Assert.state(this.tagWriter != null, "No TagWriter set").     this.tagWriter.endTag().     return EVAL_PAGE. }
true;private;1;12;/**  * Writes the given values as hidden fields.  */ ;/**  * Writes the given values as hidden fields.  */ private void writeHiddenFields(@Nullable Map<String, String> hiddenFields) throws JspException {     if (!CollectionUtils.isEmpty(hiddenFields)) {         Assert.state(this.tagWriter != null, "No TagWriter set").         this.tagWriter.appendValue("<div>\n").         for (String name : hiddenFields.keySet()) {             this.tagWriter.appendValue("<input type=\"hidden\" ").             this.tagWriter.appendValue("name=\"" + name + "\" value=\"" + hiddenFields.get(name) + "\" ").             this.tagWriter.appendValue("/>\n").         }         this.tagWriter.appendValue("</div>").     } }
true;public;0;16;/**  * Clears the stored {@link TagWriter}.  */ ;/**  * Clears the stored {@link TagWriter}.  */ @Override public void doFinally() {     super.doFinally().     this.pageContext.removeAttribute(MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     if (this.previousNestedPath != null) {         // Expose previous nestedPath value.         this.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, this.previousNestedPath, PageContext.REQUEST_SCOPE).     } else {         // Remove exposed nestedPath value.         this.pageContext.removeAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     }     this.tagWriter = null.     this.previousNestedPath = null. }
true;protected;0;4;/**  * Override resolve CSS class since error class is not supported.  */ ;/**  * Override resolve CSS class since error class is not supported.  */ @Override protected String resolveCssClass() throws JspException {     return ObjectUtils.getDisplayString(evaluate("cssClass", getCssClass())). }
true;public;1;4;/**  * Unsupported for forms.  * @throws UnsupportedOperationException always  */ ;/**  * Unsupported for forms.  * @throws UnsupportedOperationException always  */ @Override public void setPath(String path) {     throw new UnsupportedOperationException("The 'path' attribute is not supported for forms"). }
true;public;1;4;/**  * Unsupported for forms.  * @throws UnsupportedOperationException always  */ ;/**  * Unsupported for forms.  * @throws UnsupportedOperationException always  */ @Override public void setCssErrorClass(String cssErrorClass) {     throw new UnsupportedOperationException("The 'cssErrorClass' attribute is not supported for forms"). }
