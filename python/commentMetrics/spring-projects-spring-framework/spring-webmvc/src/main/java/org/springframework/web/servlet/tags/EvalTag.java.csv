commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the expression to evaluate.  */ ;/**  * Set the expression to evaluate.  */ public void setExpression(String expression) {     this.expression = this.expressionParser.parseExpression(expression). }
true;public;1;3;/**  * Set the variable name to expose the evaluation result under.  * Defaults to rendering the result to the current JspWriter.  */ ;/**  * Set the variable name to expose the evaluation result under.  * Defaults to rendering the result to the current JspWriter.  */ public void setVar(String var) {     this.var = var. }
true;public;1;3;/**  * Set the scope to export the evaluation result to.  * This attribute has no meaning unless var is also defined.  */ ;/**  * Set the scope to export the evaluation result to.  * This attribute has no meaning unless var is also defined.  */ public void setScope(String scope) {     this.scope = TagUtils.getScope(scope). }
true;public;1;3;/**  * Set JavaScript escaping for this tag, as boolean value.  * Default is "false".  */ ;/**  * Set JavaScript escaping for this tag, as boolean value.  * Default is "false".  */ public void setJavaScriptEscape(boolean javaScriptEscape) throws JspException {     this.javaScriptEscape = javaScriptEscape. }
false;public;0;4;;@Override public int doStartTagInternal() throws JspException {     return EVAL_BODY_INCLUDE. }
false;public;0;27;;@Override public int doEndTag() throws JspException {     EvaluationContext evaluationContext = (EvaluationContext) this.pageContext.getAttribute(EVALUATION_CONTEXT_PAGE_ATTRIBUTE).     if (evaluationContext == null) {         evaluationContext = createEvaluationContext(this.pageContext).         this.pageContext.setAttribute(EVALUATION_CONTEXT_PAGE_ATTRIBUTE, evaluationContext).     }     if (this.var != null) {         Object result = (this.expression != null ? this.expression.getValue(evaluationContext) : null).         this.pageContext.setAttribute(this.var, result, this.scope).     } else {         try {             String result = (this.expression != null ? this.expression.getValue(evaluationContext, String.class) : null).             result = ObjectUtils.getDisplayString(result).             result = htmlEscape(result).             result = (this.javaScriptEscape ? JavaScriptUtils.javaScriptEscape(result) : result).             this.pageContext.getOut().print(result).         } catch (IOException ex) {             throw new JspException(ex).         }     }     return EVAL_PAGE. }
false;private;1;12;;private EvaluationContext createEvaluationContext(PageContext pageContext) {     StandardEvaluationContext context = new StandardEvaluationContext().     context.addPropertyAccessor(new JspPropertyAccessor(pageContext)).     context.addPropertyAccessor(new MapAccessor()).     context.addPropertyAccessor(new EnvironmentAccessor()).     context.setBeanResolver(new BeanFactoryResolver(getRequestContext().getWebApplicationContext())).     ConversionService conversionService = getConversionService(pageContext).     if (conversionService != null) {         context.setTypeConverter(new StandardTypeConverter(conversionService)).     }     return context. }
false;private;1;4;;@Nullable private ConversionService getConversionService(PageContext pageContext) {     return (ConversionService) pageContext.getRequest().getAttribute(ConversionService.class.getName()). }
false;public;0;5;;@Override @Nullable public Class<?>[] getSpecificTargetClasses() {     return null. }
false;public;3;5;;@Override public boolean canRead(EvaluationContext context, @Nullable Object target, String name) throws AccessException {     return (target == null && (resolveImplicitVariable(name) != null || this.pageContext.findAttribute(name) != null)). }
false;public;3;8;;@Override public TypedValue read(EvaluationContext context, @Nullable Object target, String name) throws AccessException {     Object implicitVar = resolveImplicitVariable(name).     if (implicitVar != null) {         return new TypedValue(implicitVar).     }     return new TypedValue(this.pageContext.findAttribute(name)). }
false;public;3;4;;@Override public boolean canWrite(EvaluationContext context, @Nullable Object target, String name) {     return false. }
false;public;4;4;;@Override public void write(EvaluationContext context, @Nullable Object target, String name, @Nullable Object newValue) {     throw new UnsupportedOperationException(). }
false;private;1;13;;@Nullable private Object resolveImplicitVariable(String name) throws AccessException {     if (this.variableResolver == null) {         return null.     }     try {         return this.variableResolver.resolveVariable(name).     } catch (Exception ex) {         throw new AccessException("Unexpected exception occurred accessing '" + name + "' as an implicit variable", ex).     } }
