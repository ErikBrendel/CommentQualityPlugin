commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the value of the '{@code value}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code value}' attribute.  * May be a runtime expression.  */ public void setValue(Object value) {     this.value = value. }
true;protected;0;4;/**  * Get the value of the '{@code value}' attribute.  */ ;/**  * Get the value of the '{@code value}' attribute.  */ @Nullable protected Object getValue() {     return this.value. }
true;public;1;3;/**  * Set the value of the '{@code label}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code label}' attribute.  * May be a runtime expression.  */ public void setLabel(Object label) {     this.label = label. }
true;protected;0;4;/**  * Get the value of the '{@code label}' attribute.  */ ;/**  * Get the value of the '{@code label}' attribute.  */ @Nullable protected Object getLabel() {     return this.label. }
true;protected;1;21;/**  * Renders the '{@code input(radio)}' element with the configured  * {@link #setValue(Object) value}. Marks the element as checked if the  * value matches the {@link #getValue bound value}.  */ ;/**  * Renders the '{@code input(radio)}' element with the configured  * {@link #setValue(Object) value}. Marks the element as checked if the  * value matches the {@link #getValue bound value}.  */ @Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     tagWriter.startTag("input").     String id = resolveId().     writeOptionalAttribute(tagWriter, "id", id).     writeOptionalAttribute(tagWriter, "name", getName()).     writeOptionalAttributes(tagWriter).     writeTagDetails(tagWriter).     tagWriter.endTag().     Object resolvedLabel = evaluate("label", getLabel()).     if (resolvedLabel != null) {         Assert.state(id != null, "Label id is required").         tagWriter.startTag("label").         tagWriter.writeAttribute("for", id).         tagWriter.appendValue(convertToDisplayString(resolvedLabel)).         tagWriter.endTag().     }     return SKIP_BODY. }
true;protected,abstract;1;1;/**  * Write the details for the given primary tag:  * i.e. special attributes and the tag's value.  */ ;/**  * Write the details for the given primary tag:  * i.e. special attributes and the tag's value.  */ protected abstract void writeTagDetails(TagWriter tagWriter) throws JspException.
