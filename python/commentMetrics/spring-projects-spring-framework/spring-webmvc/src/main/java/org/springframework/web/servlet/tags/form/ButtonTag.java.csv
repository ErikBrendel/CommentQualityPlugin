commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Get the value of the '{@code name}' attribute.  */ ;/**  * Get the value of the '{@code name}' attribute.  */ public void setName(String name) {     this.name = name. }
true;public;0;5;/**  * Set the value of the '{@code name}' attribute.  */ ;/**  * Set the value of the '{@code name}' attribute.  */ @Override @Nullable public String getName() {     return this.name. }
true;public;1;3;/**  * Set the value of the '{@code value}' attribute.  */ ;/**  * Set the value of the '{@code value}' attribute.  */ public void setValue(@Nullable String value) {     this.value = value. }
true;public;0;4;/**  * Get the value of the '{@code value}' attribute.  */ ;/**  * Get the value of the '{@code value}' attribute.  */ @Nullable public String getValue() {     return this.value. }
true;public;1;3;/**  * Set the value of the '{@code disabled}' attribute.  */ ;/**  * Set the value of the '{@code disabled}' attribute.  */ public void setDisabled(boolean disabled) {     this.disabled = disabled. }
true;public;0;3;/**  * Get the value of the '{@code disabled}' attribute.  */ ;/**  * Get the value of the '{@code disabled}' attribute.  */ public boolean isDisabled() {     return this.disabled. }
false;protected;1;13;;@Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     tagWriter.startTag("button").     writeDefaultAttributes(tagWriter).     tagWriter.writeAttribute("type", getType()).     writeValue(tagWriter).     if (isDisabled()) {         tagWriter.writeAttribute(DISABLED_ATTRIBUTE, "disabled").     }     tagWriter.forceBlock().     this.tagWriter = tagWriter.     return EVAL_BODY_INCLUDE. }
true;protected;1;4;/**  * Writes the '{@code value}' attribute to the supplied {@link TagWriter}.  * Subclasses may choose to override this implementation to control exactly  * when the value is written.  */ ;/**  * Writes the '{@code value}' attribute to the supplied {@link TagWriter}.  * Subclasses may choose to override this implementation to control exactly  * when the value is written.  */ protected void writeValue(TagWriter tagWriter) throws JspException {     String valueToUse = (getValue() != null ? getValue() : getDefaultValue()).     tagWriter.writeAttribute("value", processFieldValue(getName(), valueToUse, getType())). }
true;protected;0;3;/**  * Return the default value.  * @return the default value if none supplied  */ ;/**  * Return the default value.  * @return the default value if none supplied  */ protected String getDefaultValue() {     return "Submit". }
true;protected;0;3;/**  * Get the value of the '{@code type}' attribute. Subclasses  * can override this to change the type of '{@code input}' element  * rendered. Default value is '{@code submit}'.  */ ;/**  * Get the value of the '{@code type}' attribute. Subclasses  * can override this to change the type of '{@code input}' element  * rendered. Default value is '{@code submit}'.  */ protected String getType() {     return "submit". }
true;public;0;6;/**  * Closes the '{@code button}' block tag.  */ ;/**  * Closes the '{@code button}' block tag.  */ @Override public int doEndTag() throws JspException {     Assert.state(this.tagWriter != null, "No TagWriter set").     this.tagWriter.endTag().     return EVAL_PAGE. }
