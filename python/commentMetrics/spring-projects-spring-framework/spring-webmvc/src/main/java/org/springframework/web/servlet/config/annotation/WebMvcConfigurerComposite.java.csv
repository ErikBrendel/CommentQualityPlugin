commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void addWebMvcConfigurers(List<WebMvcConfigurer> configurers) {     if (!CollectionUtils.isEmpty(configurers)) {         this.delegates.addAll(configurers).     } }
false;public;1;6;;@Override public void configurePathMatch(PathMatchConfigurer configurer) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.configurePathMatch(configurer).     } }
false;public;1;6;;@Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.configureContentNegotiation(configurer).     } }
false;public;1;6;;@Override public void configureAsyncSupport(AsyncSupportConfigurer configurer) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.configureAsyncSupport(configurer).     } }
false;public;1;6;;@Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.configureDefaultServletHandling(configurer).     } }
false;public;1;6;;@Override public void addFormatters(FormatterRegistry registry) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.addFormatters(registry).     } }
false;public;1;6;;@Override public void addInterceptors(InterceptorRegistry registry) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.addInterceptors(registry).     } }
false;public;1;6;;@Override public void addResourceHandlers(ResourceHandlerRegistry registry) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.addResourceHandlers(registry).     } }
false;public;1;6;;@Override public void addCorsMappings(CorsRegistry registry) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.addCorsMappings(registry).     } }
false;public;1;6;;@Override public void addViewControllers(ViewControllerRegistry registry) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.addViewControllers(registry).     } }
false;public;1;6;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.configureViewResolvers(registry).     } }
false;public;1;6;;@Override public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.addArgumentResolvers(argumentResolvers).     } }
false;public;1;6;;@Override public void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.addReturnValueHandlers(returnValueHandlers).     } }
false;public;1;6;;@Override public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.configureMessageConverters(converters).     } }
false;public;1;6;;@Override public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.extendMessageConverters(converters).     } }
false;public;1;6;;@Override public void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.configureHandlerExceptionResolvers(exceptionResolvers).     } }
false;public;1;6;;@Override public void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {     for (WebMvcConfigurer delegate : this.delegates) {         delegate.extendHandlerExceptionResolvers(exceptionResolvers).     } }
false;public;0;15;;@Override public Validator getValidator() {     Validator selected = null.     for (WebMvcConfigurer configurer : this.delegates) {         Validator validator = configurer.getValidator().         if (validator != null) {             if (selected != null) {                 throw new IllegalStateException("No unique Validator found: {" + selected + ", " + validator + "}").             }             selected = validator.         }     }     return selected. }
false;public;0;16;;@Override @Nullable public MessageCodesResolver getMessageCodesResolver() {     MessageCodesResolver selected = null.     for (WebMvcConfigurer configurer : this.delegates) {         MessageCodesResolver messageCodesResolver = configurer.getMessageCodesResolver().         if (messageCodesResolver != null) {             if (selected != null) {                 throw new IllegalStateException("No unique MessageCodesResolver found: {" + selected + ", " + messageCodesResolver + "}").             }             selected = messageCodesResolver.         }     }     return selected. }
