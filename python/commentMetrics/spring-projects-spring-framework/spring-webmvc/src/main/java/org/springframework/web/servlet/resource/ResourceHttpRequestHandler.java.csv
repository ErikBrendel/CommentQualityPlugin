# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1457125561;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1458747612;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1458747612;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1458813406;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1458843770;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1458845874;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1458944925;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1460123664;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1462208452;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1462528247;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected ContentNegotiationManager initContentNegotiationManager();1462528971;Create the {@code ContentNegotiationManager} to use to resolve the_{@link MediaType} for requests. This implementation delegates to_{@link ContentNegotiationManagerFactoryBean} with default settings.;protected ContentNegotiationManager initContentNegotiationManager() {_		ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean()__		factory.afterPropertiesSet()__		return factory.getObject()__	};create,the,code,content,negotiation,manager,to,use,to,resolve,the,link,media,type,for,requests,this,implementation,delegates,to,link,content,negotiation,manager,factory,bean,with,default,settings;protected,content,negotiation,manager,init,content,negotiation,manager,content,negotiation,manager,factory,bean,factory,new,content,negotiation,manager,factory,bean,factory,after,properties,set,return,factory,get,object
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1426880143;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1427130064;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1427983931;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1432211412;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1437503583;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1440514150;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1441728690;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1446131427;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1448397382;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1452002114;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1453684721;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1453757723;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1455715439;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1457125549;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> protected void writePartialContent(HttpServletRequest request, HttpServletResponse response, 			Resource resource, MediaType contentType) throws IOException;1457125561;Write parts of the resource as indicated by the request {@code Range} header._@param request current servlet request_@param response current servlet response_@param resource the identified resource (never {@code null})_@param contentType the content type_@throws IOException in case of errors while writing the content;protected void writePartialContent(HttpServletRequest request, HttpServletResponse response,_			Resource resource, MediaType contentType) throws IOException {__		long length = resource.contentLength()___		List<HttpRange> ranges__		try {_			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders()__			ranges = headers.getRange()__		}_		catch (IllegalArgumentException ex) {_			response.addHeader("Content-Range", "bytes */" + length)__			response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__            return__		}__		response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)___		if (ranges.size() == 1) {_			HttpRange range = ranges.get(0)___			long start = range.getRangeStart(length)__			long end = range.getRangeEnd(length)__			long rangeLength = end - start + 1___			setHeaders(response, resource, contentType)__			response.addHeader("Content-Range", "bytes " + start + "-" + end + "/" + length)__            response.setContentLength((int) rangeLength)___			InputStream in = resource.getInputStream()__			try {_				copyRange(in, response.getOutputStream(), start, end)__			}_			finally {_				try {_					in.close()__				}_				catch (IOException ex) {_					_				}_			}_		}_		else {_			String boundaryString = MimeTypeUtils.generateMultipartBoundaryString()__			response.setContentType("multipart/byteranges_ boundary=" + boundaryString)___			ServletOutputStream out = response.getOutputStream()___			for (HttpRange range : ranges) {_				long start = range.getRangeStart(length)__				long end = range.getRangeEnd(length)___				InputStream in = resource.getInputStream()___                _                out.println()__                out.println("--" + boundaryString)__                if (contentType != null) {_	                out.println("Content-Type: " + contentType)__                }_                out.println("Content-Range: bytes " + start + "-" + end + "/" + length)__                out.println()___                _                copyRange(in, out, start, end)__			}_			out.println()__            out.print("--" + boundaryString + "--")__		}_	};write,parts,of,the,resource,as,indicated,by,the,request,code,range,header,param,request,current,servlet,request,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,content,type,the,content,type,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,partial,content,http,servlet,request,request,http,servlet,response,response,resource,resource,media,type,content,type,throws,ioexception,long,length,resource,content,length,list,http,range,ranges,try,http,headers,headers,new,servlet,server,http,request,request,get,headers,ranges,headers,get,range,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,length,response,send,error,http,servlet,response,return,response,set,status,http,servlet,response,if,ranges,size,1,http,range,range,ranges,get,0,long,start,range,get,range,start,length,long,end,range,get,range,end,length,long,range,length,end,start,1,set,headers,response,resource,content,type,response,add,header,content,range,bytes,start,end,length,response,set,content,length,int,range,length,input,stream,in,resource,get,input,stream,try,copy,range,in,response,get,output,stream,start,end,finally,try,in,close,catch,ioexception,ex,else,string,boundary,string,mime,type,utils,generate,multipart,boundary,string,response,set,content,type,multipart,byteranges,boundary,boundary,string,servlet,output,stream,out,response,get,output,stream,for,http,range,range,ranges,long,start,range,get,range,start,length,long,end,range,get,range,end,length,input,stream,in,resource,get,input,stream,out,println,out,println,boundary,string,if,content,type,null,out,println,content,type,content,type,out,println,content,range,bytes,start,end,length,out,println,copy,range,in,out,start,end,out,println,out,print,boundary,string
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1498780456;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1500448076;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1502974979;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1503600637;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1510251306;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1510341686;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1510940038;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1511122589;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1511188294;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1519295386;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1519588127;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1521494163;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1521630133;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1521645162;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1522103912;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1527081441;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1529361191;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1529721864;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1530174524;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1542899558;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1542907316;Return the configured resource region converter._@since 4.3;@Nullable_	public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;nullable,public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1328020251;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1335906499;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1356735495;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1357119239;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1368482696;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1374268978;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1374709921;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1380330593;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1380653018;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1381195788;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1392158557;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1396464852;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1397706164;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1398142414;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1398282219;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1401238462;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations = locations__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1409326189;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notEmpty(locations, "Locations list must not be empty")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,empty,locations,locations,list,must,not,be,empty,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1409647448;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1415686364;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1419949603;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1424887506;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1426880143;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1426880143;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1427130064;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1427983931;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1432211412;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1437503583;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1440514150;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1441728690;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1446131427;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1448397382;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1452002114;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1453684721;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1453757723;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1455715439;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1457125549;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1457125561;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1458747612;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1458747612;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1458813406;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1458843770;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1458845874;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1458944925;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1460123664;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1462208452;Set a {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,a,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1462528247;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1462528971;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1467053815;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1467146811;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1467726769;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1467730834;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1470831642;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1472502444;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1472514564;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1472519195;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1472576698;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1473234753;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1473437889;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1474382954;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1477660417;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1479997810;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1495868221;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1496837955;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1498780456;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1500448076;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1502974979;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1503600637;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1510251306;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources._@see #setLocationCharsets(Map);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,see,set,location,charsets,map;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1510341686;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources._@see #setLocationCharsets(Map);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,see,set,location,charsets,map;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1510940038;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1511122589;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1511188294;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1519295386;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1519588127;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1521494163;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1521630133;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1521645162;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1522103912;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1527081441;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1529361191;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1529721864;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1530174524;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1542899558;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void setLocations(List<Resource> locations);1542907316;Set the {@code List} of {@code Resource} locations to use as sources_for serving static resources._@see #setLocationValues(List);public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,locations,to,use,as,sources,for,serving,static,resources,see,set,location,values,list;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceHttpRequestHandler -> public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1328020251;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1335906499;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1357119239;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1328020251;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1335906499;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1356735495;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1357119239;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1368482696;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1374268978;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1374709921;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1380330593;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1380653018;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1381195788;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1392158557;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1396464852;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1397706164;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1398142414;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1398282219;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1401238462;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1409326189;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1409647448;Validates the given path: returns {@code true} if the given path is not a valid resource path._<p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths_with relative paths ("../") that result in access of a parent directory._@param path the path to validate_@return {@code true} if the path has been recognized as invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."))__	};validates,the,given,path,returns,code,true,if,the,given,path,is,not,a,valid,resource,path,p,the,default,implementation,rejects,paths,containing,web,inf,or,meta,inf,as,well,as,paths,with,relative,paths,that,result,in,access,of,a,parent,directory,param,path,the,path,to,validate,return,code,true,if,the,path,has,been,recognized,as,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,return,path,contains,web,inf,path,contains,meta,inf,string,utils,clean,path,path,starts,with
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1415686364;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1419949603;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1424887506;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1426880143;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1426880143;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1427130064;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1427983931;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1432211412;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1437503583;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1440514150;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1441728690;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1446131427;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1448397382;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1452002114;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1453684721;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1453757723;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1455715439;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1457125549;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1457125561;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1458747612;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1458747612;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1458813406;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1458843770;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1458845874;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1458944925;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1460123664;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1462208452;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1462528247;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1462528971;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1467053815;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("../")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1467146811;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1467726769;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1467730834;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1470831642;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1472502444;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1472514564;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1472519195;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1472576698;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1473234753;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1473437889;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1474382954;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1477660417;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1479997810;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1495868221;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1496837955;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1498780456;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1500448076;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1502974979;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1503600637;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1510251306;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1510341686;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1510940038;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1511122589;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1511188294;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1519295386;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1519588127;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1521494163;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1521630133;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.trace("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1521645162;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.trace("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1522103912;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.trace("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1527081441;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.trace("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1529361191;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1529721864;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path with \"WEB-INF\" or \"META-INF\": [" + path + "]")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix: [" + path + "]")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Invalid Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,with,web,inf,or,meta,inf,path,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,path,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,invalid,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1530174524;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path with \"WEB-INF\" or \"META-INF\": [" + path + "]")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix: [" + path + "]")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Invalid Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,with,web,inf,or,meta,inf,path,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,path,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,invalid,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1542899558;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path with \"WEB-INF\" or \"META-INF\": [" + path + "]")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix: [" + path + "]")__				return true__			}_		}_		if (path.contains("..") && StringUtils.cleanPath(path).contains("../")) {_			logger.warn("Invalid Path contains \"../\" after call to StringUtils#cleanPath: [" + path + "]")__			return true__		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,with,web,inf,or,meta,inf,path,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,path,return,true,if,path,contains,string,utils,clean,path,path,contains,logger,warn,invalid,path,contains,after,call,to,string,utils,clean,path,path,return,true,return,false
ResourceHttpRequestHandler -> protected boolean isInvalidPath(String path);1542907316;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link org.springframework.util.StringUtils#cleanPath}._<li>Paths that represent a {@link org.springframework.util.ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise_@since 3.0.6;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isWarnEnabled()) {_				logger.warn("Path with \"WEB-INF\" or \"META-INF\": [" + path + "]")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isWarnEnabled()) {_					logger.warn("Path represents URL or has \"url:\" prefix: [" + path + "]")__				}_				return true__			}_		}_		if (path.contains("..") && StringUtils.cleanPath(path).contains("../")) {_			if (logger.isWarnEnabled()) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath: [" + path + "]")__			}_			return true__		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,org,springframework,util,string,utils,clean,path,li,paths,that,represent,a,link,org,springframework,util,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise,since,3,0,6;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,warn,enabled,logger,warn,path,with,web,inf,or,meta,inf,path,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,warn,enabled,logger,warn,path,represents,url,or,has,url,prefix,path,return,true,if,path,contains,string,utils,clean,path,path,contains,if,logger,is,warn,enabled,logger,warn,path,contains,after,call,to,string,utils,clean,path,path,return,true,return,false
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1462528247;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1462528971;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1467053815;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1467146811;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1467726769;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1467730834;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1470831642;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1472502444;Return the specified content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,specified,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1472514564;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1472519195;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1472576698;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1473234753;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1473437889;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1474382954;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1477660417;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1479997810;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public ContentNegotiationManager getContentNegotiationManager();1495868221;Return the configured content negotiation manager._@since 4.3;public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1401238462;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1409326189;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1409647448;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1415686364;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1419949603;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1424887506;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1426880143;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1426880143;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1427130064;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1427983931;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1432211412;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1437503583;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1440514150;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1441728690;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1446131427;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1448397382;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1452002114;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1453684721;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1453757723;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1455715439;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1457125549;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1457125561;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1458747612;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1458747612;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1458813406;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1458843770;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1458845874;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1458944925;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1460123664;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1462208452;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1462528247;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1462528971;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1467053815;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1467146811;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1467726769;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1467730834;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1470831642;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1472502444;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1472514564;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1472519195;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1472576698;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1473234753;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1473437889;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1474382954;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1477660417;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1479997810;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1495868221;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1496837955;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1498780456;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1500448076;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1502974979;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1503600637;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1510251306;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1510341686;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1510940038;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1511122589;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1511188294;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1519295386;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1519588127;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1521494163;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1521630133;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1521645162;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1522103912;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1527081441;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1529361191;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1529721864;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1530174524;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1542899558;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public List<ResourceResolver> getResourceResolvers();1542907316;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1496837955;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1498780456;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1500448076;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1502974979;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1503600637;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1510251306;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1510341686;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1510940038;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1511122589;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1511188294;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1519295386;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1519588127;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1521494163;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1521630133;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1521645162;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1522103912;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1527081441;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1529361191;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1529721864;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1530174524;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1542899558;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1542907316;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> protected void setETagHeader(HttpServletRequest request, HttpServletResponse response);1440514150;Set the ETag header if the version string of the served resource is present._Version strings can be resolved by {@link VersionStrategy} implementations and then_set as a request attribute by {@link VersionResourceResolver}._@param request current servlet request_@param response current servlet response_@see VersionResourceResolver;protected void setETagHeader(HttpServletRequest request, HttpServletResponse response) {_		String versionString = (String) request.getAttribute(VersionResourceResolver.RESOURCE_VERSION_ATTRIBUTE)__		if(versionString != null) {_			response.setHeader(HttpHeaders.ETAG, "\"" + versionString + "\"")__		}_	};set,the,etag,header,if,the,version,string,of,the,served,resource,is,present,version,strings,can,be,resolved,by,link,version,strategy,implementations,and,then,set,as,a,request,attribute,by,link,version,resource,resolver,param,request,current,servlet,request,param,response,current,servlet,response,see,version,resource,resolver;protected,void,set,etag,header,http,servlet,request,request,http,servlet,response,response,string,version,string,string,request,get,attribute,version,resource,resolver,if,version,string,null,response,set,header,http,headers,etag,version,string
ResourceHttpRequestHandler -> protected void setETagHeader(HttpServletRequest request, HttpServletResponse response);1441728690;Set the ETag header if the version string of the served resource is present._Version strings can be resolved by {@link VersionStrategy} implementations and then_set as a request attribute by {@link VersionResourceResolver}._@param request current servlet request_@param response current servlet response_@see VersionResourceResolver;protected void setETagHeader(HttpServletRequest request, HttpServletResponse response) {_		String versionString = (String) request.getAttribute(VersionResourceResolver.RESOURCE_VERSION_ATTRIBUTE)__		if (versionString != null) {_			response.setHeader(HttpHeaders.ETAG, "\"" + versionString + "\"")__		}_	};set,the,etag,header,if,the,version,string,of,the,served,resource,is,present,version,strings,can,be,resolved,by,link,version,strategy,implementations,and,then,set,as,a,request,attribute,by,link,version,resource,resolver,param,request,current,servlet,request,param,response,current,servlet,response,see,version,resource,resolver;protected,void,set,etag,header,http,servlet,request,request,http,servlet,response,response,string,version,string,string,request,get,attribute,version,resource,resolver,if,version,string,null,response,set,header,http,headers,etag,version,string
ResourceHttpRequestHandler -> protected void setETagHeader(HttpServletRequest request, HttpServletResponse response);1446131427;Set the ETag header if the version string of the served resource is present._Version strings can be resolved by {@link VersionStrategy} implementations and then_set as a request attribute by {@link VersionResourceResolver}._@param request current servlet request_@param response current servlet response_@see VersionResourceResolver;protected void setETagHeader(HttpServletRequest request, HttpServletResponse response) {_		String versionString = (String) request.getAttribute(VersionResourceResolver.RESOURCE_VERSION_ATTRIBUTE)__		if (versionString != null) {_			response.setHeader(HttpHeaders.ETAG, "\"" + versionString + "\"")__		}_	};set,the,etag,header,if,the,version,string,of,the,served,resource,is,present,version,strings,can,be,resolved,by,link,version,strategy,implementations,and,then,set,as,a,request,attribute,by,link,version,resource,resolver,param,request,current,servlet,request,param,response,current,servlet,response,see,version,resource,resolver;protected,void,set,etag,header,http,servlet,request,request,http,servlet,response,response,string,version,string,string,request,get,attribute,version,resource,resolver,if,version,string,null,response,set,header,http,headers,etag,version,string
ResourceHttpRequestHandler -> protected void setETagHeader(HttpServletRequest request, HttpServletResponse response);1448397382;Set the ETag header if the version string of the served resource is present._Version strings can be resolved by {@link VersionStrategy} implementations and then_set as a request attribute by {@link VersionResourceResolver}._@param request current servlet request_@param response current servlet response_@see VersionResourceResolver;protected void setETagHeader(HttpServletRequest request, HttpServletResponse response) {_		String versionString = (String) request.getAttribute(VersionResourceResolver.RESOURCE_VERSION_ATTRIBUTE)__		if (versionString != null) {_			response.setHeader(HttpHeaders.ETAG, "\"" + versionString + "\"")__		}_	};set,the,etag,header,if,the,version,string,of,the,served,resource,is,present,version,strings,can,be,resolved,by,link,version,strategy,implementations,and,then,set,as,a,request,attribute,by,link,version,resource,resolver,param,request,current,servlet,request,param,response,current,servlet,response,see,version,resource,resolver;protected,void,set,etag,header,http,servlet,request,request,http,servlet,response,response,string,version,string,string,request,get,attribute,version,resource,resolver,if,version,string,null,response,set,header,http,headers,etag,version,string
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1467726769;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		MediaType mediaType = null___		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,null,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1467730834;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		MediaType mediaType = null___		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,null,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1470831642;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		MediaType mediaType = null___		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,null,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1472502444;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.pathExtensionStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,path,extension,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1472514564;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}_		return this.pathExtensionStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,return,this,path,extension,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1472519195;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.pathExtensionStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,path,extension,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1472576698;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.pathExtensionStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,path,extension,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1473234753;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.pathExtensionStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,path,extension,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1473437889;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.pathExtensionStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,path,extension,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1474382954;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.pathExtensionStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,path,extension,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1477660417;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.contentNegotiationStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> protected MediaType getMediaType(HttpServletRequest request, Resource resource);1479997810;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.contentNegotiationStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1462208452;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3.0;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3,0;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1462528247;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1462528971;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1467053815;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1467146811;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1467726769;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1467730834;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1470831642;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1472502444;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1472514564;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1472519195;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1472576698;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1473234753;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1473437889;Return the list of configured resource region converters._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,list,of,configured,resource,region,converters,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1474382954;Return the configured resource region converter._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1477660417;Return the configured resource region converter._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1479997810;Return the configured resource region converter._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1495868221;Return the configured resource region converter._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter();1496837955;Return the configured resource region converter._@since 4.3;public ResourceRegionHttpMessageConverter getResourceRegionHttpMessageConverter() {_		return this.resourceRegionHttpMessageConverter__	};return,the,configured,resource,region,converter,since,4,3;public,resource,region,http,message,converter,get,resource,region,http,message,converter,return,this,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1458747612;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3.0;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3,0;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1458747612;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3.0;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3,0;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1458813406;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3.0;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3,0;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1458843770;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3.0;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3,0;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1458845874;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3.0;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3,0;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1458944925;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1460123664;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1462208452;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3.0;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3,0;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1462528247;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1462528971;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1467053815;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1467146811;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1467726769;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1467730834;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1470831642;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1472502444;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1472514564;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1472519195;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1472576698;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1473234753;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1473437889;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1474382954;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1477660417;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1479997810;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1495868221;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter);1496837955;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(ResourceHttpMessageConverter resourceHttpMessageConverter) {_		this.resourceHttpMessageConverter = resourceHttpMessageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,resource,http,message,converter,resource,http,message,converter,this,resource,http,message,converter,resource,http,message,converter
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1401238462;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1409326189;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1409647448;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1415686364;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1419949603;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1424887506;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1426880143;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1426880143;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1427130064;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1427983931;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1432211412;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1437503583;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1440514150;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1441728690;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1446131427;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1448397382;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1452002114;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1453684721;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1453757723;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1455715439;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1457125549;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1457125561;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1458747612;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1458747612;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1458813406;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1458843770;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1458845874;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1458944925;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1460123664;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1462208452;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1462528247;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1462528971;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1467053815;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1467146811;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1467726769;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1467730834;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1470831642;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1472502444;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1472514564;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1472519195;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1472576698;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1473234753;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1473437889;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1474382954;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1477660417;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1479997810;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1495868221;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1495868221;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.contentNegotiationStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1496837955;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return this.contentNegotiationStrategy.getMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,get,media,type,for,resource,resource
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1498780456;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1500448076;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1502974979;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1503600637;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1510251306;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1510341686;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1510940038;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1511122589;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1511188294;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1519295386;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1519588127;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1521494163;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1521630133;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1521645162;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1522103912;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1527081441;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1529361191;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1529721864;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1530174524;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1542899558;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> @Nullable 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1542907316;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		return (this.contentNegotiationStrategy != null ?_				this.contentNegotiationStrategy.getMediaTypeForResource(resource) : null)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,servlet,path,extension,content,negotiation,strategy,get,media,type,for,resource,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,return,this,content,negotiation,strategy,null,this,content,negotiation,strategy,get,media,type,for,resource,resource,null
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1496837955;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1498780456;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1500448076;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1502974979;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1503600637;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1510251306;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1510341686;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1510940038;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1511122589;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1511188294;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			for (Map.Entry<String, List<String>> entry : resourceHeaders.entrySet()) {_				String headerName = entry.getKey()__				boolean first = true__				for (String headerValue : entry.getValue()) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			}_		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,for,map,entry,string,list,string,entry,resource,headers,entry,set,string,header,name,entry,get,key,boolean,first,true,for,string,header,value,entry,get,value,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1519295386;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			for (Map.Entry<String, List<String>> entry : resourceHeaders.entrySet()) {_				String headerName = entry.getKey()__				boolean first = true__				for (String headerValue : entry.getValue()) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			}_		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,for,map,entry,string,list,string,entry,resource,headers,entry,set,string,header,name,entry,get,key,boolean,first,true,for,string,header,value,entry,get,value,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1519588127;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			for (Map.Entry<String, List<String>> entry : resourceHeaders.entrySet()) {_				String headerName = entry.getKey()__				boolean first = true__				for (String headerValue : entry.getValue()) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			}_		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,for,map,entry,string,list,string,entry,resource,headers,entry,set,string,header,name,entry,get,key,boolean,first,true,for,string,header,value,entry,get,value,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1521494163;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			for (Map.Entry<String, List<String>> entry : resourceHeaders.entrySet()) {_				String headerName = entry.getKey()__				boolean first = true__				for (String headerValue : entry.getValue()) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			}_		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,for,map,entry,string,list,string,entry,resource,headers,entry,set,string,header,name,entry,get,key,boolean,first,true,for,string,header,value,entry,get,value,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1521630133;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			for (Map.Entry<String, List<String>> entry : resourceHeaders.entrySet()) {_				String headerName = entry.getKey()__				boolean first = true__				for (String headerValue : entry.getValue()) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			}_		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,for,map,entry,string,list,string,entry,resource,headers,entry,set,string,header,name,entry,get,key,boolean,first,true,for,string,header,value,entry,get,value,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1521645162;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			for (Map.Entry<String, List<String>> entry : resourceHeaders.entrySet()) {_				String headerName = entry.getKey()__				boolean first = true__				for (String headerValue : entry.getValue()) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			}_		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,for,map,entry,string,list,string,entry,resource,headers,entry,set,string,header,name,entry,get,key,boolean,first,true,for,string,header,value,entry,get,value,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1522103912;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.forEach((headerName, headerValues) -> {_				boolean first = true__				for (String headerValue : headerValues) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			})__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,for,each,header,name,header,values,boolean,first,true,for,string,header,value,header,values,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1527081441;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.forEach((headerName, headerValues) -> {_				boolean first = true__				for (String headerValue : headerValues) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			})__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,for,each,header,name,header,values,boolean,first,true,for,string,header,value,header,values,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1529361191;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.forEach((headerName, headerValues) -> {_				boolean first = true__				for (String headerValue : headerValues) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			})__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,for,each,header,name,header,values,boolean,first,true,for,string,header,value,header,values,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1529721864;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.forEach((headerName, headerValues) -> {_				boolean first = true__				for (String headerValue : headerValues) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			})__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,for,each,header,name,header,values,boolean,first,true,for,string,header,value,header,values,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1530174524;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.forEach((headerName, headerValues) -> {_				boolean first = true__				for (String headerValue : headerValues) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			})__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,for,each,header,name,header,values,boolean,first,true,for,string,header,value,header,values,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1542899558;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.forEach((headerName, headerValues) -> {_				boolean first = true__				for (String headerValue : headerValues) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			})__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,for,each,header,name,header,values,boolean,first,true,for,string,header,value,header,values,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1542907316;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.forEach((headerName, headerValues) -> {_				boolean first = true__				for (String headerValue : headerValues) {_					if (first) {_						response.setHeader(headerName, headerValue)__					}_					else {_						response.addHeader(headerName, headerValue)__					}_					first = false__				}_			})__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,nullable,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,for,each,header,name,header,values,boolean,first,true,for,string,header,value,header,values,if,first,response,set,header,header,name,header,value,else,response,add,header,header,name,header,value,first,false,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1498780456;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1500448076;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1502974979;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1503600637;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1510251306;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1510341686;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1510940038;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1511122589;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1511188294;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1519295386;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1519588127;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1521494163;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1521630133;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1521645162;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1522103912;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1527081441;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1529361191;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1529721864;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1530174524;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1542899558;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ResourceHttpMessageConverter getResourceHttpMessageConverter();1542907316;Return the configured resource converter._@since 4.3;@Nullable_	public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;nullable,public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1496837955;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1498780456;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1500448076;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1502974979;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1503600637;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1510251306;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1510341686;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1510940038;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1511122589;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1511188294;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1519295386;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1519588127;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1521494163;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1521630133;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1521645162;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1522103912;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1527081441;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1529361191;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1529721864;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1530174524;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1542899558;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> @Nullable 	public ContentNegotiationManager getContentNegotiationManager();1542907316;Return the configured content negotiation manager._@since 4.3;@Nullable_	public ContentNegotiationManager getContentNegotiationManager() {_		return this.contentNegotiationManager__	};return,the,configured,content,negotiation,manager,since,4,3;nullable,public,content,negotiation,manager,get,content,negotiation,manager,return,this,content,negotiation,manager
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1500448076;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1502974979;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1503600637;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1510251306;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1510341686;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1510940038;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1511122589;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1511188294;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1519295386;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1519588127;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1521494163;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1521630133;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1521645162;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1522103912;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1527081441;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1529361191;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1529721864;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1530174524;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1542899558;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter);1542907316;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(@Nullable ResourceRegionHttpMessageConverter messageConverter) {_		this.resourceRegionHttpMessageConverter = messageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,nullable,resource,region,http,message,converter,message,converter,this,resource,region,http,message,converter,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1462528247;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1462528971;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1467053815;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1467146811;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1467726769;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1467730834;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1470831642;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1472502444;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1472514564;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1472519195;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1472576698;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1473234753;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1473437889;Return the list of configured resource converters._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,list,of,configured,resource,converters,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1474382954;Return the configured resource converter._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1477660417;Return the configured resource converter._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1479997810;Return the configured resource converter._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1495868221;Return the configured resource converter._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public ResourceHttpMessageConverter getResourceHttpMessageConverter();1496837955;Return the configured resource converter._@since 4.3;public ResourceHttpMessageConverter getResourceHttpMessageConverter() {_		return this.resourceHttpMessageConverter__	};return,the,configured,resource,converter,since,4,3;public,resource,http,message,converter,get,resource,http,message,converter,return,this,resource,http,message,converter
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1510251306;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@param urlPathHelper a reference to the path helper_@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,param,url,path,helper,a,reference,to,the,path,helper,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1510341686;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1510940038;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1511122589;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1511188294;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1519295386;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1519588127;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1521494163;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1521630133;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1521645162;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1522103912;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1527081441;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1529361191;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1529721864;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1530174524;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1542899558;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper);1542907316;Provide a reference to the {@link UrlPathHelper} used to map requests to_static resources. This helps to derive information about the lookup path_such as whether it is decoded or not._@since 4.3.13;public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};provide,a,reference,to,the,link,url,path,helper,used,to,map,requests,to,static,resources,this,helps,to,derive,information,about,the,lookup,path,such,as,whether,it,is,decoded,or,not,since,4,3,13;public,void,set,url,path,helper,nullable,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1477660417;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1479997810;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1495868221;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1496837955;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1498780456;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1500448076;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1502974979;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1503600637;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1510251306;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1510341686;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1510940038;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1511122589;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1511188294;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1519295386;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1519588127;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1521494163;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1521630133;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1521645162;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1522103912;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1527081441;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1529361191;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1529721864;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1530174524;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1542899558;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy();1542907316;Initialize the content negotiation strategy depending on the {@code ContentNegotiationManager}_setup and the availability of a {@code ServletContext}._@see ServletPathExtensionContentNegotiationStrategy_@see PathExtensionContentNegotiationStrategy;protected PathExtensionContentNegotiationStrategy initContentNegotiationStrategy() {_		Map<String, MediaType> mediaTypes = null__		if (getContentNegotiationManager() != null) {_			PathExtensionContentNegotiationStrategy strategy =_					getContentNegotiationManager().getStrategy(PathExtensionContentNegotiationStrategy.class)__			if (strategy != null) {_				mediaTypes = new HashMap<>(strategy.getMediaTypes())__			}_		}_		return (getServletContext() != null ?_				new ServletPathExtensionContentNegotiationStrategy(getServletContext(), mediaTypes) :_				new PathExtensionContentNegotiationStrategy(mediaTypes))__	};initialize,the,content,negotiation,strategy,depending,on,the,code,content,negotiation,manager,setup,and,the,availability,of,a,code,servlet,context,see,servlet,path,extension,content,negotiation,strategy,see,path,extension,content,negotiation,strategy;protected,path,extension,content,negotiation,strategy,init,content,negotiation,strategy,map,string,media,type,media,types,null,if,get,content,negotiation,manager,null,path,extension,content,negotiation,strategy,strategy,get,content,negotiation,manager,get,strategy,path,extension,content,negotiation,strategy,class,if,strategy,null,media,types,new,hash,map,strategy,get,media,types,return,get,servlet,context,null,new,servlet,path,extension,content,negotiation,strategy,get,servlet,context,media,types,new,path,extension,content,negotiation,strategy,media,types
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1500448076;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1502974979;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1503600637;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1510251306;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1510341686;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1510940038;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1511122589;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1511188294;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1519295386;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1519588127;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1521494163;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1521630133;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1521645162;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1522103912;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1527081441;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1529361191;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1529721864;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1530174524;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1542899558;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter);1542907316;Configure the {@link ResourceHttpMessageConverter} to use._<p>By default a {@link ResourceHttpMessageConverter} will be configured._@since 4.3;public void setResourceHttpMessageConverter(@Nullable ResourceHttpMessageConverter messageConverter) {_		this.resourceHttpMessageConverter = messageConverter__	};configure,the,link,resource,http,message,converter,to,use,p,by,default,a,link,resource,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,http,message,converter,nullable,resource,http,message,converter,message,converter,this,resource,http,message,converter,message,converter
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1328020251;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or <code>null</code> if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,code,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1335906499;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or <code>null</code> if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,code,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1356735495;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1357119239;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1368482696;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1374268978;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1374709921;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1380330593;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1380653018;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1381195788;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1392158557;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1396464852;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1397706164;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1398142414;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1398282219;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1401238462;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1409326189;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1409647448;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1415686364;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1419949603;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1424887506;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1426880143;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1426880143;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1427130064;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1427983931;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1432211412;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1437503583;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1440514150;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1441728690;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1446131427;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1448397382;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1452002114;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1453684721;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1453757723;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1455715439;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> protected MediaType getMediaType(Resource resource);1457125549;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(Resource resource) {_		MediaType mediaType = null__		String mimeType = getServletContext().getMimeType(resource.getFilename())__		if (StringUtils.hasText(mimeType)) {_			mediaType = MediaType.parseMediaType(mimeType)__		}_		if (jafPresent && (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType))) {_			MediaType jafMediaType = ActivationMediaTypeFactory.getMediaType(resource.getFilename())__			if (jafMediaType != null && !MediaType.APPLICATION_OCTET_STREAM.equals(jafMediaType)) {_				mediaType = jafMediaType__			}_		}_		return mediaType__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,resource,resource,media,type,media,type,null,string,mime,type,get,servlet,context,get,mime,type,resource,get,filename,if,string,utils,has,text,mime,type,media,type,media,type,parse,media,type,mime,type,if,jaf,present,media,type,null,media,type,equals,media,type,media,type,jaf,media,type,activation,media,type,factory,get,media,type,resource,get,filename,if,jaf,media,type,null,media,type,equals,jaf,media,type,media,type,jaf,media,type,return,media,type
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1401238462;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1409326189;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1409647448;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1415686364;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1419949603;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1424887506;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1426880143;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1426880143;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1427130064;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1427983931;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1432211412;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1437503583;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1440514150;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1441728690;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1446131427;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1448397382;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1452002114;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1453684721;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1453757723;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1455715439;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1457125549;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1457125561;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1458747612;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1458747612;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1458813406;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1458843770;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1458845874;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1458944925;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1460123664;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1462208452;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1462528247;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1462528971;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1467053815;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1467146811;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1467726769;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1467730834;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1470831642;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1472502444;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1472514564;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1472519195;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1472576698;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1473234753;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1473437889;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1474382954;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1477660417;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1479997810;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1495868221;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1496837955;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1498780456;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1500448076;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1502974979;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1503600637;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1510251306;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1510341686;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1510940038;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1511122589;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1511188294;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1519295386;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1519588127;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1521494163;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1521630133;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1521645162;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1522103912;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1527081441;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1529361191;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1529721864;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1530174524;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1542899558;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<ResourceTransformer> getResourceTransformers();1542907316;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceHttpRequestHandler -> public List<Resource> getLocations();1462528247;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1462528971;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1467053815;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1467146811;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1467726769;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1467730834;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1470831642;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1472502444;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1472514564;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1472519195;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1472576698;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1473234753;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1473437889;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1474382954;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1477660417;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1479997810;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1495868221;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1496837955;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1498780456;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1500448076;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1502974979;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1503600637;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1510251306;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1510341686;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1510940038;Return the configured {@code List} of {@code Resource} locations._Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}.;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1511122589;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1511188294;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1519295386;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1519588127;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1521494163;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1521630133;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1521645162;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1522103912;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1527081441;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1529361191;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1529721864;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1530174524;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1542899558;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> public List<Resource> getLocations();1542907316;Return the configured {@code List} of {@code Resource} locations._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,configured,code,list,of,code,resource,locations,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceHttpRequestHandler -> protected String processPath(String path);1415686364;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1419949603;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1424887506;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1426880143;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1426880143;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1427130064;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1427983931;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1432211412;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1437503583;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1440514150;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1441728690;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1446131427;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1448397382;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1452002114;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1453684721;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1453757723;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1455715439;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1457125549;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1457125561;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1458747612;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1458747612;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1458813406;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1458843770;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1458845874;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1458944925;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1460123664;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1462208452;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1462528247;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1462528971;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1467053815;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1467146811;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1467726769;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1467730834;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1470831642;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1472502444;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1472514564;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1472519195;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1472576698;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1473234753;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1473437889;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1474382954;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1477660417;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1479997810;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1495868221;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1496837955;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1498780456;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1500448076;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1502974979;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1503600637;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1510251306;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1510341686;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1510940038;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1511122589;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1511188294;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1519295386;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1519588127;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}._@since 3.2.12;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,since,3,2,12;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceHttpRequestHandler -> protected String processPath(String path);1521494163;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1521630133;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1521645162;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1522103912;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1527081441;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1529361191;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1529721864;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1530174524;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1542899558;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> protected String processPath(String path);1542907316;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1510251306;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1510341686;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1510940038;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1511122589;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1511188294;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1519295386;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1519588127;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1521494163;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1521630133;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1521645162;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1522103912;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1527081441;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1529361191;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1529721864;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1530174524;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1542899558;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Nullable 	public UrlPathHelper getUrlPathHelper();1542907316;The configured {@link UrlPathHelper}._@since 4.3.13;@Nullable_	public UrlPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};the,configured,link,url,path,helper,since,4,3,13;nullable,public,url,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1502974979;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1503600637;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1510251306;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1510341686;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1510940038;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1511122589;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1511188294;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1519295386;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1519588127;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1521494163;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1521630133;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1521645162;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1522103912;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1527081441;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1529361191;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1529721864;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1530174524;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1542899558;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	@Nullable 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1542907316;Return the specified CORS configuration.;@Override_	@Nullable_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,nullable,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1457125549;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1457125561;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1458747612;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1458747612;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1458813406;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1458843770;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1458845874;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1458944925;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1460123664;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1462208452;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1462528247;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1462528971;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1467053815;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1467146811;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1467726769;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1467730834;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1470831642;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1472502444;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1472514564;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1472519195;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1472576698;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1473234753;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1473437889;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1474382954;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1477660417;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1479997810;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1495868221;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1496837955;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1498780456;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1500448076;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1502974979;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1503600637;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1510251306;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1510341686;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1510940038;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1511122589;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1511188294;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1519295386;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1519588127;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1521494163;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1521630133;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1521645162;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1522103912;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1527081441;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1529361191;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1529721864;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1530174524;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1542899558;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> public void setCorsConfiguration(CorsConfiguration corsConfiguration);1542907316;Specify the CORS configuration for resources served by this handler._<p>By default this is not set in which allows cross-origin requests.;public void setCorsConfiguration(CorsConfiguration corsConfiguration) {_		this.corsConfiguration = corsConfiguration__	};specify,the,cors,configuration,for,resources,served,by,this,handler,p,by,default,this,is,not,set,in,which,allows,cross,origin,requests;public,void,set,cors,configuration,cors,configuration,cors,configuration,this,cors,configuration,cors,configuration
ResourceHttpRequestHandler -> protected void initAllowedLocations();1415686364;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1419949603;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1424887506;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1426880143;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1426880143;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1427130064;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1427983931;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1432211412;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1437503583;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1440514150;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1441728690;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1446131427;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1448397382;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1452002114;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1453684721;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1453757723;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1455715439;Look for a {@link org.springframework.web.servlet.resource.PathResourceResolver}_among the {@link #getResourceResolvers() resource resolvers} and configure_its {@code "allowedLocations"} to match the value of the_{@link #setLocations(java.util.List) locations} property unless the "allowed_locations" of the {@code PathResourceResolver} is non-empty.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,link,org,springframework,web,servlet,resource,path,resource,resolver,among,the,link,get,resource,resolvers,resource,resolvers,and,configure,its,code,allowed,locations,to,match,the,value,of,the,link,set,locations,java,util,list,locations,property,unless,the,allowed,locations,of,the,code,path,resource,resolver,is,non,empty;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1457125549;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1457125561;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size()-1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1458747612;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1458747612;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1458813406;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1458843770;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1458845874;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1458944925;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1460123664;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1462208452;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1462528247;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1462528971;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1467053815;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1467146811;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1467726769;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1467730834;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1470831642;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1472502444;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1472514564;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1472519195;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1472576698;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1473234753;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1473437889;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1474382954;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1477660417;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1479997810;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1495868221;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1496837955;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1498780456;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1500448076;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1502974979;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1503600637;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1510251306;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1510341686;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1510940038;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1511122589;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1511188294;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1519295386;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1519588127;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1521494163;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1521630133;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1521645162;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1522103912;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1527081441;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1529361191;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1529721864;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1530174524;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1542899558;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void initAllowedLocations();1542907316;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver pathResolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(pathResolver.getAllowedLocations())) {_					pathResolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				if (this.urlPathHelper != null) {_					pathResolver.setLocationCharsets(this.locationCharsets)__					pathResolver.setUrlPathHelper(this.urlPathHelper)__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,path,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,path,resolver,get,allowed,locations,path,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,if,this,url,path,helper,null,path,resolver,set,location,charsets,this,location,charsets,path,resolver,set,url,path,helper,this,url,path,helper,break
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1328020251;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never <code>null</code>)_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,code,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1335906499;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never <code>null</code>)_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,code,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1356735495;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1357119239;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1368482696;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1374268978;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1374709921;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1380330593;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1380653018;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1381195788;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		FileCopyUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,file,copy,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1392158557;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		StreamUtils.copy(resource.getInputStream(), response.getOutputStream())__	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,stream,utils,copy,resource,get,input,stream,response,get,output,stream
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1396464852;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1397706164;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1398142414;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1398282219;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1401238462;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1409326189;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1409647448;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1415686364;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1419949603;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1424887506;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1426880143;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_				_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1426880143;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_				_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1427130064;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_				_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1427983931;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		InputStream in = resource.getInputStream()__		try {_			StreamUtils.copy(in, response.getOutputStream())__		}_		finally {_			try {_				in.close()__			}_			catch (IOException ex) {_				_			}_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,ioexception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1432211412;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1437503583;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1440514150;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1441728690;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1446131427;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1448397382;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1452002114;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1453684721;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1453757723;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1455715439;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1457125549;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void writeContent(HttpServletResponse response, Resource resource) throws IOException;1457125561;Write the actual content out to the given servlet response,_streaming the resource's content._@param response current servlet response_@param resource the identified resource (never {@code null})_@throws IOException in case of errors while writing the content;protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {_		try {_			InputStream in = resource.getInputStream()__			try {_				StreamUtils.copy(in, response.getOutputStream())__			}_			catch (NullPointerException ex) {_				_			}_			finally {_				try {_					in.close()__				}_				catch (Throwable ex) {_					_				}_			}_		}_		catch (FileNotFoundException ex) {_			_		}_	};write,the,actual,content,out,to,the,given,servlet,response,streaming,the,resource,s,content,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,throws,ioexception,in,case,of,errors,while,writing,the,content;protected,void,write,content,http,servlet,response,response,resource,resource,throws,ioexception,try,input,stream,in,resource,get,input,stream,try,stream,utils,copy,in,response,get,output,stream,catch,null,pointer,exception,ex,finally,try,in,close,catch,throwable,ex,catch,file,not,found,exception,ex
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1328020251;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never <code>null</code>)_@param mediaType the resource's media type (never <code>null</code>)_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,code,param,media,type,the,resource,s,media,type,never,code,null,code,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1335906499;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never <code>null</code>)_@param mediaType the resource's media type (never <code>null</code>)_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,code,param,media,type,the,resource,s,media,type,never,code,null,code,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1356735495;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1357119239;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1368482696;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1374268978;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1374709921;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1380330593;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1380653018;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1381195788;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1392158557;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1396464852;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1397706164;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1398142414;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1398282219;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1401238462;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1409326189;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1409647448;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1415686364;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1419949603;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1424887506;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1426880143;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1426880143;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1427130064;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1427983931;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1432211412;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1437503583;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1440514150;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1441728690;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1446131427;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1448397382;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)___		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}__		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}__		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1452002114;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1453684721;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1453757723;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1455715439;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1457125549;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1457125561;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1458747612;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1458747612;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1458813406;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1458843770;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1458845874;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1458944925;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource)__		}_		response.setContentLength((int) length)__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,throw,new,ioexception,resource,content,too,long,beyond,integer,resource,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1460123664;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1462208452;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1462528247;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1462528971;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1467053815;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1467146811;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1467726769;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1467730834;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1470831642;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1472502444;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1472514564;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1472519195;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1472576698;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof EncodedResource) {_			response.setHeader(HttpHeaders.CONTENT_ENCODING, ((EncodedResource) resource).getContentEncoding())__		}_		if (resource instanceof VersionedResource) {_			response.setHeader(HttpHeaders.ETAG, "\"" + ((VersionedResource) resource).getVersion() + "\"")__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,encoded,resource,response,set,header,http,headers,encoded,resource,resource,get,content,encoding,if,resource,instanceof,versioned,resource,response,set,header,http,headers,etag,versioned,resource,resource,get,version,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1473234753;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof ResolvedResource) {_			HttpHeaders resourceHeaders = ((ResolvedResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,resolved,resource,http,headers,resource,headers,resolved,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1473437889;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1474382954;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1477660417;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			if (contentLengthLongAvailable) {_				response.setContentLengthLong(length)__			}_			else {_				response.setHeader(HttpHeaders.CONTENT_LENGTH, Long.toString(length))__			}_		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,if,content,length,long,available,response,set,content,length,long,length,else,response,set,header,http,headers,long,to,string,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1479997810;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException;1495868221;Set headers on the given servlet response._Called for GET requests as well as HEAD requests._@param response current servlet response_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null})_@throws IOException in case of errors while setting the headers;protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {_		long length = resource.contentLength()__		if (length > Integer.MAX_VALUE) {_			response.setContentLengthLong(length)__		}_		else {_			response.setContentLength((int) length)__		}__		if (mediaType != null) {_			response.setContentType(mediaType.toString())__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			resourceHeaders.toSingleValueMap().entrySet()_					.stream().forEach(entry -> response.setHeader(entry.getKey(), entry.getValue()))__		}_		response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__	};set,headers,on,the,given,servlet,response,called,for,get,requests,as,well,as,head,requests,param,response,current,servlet,response,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null,throws,ioexception,in,case,of,errors,while,setting,the,headers;protected,void,set,headers,http,servlet,response,response,resource,resource,media,type,media,type,throws,ioexception,long,length,resource,content,length,if,length,integer,response,set,content,length,long,length,else,response,set,content,length,int,length,if,media,type,null,response,set,content,type,media,type,to,string,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,resource,headers,to,single,value,map,entry,set,stream,for,each,entry,response,set,header,entry,get,key,entry,get,value,response,set,header,http,headers,bytes
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1457125561;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				getContentNegotiationManager().resolveMediaTypes(webRequest)__			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,get,content,negotiation,manager,resolve,media,types,web,request,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1458747612;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				getContentNegotiationManager().resolveMediaTypes(webRequest)__			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,get,content,negotiation,manager,resolve,media,types,web,request,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1458747612;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if(!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1458813406;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if(!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1458843770;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1458845874;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1458944925;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1460123664;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1462208452;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1462528247;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1462528971;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1467053815;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @SuppressWarnings("deprecation") 	protected MediaType getMediaType(HttpServletRequest request, Resource resource);1467146811;Determine the media type for the given request and the resource matched_to it. This implementation first tries to determine the MediaType based_strictly on the file extension of the Resource via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}_and then expands to check against the request via_{@link ContentNegotiationManager#resolveMediaTypes}._@param request the current request_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected MediaType getMediaType(HttpServletRequest request, Resource resource) {_		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			return mediaType__		}__		Class<PathExtensionContentNegotiationStrategy> clazz = PathExtensionContentNegotiationStrategy.class__		PathExtensionContentNegotiationStrategy strategy = this.contentNegotiationManager.getStrategy(clazz)__		if (strategy != null) {_			mediaType = strategy.getMediaTypeForResource(resource)__		}__		if (mediaType == null) {_			ServletWebRequest webRequest = new ServletWebRequest(request)__			try {_				List<MediaType> mediaTypes = getContentNegotiationManager().resolveMediaTypes(webRequest)__				if (!mediaTypes.isEmpty()) {_					mediaType = mediaTypes.get(0)__				}_			}_			catch (HttpMediaTypeNotAcceptableException ex) {_				_			}_		}__		return mediaType__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,first,tries,to,determine,the,media,type,based,strictly,on,the,file,extension,of,the,resource,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,and,then,expands,to,check,against,the,request,via,link,content,negotiation,manager,resolve,media,types,param,request,the,current,request,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;suppress,warnings,deprecation,protected,media,type,get,media,type,http,servlet,request,request,resource,resource,media,type,media,type,get,media,type,resource,if,media,type,null,return,media,type,class,path,extension,content,negotiation,strategy,clazz,path,extension,content,negotiation,strategy,class,path,extension,content,negotiation,strategy,strategy,this,content,negotiation,manager,get,strategy,clazz,if,strategy,null,media,type,strategy,get,media,type,for,resource,resource,if,media,type,null,servlet,web,request,web,request,new,servlet,web,request,request,try,list,media,type,media,types,get,content,negotiation,manager,resolve,media,types,web,request,if,media,types,is,empty,media,type,media,types,get,0,catch,http,media,type,not,acceptable,exception,ex,return,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1356735495;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1368482696;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1374268978;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1374709921;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1380330593;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1380653018;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1381195788;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1392158557;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1396464852;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1397706164;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1398142414;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.debug("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,debug,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,debug,enabled,logger,debug,determined,media,type,media,type,for,resource,else,if,logger,is,debug,enabled,logger,debug,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,debug,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1398282219;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1401238462;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1409326189;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1409647448;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1415686364;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1419949603;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1424887506;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}_		setHeaders(response, resource, mediaType)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			logger.trace("HEAD request - skipping content")__			return__		}_		writeContent(response, resource)__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,set,headers,response,resource,media,type,if,equals,request,get,method,logger,trace,head,request,skipping,content,return,write,content,response,resource
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1426880143;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader("Range") == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1426880143;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response, true)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,true,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1427130064;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1427983931;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1432211412;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		checkAndPrepare(request, response)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,and,prepare,request,response,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1437503583;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1440514150;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setETagHeader(request, response)__			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,etag,header,request,response,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1441728690;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setETagHeader(request, response)__			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,etag,header,request,response,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1446131427;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setETagHeader(request, response)__			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,etag,header,request,response,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1448397382;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setETagHeader(request, response)__			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,etag,header,request,response,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1452002114;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1453684721;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", "GET,HEAD")__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,head,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1453757723;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1455715439;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1457125549;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1457125561;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			writeContent(response, resource)__		}_		else {_			writePartialContent(request, response, resource, mediaType)__		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,write,content,response,resource,else,write,partial,content,request,response,resource,media,type
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1458747612;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				HttpRangeResource rangeResource = new HttpRangeResource(httpRanges, resource)__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceHttpMessageConverter.write(rangeResource, mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				Long contentLength = resource.contentLength()__				if (contentLength != null) {_					response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				}_				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,http,range,resource,range,resource,new,http,range,resource,http,ranges,resource,response,set,status,http,servlet,response,this,resource,http,message,converter,write,range,resource,media,type,output,message,catch,illegal,argument,exception,ex,long,content,length,resource,content,length,if,content,length,null,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1458747612;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				HttpRangeResource rangeResource = new HttpRangeResource(httpRanges, resource)__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceHttpMessageConverter.write(rangeResource, mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				Long contentLength = resource.contentLength()__				if (contentLength != null) {_					response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				}_				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,http,range,resource,range,resource,new,http,range,resource,http,ranges,resource,response,set,status,http,servlet,response,this,resource,http,message,converter,write,range,resource,media,type,output,message,catch,illegal,argument,exception,ex,long,content,length,resource,content,length,if,content,length,null,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1458813406;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				HttpRangeResource rangeResource = new HttpRangeResource(httpRanges, resource)__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceHttpMessageConverter.write(rangeResource, mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				Long contentLength = resource.contentLength()__				if (contentLength != null) {_					response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				}_				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,http,range,resource,range,resource,new,http,range,resource,http,ranges,resource,response,set,status,http,servlet,response,this,resource,http,message,converter,write,range,resource,media,type,output,message,catch,illegal,argument,exception,ex,long,content,length,resource,content,length,if,content,length,null,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1458843770;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				HttpRangeResource rangeResource = new HttpRangeResource(httpRanges, resource)__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceHttpMessageConverter.write(rangeResource, mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				Long contentLength = resource.contentLength()__				if (contentLength != null) {_					response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				}_				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,http,range,resource,range,resource,new,http,range,resource,http,ranges,resource,response,set,status,http,servlet,response,this,resource,http,message,converter,write,range,resource,media,type,output,message,catch,illegal,argument,exception,ex,long,content,length,resource,content,length,if,content,length,null,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1458845874;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				HttpRangeResource rangeResource = new HttpRangeResource(httpRanges, resource)__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceHttpMessageConverter.write(rangeResource, mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				Long contentLength = resource.contentLength()__				if (contentLength != null) {_					response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				}_				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,http,range,resource,range,resource,new,http,range,resource,http,ranges,resource,response,set,status,http,servlet,response,this,resource,http,message,converter,write,range,resource,media,type,output,message,catch,illegal,argument,exception,ex,long,content,length,resource,content,length,if,content,length,null,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1458944925;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				HttpRangeResource rangeResource = new HttpRangeResource(httpRanges, resource)__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceHttpMessageConverter.write(rangeResource, mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,http,range,resource,range,resource,new,http,range,resource,http,ranges,resource,response,set,status,http,servlet,response,this,resource,http,message,converter,write,range,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1460123664;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				HttpRangeResource rangeResource = new HttpRangeResource(httpRanges, resource)__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceHttpMessageConverter.write(rangeResource, mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,http,range,resource,range,resource,new,http,range,resource,http,ranges,resource,response,set,status,http,servlet,response,this,resource,http,message,converter,write,range,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1462208452;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		outputMessage.getHeaders().add(HttpHeaders.ACCEPT_RANGES, "bytes")___		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if(httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter_							.write(HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.addHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,output,message,get,headers,add,http,headers,bytes,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,add,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1462528247;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if(httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1462528971;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if(httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1467053815;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if(httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1467146811;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if(httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1467726769;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if(httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1467730834;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if(httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1470831642;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1472502444;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1472514564;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1472519195;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1472576698;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1473234753;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1473437889;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1474382954;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1477660417;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1479997810;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1495868221;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1496837955;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1498780456;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1500448076;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1502974979;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				if (httpRanges.size() == 1) {_					ResourceRegion resourceRegion = httpRanges.get(0).toResourceRegion(resource)__					this.resourceRegionHttpMessageConverter.write(resourceRegion, mediaType, outputMessage)__				}_				else {_					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__				}_			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,if,http,ranges,size,1,resource,region,resource,region,http,ranges,get,0,to,resource,region,resource,this,resource,region,http,message,converter,write,resource,region,media,type,output,message,else,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1503600637;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1510251306;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1510341686;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1510940038;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1511122589;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__					this.resourceRegionHttpMessageConverter.write(_							HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1511188294;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1519295386;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1519588127;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1521494163;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1521630133;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1521645162;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1522103912;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1527081441;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("No matching resource found - returning 404")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified - returning 304")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)__		if (mediaType != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Determined media type '" + mediaType + "' for " + resource)__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("No media type found for " + resource + " - not sending a content-type header")__			}_		}__		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			logger.trace("HEAD request - skipping content")__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,no,matching,resource,found,returning,404,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,equals,request,get,method,set,headers,response,resource,media,type,logger,trace,head,request,skipping,content,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1529361191;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.trace("Resource not found")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,trace,resource,not,found,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,equals,request,get,method,set,headers,response,resource,media,type,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1529721864;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("Resource not found")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,debug,resource,not,found,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,equals,request,get,method,set,headers,response,resource,media,type,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1530174524;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("Resource not found")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,debug,resource,not,found,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,equals,request,get,method,set,headers,response,resource,media,type,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1542899558;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("Resource not found")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,debug,resource,not,found,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,equals,request,get,method,set,headers,response,resource,media,type,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> @Override 	public void handleRequest(HttpServletRequest request, HttpServletResponse response) 			throws ServletException, IOException;1542907316;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public void handleRequest(HttpServletRequest request, HttpServletResponse response)_			throws ServletException, IOException {__		_		Resource resource = getResource(request)__		if (resource == null) {_			logger.debug("Resource not found")__			response.sendError(HttpServletResponse.SC_NOT_FOUND)__			return__		}__		if (HttpMethod.OPTIONS.matches(request.getMethod())) {_			response.setHeader("Allow", getAllowHeader())__			return__		}__		_		checkRequest(request)___		_		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {_			logger.trace("Resource not modified")__			return__		}__		_		prepareResponse(response)___		_		MediaType mediaType = getMediaType(request, resource)___		_		if (METHOD_HEAD.equals(request.getMethod())) {_			setHeaders(response, resource, mediaType)__			return__		}__		ServletServerHttpResponse outputMessage = new ServletServerHttpResponse(response)__		if (request.getHeader(HttpHeaders.RANGE) == null) {_			Assert.state(this.resourceHttpMessageConverter != null, "Not initialized")__			setHeaders(response, resource, mediaType)__			this.resourceHttpMessageConverter.write(resource, mediaType, outputMessage)__		}_		else {_			Assert.state(this.resourceRegionHttpMessageConverter != null, "Not initialized")__			response.setHeader(HttpHeaders.ACCEPT_RANGES, "bytes")__			ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(request)__			try {_				List<HttpRange> httpRanges = inputMessage.getHeaders().getRange()__				response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)__				this.resourceRegionHttpMessageConverter.write(_						HttpRange.toResourceRegions(httpRanges, resource), mediaType, outputMessage)__			}_			catch (IllegalArgumentException ex) {_				response.setHeader("Content-Range", "bytes */" + resource.contentLength())__				response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE)__			}_		}_	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,void,handle,request,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,ioexception,resource,resource,get,resource,request,if,resource,null,logger,debug,resource,not,found,response,send,error,http,servlet,response,return,if,http,method,options,matches,request,get,method,response,set,header,allow,get,allow,header,return,check,request,request,if,new,servlet,web,request,request,response,check,not,modified,resource,last,modified,logger,trace,resource,not,modified,return,prepare,response,response,media,type,media,type,get,media,type,request,resource,if,equals,request,get,method,set,headers,response,resource,media,type,return,servlet,server,http,response,output,message,new,servlet,server,http,response,response,if,request,get,header,http,headers,range,null,assert,state,this,resource,http,message,converter,null,not,initialized,set,headers,response,resource,media,type,this,resource,http,message,converter,write,resource,media,type,output,message,else,assert,state,this,resource,region,http,message,converter,null,not,initialized,response,set,header,http,headers,bytes,servlet,server,http,request,input,message,new,servlet,server,http,request,request,try,list,http,range,http,ranges,input,message,get,headers,get,range,response,set,status,http,servlet,response,this,resource,region,http,message,converter,write,http,range,to,resource,regions,http,ranges,resource,media,type,output,message,catch,illegal,argument,exception,ex,response,set,header,content,range,bytes,resource,content,length,response,send,error,http,servlet,response
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1457125561;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1458747612;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3.0;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3,0;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1458747612;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3.0;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3,0;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1458813406;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3.0;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3,0;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1458843770;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3.0;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3,0;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1458845874;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3.0;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3,0;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1458944925;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1460123664;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1462208452;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1462528247;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1462528971;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1467053815;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1467146811;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1467726769;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1467730834;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1470831642;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1472502444;Configure a {@code ContentNegotiationManager} to determine the media types_for resources being served. If the manager contains a path_extension strategy it will be used to look up the file extension_of resources being served via_{@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource_getMediaTypeForResource}. If that fails the check is then expanded_to use any configured content negotiation strategy against the request._<p>By default a {@link ContentNegotiationManagerFactoryBean} with default_settings is used to create the manager. See the Javadoc of_{@code ContentNegotiationManagerFactoryBean} for details_@param contentNegotiationManager the manager to use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,used,to,look,up,the,file,extension,of,resources,being,served,via,link,path,extension,content,negotiation,strategy,get,media,type,for,resource,get,media,type,for,resource,if,that,fails,the,check,is,then,expanded,to,use,any,configured,content,negotiation,strategy,against,the,request,p,by,default,a,link,content,negotiation,manager,factory,bean,with,default,settings,is,used,to,create,the,manager,see,the,javadoc,of,code,content,negotiation,manager,factory,bean,for,details,param,content,negotiation,manager,the,manager,to,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1472514564;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1472519195;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1472576698;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1473234753;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1473437889;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1474382954;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1477660417;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1479997810;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1495868221;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1496837955;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager);1498780456;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1496837955;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1498780456;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1500448076;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1502974979;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1503600637;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1510251306;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1510341686;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1510940038;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1511122589;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1511188294;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1519295386;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1519588127;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1521494163;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1521630133;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1521645162;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1522103912;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1527081441;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1529361191;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1529721864;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1530174524;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1542899558;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1542907316;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public Map<Resource, Charset> getLocationCharsets();1510251306;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,location,charsets
ResourceHttpRequestHandler -> public Map<Resource, Charset> getLocationCharsets();1510341686;Return charsets associated with static resource locations._@since 4.3.13;public Map<Resource, Charset> getLocationCharsets() {_		return Collections.unmodifiableMap(this.locationCharsets)__	};return,charsets,associated,with,static,resource,locations,since,4,3,13;public,map,resource,charset,get,location,charsets,return,collections,unmodifiable,map,this,location,charsets
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1457125561;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1458747612;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1458747612;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1458813406;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1458843770;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1458845874;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1458944925;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1460123664;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1462208452;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1462528247;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1462528971;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1467053815;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> @Deprecated 	protected MediaType getMediaType(Resource resource);1467146811;Determine an appropriate media type for the given resource._@param resource the resource to check_@return the corresponding media type, or {@code null} if none found_@deprecated as of 4.3 this method is deprecated_ please override_{@link #getMediaType(HttpServletRequest, Resource)} instead.;@Deprecated_	protected MediaType getMediaType(Resource resource) {_		return null__	};determine,an,appropriate,media,type,for,the,given,resource,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found,deprecated,as,of,4,3,this,method,is,deprecated,please,override,link,get,media,type,http,servlet,request,resource,instead;deprecated,protected,media,type,get,media,type,resource,resource,return,null
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1500448076;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1502974979;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1503600637;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1510251306;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1510341686;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1510940038;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@param contentNegotiationManager the manager in use_@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,param,content,negotiation,manager,the,manager,in,use,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1511122589;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1511188294;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1519295386;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1519588127;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1521494163;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1521630133;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1521645162;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1522103912;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1527081441;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1529361191;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1529721864;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1530174524;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1542899558;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager);1542907316;Configure a {@code ContentNegotiationManager} to help determine the_media types for resources being served. If the manager contains a path_extension strategy it will be checked for registered file extension._@since 4.3;public void setContentNegotiationManager(@Nullable ContentNegotiationManager contentNegotiationManager) {_		this.contentNegotiationManager = contentNegotiationManager__	};configure,a,code,content,negotiation,manager,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,strategy,it,will,be,checked,for,registered,file,extension,since,4,3;public,void,set,content,negotiation,manager,nullable,content,negotiation,manager,content,negotiation,manager,this,content,negotiation,manager,content,negotiation,manager
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1380330593;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers = resourceResolvers__	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1380653018;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1397706164;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1398142414;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1398282219;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1401238462;Configure the list of {@link ResourceResolver}s to use.__<p>By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1409326189;Configure the list of {@link ResourceResolver}s to use.__<p>By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1409647448;Configure the list of {@link ResourceResolver}s to use.__<p>By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1415686364;Configure the list of {@link ResourceResolver}s to use.__<p>By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1419949603;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1424887506;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1426880143;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1426880143;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1427130064;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1427983931;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1432211412;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1437503583;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1440514150;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1441728690;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1446131427;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1448397382;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1452002114;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1453684721;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1453757723;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1455715439;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1457125549;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1457125561;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1458747612;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1458747612;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1458813406;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1458843770;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1458845874;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1458944925;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1460123664;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1462208452;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1462528247;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1462528971;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1467053815;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1467146811;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1467726769;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1467730834;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1470831642;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1472502444;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1472514564;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1472519195;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1472576698;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1473234753;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1473437889;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1474382954;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1477660417;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1479997810;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1495868221;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1462528247;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1462528971;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1467053815;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1467146811;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1467726769;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1467730834;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1470831642;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1472502444;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1472514564;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1472519195;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1472576698;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1473234753;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1473437889;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1474382954;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1477660417;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1479997810;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1495868221;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1496837955;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1498780456;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> @Override 	public CorsConfiguration getCorsConfiguration(HttpServletRequest request);1500448076;Return the specified CORS configuration.;@Override_	public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {_		return this.corsConfiguration__	};return,the,specified,cors,configuration;override,public,cors,configuration,get,cors,configuration,http,servlet,request,request,return,this,cors,configuration
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1510940038;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1511122589;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1511188294;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1519295386;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1519588127;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1521494163;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1521630133;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1521645162;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1522103912;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1527081441;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1529361191;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1529721864;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1530174524;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1542899558;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setLocationValues(List<String> locationValues);1542907316;An alternative to {@link #setLocations(List)} that accepts a list of_String-based location values, with support for {@link UrlResource}'s_(e.g. files or HTTP URLs) with a special prefix to indicate the charset_to use when appending relative paths. For example_{@code "[charset=Windows-31J]http://example.org/path"}._@since 4.3.13;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};an,alternative,to,link,set,locations,list,that,accepts,a,list,of,string,based,location,values,with,support,for,link,url,resource,s,e,g,files,or,http,urls,with,a,special,prefix,to,indicate,the,charset,to,use,when,appending,relative,paths,for,example,code,charset,windows,31j,http,example,org,path,since,4,3,13;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1462528247;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1462528971;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1467053815;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1467146811;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1467726769;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1467730834;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1470831642;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1472502444;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1472514564;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1472519195;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1472576698;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1473234753;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1473437889;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1474382954;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1477660417;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1479997810;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1495868221;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter);1496837955;Configure the {@link ResourceRegionHttpMessageConverter} to use._<p>By default a {@link ResourceRegionHttpMessageConverter} will be configured._@since 4.3;public void setResourceRegionHttpMessageConverter(ResourceRegionHttpMessageConverter resourceRegionHttpMessageConverter) {_		this.resourceRegionHttpMessageConverter = resourceRegionHttpMessageConverter__	};configure,the,link,resource,region,http,message,converter,to,use,p,by,default,a,link,resource,region,http,message,converter,will,be,configured,since,4,3;public,void,set,resource,region,http,message,converter,resource,region,http,message,converter,resource,region,http,message,converter,this,resource,region,http,message,converter,resource,region,http,message,converter
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1521630133;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1521645162;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1522103912;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1527081441;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1529361191;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1529721864;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1530174524;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1542899558;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceHttpRequestHandler -> private boolean isInvalidEncodedPath(String path);1542907316;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
