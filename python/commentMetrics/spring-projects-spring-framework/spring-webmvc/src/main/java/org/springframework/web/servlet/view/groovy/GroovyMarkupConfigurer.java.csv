commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the Groovy Markup Template resource loader path(s) via a Spring resource  * location. Accepts multiple locations as a comma-separated list of paths.  * Standard URLs like "file:" and "classpath:" and pseudo URLs are supported  * as understood by Spring's {@link org.springframework.core.io.ResourceLoader}.  * Relative paths are allowed when running in an ApplicationContext.  */ ;/**  * Set the Groovy Markup Template resource loader path(s) via a Spring resource  * location. Accepts multiple locations as a comma-separated list of paths.  * Standard URLs like "file:" and "classpath:" and pseudo URLs are supported  * as understood by Spring's {@link org.springframework.core.io.ResourceLoader}.  * Relative paths are allowed when running in an ApplicationContext.  */ public void setResourceLoaderPath(String resourceLoaderPath) {     this.resourceLoaderPath = resourceLoaderPath. }
false;public;0;3;;public String getResourceLoaderPath() {     return this.resourceLoaderPath. }
true;public;1;3;/**  * Set a pre-configured MarkupTemplateEngine to use for the Groovy Markup  * Template web configuration.  * <p>Note that this engine instance has to be manually configured, since all  * other bean properties of this configurer will be ignored.  */ ;/**  * Set a pre-configured MarkupTemplateEngine to use for the Groovy Markup  * Template web configuration.  * <p>Note that this engine instance has to be manually configured, since all  * other bean properties of this configurer will be ignored.  */ public void setTemplateEngine(MarkupTemplateEngine templateEngine) {     this.templateEngine = templateEngine. }
false;public;0;4;;public MarkupTemplateEngine getTemplateEngine() {     Assert.state(this.templateEngine != null, "No MarkupTemplateEngine set").     return this.templateEngine. }
false;public;1;4;;@Override public void setApplicationContext(ApplicationContext applicationContext) {     this.applicationContext = applicationContext. }
false;protected;0;4;;protected ApplicationContext getApplicationContext() {     Assert.state(this.applicationContext != null, "No ApplicationContext set").     return this.applicationContext. }
true;public;1;4;/**  * This method should not be used, since the considered Locale for resolving  * templates is the Locale for the current HTTP request.  */ ;/**  * This method should not be used, since the considered Locale for resolving  * templates is the Locale for the current HTTP request.  */ @Override public void setLocale(Locale locale) {     super.setLocale(locale). }
false;public;0;6;;@Override public void afterPropertiesSet() throws Exception {     if (this.templateEngine == null) {         this.templateEngine = createTemplateEngine().     } }
false;protected;0;7;;protected MarkupTemplateEngine createTemplateEngine() throws IOException {     if (this.templateEngine == null) {         ClassLoader templateClassLoader = createTemplateClassLoader().         this.templateEngine = new MarkupTemplateEngine(templateClassLoader, this, new LocaleTemplateResolver()).     }     return this.templateEngine. }
true;protected;0;17;/**  * Create a parent ClassLoader for Groovy to use as parent ClassLoader  * when loading and compiling templates.  */ ;/**  * Create a parent ClassLoader for Groovy to use as parent ClassLoader  * when loading and compiling templates.  */ protected ClassLoader createTemplateClassLoader() throws IOException {     String[] paths = StringUtils.commaDelimitedListToStringArray(getResourceLoaderPath()).     List<URL> urls = new ArrayList<>().     for (String path : paths) {         Resource[] resources = getApplicationContext().getResources(path).         if (resources.length > 0) {             for (Resource resource : resources) {                 if (resource.exists()) {                     urls.add(resource.getURL()).                 }             }         }     }     ClassLoader classLoader = getApplicationContext().getClassLoader().     Assert.state(classLoader != null, "No ClassLoader").     return (!urls.isEmpty() ? new URLClassLoader(urls.toArray(new URL[0]), classLoader) : classLoader). }
true;protected;2;15;/**  * Resolve a template from the given template path.  * <p>The default implementation uses the Locale associated with the current request,  * as obtained through {@link org.springframework.context.i18n.LocaleContextHolder LocaleContextHolder},  * to find the template file. Effectively the locale configured at the engine level is ignored.  * @see LocaleContextHolder  * @see #setLocale  */ ;/**  * Resolve a template from the given template path.  * <p>The default implementation uses the Locale associated with the current request,  * as obtained through {@link org.springframework.context.i18n.LocaleContextHolder LocaleContextHolder},  * to find the template file. Effectively the locale configured at the engine level is ignored.  * @see LocaleContextHolder  * @see #setLocale  */ protected URL resolveTemplate(ClassLoader classLoader, String templatePath) throws IOException {     MarkupTemplateEngine.TemplateResource resource = MarkupTemplateEngine.TemplateResource.parse(templatePath).     Locale locale = LocaleContextHolder.getLocale().     URL url = classLoader.getResource(resource.withLocale(StringUtils.replace(locale.toString(), "-", "_")).toString()).     if (url == null) {         url = classLoader.getResource(resource.withLocale(locale.getLanguage()).toString()).     }     if (url == null) {         url = classLoader.getResource(resource.withLocale(null).toString()).     }     if (url == null) {         throw new IOException("Unable to load template:" + templatePath).     }     return url. }
false;public;2;4;;@Override public void configure(ClassLoader templateClassLoader, TemplateConfiguration configuration) {     this.classLoader = templateClassLoader. }
false;public;1;5;;@Override public URL resolveTemplate(String templatePath) throws IOException {     Assert.state(this.classLoader != null, "No template ClassLoader available").     return GroovyMarkupConfigurer.this.resolveTemplate(this.classLoader, templatePath). }
