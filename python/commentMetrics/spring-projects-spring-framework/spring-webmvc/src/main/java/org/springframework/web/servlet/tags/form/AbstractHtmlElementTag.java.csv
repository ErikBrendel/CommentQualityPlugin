commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the value of the '{@code class}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code class}' attribute.  * May be a runtime expression.  */ public void setCssClass(String cssClass) {     this.cssClass = cssClass. }
true;protected;0;4;/**  * Get the value of the '{@code class}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code class}' attribute.  * May be a runtime expression.  */ @Nullable protected String getCssClass() {     return this.cssClass. }
true;public;1;3;/**  * The CSS class to use when the field bound to a particular tag has errors.  * May be a runtime expression.  */ ;/**  * The CSS class to use when the field bound to a particular tag has errors.  * May be a runtime expression.  */ public void setCssErrorClass(String cssErrorClass) {     this.cssErrorClass = cssErrorClass. }
true;protected;0;4;/**  * The CSS class to use when the field bound to a particular tag has errors.  * May be a runtime expression.  */ ;/**  * The CSS class to use when the field bound to a particular tag has errors.  * May be a runtime expression.  */ @Nullable protected String getCssErrorClass() {     return this.cssErrorClass. }
true;public;1;3;/**  * Set the value of the '{@code style}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code style}' attribute.  * May be a runtime expression.  */ public void setCssStyle(String cssStyle) {     this.cssStyle = cssStyle. }
true;protected;0;4;/**  * Get the value of the '{@code style}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code style}' attribute.  * May be a runtime expression.  */ @Nullable protected String getCssStyle() {     return this.cssStyle. }
true;public;1;3;/**  * Set the value of the '{@code lang}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code lang}' attribute.  * May be a runtime expression.  */ public void setLang(String lang) {     this.lang = lang. }
true;protected;0;4;/**  * Get the value of the '{@code lang}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code lang}' attribute.  * May be a runtime expression.  */ @Nullable protected String getLang() {     return this.lang. }
true;public;1;3;/**  * Set the value of the '{@code title}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code title}' attribute.  * May be a runtime expression.  */ public void setTitle(String title) {     this.title = title. }
true;protected;0;4;/**  * Get the value of the '{@code title}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code title}' attribute.  * May be a runtime expression.  */ @Nullable protected String getTitle() {     return this.title. }
true;public;1;3;/**  * Set the value of the '{@code dir}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code dir}' attribute.  * May be a runtime expression.  */ public void setDir(String dir) {     this.dir = dir. }
true;protected;0;4;/**  * Get the value of the '{@code dir}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code dir}' attribute.  * May be a runtime expression.  */ @Nullable protected String getDir() {     return this.dir. }
true;public;1;3;/**  * Set the value of the '{@code tabindex}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code tabindex}' attribute.  * May be a runtime expression.  */ public void setTabindex(String tabindex) {     this.tabindex = tabindex. }
true;protected;0;4;/**  * Get the value of the '{@code tabindex}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code tabindex}' attribute.  * May be a runtime expression.  */ @Nullable protected String getTabindex() {     return this.tabindex. }
true;public;1;3;/**  * Set the value of the '{@code onclick}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onclick}' attribute.  * May be a runtime expression.  */ public void setOnclick(String onclick) {     this.onclick = onclick. }
true;protected;0;4;/**  * Get the value of the '{@code onclick}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onclick}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnclick() {     return this.onclick. }
true;public;1;3;/**  * Set the value of the '{@code ondblclick}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code ondblclick}' attribute.  * May be a runtime expression.  */ public void setOndblclick(String ondblclick) {     this.ondblclick = ondblclick. }
true;protected;0;4;/**  * Get the value of the '{@code ondblclick}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code ondblclick}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOndblclick() {     return this.ondblclick. }
true;public;1;3;/**  * Set the value of the '{@code onmousedown}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onmousedown}' attribute.  * May be a runtime expression.  */ public void setOnmousedown(String onmousedown) {     this.onmousedown = onmousedown. }
true;protected;0;4;/**  * Get the value of the '{@code onmousedown}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onmousedown}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnmousedown() {     return this.onmousedown. }
true;public;1;3;/**  * Set the value of the '{@code onmouseup}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onmouseup}' attribute.  * May be a runtime expression.  */ public void setOnmouseup(String onmouseup) {     this.onmouseup = onmouseup. }
true;protected;0;4;/**  * Get the value of the '{@code onmouseup}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onmouseup}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnmouseup() {     return this.onmouseup. }
true;public;1;3;/**  * Set the value of the '{@code onmouseover}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onmouseover}' attribute.  * May be a runtime expression.  */ public void setOnmouseover(String onmouseover) {     this.onmouseover = onmouseover. }
true;protected;0;4;/**  * Get the value of the '{@code onmouseover}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onmouseover}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnmouseover() {     return this.onmouseover. }
true;public;1;3;/**  * Set the value of the '{@code onmousemove}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onmousemove}' attribute.  * May be a runtime expression.  */ public void setOnmousemove(String onmousemove) {     this.onmousemove = onmousemove. }
true;protected;0;4;/**  * Get the value of the '{@code onmousemove}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onmousemove}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnmousemove() {     return this.onmousemove. }
true;public;1;3;/**  * Set the value of the '{@code onmouseout}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onmouseout}' attribute.  * May be a runtime expression.  */ public void setOnmouseout(String onmouseout) {     this.onmouseout = onmouseout. }
true;protected;0;4;/**  * Get the value of the '{@code onmouseout}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onmouseout}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnmouseout() {     return this.onmouseout. }
true;public;1;3;/**  * Set the value of the '{@code onkeypress}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onkeypress}' attribute.  * May be a runtime expression.  */ public void setOnkeypress(String onkeypress) {     this.onkeypress = onkeypress. }
true;protected;0;4;/**  * Get the value of the '{@code onkeypress}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onkeypress}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnkeypress() {     return this.onkeypress. }
true;public;1;3;/**  * Set the value of the '{@code onkeyup}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onkeyup}' attribute.  * May be a runtime expression.  */ public void setOnkeyup(String onkeyup) {     this.onkeyup = onkeyup. }
true;protected;0;4;/**  * Get the value of the '{@code onkeyup}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onkeyup}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnkeyup() {     return this.onkeyup. }
true;public;1;3;/**  * Set the value of the '{@code onkeydown}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onkeydown}' attribute.  * May be a runtime expression.  */ public void setOnkeydown(String onkeydown) {     this.onkeydown = onkeydown. }
true;protected;0;4;/**  * Get the value of the '{@code onkeydown}' attribute.  * May be a runtime expression.  */ ;/**  * Get the value of the '{@code onkeydown}' attribute.  * May be a runtime expression.  */ @Nullable protected String getOnkeydown() {     return this.onkeydown. }
true;protected;0;4;/**  * Get the map of dynamic attributes.  */ ;/**  * Get the map of dynamic attributes.  */ @Nullable protected Map<String, Object> getDynamicAttributes() {     return this.dynamicAttributes. }
true;public;3;11;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public void setDynamicAttribute(String uri, String localName, Object value) throws JspException {     if (this.dynamicAttributes == null) {         this.dynamicAttributes = new HashMap<>().     }     if (!isValidDynamicAttribute(localName, value)) {         throw new IllegalArgumentException("Attribute " + localName + "=\"" + value + "\" is not allowed").     }     this.dynamicAttributes.put(localName, value). }
true;protected;2;3;/**  * Whether the given name-value pair is a valid dynamic attribute.  */ ;/**  * Whether the given name-value pair is a valid dynamic attribute.  */ protected boolean isValidDynamicAttribute(String localName, Object value) {     return true. }
true;protected;1;5;/**  * Writes the default attributes configured via this base class to the supplied {@link TagWriter}.  * Subclasses should call this when they want the base attribute set to be written to the output.  */ ;/**  * Writes the default attributes configured via this base class to the supplied {@link TagWriter}.  * Subclasses should call this when they want the base attribute set to be written to the output.  */ @Override protected void writeDefaultAttributes(TagWriter tagWriter) throws JspException {     super.writeDefaultAttributes(tagWriter).     writeOptionalAttributes(tagWriter). }
true;protected;1;25;/**  * Writes the optional attributes configured via this base class to the supplied {@link TagWriter}.  * The set of optional attributes that will be rendered includes any non-standard dynamic attributes.  * Called by {@link #writeDefaultAttributes(TagWriter)}.  */ ;/**  * Writes the optional attributes configured via this base class to the supplied {@link TagWriter}.  * The set of optional attributes that will be rendered includes any non-standard dynamic attributes.  * Called by {@link #writeDefaultAttributes(TagWriter)}.  */ protected void writeOptionalAttributes(TagWriter tagWriter) throws JspException {     tagWriter.writeOptionalAttributeValue(CLASS_ATTRIBUTE, resolveCssClass()).     tagWriter.writeOptionalAttributeValue(STYLE_ATTRIBUTE, ObjectUtils.getDisplayString(evaluate("cssStyle", getCssStyle()))).     writeOptionalAttribute(tagWriter, LANG_ATTRIBUTE, getLang()).     writeOptionalAttribute(tagWriter, TITLE_ATTRIBUTE, getTitle()).     writeOptionalAttribute(tagWriter, DIR_ATTRIBUTE, getDir()).     writeOptionalAttribute(tagWriter, TABINDEX_ATTRIBUTE, getTabindex()).     writeOptionalAttribute(tagWriter, ONCLICK_ATTRIBUTE, getOnclick()).     writeOptionalAttribute(tagWriter, ONDBLCLICK_ATTRIBUTE, getOndblclick()).     writeOptionalAttribute(tagWriter, ONMOUSEDOWN_ATTRIBUTE, getOnmousedown()).     writeOptionalAttribute(tagWriter, ONMOUSEUP_ATTRIBUTE, getOnmouseup()).     writeOptionalAttribute(tagWriter, ONMOUSEOVER_ATTRIBUTE, getOnmouseover()).     writeOptionalAttribute(tagWriter, ONMOUSEMOVE_ATTRIBUTE, getOnmousemove()).     writeOptionalAttribute(tagWriter, ONMOUSEOUT_ATTRIBUTE, getOnmouseout()).     writeOptionalAttribute(tagWriter, ONKEYPRESS_ATTRIBUTE, getOnkeypress()).     writeOptionalAttribute(tagWriter, ONKEYUP_ATTRIBUTE, getOnkeyup()).     writeOptionalAttribute(tagWriter, ONKEYDOWN_ATTRIBUTE, getOnkeydown()).     if (!CollectionUtils.isEmpty(this.dynamicAttributes)) {         for (String attr : this.dynamicAttributes.keySet()) {             tagWriter.writeOptionalAttributeValue(attr, getDisplayString(this.dynamicAttributes.get(attr))).         }     } }
true;protected;0;8;/**  * Gets the appropriate CSS class to use based on the state of the current  * {@link org.springframework.web.servlet.support.BindStatus} object.  */ ;/**  * Gets the appropriate CSS class to use based on the state of the current  * {@link org.springframework.web.servlet.support.BindStatus} object.  */ protected String resolveCssClass() throws JspException {     if (getBindStatus().isError() && StringUtils.hasText(getCssErrorClass())) {         return ObjectUtils.getDisplayString(evaluate("cssErrorClass", getCssErrorClass())).     } else {         return ObjectUtils.getDisplayString(evaluate("cssClass", getCssClass())).     } }
