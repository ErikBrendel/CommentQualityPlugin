commented;modifiers;parameterAmount;loc;comment;code
true;protected;2;4;/**  * Evaluate the supplied value for the supplied attribute name.  * <p>The default implementation simply returns the given value as-is.  */ ;/**  * Evaluate the supplied value for the supplied attribute name.  * <p>The default implementation simply returns the given value as-is.  */ @Nullable protected Object evaluate(String attributeName, @Nullable Object value) throws JspException {     return value. }
true;protected,final;3;7;/**  * Optionally writes the supplied value under the supplied attribute name into the supplied  * {@link TagWriter}. In this case, the supplied value is {@link #evaluate evaluated} first  * and then the {@link ObjectUtils#getDisplayString String representation} is written as the  * attribute value. If the resultant {@code String} representation is {@code null}  * or empty, no attribute is written.  * @see TagWriter#writeOptionalAttributeValue(String, String)  */ ;/**  * Optionally writes the supplied value under the supplied attribute name into the supplied  * {@link TagWriter}. In this case, the supplied value is {@link #evaluate evaluated} first  * and then the {@link ObjectUtils#getDisplayString String representation} is written as the  * attribute value. If the resultant {@code String} representation is {@code null}  * or empty, no attribute is written.  * @see TagWriter#writeOptionalAttributeValue(String, String)  */ protected final void writeOptionalAttribute(TagWriter tagWriter, String attributeName, @Nullable String value) throws JspException {     if (value != null) {         tagWriter.writeOptionalAttributeValue(attributeName, getDisplayString(evaluate(attributeName, value))).     } }
true;protected;0;3;/**  * Create the {@link TagWriter} which all output will be written to. By default,  * the {@link TagWriter} writes its output to the {@link javax.servlet.jsp.JspWriter}  * for the current {@link javax.servlet.jsp.PageContext}. Subclasses may choose to  * change the {@link java.io.Writer} to which output is actually written.  */ ;/**  * Create the {@link TagWriter} which all output will be written to. By default,  * the {@link TagWriter} writes its output to the {@link javax.servlet.jsp.JspWriter}  * for the current {@link javax.servlet.jsp.PageContext}. Subclasses may choose to  * change the {@link java.io.Writer} to which output is actually written.  */ protected TagWriter createTagWriter() {     return new TagWriter(this.pageContext). }
true;protected,final;0;4;/**  * Provide a simple template method that calls {@link #createTagWriter()} and passes  * the created {@link TagWriter} to the {@link #writeTagContent(TagWriter)} method.  * @return the value returned by {@link #writeTagContent(TagWriter)}  */ ;/**  * Provide a simple template method that calls {@link #createTagWriter()} and passes  * the created {@link TagWriter} to the {@link #writeTagContent(TagWriter)} method.  * @return the value returned by {@link #writeTagContent(TagWriter)}  */ @Override protected final int doStartTagInternal() throws Exception {     return writeTagContent(createTagWriter()). }
true;protected;1;3;/**  * Get the display value of the supplied {@code Object}, HTML escaped  * as required. This version is <strong>not</strong> {@link PropertyEditor}-aware.  */ ;/**  * Get the display value of the supplied {@code Object}, HTML escaped  * as required. This version is <strong>not</strong> {@link PropertyEditor}-aware.  */ protected String getDisplayString(@Nullable Object value) {     return ValueFormatter.getDisplayString(value, isHtmlEscape()). }
true;protected;2;3;/**  * Get the display value of the supplied {@code Object}, HTML escaped  * as required. If the supplied value is not a {@link String} and the supplied  * {@link PropertyEditor} is not null then the {@link PropertyEditor} is used  * to obtain the display value.  */ ;/**  * Get the display value of the supplied {@code Object}, HTML escaped  * as required. If the supplied value is not a {@link String} and the supplied  * {@link PropertyEditor} is not null then the {@link PropertyEditor} is used  * to obtain the display value.  */ protected String getDisplayString(@Nullable Object value, @Nullable PropertyEditor propertyEditor) {     return ValueFormatter.getDisplayString(value, propertyEditor, isHtmlEscape()). }
true;protected;0;5;/**  * Overridden to default to {@code true} in case of no explicit default given.  */ ;/**  * Overridden to default to {@code true} in case of no explicit default given.  */ @Override protected boolean isDefaultHtmlEscape() {     Boolean defaultHtmlEscape = getRequestContext().getDefaultHtmlEscape().     return (defaultHtmlEscape == null || defaultHtmlEscape.booleanValue()). }
true;protected,abstract;1;1;/**  * Subclasses should implement this method to perform tag content rendering.  * @return valid tag render instruction as per {@link javax.servlet.jsp.tagext.Tag#doStartTag()}.  */ ;/**  * Subclasses should implement this method to perform tag content rendering.  * @return valid tag render instruction as per {@link javax.servlet.jsp.tagext.Tag#doStartTag()}.  */ protected abstract int writeTagContent(TagWriter tagWriter) throws JspException.
