commented;modifiers;parameterAmount;loc;comment;code
true;default;0;4;/**  * Return the content type of the view, if predetermined.  * <p>Can be used to check the view's content type upfront,  * i.e. before an actual rendering attempt.  * @return the content type String (optionally including a character set),  * or {@code null} if not predetermined  */ ;/**  * Return the content type of the view, if predetermined.  * <p>Can be used to check the view's content type upfront,  * i.e. before an actual rendering attempt.  * @return the content type String (optionally including a character set),  * or {@code null} if not predetermined  */ @Nullable default String getContentType() {     return null. }
true;;3;2;/**  * Render the view given the specified model.  * <p>The first step will be preparing the request: In the JSP case, this would mean  * setting model objects as request attributes. The second step will be the actual  * rendering of the view, for example including the JSP via a RequestDispatcher.  * @param model a Map with name Strings as keys and corresponding model  * objects as values (Map can also be {@code null} in case of empty model)  * @param request current HTTP request  * @param response he HTTP response we are building  * @throws Exception if rendering failed  */ ;/**  * Render the view given the specified model.  * <p>The first step will be preparing the request: In the JSP case, this would mean  * setting model objects as request attributes. The second step will be the actual  * rendering of the view, for example including the JSP via a RequestDispatcher.  * @param model a Map with name Strings as keys and corresponding model  * objects as values (Map can also be {@code null} in case of empty model)  * @param request current HTTP request  * @param response he HTTP response we are building  * @throws Exception if rendering failed  */ void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception.
