# id;timestamp;commentText;codeText;commentWords;codeWords
View -> String getContentType()_;1328020251;Return the content type of the view, if predetermined._<p>Can be used to check the content type upfront,_before the actual rendering process._@return the content type String (optionally including a character set),_or <code>null</code> if not predetermined.;String getContentType()_;return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,content,type,upfront,before,the,actual,rendering,process,return,the,content,type,string,optionally,including,a,character,set,or,code,null,code,if,not,predetermined;string,get,content,type
View -> String getContentType()_;1350941037;Return the content type of the view, if predetermined._<p>Can be used to check the content type upfront,_before the actual rendering process._@return the content type String (optionally including a character set),_or <code>null</code> if not predetermined.;String getContentType()_;return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,content,type,upfront,before,the,actual,rendering,process,return,the,content,type,string,optionally,including,a,character,set,or,code,null,code,if,not,predetermined;string,get,content,type
View -> String getContentType()_;1356735495;Return the content type of the view, if predetermined._<p>Can be used to check the content type upfront,_before the actual rendering process._@return the content type String (optionally including a character set),_or {@code null} if not predetermined.;String getContentType()_;return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,content,type,upfront,before,the,actual,rendering,process,return,the,content,type,string,optionally,including,a,character,set,or,code,null,if,not,predetermined;string,get,content,type
View -> String getContentType()_;1413848647;Return the content type of the view, if predetermined._<p>Can be used to check the content type upfront,_before the actual rendering process._@return the content type String (optionally including a character set),_or {@code null} if not predetermined.;String getContentType()_;return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,content,type,upfront,before,the,actual,rendering,process,return,the,content,type,string,optionally,including,a,character,set,or,code,null,if,not,predetermined;string,get,content,type
View -> void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1517567643;Render the view given the specified model._<p>The first step will be preparing the request: In the JSP case, this would mean_setting model objects as request attributes. The second step will be the actual_rendering of the view, for example including the JSP via a RequestDispatcher._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param request current HTTP request_@param response HTTP response we are building_@throws Exception if rendering failed;void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)_			throws Exception_;render,the,view,given,the,specified,model,p,the,first,step,will,be,preparing,the,request,in,the,jsp,case,this,would,mean,setting,model,objects,as,request,attributes,the,second,step,will,be,the,actual,rendering,of,the,view,for,example,including,the,jsp,via,a,request,dispatcher,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,request,current,http,request,param,response,http,response,we,are,building,throws,exception,if,rendering,failed;void,render,nullable,map,string,model,http,servlet,request,request,http,servlet,response,response,throws,exception
View -> void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1530174524;Render the view given the specified model._<p>The first step will be preparing the request: In the JSP case, this would mean_setting model objects as request attributes. The second step will be the actual_rendering of the view, for example including the JSP via a RequestDispatcher._@param model a Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param request current HTTP request_@param response he HTTP response we are building_@throws Exception if rendering failed;void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)_			throws Exception_;render,the,view,given,the,specified,model,p,the,first,step,will,be,preparing,the,request,in,the,jsp,case,this,would,mean,setting,model,objects,as,request,attributes,the,second,step,will,be,the,actual,rendering,of,the,view,for,example,including,the,jsp,via,a,request,dispatcher,param,model,a,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,request,current,http,request,param,response,he,http,response,we,are,building,throws,exception,if,rendering,failed;void,render,nullable,map,string,model,http,servlet,request,request,http,servlet,response,response,throws,exception
View -> void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;1328020251;Render the view given the specified model._<p>The first step will be preparing the request: In the JSP case,_this would mean setting model objects as request attributes._The second step will be the actual rendering of the view,_for example including the JSP via a RequestDispatcher._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be <code>null</code> in case of empty model)_@param request current HTTP request_@param response HTTP response we are building_@throws Exception if rendering failed;void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;render,the,view,given,the,specified,model,p,the,first,step,will,be,preparing,the,request,in,the,jsp,case,this,would,mean,setting,model,objects,as,request,attributes,the,second,step,will,be,the,actual,rendering,of,the,view,for,example,including,the,jsp,via,a,request,dispatcher,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,code,in,case,of,empty,model,param,request,current,http,request,param,response,http,response,we,are,building,throws,exception,if,rendering,failed;void,render,map,string,model,http,servlet,request,request,http,servlet,response,response,throws,exception
View -> void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;1350941037;Render the view given the specified model._<p>The first step will be preparing the request: In the JSP case,_this would mean setting model objects as request attributes._The second step will be the actual rendering of the view,_for example including the JSP via a RequestDispatcher._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be <code>null</code> in case of empty model)_@param request current HTTP request_@param response HTTP response we are building_@throws Exception if rendering failed;void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;render,the,view,given,the,specified,model,p,the,first,step,will,be,preparing,the,request,in,the,jsp,case,this,would,mean,setting,model,objects,as,request,attributes,the,second,step,will,be,the,actual,rendering,of,the,view,for,example,including,the,jsp,via,a,request,dispatcher,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,code,in,case,of,empty,model,param,request,current,http,request,param,response,http,response,we,are,building,throws,exception,if,rendering,failed;void,render,map,string,model,http,servlet,request,request,http,servlet,response,response,throws,exception
View -> void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;1356735495;Render the view given the specified model._<p>The first step will be preparing the request: In the JSP case,_this would mean setting model objects as request attributes._The second step will be the actual rendering of the view,_for example including the JSP via a RequestDispatcher._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param request current HTTP request_@param response HTTP response we are building_@throws Exception if rendering failed;void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;render,the,view,given,the,specified,model,p,the,first,step,will,be,preparing,the,request,in,the,jsp,case,this,would,mean,setting,model,objects,as,request,attributes,the,second,step,will,be,the,actual,rendering,of,the,view,for,example,including,the,jsp,via,a,request,dispatcher,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,request,current,http,request,param,response,http,response,we,are,building,throws,exception,if,rendering,failed;void,render,map,string,model,http,servlet,request,request,http,servlet,response,response,throws,exception
View -> void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;1413848647;Render the view given the specified model._<p>The first step will be preparing the request: In the JSP case,_this would mean setting model objects as request attributes._The second step will be the actual rendering of the view,_for example including the JSP via a RequestDispatcher._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param request current HTTP request_@param response HTTP response we are building_@throws Exception if rendering failed;void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception_;render,the,view,given,the,specified,model,p,the,first,step,will,be,preparing,the,request,in,the,jsp,case,this,would,mean,setting,model,objects,as,request,attributes,the,second,step,will,be,the,actual,rendering,of,the,view,for,example,including,the,jsp,via,a,request,dispatcher,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,request,current,http,request,param,response,http,response,we,are,building,throws,exception,if,rendering,failed;void,render,map,string,model,http,servlet,request,request,http,servlet,response,response,throws,exception
View -> @Nullable 	default String getContentType();1517567643;Return the content type of the view, if predetermined._<p>Can be used to check the view's content type upfront,_i.e. before an actual rendering attempt._@return the content type String (optionally including a character set),_or {@code null} if not predetermined;@Nullable_	default String getContentType() {_		return null__	};return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,view,s,content,type,upfront,i,e,before,an,actual,rendering,attempt,return,the,content,type,string,optionally,including,a,character,set,or,code,null,if,not,predetermined;nullable,default,string,get,content,type,return,null
View -> @Nullable 	default String getContentType();1530174524;Return the content type of the view, if predetermined._<p>Can be used to check the view's content type upfront,_i.e. before an actual rendering attempt._@return the content type String (optionally including a character set),_or {@code null} if not predetermined;@Nullable_	default String getContentType() {_		return null__	};return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,view,s,content,type,upfront,i,e,before,an,actual,rendering,attempt,return,the,content,type,string,optionally,including,a,character,set,or,code,null,if,not,predetermined;nullable,default,string,get,content,type,return,null
View -> @Nullable 	String getContentType()_;1495868221;Return the content type of the view, if predetermined._<p>Can be used to check the content type upfront,_before the actual rendering process._@return the content type String (optionally including a character set),_or {@code null} if not predetermined.;@Nullable_	String getContentType()_;return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,content,type,upfront,before,the,actual,rendering,process,return,the,content,type,string,optionally,including,a,character,set,or,code,null,if,not,predetermined;nullable,string,get,content,type
View -> @Nullable 	String getContentType()_;1508532146;Return the content type of the view, if predetermined._<p>Can be used to check the content type upfront,_before the actual rendering process._@return the content type String (optionally including a character set),_or {@code null} if not predetermined.;@Nullable_	String getContentType()_;return,the,content,type,of,the,view,if,predetermined,p,can,be,used,to,check,the,content,type,upfront,before,the,actual,rendering,process,return,the,content,type,string,optionally,including,a,character,set,or,code,null,if,not,predetermined;nullable,string,get,content,type
