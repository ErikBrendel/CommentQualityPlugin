commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;13;/**  * {@inheritDoc}  * <p>This implementation creates an {@link AnnotationConfigWebApplicationContext},  * providing it the annotated classes returned by {@link #getRootConfigClasses()}.  * Returns {@code null} if {@link #getRootConfigClasses()} returns {@code null}.  */ ;/**  * {@inheritDoc}  * <p>This implementation creates an {@link AnnotationConfigWebApplicationContext},  * providing it the annotated classes returned by {@link #getRootConfigClasses()}.  * Returns {@code null} if {@link #getRootConfigClasses()} returns {@code null}.  */ @Override @Nullable protected WebApplicationContext createRootApplicationContext() {     Class<?>[] configClasses = getRootConfigClasses().     if (!ObjectUtils.isEmpty(configClasses)) {         AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().         context.register(configClasses).         return context.     } else {         return null.     } }
true;protected;0;9;/**  * {@inheritDoc}  * <p>This implementation creates an {@link AnnotationConfigWebApplicationContext},  * providing it the annotated classes returned by {@link #getServletConfigClasses()}.  */ ;/**  * {@inheritDoc}  * <p>This implementation creates an {@link AnnotationConfigWebApplicationContext},  * providing it the annotated classes returned by {@link #getServletConfigClasses()}.  */ @Override protected WebApplicationContext createServletApplicationContext() {     AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().     Class<?>[] configClasses = getServletConfigClasses().     if (!ObjectUtils.isEmpty(configClasses)) {         context.register(configClasses).     }     return context. }
true;protected,abstract;0;2;/**  * Specify {@code @Configuration} and/or {@code @Component} classes for the  * {@linkplain #createRootApplicationContext() root application context}.  * @return the configuration for the root application context, or {@code null}  * if creation and registration of a root context is not desired  */ ;/**  * Specify {@code @Configuration} and/or {@code @Component} classes for the  * {@linkplain #createRootApplicationContext() root application context}.  * @return the configuration for the root application context, or {@code null}  * if creation and registration of a root context is not desired  */ @Nullable protected abstract Class<?>[] getRootConfigClasses().
true;protected,abstract;0;2;/**  * Specify {@code @Configuration} and/or {@code @Component} classes for the  * {@linkplain #createServletApplicationContext() Servlet application context}.  * @return the configuration for the Servlet application context, or  * {@code null} if all configuration is specified through root config classes.  */ ;/**  * Specify {@code @Configuration} and/or {@code @Component} classes for the  * {@linkplain #createServletApplicationContext() Servlet application context}.  * @return the configuration for the Servlet application context, or  * {@code null} if all configuration is specified through root config classes.  */ @Nullable protected abstract Class<?>[] getServletConfigClasses().
