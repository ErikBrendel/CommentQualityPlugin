# id;timestamp;commentText;codeText;commentWords;codeWords
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, String reason, HttpServletResponse response) 			throws IOException;1480450682;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, String reason, HttpServletResponse response)_			throws IOException {__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,string,reason,http,servlet,response,response,throws,ioexception,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, String reason, HttpServletResponse response) 			throws IOException;1494067983;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception;1495868221;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception;1496242568;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception;1498780456;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception;1502974979;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception;1525532664;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception;1529361191;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception;1540406786;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) 			throws IOException;1495868221;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,nullable,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) 			throws IOException;1496242568;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,nullable,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) 			throws IOException;1498780456;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,nullable,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) 			throws IOException;1502974979;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,nullable,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) 			throws IOException;1525532664;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,nullable,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) 			throws IOException;1529361191;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,nullable,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) 			throws IOException;1540406786;Apply the resolved status code and reason to the response._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if there is a reason_and then returns an empty ModelAndView._@param statusCode the HTTP status code_@param reason the associated reason (may be {@code null} or empty)_@param response current HTTP response_@since 5.0;protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response)_			throws IOException {__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			String resolvedReason = (this.messageSource != null ?_					this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) :_					reason)__			response.sendError(statusCode, resolvedReason)__		}_		return new ModelAndView()__	};apply,the,resolved,status,code,and,reason,to,the,response,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,there,is,a,reason,and,then,returns,an,empty,model,and,view,param,status,code,the,http,status,code,param,reason,the,associated,reason,may,be,code,null,or,empty,param,response,current,http,response,since,5,0;protected,model,and,view,apply,status,and,reason,int,status,code,nullable,string,reason,http,servlet,response,response,throws,ioexception,if,string,utils,has,length,reason,response,send,error,status,code,else,string,resolved,reason,this,message,source,null,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,reason,response,send,error,status,code,resolved,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;1480450682;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		applyStatusAndReason(statusCode, reason, response)__		return new ModelAndView()__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,apply,status,and,reason,status,code,reason,response,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;1494067983;Template method that handles an {@link ResponseStatusException}._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the exception._@param ex the exception_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@return an empty ModelAndView, i.e. exception resolved_@since 5.0;protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,_			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {__		int statusCode = ex.getStatus().value()__		String reason = ex.getReason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,an,link,response,status,exception,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,exception,param,ex,the,exception,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,return,an,empty,model,and,view,i,e,exception,resolved,since,5,0;protected,model,and,view,resolve,response,status,exception,response,status,exception,ex,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception,int,status,code,ex,get,status,value,string,reason,ex,get,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception;1495868221;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception;1496242568;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception;1498780456;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception;1502974979;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception;1525532664;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception;1529361191;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception;1540406786;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1328020251;Template method that handles {@link ResponseStatus @ResponseStatus} annotation. <p>Default implementation send a_response error using {@link HttpServletResponse#sendError(int)}, or {@link HttpServletResponse#sendError(int,_String)} if the annotation has a {@linkplain ResponseStatus#reason() reason}. Returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen at the time of the exception_(for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or <code>null</code> for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.value().value()__		String reason = responseStatus.reason()__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,code,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,value,value,string,reason,response,status,reason,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1356735495;Template method that handles {@link ResponseStatus @ResponseStatus} annotation. <p>Default implementation send a_response error using {@link HttpServletResponse#sendError(int)}, or {@link HttpServletResponse#sendError(int,_String)} if the annotation has a {@linkplain ResponseStatus#reason() reason}. Returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time of the exception_(for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.value().value()__		String reason = responseStatus.reason()__		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,value,value,string,reason,response,status,reason,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1362408075;Template method that handles {@link ResponseStatus @ResponseStatus} annotation. <p>Default implementation send a_response error using {@link HttpServletResponse#sendError(int)}, or {@link HttpServletResponse#sendError(int,_String)} if the annotation has a {@linkplain ResponseStatus#reason() reason}. Returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time of the exception_(for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.value().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,value,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1368482696;Template method that handles {@link ResponseStatus @ResponseStatus} annotation. <p>Default implementation send a_response error using {@link HttpServletResponse#sendError(int)}, or {@link HttpServletResponse#sendError(int,_String)} if the annotation has a {@linkplain ResponseStatus#reason() reason}. Returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time of the exception_(for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.value().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,value,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1428963055;Template method that handles {@link ResponseStatus @ResponseStatus} annotation. <p>Default implementation send a_response error using {@link HttpServletResponse#sendError(int)}, or {@link HttpServletResponse#sendError(int,_String)} if the annotation has a {@linkplain ResponseStatus#reason() reason}. Returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time of the exception_(for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.value().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,value,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1428963398;Template method that handles {@link ResponseStatus @ResponseStatus} annotation.__<p>Default implementation send a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if the annotation has a_{@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView.__@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution or the_exception that has the ResponseStatus annotation if found on the cause._@return a corresponding ModelAndView to forward to, or {@code null}_for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.value().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,and,then,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,or,the,exception,that,has,the,response,status,annotation,if,found,on,the,cause,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,value,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1433084423;Template method that handles {@link ResponseStatus @ResponseStatus} annotation.__<p>Default implementation send a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if the annotation has a_{@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView.__@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution or the_exception that has the ResponseStatus annotation if found on the cause._@return a corresponding ModelAndView to forward to, or {@code null}_for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,and,then,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,or,the,exception,that,has,the,response,status,annotation,if,found,on,the,cause,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1434575812;Template method that handles {@link ResponseStatus @ResponseStatus} annotation.__<p>Default implementation send a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if the annotation has a_{@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView.__@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution or the_exception that has the ResponseStatus annotation if found on the cause._@return a corresponding ModelAndView to forward to, or {@code null}_for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.setStatus(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,default,implementation,send,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,and,then,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,or,the,exception,that,has,the,response,status,annotation,if,found,on,the,cause,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,set,status,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1437503593;Template method that handles {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if the annotation has a_{@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution or the_exception that has the ResponseStatus annotation if found on the cause._@return a corresponding ModelAndView to forward to, or {@code null}_for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.setStatus(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,and,then,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,or,the,exception,that,has,the,response,status,annotation,if,found,on,the,cause,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,set,status,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1438251419;Template method that handles {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if the annotation has a_{@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution or the_exception that has the ResponseStatus annotation if found on the cause._@return a corresponding ModelAndView to forward to, or {@code null}_for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.setStatus(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,and,then,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,or,the,exception,that,has,the,response,status,annotation,if,found,on,the,cause,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,set,status,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1438265401;Template method that handles {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if the annotation has a_{@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution or the_exception that has the ResponseStatus annotation if found on the cause._@return a corresponding ModelAndView to forward to, or {@code null}_for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,and,then,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,or,the,exception,that,has,the,response,status,annotation,if,found,on,the,cause,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1441998330;Template method that handles {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation sends a response error using_{@link HttpServletResponse#sendError(int)} or_{@link HttpServletResponse#sendError(int, String)} if the annotation has a_{@linkplain ResponseStatus#reason() reason} and then returns an empty ModelAndView._@param responseStatus the annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution or the_exception that has the ResponseStatus annotation if found on the cause._@return a corresponding ModelAndView to forward to, or {@code null}_for default processing;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		if (this.messageSource != null) {_			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale())__		}_		if (!StringUtils.hasLength(reason)) {_			response.sendError(statusCode)__		}_		else {_			response.sendError(statusCode, reason)__		}_		return new ModelAndView()__	};template,method,that,handles,link,response,status,response,status,annotation,p,the,default,implementation,sends,a,response,error,using,link,http,servlet,response,send,error,int,or,link,http,servlet,response,send,error,int,string,if,the,annotation,has,a,linkplain,response,status,reason,reason,and,then,returns,an,empty,model,and,view,param,response,status,the,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,or,the,exception,that,has,the,response,status,annotation,if,found,on,the,cause,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,if,this,message,source,null,reason,this,message,source,get,message,reason,null,reason,locale,context,holder,get,locale,if,string,utils,has,length,reason,response,send,error,status,code,else,response,send,error,status,code,reason,return,new,model,and,view
ResponseStatusExceptionResolver -> protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex) throws Exception;1494067983;Template method that handles the {@link ResponseStatus @ResponseStatus} annotation._<p>The default implementation delegates to {@link #applyStatusAndReason}_with the status code and reason from the annotation._@param responseStatus the {@code @ResponseStatus} annotation_@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the_time of the exception, e.g. if multipart resolution failed_@param ex the exception_@return an empty ModelAndView, i.e. exception resolved;protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex) throws Exception {__		int statusCode = responseStatus.code().value()__		String reason = responseStatus.reason()__		return applyStatusAndReason(statusCode, reason, response)__	};template,method,that,handles,the,link,response,status,response,status,annotation,p,the,default,implementation,delegates,to,link,apply,status,and,reason,with,the,status,code,and,reason,from,the,annotation,param,response,status,the,code,response,status,annotation,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,e,g,if,multipart,resolution,failed,param,ex,the,exception,return,an,empty,model,and,view,i,e,exception,resolved;protected,model,and,view,resolve,response,status,response,status,response,status,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception,int,status,code,response,status,code,value,string,reason,response,status,reason,return,apply,status,and,reason,status,code,reason,response
