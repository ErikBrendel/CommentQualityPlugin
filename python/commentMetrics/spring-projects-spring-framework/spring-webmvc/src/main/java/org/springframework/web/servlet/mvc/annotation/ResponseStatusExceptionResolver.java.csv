commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setMessageSource(MessageSource messageSource) {     this.messageSource = messageSource. }
false;protected;4;26;;@Override @Nullable protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {     try {         if (ex instanceof ResponseStatusException) {             return resolveResponseStatusException((ResponseStatusException) ex, request, response, handler).         }         ResponseStatus status = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class).         if (status != null) {             return resolveResponseStatus(status, request, response, handler, ex).         }         if (ex.getCause() instanceof Exception) {             return doResolveException(request, response, handler, (Exception) ex.getCause()).         }     } catch (Exception resolveEx) {         if (logger.isWarnEnabled()) {             logger.warn("Failure while trying to resolve exception [" + ex.getClass().getName() + "]", resolveEx).         }     }     return null. }
true;protected;5;7;/**  * Template method that handles the {@link ResponseStatus @ResponseStatus} annotation.  * <p>The default implementation delegates to {@link #applyStatusAndReason}  * with the status code and reason from the annotation.  * @param responseStatus the {@code @ResponseStatus} annotation  * @param request current HTTP request  * @param response current HTTP response  * @param handler the executed handler, or {@code null} if none chosen at the  * time of the exception, e.g. if multipart resolution failed  * @param ex the exception  * @return an empty ModelAndView, i.e. exception resolved  */ ;/**  * Template method that handles the {@link ResponseStatus @ResponseStatus} annotation.  * <p>The default implementation delegates to {@link #applyStatusAndReason}  * with the status code and reason from the annotation.  * @param responseStatus the {@code @ResponseStatus} annotation  * @param request current HTTP request  * @param response current HTTP response  * @param handler the executed handler, or {@code null} if none chosen at the  * time of the exception, e.g. if multipart resolution failed  * @param ex the exception  * @return an empty ModelAndView, i.e. exception resolved  */ protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) throws Exception {     int statusCode = responseStatus.code().value().     String reason = responseStatus.reason().     return applyStatusAndReason(statusCode, reason, response). }
true;protected;4;7;/**  * Template method that handles an {@link ResponseStatusException}.  * <p>The default implementation delegates to {@link #applyStatusAndReason}  * with the status code and reason from the exception.  * @param ex the exception  * @param request current HTTP request  * @param response current HTTP response  * @param handler the executed handler, or {@code null} if none chosen at the  * time of the exception, e.g. if multipart resolution failed  * @return an empty ModelAndView, i.e. exception resolved  * @since 5.0  */ ;/**  * Template method that handles an {@link ResponseStatusException}.  * <p>The default implementation delegates to {@link #applyStatusAndReason}  * with the status code and reason from the exception.  * @param ex the exception  * @param request current HTTP request  * @param response current HTTP response  * @param handler the executed handler, or {@code null} if none chosen at the  * time of the exception, e.g. if multipart resolution failed  * @return an empty ModelAndView, i.e. exception resolved  * @since 5.0  */ protected ModelAndView resolveResponseStatusException(ResponseStatusException ex, HttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws Exception {     int statusCode = ex.getStatus().value().     String reason = ex.getReason().     return applyStatusAndReason(statusCode, reason, response). }
true;protected;3;14;/**  * Apply the resolved status code and reason to the response.  * <p>The default implementation sends a response error using  * {@link HttpServletResponse#sendError(int)} or  * {@link HttpServletResponse#sendError(int, String)} if there is a reason  * and then returns an empty ModelAndView.  * @param statusCode the HTTP status code  * @param reason the associated reason (may be {@code null} or empty)  * @param response current HTTP response  * @since 5.0  */ ;/**  * Apply the resolved status code and reason to the response.  * <p>The default implementation sends a response error using  * {@link HttpServletResponse#sendError(int)} or  * {@link HttpServletResponse#sendError(int, String)} if there is a reason  * and then returns an empty ModelAndView.  * @param statusCode the HTTP status code  * @param reason the associated reason (may be {@code null} or empty)  * @param response current HTTP response  * @since 5.0  */ protected ModelAndView applyStatusAndReason(int statusCode, @Nullable String reason, HttpServletResponse response) throws IOException {     if (!StringUtils.hasLength(reason)) {         response.sendError(statusCode).     } else {         String resolvedReason = (this.messageSource != null ? this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale()) : reason).         response.sendError(statusCode, resolvedReason).     }     return new ModelAndView(). }
