# id;timestamp;commentText;codeText;commentWords;codeWords
JstlUtils -> public static MessageSource getJstlAwareMessageSource( 			ServletContext servletContext, MessageSource messageSource);1328020251;Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext"_context-param and creates a corresponding child message source,_with the provided Spring-defined MessageSource as parent._@param servletContext the ServletContext we're running in_(to check JSTL-related context-params in <code>web.xml</code>)_@param messageSource the MessageSource to expose, typically_the ApplicationContext of the current DispatcherServlet_@return the MessageSource to expose to JSTL_ first checking the_JSTL-defined bundle, then the Spring-defined MessageSource_@see org.springframework.context.ApplicationContext;public static MessageSource getJstlAwareMessageSource(_			ServletContext servletContext, MessageSource messageSource) {__		if (servletContext != null) {_			String jstlInitParam = servletContext.getInitParameter(Config.FMT_LOCALIZATION_CONTEXT)__			if (jstlInitParam != null) {_				_				_				_				ResourceBundleMessageSource jstlBundleWrapper = new ResourceBundleMessageSource()__				jstlBundleWrapper.setBasename(jstlInitParam)__				jstlBundleWrapper.setParentMessageSource(messageSource)__				return jstlBundleWrapper__			}_		}_		return messageSource__	};checks,jstl,s,javax,servlet,jsp,jstl,fmt,localization,context,context,param,and,creates,a,corresponding,child,message,source,with,the,provided,spring,defined,message,source,as,parent,param,servlet,context,the,servlet,context,we,re,running,in,to,check,jstl,related,context,params,in,code,web,xml,code,param,message,source,the,message,source,to,expose,typically,the,application,context,of,the,current,dispatcher,servlet,return,the,message,source,to,expose,to,jstl,first,checking,the,jstl,defined,bundle,then,the,spring,defined,message,source,see,org,springframework,context,application,context;public,static,message,source,get,jstl,aware,message,source,servlet,context,servlet,context,message,source,message,source,if,servlet,context,null,string,jstl,init,param,servlet,context,get,init,parameter,config,if,jstl,init,param,null,resource,bundle,message,source,jstl,bundle,wrapper,new,resource,bundle,message,source,jstl,bundle,wrapper,set,basename,jstl,init,param,jstl,bundle,wrapper,set,parent,message,source,message,source,return,jstl,bundle,wrapper,return,message,source
JstlUtils -> public static MessageSource getJstlAwareMessageSource( 			ServletContext servletContext, MessageSource messageSource);1356735495;Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext"_context-param and creates a corresponding child message source,_with the provided Spring-defined MessageSource as parent._@param servletContext the ServletContext we're running in_(to check JSTL-related context-params in {@code web.xml})_@param messageSource the MessageSource to expose, typically_the ApplicationContext of the current DispatcherServlet_@return the MessageSource to expose to JSTL_ first checking the_JSTL-defined bundle, then the Spring-defined MessageSource_@see org.springframework.context.ApplicationContext;public static MessageSource getJstlAwareMessageSource(_			ServletContext servletContext, MessageSource messageSource) {__		if (servletContext != null) {_			String jstlInitParam = servletContext.getInitParameter(Config.FMT_LOCALIZATION_CONTEXT)__			if (jstlInitParam != null) {_				_				_				_				ResourceBundleMessageSource jstlBundleWrapper = new ResourceBundleMessageSource()__				jstlBundleWrapper.setBasename(jstlInitParam)__				jstlBundleWrapper.setParentMessageSource(messageSource)__				return jstlBundleWrapper__			}_		}_		return messageSource__	};checks,jstl,s,javax,servlet,jsp,jstl,fmt,localization,context,context,param,and,creates,a,corresponding,child,message,source,with,the,provided,spring,defined,message,source,as,parent,param,servlet,context,the,servlet,context,we,re,running,in,to,check,jstl,related,context,params,in,code,web,xml,param,message,source,the,message,source,to,expose,typically,the,application,context,of,the,current,dispatcher,servlet,return,the,message,source,to,expose,to,jstl,first,checking,the,jstl,defined,bundle,then,the,spring,defined,message,source,see,org,springframework,context,application,context;public,static,message,source,get,jstl,aware,message,source,servlet,context,servlet,context,message,source,message,source,if,servlet,context,null,string,jstl,init,param,servlet,context,get,init,parameter,config,if,jstl,init,param,null,resource,bundle,message,source,jstl,bundle,wrapper,new,resource,bundle,message,source,jstl,bundle,wrapper,set,basename,jstl,init,param,jstl,bundle,wrapper,set,parent,message,source,message,source,return,jstl,bundle,wrapper,return,message,source
JstlUtils -> public static MessageSource getJstlAwareMessageSource( 			ServletContext servletContext, MessageSource messageSource);1377796679;Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext"_context-param and creates a corresponding child message source,_with the provided Spring-defined MessageSource as parent._@param servletContext the ServletContext we're running in_(to check JSTL-related context-params in {@code web.xml})_@param messageSource the MessageSource to expose, typically_the ApplicationContext of the current DispatcherServlet_@return the MessageSource to expose to JSTL_ first checking the_JSTL-defined bundle, then the Spring-defined MessageSource_@see org.springframework.context.ApplicationContext;public static MessageSource getJstlAwareMessageSource(_			ServletContext servletContext, MessageSource messageSource) {__		if (servletContext != null) {_			String jstlInitParam = servletContext.getInitParameter(Config.FMT_LOCALIZATION_CONTEXT)__			if (jstlInitParam != null) {_				_				_				_				ResourceBundleMessageSource jstlBundleWrapper = new ResourceBundleMessageSource()__				jstlBundleWrapper.setBasename(jstlInitParam)__				jstlBundleWrapper.setParentMessageSource(messageSource)__				return jstlBundleWrapper__			}_		}_		return messageSource__	};checks,jstl,s,javax,servlet,jsp,jstl,fmt,localization,context,context,param,and,creates,a,corresponding,child,message,source,with,the,provided,spring,defined,message,source,as,parent,param,servlet,context,the,servlet,context,we,re,running,in,to,check,jstl,related,context,params,in,code,web,xml,param,message,source,the,message,source,to,expose,typically,the,application,context,of,the,current,dispatcher,servlet,return,the,message,source,to,expose,to,jstl,first,checking,the,jstl,defined,bundle,then,the,spring,defined,message,source,see,org,springframework,context,application,context;public,static,message,source,get,jstl,aware,message,source,servlet,context,servlet,context,message,source,message,source,if,servlet,context,null,string,jstl,init,param,servlet,context,get,init,parameter,config,if,jstl,init,param,null,resource,bundle,message,source,jstl,bundle,wrapper,new,resource,bundle,message,source,jstl,bundle,wrapper,set,basename,jstl,init,param,jstl,bundle,wrapper,set,parent,message,source,message,source,return,jstl,bundle,wrapper,return,message,source
JstlUtils -> public static MessageSource getJstlAwareMessageSource( 			ServletContext servletContext, MessageSource messageSource);1380921248;Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext"_context-param and creates a corresponding child message source,_with the provided Spring-defined MessageSource as parent._@param servletContext the ServletContext we're running in_(to check JSTL-related context-params in {@code web.xml})_@param messageSource the MessageSource to expose, typically_the ApplicationContext of the current DispatcherServlet_@return the MessageSource to expose to JSTL_ first checking the_JSTL-defined bundle, then the Spring-defined MessageSource_@see org.springframework.context.ApplicationContext;public static MessageSource getJstlAwareMessageSource(_			ServletContext servletContext, MessageSource messageSource) {__		if (servletContext != null) {_			String jstlInitParam = servletContext.getInitParameter(Config.FMT_LOCALIZATION_CONTEXT)__			if (jstlInitParam != null) {_				_				_				_				ResourceBundleMessageSource jstlBundleWrapper = new ResourceBundleMessageSource()__				jstlBundleWrapper.setBasename(jstlInitParam)__				jstlBundleWrapper.setParentMessageSource(messageSource)__				return jstlBundleWrapper__			}_		}_		return messageSource__	};checks,jstl,s,javax,servlet,jsp,jstl,fmt,localization,context,context,param,and,creates,a,corresponding,child,message,source,with,the,provided,spring,defined,message,source,as,parent,param,servlet,context,the,servlet,context,we,re,running,in,to,check,jstl,related,context,params,in,code,web,xml,param,message,source,the,message,source,to,expose,typically,the,application,context,of,the,current,dispatcher,servlet,return,the,message,source,to,expose,to,jstl,first,checking,the,jstl,defined,bundle,then,the,spring,defined,message,source,see,org,springframework,context,application,context;public,static,message,source,get,jstl,aware,message,source,servlet,context,servlet,context,message,source,message,source,if,servlet,context,null,string,jstl,init,param,servlet,context,get,init,parameter,config,if,jstl,init,param,null,resource,bundle,message,source,jstl,bundle,wrapper,new,resource,bundle,message,source,jstl,bundle,wrapper,set,basename,jstl,init,param,jstl,bundle,wrapper,set,parent,message,source,message,source,return,jstl,bundle,wrapper,return,message,source
JstlUtils -> public static MessageSource getJstlAwareMessageSource( 			ServletContext servletContext, MessageSource messageSource);1495868221;Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext"_context-param and creates a corresponding child message source,_with the provided Spring-defined MessageSource as parent._@param servletContext the ServletContext we're running in_(to check JSTL-related context-params in {@code web.xml})_@param messageSource the MessageSource to expose, typically_the ApplicationContext of the current DispatcherServlet_@return the MessageSource to expose to JSTL_ first checking the_JSTL-defined bundle, then the Spring-defined MessageSource_@see org.springframework.context.ApplicationContext;public static MessageSource getJstlAwareMessageSource(_			ServletContext servletContext, MessageSource messageSource) {__		if (servletContext != null) {_			String jstlInitParam = servletContext.getInitParameter(Config.FMT_LOCALIZATION_CONTEXT)__			if (jstlInitParam != null) {_				_				_				_				ResourceBundleMessageSource jstlBundleWrapper = new ResourceBundleMessageSource()__				jstlBundleWrapper.setBasename(jstlInitParam)__				jstlBundleWrapper.setParentMessageSource(messageSource)__				return jstlBundleWrapper__			}_		}_		return messageSource__	};checks,jstl,s,javax,servlet,jsp,jstl,fmt,localization,context,context,param,and,creates,a,corresponding,child,message,source,with,the,provided,spring,defined,message,source,as,parent,param,servlet,context,the,servlet,context,we,re,running,in,to,check,jstl,related,context,params,in,code,web,xml,param,message,source,the,message,source,to,expose,typically,the,application,context,of,the,current,dispatcher,servlet,return,the,message,source,to,expose,to,jstl,first,checking,the,jstl,defined,bundle,then,the,spring,defined,message,source,see,org,springframework,context,application,context;public,static,message,source,get,jstl,aware,message,source,servlet,context,servlet,context,message,source,message,source,if,servlet,context,null,string,jstl,init,param,servlet,context,get,init,parameter,config,if,jstl,init,param,null,resource,bundle,message,source,jstl,bundle,wrapper,new,resource,bundle,message,source,jstl,bundle,wrapper,set,basename,jstl,init,param,jstl,bundle,wrapper,set,parent,message,source,message,source,return,jstl,bundle,wrapper,return,message,source
JstlUtils -> public static void exposeLocalizationContext(HttpServletRequest request, @Nullable MessageSource messageSource);1495868221;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param request the current HTTP request_@param messageSource the MessageSource to expose,_typically the current ApplicationContext (may be {@code null})_@see #exposeLocalizationContext(RequestContext);public static void exposeLocalizationContext(HttpServletRequest request, @Nullable MessageSource messageSource) {_		Locale jstlLocale = RequestContextUtils.getLocale(request)__		Config.set(request, Config.FMT_LOCALE, jstlLocale)__		TimeZone timeZone = RequestContextUtils.getTimeZone(request)__		if (timeZone != null) {_			Config.set(request, Config.FMT_TIME_ZONE, timeZone)__		}_		if (messageSource != null) {_			LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, request)__			Config.set(request, Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__		}_	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,the,current,http,request,param,message,source,the,message,source,to,expose,typically,the,current,application,context,may,be,code,null,see,expose,localization,context,request,context;public,static,void,expose,localization,context,http,servlet,request,request,nullable,message,source,message,source,locale,jstl,locale,request,context,utils,get,locale,request,config,set,request,config,jstl,locale,time,zone,time,zone,request,context,utils,get,time,zone,request,if,time,zone,null,config,set,request,config,time,zone,if,message,source,null,localization,context,jstl,context,new,spring,localization,context,message,source,request,config,set,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(HttpServletRequest request, @Nullable MessageSource messageSource);1496837955;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param request the current HTTP request_@param messageSource the MessageSource to expose,_typically the current ApplicationContext (may be {@code null})_@see #exposeLocalizationContext(RequestContext);public static void exposeLocalizationContext(HttpServletRequest request, @Nullable MessageSource messageSource) {_		Locale jstlLocale = RequestContextUtils.getLocale(request)__		Config.set(request, Config.FMT_LOCALE, jstlLocale)__		TimeZone timeZone = RequestContextUtils.getTimeZone(request)__		if (timeZone != null) {_			Config.set(request, Config.FMT_TIME_ZONE, timeZone)__		}_		if (messageSource != null) {_			LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, request)__			Config.set(request, Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__		}_	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,the,current,http,request,param,message,source,the,message,source,to,expose,typically,the,current,application,context,may,be,code,null,see,expose,localization,context,request,context;public,static,void,expose,localization,context,http,servlet,request,request,nullable,message,source,message,source,locale,jstl,locale,request,context,utils,get,locale,request,config,set,request,config,jstl,locale,time,zone,time,zone,request,context,utils,get,time,zone,request,if,time,zone,null,config,set,request,config,time,zone,if,message,source,null,localization,context,jstl,context,new,spring,localization,context,message,source,request,config,set,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource);1328020251;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param request the current HTTP request_@param messageSource the MessageSource to expose,_typically the current ApplicationContext (may be <code>null</code>)_@see #exposeLocalizationContext(RequestContext);public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource) {_		Locale jstlLocale = RequestContextUtils.getLocale(request)__		Config.set(request, Config.FMT_LOCALE, jstlLocale)__		if (messageSource != null) {_			LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, request)__			Config.set(request, Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__		}_	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,the,current,http,request,param,message,source,the,message,source,to,expose,typically,the,current,application,context,may,be,code,null,code,see,expose,localization,context,request,context;public,static,void,expose,localization,context,http,servlet,request,request,message,source,message,source,locale,jstl,locale,request,context,utils,get,locale,request,config,set,request,config,jstl,locale,if,message,source,null,localization,context,jstl,context,new,spring,localization,context,message,source,request,config,set,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource);1356735495;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param request the current HTTP request_@param messageSource the MessageSource to expose,_typically the current ApplicationContext (may be {@code null})_@see #exposeLocalizationContext(RequestContext);public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource) {_		Locale jstlLocale = RequestContextUtils.getLocale(request)__		Config.set(request, Config.FMT_LOCALE, jstlLocale)__		if (messageSource != null) {_			LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, request)__			Config.set(request, Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__		}_	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,the,current,http,request,param,message,source,the,message,source,to,expose,typically,the,current,application,context,may,be,code,null,see,expose,localization,context,request,context;public,static,void,expose,localization,context,http,servlet,request,request,message,source,message,source,locale,jstl,locale,request,context,utils,get,locale,request,config,set,request,config,jstl,locale,if,message,source,null,localization,context,jstl,context,new,spring,localization,context,message,source,request,config,set,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource);1377796679;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param request the current HTTP request_@param messageSource the MessageSource to expose,_typically the current ApplicationContext (may be {@code null})_@see #exposeLocalizationContext(RequestContext);public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource) {_		Locale jstlLocale = RequestContextUtils.getLocale(request)__		Config.set(request, Config.FMT_LOCALE, jstlLocale)__		if (messageSource != null) {_			LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, request)__			Config.set(request, Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__		}_	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,the,current,http,request,param,message,source,the,message,source,to,expose,typically,the,current,application,context,may,be,code,null,see,expose,localization,context,request,context;public,static,void,expose,localization,context,http,servlet,request,request,message,source,message,source,locale,jstl,locale,request,context,utils,get,locale,request,config,set,request,config,jstl,locale,if,message,source,null,localization,context,jstl,context,new,spring,localization,context,message,source,request,config,set,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource);1380921248;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param request the current HTTP request_@param messageSource the MessageSource to expose,_typically the current ApplicationContext (may be {@code null})_@see #exposeLocalizationContext(RequestContext);public static void exposeLocalizationContext(HttpServletRequest request, MessageSource messageSource) {_		Locale jstlLocale = RequestContextUtils.getLocale(request)__		Config.set(request, Config.FMT_LOCALE, jstlLocale)__		TimeZone timeZone = RequestContextUtils.getTimeZone(request)__		if (timeZone != null) {_			Config.set(request, Config.FMT_TIME_ZONE, timeZone)__		}_		if (messageSource != null) {_			LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, request)__			Config.set(request, Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__		}_	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,the,current,http,request,param,message,source,the,message,source,to,expose,typically,the,current,application,context,may,be,code,null,see,expose,localization,context,request,context;public,static,void,expose,localization,context,http,servlet,request,request,message,source,message,source,locale,jstl,locale,request,context,utils,get,locale,request,config,set,request,config,jstl,locale,time,zone,time,zone,request,context,utils,get,time,zone,request,if,time,zone,null,config,set,request,config,time,zone,if,message,source,null,localization,context,jstl,context,new,spring,localization,context,message,source,request,config,set,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(RequestContext requestContext);1328020251;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param requestContext the context for the current HTTP request,_including the ApplicationContext to expose as MessageSource;public static void exposeLocalizationContext(RequestContext requestContext) {_		Config.set(requestContext.getRequest(), Config.FMT_LOCALE, requestContext.getLocale())__		MessageSource messageSource = getJstlAwareMessageSource(_				requestContext.getServletContext(), requestContext.getMessageSource())__		LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, requestContext.getRequest())__		Config.set(requestContext.getRequest(), Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,context,the,context,for,the,current,http,request,including,the,application,context,to,expose,as,message,source;public,static,void,expose,localization,context,request,context,request,context,config,set,request,context,get,request,config,request,context,get,locale,message,source,message,source,get,jstl,aware,message,source,request,context,get,servlet,context,request,context,get,message,source,localization,context,jstl,context,new,spring,localization,context,message,source,request,context,get,request,config,set,request,context,get,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(RequestContext requestContext);1356735495;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param requestContext the context for the current HTTP request,_including the ApplicationContext to expose as MessageSource;public static void exposeLocalizationContext(RequestContext requestContext) {_		Config.set(requestContext.getRequest(), Config.FMT_LOCALE, requestContext.getLocale())__		MessageSource messageSource = getJstlAwareMessageSource(_				requestContext.getServletContext(), requestContext.getMessageSource())__		LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, requestContext.getRequest())__		Config.set(requestContext.getRequest(), Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,context,the,context,for,the,current,http,request,including,the,application,context,to,expose,as,message,source;public,static,void,expose,localization,context,request,context,request,context,config,set,request,context,get,request,config,request,context,get,locale,message,source,message,source,get,jstl,aware,message,source,request,context,get,servlet,context,request,context,get,message,source,localization,context,jstl,context,new,spring,localization,context,message,source,request,context,get,request,config,set,request,context,get,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(RequestContext requestContext);1377796679;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param requestContext the context for the current HTTP request,_including the ApplicationContext to expose as MessageSource;public static void exposeLocalizationContext(RequestContext requestContext) {_		Config.set(requestContext.getRequest(), Config.FMT_LOCALE, requestContext.getLocale())__		MessageSource messageSource = getJstlAwareMessageSource(_				requestContext.getServletContext(), requestContext.getMessageSource())__		LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, requestContext.getRequest())__		Config.set(requestContext.getRequest(), Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,context,the,context,for,the,current,http,request,including,the,application,context,to,expose,as,message,source;public,static,void,expose,localization,context,request,context,request,context,config,set,request,context,get,request,config,request,context,get,locale,message,source,message,source,get,jstl,aware,message,source,request,context,get,servlet,context,request,context,get,message,source,localization,context,jstl,context,new,spring,localization,context,message,source,request,context,get,request,config,set,request,context,get,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(RequestContext requestContext);1380921248;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param requestContext the context for the current HTTP request,_including the ApplicationContext to expose as MessageSource;public static void exposeLocalizationContext(RequestContext requestContext) {_		Config.set(requestContext.getRequest(), Config.FMT_LOCALE, requestContext.getLocale())__		TimeZone timeZone = requestContext.getTimeZone()__		if (timeZone != null) {_			Config.set(requestContext.getRequest(), Config.FMT_TIME_ZONE, timeZone)__		}_		MessageSource messageSource = getJstlAwareMessageSource(_				requestContext.getServletContext(), requestContext.getMessageSource())__		LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, requestContext.getRequest())__		Config.set(requestContext.getRequest(), Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,context,the,context,for,the,current,http,request,including,the,application,context,to,expose,as,message,source;public,static,void,expose,localization,context,request,context,request,context,config,set,request,context,get,request,config,request,context,get,locale,time,zone,time,zone,request,context,get,time,zone,if,time,zone,null,config,set,request,context,get,request,config,time,zone,message,source,message,source,get,jstl,aware,message,source,request,context,get,servlet,context,request,context,get,message,source,localization,context,jstl,context,new,spring,localization,context,message,source,request,context,get,request,config,set,request,context,get,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(RequestContext requestContext);1495868221;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param requestContext the context for the current HTTP request,_including the ApplicationContext to expose as MessageSource;public static void exposeLocalizationContext(RequestContext requestContext) {_		Config.set(requestContext.getRequest(), Config.FMT_LOCALE, requestContext.getLocale())__		TimeZone timeZone = requestContext.getTimeZone()__		if (timeZone != null) {_			Config.set(requestContext.getRequest(), Config.FMT_TIME_ZONE, timeZone)__		}_		MessageSource messageSource = getJstlAwareMessageSource(_				requestContext.getServletContext(), requestContext.getMessageSource())__		LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, requestContext.getRequest())__		Config.set(requestContext.getRequest(), Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,context,the,context,for,the,current,http,request,including,the,application,context,to,expose,as,message,source;public,static,void,expose,localization,context,request,context,request,context,config,set,request,context,get,request,config,request,context,get,locale,time,zone,time,zone,request,context,get,time,zone,if,time,zone,null,config,set,request,context,get,request,config,time,zone,message,source,message,source,get,jstl,aware,message,source,request,context,get,servlet,context,request,context,get,message,source,localization,context,jstl,context,new,spring,localization,context,message,source,request,context,get,request,config,set,request,context,get,request,config,jstl,context
JstlUtils -> public static void exposeLocalizationContext(RequestContext requestContext);1496837955;Exposes JSTL-specific request attributes specifying locale_and resource bundle for JSTL's formatting and message tags,_using Spring's locale and MessageSource._@param requestContext the context for the current HTTP request,_including the ApplicationContext to expose as MessageSource;public static void exposeLocalizationContext(RequestContext requestContext) {_		Config.set(requestContext.getRequest(), Config.FMT_LOCALE, requestContext.getLocale())__		TimeZone timeZone = requestContext.getTimeZone()__		if (timeZone != null) {_			Config.set(requestContext.getRequest(), Config.FMT_TIME_ZONE, timeZone)__		}_		MessageSource messageSource = getJstlAwareMessageSource(_				requestContext.getServletContext(), requestContext.getMessageSource())__		LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, requestContext.getRequest())__		Config.set(requestContext.getRequest(), Config.FMT_LOCALIZATION_CONTEXT, jstlContext)__	};exposes,jstl,specific,request,attributes,specifying,locale,and,resource,bundle,for,jstl,s,formatting,and,message,tags,using,spring,s,locale,and,message,source,param,request,context,the,context,for,the,current,http,request,including,the,application,context,to,expose,as,message,source;public,static,void,expose,localization,context,request,context,request,context,config,set,request,context,get,request,config,request,context,get,locale,time,zone,time,zone,request,context,get,time,zone,if,time,zone,null,config,set,request,context,get,request,config,time,zone,message,source,message,source,get,jstl,aware,message,source,request,context,get,servlet,context,request,context,get,message,source,localization,context,jstl,context,new,spring,localization,context,message,source,request,context,get,request,config,set,request,context,get,request,config,jstl,context
