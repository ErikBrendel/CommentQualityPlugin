commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;17;/**  * Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext"  * context-param and creates a corresponding child message source,  * with the provided Spring-defined MessageSource as parent.  * @param servletContext the ServletContext we're running in  * (to check JSTL-related context-params in {@code web.xml})  * @param messageSource the MessageSource to expose, typically  * the ApplicationContext of the current DispatcherServlet  * @return the MessageSource to expose to JSTL. first checking the  * JSTL-defined bundle, then the Spring-defined MessageSource  * @see org.springframework.context.ApplicationContext  */ ;/**  * Checks JSTL's "javax.servlet.jsp.jstl.fmt.localizationContext"  * context-param and creates a corresponding child message source,  * with the provided Spring-defined MessageSource as parent.  * @param servletContext the ServletContext we're running in  * (to check JSTL-related context-params in {@code web.xml})  * @param messageSource the MessageSource to expose, typically  * the ApplicationContext of the current DispatcherServlet  * @return the MessageSource to expose to JSTL. first checking the  * JSTL-defined bundle, then the Spring-defined MessageSource  * @see org.springframework.context.ApplicationContext  */ public static MessageSource getJstlAwareMessageSource(@Nullable ServletContext servletContext, MessageSource messageSource) {     if (servletContext != null) {         String jstlInitParam = servletContext.getInitParameter(Config.FMT_LOCALIZATION_CONTEXT).         if (jstlInitParam != null) {             // Create a ResourceBundleMessageSource for the specified resource bundle             // basename in the JSTL context-param in web.xml, wiring it with the given             // Spring-defined MessageSource as parent.             ResourceBundleMessageSource jstlBundleWrapper = new ResourceBundleMessageSource().             jstlBundleWrapper.setBasename(jstlInitParam).             jstlBundleWrapper.setParentMessageSource(messageSource).             return jstlBundleWrapper.         }     }     return messageSource. }
true;public,static;2;12;/**  * Exposes JSTL-specific request attributes specifying locale  * and resource bundle for JSTL's formatting and message tags,  * using Spring's locale and MessageSource.  * @param request the current HTTP request  * @param messageSource the MessageSource to expose,  * typically the current ApplicationContext (may be {@code null})  * @see #exposeLocalizationContext(RequestContext)  */ ;/**  * Exposes JSTL-specific request attributes specifying locale  * and resource bundle for JSTL's formatting and message tags,  * using Spring's locale and MessageSource.  * @param request the current HTTP request  * @param messageSource the MessageSource to expose,  * typically the current ApplicationContext (may be {@code null})  * @see #exposeLocalizationContext(RequestContext)  */ public static void exposeLocalizationContext(HttpServletRequest request, @Nullable MessageSource messageSource) {     Locale jstlLocale = RequestContextUtils.getLocale(request).     Config.set(request, Config.FMT_LOCALE, jstlLocale).     TimeZone timeZone = RequestContextUtils.getTimeZone(request).     if (timeZone != null) {         Config.set(request, Config.FMT_TIME_ZONE, timeZone).     }     if (messageSource != null) {         LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, request).         Config.set(request, Config.FMT_LOCALIZATION_CONTEXT, jstlContext).     } }
true;public,static;1;11;/**  * Exposes JSTL-specific request attributes specifying locale  * and resource bundle for JSTL's formatting and message tags,  * using Spring's locale and MessageSource.  * @param requestContext the context for the current HTTP request,  * including the ApplicationContext to expose as MessageSource  */ ;/**  * Exposes JSTL-specific request attributes specifying locale  * and resource bundle for JSTL's formatting and message tags,  * using Spring's locale and MessageSource.  * @param requestContext the context for the current HTTP request,  * including the ApplicationContext to expose as MessageSource  */ public static void exposeLocalizationContext(RequestContext requestContext) {     Config.set(requestContext.getRequest(), Config.FMT_LOCALE, requestContext.getLocale()).     TimeZone timeZone = requestContext.getTimeZone().     if (timeZone != null) {         Config.set(requestContext.getRequest(), Config.FMT_TIME_ZONE, timeZone).     }     MessageSource messageSource = getJstlAwareMessageSource(requestContext.getServletContext(), requestContext.getMessageSource()).     LocalizationContext jstlContext = new SpringLocalizationContext(messageSource, requestContext.getRequest()).     Config.set(requestContext.getRequest(), Config.FMT_LOCALIZATION_CONTEXT, jstlContext). }
false;public;0;12;;@Override public ResourceBundle getResourceBundle() {     HttpSession session = this.request.getSession(false).     if (session != null) {         Object lcObject = Config.get(session, Config.FMT_LOCALIZATION_CONTEXT).         if (lcObject instanceof LocalizationContext) {             ResourceBundle lcBundle = ((LocalizationContext) lcObject).getResourceBundle().             return new MessageSourceResourceBundle(this.messageSource, getLocale(), lcBundle).         }     }     return new MessageSourceResourceBundle(this.messageSource, getLocale()). }
false;public;0;11;;@Override public Locale getLocale() {     HttpSession session = this.request.getSession(false).     if (session != null) {         Object localeObject = Config.get(session, Config.FMT_LOCALE).         if (localeObject instanceof Locale) {             return (Locale) localeObject.         }     }     return RequestContextUtils.getLocale(this.request). }
