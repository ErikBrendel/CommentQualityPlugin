commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify a custom prefix to use for this view's JSON output.  * Default is none.  * @see #setPrefixJson  */ ;/**  * Specify a custom prefix to use for this view's JSON output.  * Default is none.  * @see #setPrefixJson  */ public void setJsonPrefix(String jsonPrefix) {     this.jsonPrefix = jsonPrefix. }
true;public;1;3;/**  * Indicates whether the JSON output by this view should be prefixed with <tt>")]}', "</tt>.  * Default is {@code false}.  * <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking.  * The prefix renders the string syntactically invalid as a script so that it cannot be hijacked.  * This prefix should be stripped before parsing the string as JSON.  * @see #setJsonPrefix  */ ;/**  * Indicates whether the JSON output by this view should be prefixed with <tt>")]}', "</tt>.  * Default is {@code false}.  * <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking.  * The prefix renders the string syntactically invalid as a script so that it cannot be hijacked.  * This prefix should be stripped before parsing the string as JSON.  * @see #setJsonPrefix  */ public void setPrefixJson(boolean prefixJson) {     this.jsonPrefix = (prefixJson ? ")]}', " : null). }
true;public;1;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public void setModelKey(String modelKey) {     this.modelKeys = Collections.singleton(modelKey). }
true;public;1;3;/**  * Set the attributes in the model that should be rendered by this view.  * When set, all other model attributes will be ignored.  */ ;/**  * Set the attributes in the model that should be rendered by this view.  * When set, all other model attributes will be ignored.  */ public void setModelKeys(@Nullable Set<String> modelKeys) {     this.modelKeys = modelKeys. }
true;public,final;0;4;/**  * Return the attributes in the model that should be rendered by this view.  */ ;/**  * Return the attributes in the model that should be rendered by this view.  */ @Nullable public final Set<String> getModelKeys() {     return this.modelKeys. }
true;public;1;3;/**  * Set whether to serialize models containing a single attribute as a map or  * whether to extract the single value from the model and serialize it directly.  * <p>The effect of setting this flag is similar to using  * {@code MappingJackson2HttpMessageConverter} with an {@code @ResponseBody}  * request-handling method.  * <p>Default is {@code false}.  */ ;/**  * Set whether to serialize models containing a single attribute as a map or  * whether to extract the single value from the model and serialize it directly.  * <p>The effect of setting this flag is similar to using  * {@code MappingJackson2HttpMessageConverter} with an {@code @ResponseBody}  * request-handling method.  * <p>Default is {@code false}.  */ public void setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel) {     this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel. }
true;protected;1;13;/**  * Filter out undesired attributes from the given model.  * The return value can be either another {@link Map} or a single value object.  * <p>The default implementation removes {@link BindingResult} instances and entries  * not included in the {@link #setModelKeys modelKeys} property.  * @param model the model, as passed on to {@link #renderMergedOutputModel}  * @return the value to be rendered  */ ;/**  * Filter out undesired attributes from the given model.  * The return value can be either another {@link Map} or a single value object.  * <p>The default implementation removes {@link BindingResult} instances and entries  * not included in the {@link #setModelKeys modelKeys} property.  * @param model the model, as passed on to {@link #renderMergedOutputModel}  * @return the value to be rendered  */ @Override protected Object filterModel(Map<String, Object> model) {     Map<String, Object> result = new HashMap<>(model.size()).     Set<String> modelKeys = (!CollectionUtils.isEmpty(this.modelKeys) ? this.modelKeys : model.keySet()).     model.forEach((clazz, value) -> {         if (!(value instanceof BindingResult) && modelKeys.contains(clazz) && !clazz.equals(JsonView.class.getName()) && !clazz.equals(FilterProvider.class.getName())) {             result.put(clazz, value).         }     }).     return (this.extractValueFromSingleKeyModel && result.size() == 1 ? result.values().iterator().next() : result). }
false;protected;2;6;;@Override protected void writePrefix(JsonGenerator generator, Object object) throws IOException {     if (this.jsonPrefix != null) {         generator.writeRaw(this.jsonPrefix).     } }
