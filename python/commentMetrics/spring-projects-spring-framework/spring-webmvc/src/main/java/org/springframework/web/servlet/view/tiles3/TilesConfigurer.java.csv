# id;timestamp;commentText;codeText;commentWords;codeWords
TilesConfigurer -> public void setDefinitions(String... definitions);1405200227;Set the Tiles definitions, i.e. the list of files containing the definitions._Default is "/WEB-INF/tiles.xml".;public void setDefinitions(String... definitions) {_		this.definitions = definitions__	};set,the,tiles,definitions,i,e,the,list,of,files,containing,the,definitions,default,is,web,inf,tiles,xml;public,void,set,definitions,string,definitions,this,definitions,definitions
TilesConfigurer -> public void setDefinitions(String... definitions);1414077832;Set the Tiles definitions, i.e. the list of files containing the definitions._Default is "/WEB-INF/tiles.xml".;public void setDefinitions(String... definitions) {_		this.definitions = definitions__	};set,the,tiles,definitions,i,e,the,list,of,files,containing,the,definitions,default,is,web,inf,tiles,xml;public,void,set,definitions,string,definitions,this,definitions,definitions
TilesConfigurer -> public void setDefinitions(String... definitions);1464366289;Set the Tiles definitions, i.e. the list of files containing the definitions._Default is "/WEB-INF/tiles.xml".;public void setDefinitions(String... definitions) {_		this.definitions = definitions__	};set,the,tiles,definitions,i,e,the,list,of,files,containing,the,definitions,default,is,web,inf,tiles,xml;public,void,set,definitions,string,definitions,this,definitions,definitions
TilesConfigurer -> public void setDefinitions(String... definitions);1467730834;Set the Tiles definitions, i.e. the list of files containing the definitions._Default is "/WEB-INF/tiles.xml".;public void setDefinitions(String... definitions) {_		this.definitions = definitions__	};set,the,tiles,definitions,i,e,the,list,of,files,containing,the,definitions,default,is,web,inf,tiles,xml;public,void,set,definitions,string,definitions,this,definitions,definitions
TilesConfigurer -> public void setDefinitions(String... definitions);1468948866;Set the Tiles definitions, i.e. the list of files containing the definitions._Default is "/WEB-INF/tiles.xml".;public void setDefinitions(String... definitions) {_		this.definitions = definitions__	};set,the,tiles,definitions,i,e,the,list,of,files,containing,the,definitions,default,is,web,inf,tiles,xml;public,void,set,definitions,string,definitions,this,definitions,definitions
TilesConfigurer -> public void setDefinitions(String... definitions);1498780456;Set the Tiles definitions, i.e. the list of files containing the definitions._Default is "/WEB-INF/tiles.xml".;public void setDefinitions(String... definitions) {_		this.definitions = definitions__	};set,the,tiles,definitions,i,e,the,list,of,files,containing,the,definitions,default,is,web,inf,tiles,xml;public,void,set,definitions,string,definitions,this,definitions,definitions
TilesConfigurer -> public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass);1405200227;Set the {@link org.apache.tiles.definition.DefinitionsFactory} implementation to use._Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory},_operating on definition resource URLs._<p>Specify a custom DefinitionsFactory, e.g. a UrlDefinitionsFactory subclass,_to customize the creation of Tiles Definition objects. Note that such a_DefinitionsFactory has to be able to handle {@link java.net.URL} source objects,_unless you configure a different TilesContainerFactory.;public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass) {_		this.definitionsFactoryClass = definitionsFactoryClass__	};set,the,link,org,apache,tiles,definition,definitions,factory,implementation,to,use,default,is,link,org,apache,tiles,definition,unresolving,locale,definitions,factory,operating,on,definition,resource,urls,p,specify,a,custom,definitions,factory,e,g,a,url,definitions,factory,subclass,to,customize,the,creation,of,tiles,definition,objects,note,that,such,a,definitions,factory,has,to,be,able,to,handle,link,java,net,url,source,objects,unless,you,configure,a,different,tiles,container,factory;public,void,set,definitions,factory,class,class,extends,definitions,factory,definitions,factory,class,this,definitions,factory,class,definitions,factory,class
TilesConfigurer -> public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass);1414077832;Set the {@link org.apache.tiles.definition.DefinitionsFactory} implementation to use._Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory},_operating on definition resource URLs._<p>Specify a custom DefinitionsFactory, e.g. a UrlDefinitionsFactory subclass,_to customize the creation of Tiles Definition objects. Note that such a_DefinitionsFactory has to be able to handle {@link java.net.URL} source objects,_unless you configure a different TilesContainerFactory.;public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass) {_		this.definitionsFactoryClass = definitionsFactoryClass__	};set,the,link,org,apache,tiles,definition,definitions,factory,implementation,to,use,default,is,link,org,apache,tiles,definition,unresolving,locale,definitions,factory,operating,on,definition,resource,urls,p,specify,a,custom,definitions,factory,e,g,a,url,definitions,factory,subclass,to,customize,the,creation,of,tiles,definition,objects,note,that,such,a,definitions,factory,has,to,be,able,to,handle,link,java,net,url,source,objects,unless,you,configure,a,different,tiles,container,factory;public,void,set,definitions,factory,class,class,extends,definitions,factory,definitions,factory,class,this,definitions,factory,class,definitions,factory,class
TilesConfigurer -> public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass);1464366289;Set the {@link org.apache.tiles.definition.DefinitionsFactory} implementation to use._Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory},_operating on definition resource URLs._<p>Specify a custom DefinitionsFactory, e.g. a UrlDefinitionsFactory subclass,_to customize the creation of Tiles Definition objects. Note that such a_DefinitionsFactory has to be able to handle {@link java.net.URL} source objects,_unless you configure a different TilesContainerFactory.;public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass) {_		this.definitionsFactoryClass = definitionsFactoryClass__	};set,the,link,org,apache,tiles,definition,definitions,factory,implementation,to,use,default,is,link,org,apache,tiles,definition,unresolving,locale,definitions,factory,operating,on,definition,resource,urls,p,specify,a,custom,definitions,factory,e,g,a,url,definitions,factory,subclass,to,customize,the,creation,of,tiles,definition,objects,note,that,such,a,definitions,factory,has,to,be,able,to,handle,link,java,net,url,source,objects,unless,you,configure,a,different,tiles,container,factory;public,void,set,definitions,factory,class,class,extends,definitions,factory,definitions,factory,class,this,definitions,factory,class,definitions,factory,class
TilesConfigurer -> public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass);1467730834;Set the {@link org.apache.tiles.definition.DefinitionsFactory} implementation to use._Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory},_operating on definition resource URLs._<p>Specify a custom DefinitionsFactory, e.g. a UrlDefinitionsFactory subclass,_to customize the creation of Tiles Definition objects. Note that such a_DefinitionsFactory has to be able to handle {@link java.net.URL} source objects,_unless you configure a different TilesContainerFactory.;public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass) {_		this.definitionsFactoryClass = definitionsFactoryClass__	};set,the,link,org,apache,tiles,definition,definitions,factory,implementation,to,use,default,is,link,org,apache,tiles,definition,unresolving,locale,definitions,factory,operating,on,definition,resource,urls,p,specify,a,custom,definitions,factory,e,g,a,url,definitions,factory,subclass,to,customize,the,creation,of,tiles,definition,objects,note,that,such,a,definitions,factory,has,to,be,able,to,handle,link,java,net,url,source,objects,unless,you,configure,a,different,tiles,container,factory;public,void,set,definitions,factory,class,class,extends,definitions,factory,definitions,factory,class,this,definitions,factory,class,definitions,factory,class
TilesConfigurer -> public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass);1468948866;Set the {@link org.apache.tiles.definition.DefinitionsFactory} implementation to use._Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory},_operating on definition resource URLs._<p>Specify a custom DefinitionsFactory, e.g. a UrlDefinitionsFactory subclass,_to customize the creation of Tiles Definition objects. Note that such a_DefinitionsFactory has to be able to handle {@link java.net.URL} source objects,_unless you configure a different TilesContainerFactory.;public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass) {_		this.definitionsFactoryClass = definitionsFactoryClass__	};set,the,link,org,apache,tiles,definition,definitions,factory,implementation,to,use,default,is,link,org,apache,tiles,definition,unresolving,locale,definitions,factory,operating,on,definition,resource,urls,p,specify,a,custom,definitions,factory,e,g,a,url,definitions,factory,subclass,to,customize,the,creation,of,tiles,definition,objects,note,that,such,a,definitions,factory,has,to,be,able,to,handle,link,java,net,url,source,objects,unless,you,configure,a,different,tiles,container,factory;public,void,set,definitions,factory,class,class,extends,definitions,factory,definitions,factory,class,this,definitions,factory,class,definitions,factory,class
TilesConfigurer -> public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass);1498780456;Set the {@link org.apache.tiles.definition.DefinitionsFactory} implementation to use._Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory},_operating on definition resource URLs._<p>Specify a custom DefinitionsFactory, e.g. a UrlDefinitionsFactory subclass,_to customize the creation of Tiles Definition objects. Note that such a_DefinitionsFactory has to be able to handle {@link java.net.URL} source objects,_unless you configure a different TilesContainerFactory.;public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass) {_		this.definitionsFactoryClass = definitionsFactoryClass__	};set,the,link,org,apache,tiles,definition,definitions,factory,implementation,to,use,default,is,link,org,apache,tiles,definition,unresolving,locale,definitions,factory,operating,on,definition,resource,urls,p,specify,a,custom,definitions,factory,e,g,a,url,definitions,factory,subclass,to,customize,the,creation,of,tiles,definition,objects,note,that,such,a,definitions,factory,has,to,be,able,to,handle,link,java,net,url,source,objects,unless,you,configure,a,different,tiles,container,factory;public,void,set,definitions,factory,class,class,extends,definitions,factory,definitions,factory,class,this,definitions,factory,class,definitions,factory,class
TilesConfigurer -> public void setCompleteAutoload(boolean completeAutoload);1405200227;Specify whether to apply Tiles 3.0's "complete-autoload" configuration._<p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory}_for details on the complete-autoload mode._<p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}._@see org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory_@see org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer;public void setCompleteAutoload(boolean completeAutoload) {_		if (completeAutoload) {_			try {_				this.tilesInitializer = new SpringCompleteAutoloadTilesInitializer()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Tiles-Extras 3.0 not available", ex)__			}_		}_		else {_			this.tilesInitializer = null__		}_	};specify,whether,to,apply,tiles,3,0,s,complete,autoload,configuration,p,see,link,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,for,details,on,the,complete,autoload,mode,p,b,note,specifying,the,complete,autoload,mode,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,link,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer,see,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,see,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer;public,void,set,complete,autoload,boolean,complete,autoload,if,complete,autoload,try,this,tiles,initializer,new,spring,complete,autoload,tiles,initializer,catch,throwable,ex,throw,new,illegal,state,exception,tiles,extras,3,0,not,available,ex,else,this,tiles,initializer,null
TilesConfigurer -> public void setCompleteAutoload(boolean completeAutoload);1414077832;Specify whether to apply Tiles 3.0's "complete-autoload" configuration._<p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory}_for details on the complete-autoload mode._<p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}._@see org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory_@see org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer;public void setCompleteAutoload(boolean completeAutoload) {_		if (completeAutoload) {_			try {_				this.tilesInitializer = new SpringCompleteAutoloadTilesInitializer()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Tiles-Extras 3.0 not available", ex)__			}_		}_		else {_			this.tilesInitializer = null__		}_	};specify,whether,to,apply,tiles,3,0,s,complete,autoload,configuration,p,see,link,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,for,details,on,the,complete,autoload,mode,p,b,note,specifying,the,complete,autoload,mode,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,link,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer,see,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,see,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer;public,void,set,complete,autoload,boolean,complete,autoload,if,complete,autoload,try,this,tiles,initializer,new,spring,complete,autoload,tiles,initializer,catch,throwable,ex,throw,new,illegal,state,exception,tiles,extras,3,0,not,available,ex,else,this,tiles,initializer,null
TilesConfigurer -> public void setCompleteAutoload(boolean completeAutoload);1464366289;Specify whether to apply Tiles 3.0's "complete-autoload" configuration._<p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory}_for details on the complete-autoload mode._<p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}._@see org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory_@see org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer;public void setCompleteAutoload(boolean completeAutoload) {_		if (completeAutoload) {_			try {_				this.tilesInitializer = new SpringCompleteAutoloadTilesInitializer()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Tiles-Extras 3.0 not available", ex)__			}_		}_		else {_			this.tilesInitializer = null__		}_	};specify,whether,to,apply,tiles,3,0,s,complete,autoload,configuration,p,see,link,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,for,details,on,the,complete,autoload,mode,p,b,note,specifying,the,complete,autoload,mode,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,link,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer,see,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,see,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer;public,void,set,complete,autoload,boolean,complete,autoload,if,complete,autoload,try,this,tiles,initializer,new,spring,complete,autoload,tiles,initializer,catch,throwable,ex,throw,new,illegal,state,exception,tiles,extras,3,0,not,available,ex,else,this,tiles,initializer,null
TilesConfigurer -> public void setCompleteAutoload(boolean completeAutoload);1467730834;Specify whether to apply Tiles 3.0's "complete-autoload" configuration._<p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory}_for details on the complete-autoload mode._<p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}._@see org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory_@see org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer;public void setCompleteAutoload(boolean completeAutoload) {_		if (completeAutoload) {_			try {_				this.tilesInitializer = new SpringCompleteAutoloadTilesInitializer()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Tiles-Extras 3.0 not available", ex)__			}_		}_		else {_			this.tilesInitializer = null__		}_	};specify,whether,to,apply,tiles,3,0,s,complete,autoload,configuration,p,see,link,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,for,details,on,the,complete,autoload,mode,p,b,note,specifying,the,complete,autoload,mode,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,link,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer,see,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,see,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer;public,void,set,complete,autoload,boolean,complete,autoload,if,complete,autoload,try,this,tiles,initializer,new,spring,complete,autoload,tiles,initializer,catch,throwable,ex,throw,new,illegal,state,exception,tiles,extras,3,0,not,available,ex,else,this,tiles,initializer,null
TilesConfigurer -> public void setCompleteAutoload(boolean completeAutoload);1468948866;Specify whether to apply Tiles 3.0's "complete-autoload" configuration._<p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory}_for details on the complete-autoload mode._<p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}._@see org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory_@see org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer;public void setCompleteAutoload(boolean completeAutoload) {_		if (completeAutoload) {_			try {_				this.tilesInitializer = new SpringCompleteAutoloadTilesInitializer()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Tiles-Extras 3.0 not available", ex)__			}_		}_		else {_			this.tilesInitializer = null__		}_	};specify,whether,to,apply,tiles,3,0,s,complete,autoload,configuration,p,see,link,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,for,details,on,the,complete,autoload,mode,p,b,note,specifying,the,complete,autoload,mode,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,link,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer,see,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,see,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer;public,void,set,complete,autoload,boolean,complete,autoload,if,complete,autoload,try,this,tiles,initializer,new,spring,complete,autoload,tiles,initializer,catch,throwable,ex,throw,new,illegal,state,exception,tiles,extras,3,0,not,available,ex,else,this,tiles,initializer,null
TilesConfigurer -> public void setCompleteAutoload(boolean completeAutoload);1498780456;Specify whether to apply Tiles 3.0's "complete-autoload" configuration._<p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory}_for details on the complete-autoload mode._<p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}._@see org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory_@see org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer;public void setCompleteAutoload(boolean completeAutoload) {_		if (completeAutoload) {_			try {_				this.tilesInitializer = new SpringCompleteAutoloadTilesInitializer()__			}_			catch (Throwable ex) {_				throw new IllegalStateException("Tiles-Extras 3.0 not available", ex)__			}_		}_		else {_			this.tilesInitializer = null__		}_	};specify,whether,to,apply,tiles,3,0,s,complete,autoload,configuration,p,see,link,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,for,details,on,the,complete,autoload,mode,p,b,note,specifying,the,complete,autoload,mode,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,link,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer,see,org,apache,tiles,extras,complete,complete,autoload,tiles,container,factory,see,org,apache,tiles,extras,complete,complete,autoload,tiles,initializer;public,void,set,complete,autoload,boolean,complete,autoload,if,complete,autoload,try,this,tiles,initializer,new,spring,complete,autoload,tiles,initializer,catch,throwable,ex,throw,new,illegal,state,exception,tiles,extras,3,0,not,available,ex,else,this,tiles,initializer,null
TilesConfigurer -> public void setTilesInitializer(TilesInitializer tilesInitializer);1405200227;Configure Tiles using a custom TilesInitializer, typically specified as an inner bean._<p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer},_respecting the "definitions", "preparerFactoryClass" etc properties on this configurer._<p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to the TilesInitializer as specified.;public void setTilesInitializer(TilesInitializer tilesInitializer) {_		this.tilesInitializer = tilesInitializer__	};configure,tiles,using,a,custom,tiles,initializer,typically,specified,as,an,inner,bean,p,default,is,a,variant,of,link,org,apache,tiles,startup,default,tiles,initializer,respecting,the,definitions,preparer,factory,class,etc,properties,on,this,configurer,p,b,note,specifying,a,custom,tiles,initializer,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,the,tiles,initializer,as,specified;public,void,set,tiles,initializer,tiles,initializer,tiles,initializer,this,tiles,initializer,tiles,initializer
TilesConfigurer -> public void setTilesInitializer(TilesInitializer tilesInitializer);1414077832;Configure Tiles using a custom TilesInitializer, typically specified as an inner bean._<p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer},_respecting the "definitions", "preparerFactoryClass" etc properties on this configurer._<p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to the TilesInitializer as specified.;public void setTilesInitializer(TilesInitializer tilesInitializer) {_		this.tilesInitializer = tilesInitializer__	};configure,tiles,using,a,custom,tiles,initializer,typically,specified,as,an,inner,bean,p,default,is,a,variant,of,link,org,apache,tiles,startup,default,tiles,initializer,respecting,the,definitions,preparer,factory,class,etc,properties,on,this,configurer,p,b,note,specifying,a,custom,tiles,initializer,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,the,tiles,initializer,as,specified;public,void,set,tiles,initializer,tiles,initializer,tiles,initializer,this,tiles,initializer,tiles,initializer
TilesConfigurer -> public void setTilesInitializer(TilesInitializer tilesInitializer);1464366289;Configure Tiles using a custom TilesInitializer, typically specified as an inner bean._<p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer},_respecting the "definitions", "preparerFactoryClass" etc properties on this configurer._<p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to the TilesInitializer as specified.;public void setTilesInitializer(TilesInitializer tilesInitializer) {_		this.tilesInitializer = tilesInitializer__	};configure,tiles,using,a,custom,tiles,initializer,typically,specified,as,an,inner,bean,p,default,is,a,variant,of,link,org,apache,tiles,startup,default,tiles,initializer,respecting,the,definitions,preparer,factory,class,etc,properties,on,this,configurer,p,b,note,specifying,a,custom,tiles,initializer,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,the,tiles,initializer,as,specified;public,void,set,tiles,initializer,tiles,initializer,tiles,initializer,this,tiles,initializer,tiles,initializer
TilesConfigurer -> public void setTilesInitializer(TilesInitializer tilesInitializer);1467730834;Configure Tiles using a custom TilesInitializer, typically specified as an inner bean._<p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer},_respecting the "definitions", "preparerFactoryClass" etc properties on this configurer._<p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to the TilesInitializer as specified.;public void setTilesInitializer(TilesInitializer tilesInitializer) {_		this.tilesInitializer = tilesInitializer__	};configure,tiles,using,a,custom,tiles,initializer,typically,specified,as,an,inner,bean,p,default,is,a,variant,of,link,org,apache,tiles,startup,default,tiles,initializer,respecting,the,definitions,preparer,factory,class,etc,properties,on,this,configurer,p,b,note,specifying,a,custom,tiles,initializer,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,the,tiles,initializer,as,specified;public,void,set,tiles,initializer,tiles,initializer,tiles,initializer,this,tiles,initializer,tiles,initializer
TilesConfigurer -> public void setTilesInitializer(TilesInitializer tilesInitializer);1468948866;Configure Tiles using a custom TilesInitializer, typically specified as an inner bean._<p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer},_respecting the "definitions", "preparerFactoryClass" etc properties on this configurer._<p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to the TilesInitializer as specified.;public void setTilesInitializer(TilesInitializer tilesInitializer) {_		this.tilesInitializer = tilesInitializer__	};configure,tiles,using,a,custom,tiles,initializer,typically,specified,as,an,inner,bean,p,default,is,a,variant,of,link,org,apache,tiles,startup,default,tiles,initializer,respecting,the,definitions,preparer,factory,class,etc,properties,on,this,configurer,p,b,note,specifying,a,custom,tiles,initializer,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,the,tiles,initializer,as,specified;public,void,set,tiles,initializer,tiles,initializer,tiles,initializer,this,tiles,initializer,tiles,initializer
TilesConfigurer -> public void setTilesInitializer(TilesInitializer tilesInitializer);1498780456;Configure Tiles using a custom TilesInitializer, typically specified as an inner bean._<p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer},_respecting the "definitions", "preparerFactoryClass" etc properties on this configurer._<p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean_properties on this configurer.</b> The entire initialization procedure is then left_to the TilesInitializer as specified.;public void setTilesInitializer(TilesInitializer tilesInitializer) {_		this.tilesInitializer = tilesInitializer__	};configure,tiles,using,a,custom,tiles,initializer,typically,specified,as,an,inner,bean,p,default,is,a,variant,of,link,org,apache,tiles,startup,default,tiles,initializer,respecting,the,definitions,preparer,factory,class,etc,properties,on,this,configurer,p,b,note,specifying,a,custom,tiles,initializer,effectively,disables,all,other,bean,properties,on,this,configurer,b,the,entire,initialization,procedure,is,then,left,to,the,tiles,initializer,as,specified;public,void,set,tiles,initializer,tiles,initializer,tiles,initializer,this,tiles,initializer,tiles,initializer
TilesConfigurer -> public void setValidateDefinitions(boolean validateDefinitions);1405200227;Set whether to validate the Tiles XML definitions. Default is "true".;public void setValidateDefinitions(boolean validateDefinitions) {_		this.validateDefinitions = validateDefinitions__	};set,whether,to,validate,the,tiles,xml,definitions,default,is,true;public,void,set,validate,definitions,boolean,validate,definitions,this,validate,definitions,validate,definitions
TilesConfigurer -> public void setValidateDefinitions(boolean validateDefinitions);1414077832;Set whether to validate the Tiles XML definitions. Default is "true".;public void setValidateDefinitions(boolean validateDefinitions) {_		this.validateDefinitions = validateDefinitions__	};set,whether,to,validate,the,tiles,xml,definitions,default,is,true;public,void,set,validate,definitions,boolean,validate,definitions,this,validate,definitions,validate,definitions
TilesConfigurer -> public void setValidateDefinitions(boolean validateDefinitions);1464366289;Set whether to validate the Tiles XML definitions. Default is "true".;public void setValidateDefinitions(boolean validateDefinitions) {_		this.validateDefinitions = validateDefinitions__	};set,whether,to,validate,the,tiles,xml,definitions,default,is,true;public,void,set,validate,definitions,boolean,validate,definitions,this,validate,definitions,validate,definitions
TilesConfigurer -> public void setValidateDefinitions(boolean validateDefinitions);1467730834;Set whether to validate the Tiles XML definitions. Default is "true".;public void setValidateDefinitions(boolean validateDefinitions) {_		this.validateDefinitions = validateDefinitions__	};set,whether,to,validate,the,tiles,xml,definitions,default,is,true;public,void,set,validate,definitions,boolean,validate,definitions,this,validate,definitions,validate,definitions
TilesConfigurer -> public void setValidateDefinitions(boolean validateDefinitions);1468948866;Set whether to validate the Tiles XML definitions. Default is "true".;public void setValidateDefinitions(boolean validateDefinitions) {_		this.validateDefinitions = validateDefinitions__	};set,whether,to,validate,the,tiles,xml,definitions,default,is,true;public,void,set,validate,definitions,boolean,validate,definitions,this,validate,definitions,validate,definitions
TilesConfigurer -> public void setValidateDefinitions(boolean validateDefinitions);1498780456;Set whether to validate the Tiles XML definitions. Default is "true".;public void setValidateDefinitions(boolean validateDefinitions) {_		this.validateDefinitions = validateDefinitions__	};set,whether,to,validate,the,tiles,xml,definitions,default,is,true;public,void,set,validate,definitions,boolean,validate,definitions,this,validate,definitions,validate,definitions
TilesConfigurer -> @Override 	public void destroy() throws TilesException;1405200227;Removes the TilesContainer from this web application._@throws TilesException in case of cleanup failure;@Override_	public void destroy() throws TilesException {_		this.tilesInitializer.destroy()__	};removes,the,tiles,container,from,this,web,application,throws,tiles,exception,in,case,of,cleanup,failure;override,public,void,destroy,throws,tiles,exception,this,tiles,initializer,destroy
TilesConfigurer -> @Override 	public void destroy() throws TilesException;1414077832;Removes the TilesContainer from this web application._@throws TilesException in case of cleanup failure;@Override_	public void destroy() throws TilesException {_		this.tilesInitializer.destroy()__	};removes,the,tiles,container,from,this,web,application,throws,tiles,exception,in,case,of,cleanup,failure;override,public,void,destroy,throws,tiles,exception,this,tiles,initializer,destroy
TilesConfigurer -> @Override 	public void destroy() throws TilesException;1464366289;Removes the TilesContainer from this web application._@throws TilesException in case of cleanup failure;@Override_	public void destroy() throws TilesException {_		this.tilesInitializer.destroy()__	};removes,the,tiles,container,from,this,web,application,throws,tiles,exception,in,case,of,cleanup,failure;override,public,void,destroy,throws,tiles,exception,this,tiles,initializer,destroy
TilesConfigurer -> @Override 	public void destroy() throws TilesException;1467730834;Removes the TilesContainer from this web application._@throws TilesException in case of cleanup failure;@Override_	public void destroy() throws TilesException {_		this.tilesInitializer.destroy()__	};removes,the,tiles,container,from,this,web,application,throws,tiles,exception,in,case,of,cleanup,failure;override,public,void,destroy,throws,tiles,exception,this,tiles,initializer,destroy
TilesConfigurer -> @Override 	public void destroy() throws TilesException;1468948866;Removes the TilesContainer from this web application._@throws TilesException in case of cleanup failure;@Override_	public void destroy() throws TilesException {_		this.tilesInitializer.destroy()__	};removes,the,tiles,container,from,this,web,application,throws,tiles,exception,in,case,of,cleanup,failure;override,public,void,destroy,throws,tiles,exception,this,tiles,initializer,destroy
TilesConfigurer -> @Override 	public void destroy() throws TilesException;1498780456;Removes the TilesContainer from this web application._@throws TilesException in case of cleanup failure;@Override_	public void destroy() throws TilesException {_		if (this.tilesInitializer != null) {_			this.tilesInitializer.destroy()__		}_	};removes,the,tiles,container,from,this,web,application,throws,tiles,exception,in,case,of,cleanup,failure;override,public,void,destroy,throws,tiles,exception,if,this,tiles,initializer,null,this,tiles,initializer,destroy
TilesConfigurer -> public void setUseMutableTilesContainer(boolean useMutableTilesContainer);1405200227;Set whether to use a MutableTilesContainer (typically the CachingTilesContainer_implementation) for this application. Default is "false"._@see org.apache.tiles.mgmt.MutableTilesContainer_@see org.apache.tiles.impl.mgmt.CachingTilesContainer;public void setUseMutableTilesContainer(boolean useMutableTilesContainer) {_		this.useMutableTilesContainer = useMutableTilesContainer__	};set,whether,to,use,a,mutable,tiles,container,typically,the,caching,tiles,container,implementation,for,this,application,default,is,false,see,org,apache,tiles,mgmt,mutable,tiles,container,see,org,apache,tiles,impl,mgmt,caching,tiles,container;public,void,set,use,mutable,tiles,container,boolean,use,mutable,tiles,container,this,use,mutable,tiles,container,use,mutable,tiles,container
TilesConfigurer -> public void setUseMutableTilesContainer(boolean useMutableTilesContainer);1414077832;Set whether to use a MutableTilesContainer (typically the CachingTilesContainer_implementation) for this application. Default is "false"._@see org.apache.tiles.mgmt.MutableTilesContainer_@see org.apache.tiles.impl.mgmt.CachingTilesContainer;public void setUseMutableTilesContainer(boolean useMutableTilesContainer) {_		this.useMutableTilesContainer = useMutableTilesContainer__	};set,whether,to,use,a,mutable,tiles,container,typically,the,caching,tiles,container,implementation,for,this,application,default,is,false,see,org,apache,tiles,mgmt,mutable,tiles,container,see,org,apache,tiles,impl,mgmt,caching,tiles,container;public,void,set,use,mutable,tiles,container,boolean,use,mutable,tiles,container,this,use,mutable,tiles,container,use,mutable,tiles,container
TilesConfigurer -> public void setUseMutableTilesContainer(boolean useMutableTilesContainer);1464366289;Set whether to use a MutableTilesContainer (typically the CachingTilesContainer_implementation) for this application. Default is "false"._@see org.apache.tiles.mgmt.MutableTilesContainer_@see org.apache.tiles.impl.mgmt.CachingTilesContainer;public void setUseMutableTilesContainer(boolean useMutableTilesContainer) {_		this.useMutableTilesContainer = useMutableTilesContainer__	};set,whether,to,use,a,mutable,tiles,container,typically,the,caching,tiles,container,implementation,for,this,application,default,is,false,see,org,apache,tiles,mgmt,mutable,tiles,container,see,org,apache,tiles,impl,mgmt,caching,tiles,container;public,void,set,use,mutable,tiles,container,boolean,use,mutable,tiles,container,this,use,mutable,tiles,container,use,mutable,tiles,container
TilesConfigurer -> public void setUseMutableTilesContainer(boolean useMutableTilesContainer);1467730834;Set whether to use a MutableTilesContainer (typically the CachingTilesContainer_implementation) for this application. Default is "false"._@see org.apache.tiles.mgmt.MutableTilesContainer_@see org.apache.tiles.impl.mgmt.CachingTilesContainer;public void setUseMutableTilesContainer(boolean useMutableTilesContainer) {_		this.useMutableTilesContainer = useMutableTilesContainer__	};set,whether,to,use,a,mutable,tiles,container,typically,the,caching,tiles,container,implementation,for,this,application,default,is,false,see,org,apache,tiles,mgmt,mutable,tiles,container,see,org,apache,tiles,impl,mgmt,caching,tiles,container;public,void,set,use,mutable,tiles,container,boolean,use,mutable,tiles,container,this,use,mutable,tiles,container,use,mutable,tiles,container
TilesConfigurer -> public void setUseMutableTilesContainer(boolean useMutableTilesContainer);1468948866;Set whether to use a MutableTilesContainer (typically the CachingTilesContainer_implementation) for this application. Default is "false"._@see org.apache.tiles.mgmt.MutableTilesContainer_@see org.apache.tiles.impl.mgmt.CachingTilesContainer;public void setUseMutableTilesContainer(boolean useMutableTilesContainer) {_		this.useMutableTilesContainer = useMutableTilesContainer__	};set,whether,to,use,a,mutable,tiles,container,typically,the,caching,tiles,container,implementation,for,this,application,default,is,false,see,org,apache,tiles,mgmt,mutable,tiles,container,see,org,apache,tiles,impl,mgmt,caching,tiles,container;public,void,set,use,mutable,tiles,container,boolean,use,mutable,tiles,container,this,use,mutable,tiles,container,use,mutable,tiles,container
TilesConfigurer -> public void setUseMutableTilesContainer(boolean useMutableTilesContainer);1498780456;Set whether to use a MutableTilesContainer (typically the CachingTilesContainer_implementation) for this application. Default is "false"._@see org.apache.tiles.mgmt.MutableTilesContainer_@see org.apache.tiles.impl.mgmt.CachingTilesContainer;public void setUseMutableTilesContainer(boolean useMutableTilesContainer) {_		this.useMutableTilesContainer = useMutableTilesContainer__	};set,whether,to,use,a,mutable,tiles,container,typically,the,caching,tiles,container,implementation,for,this,application,default,is,false,see,org,apache,tiles,mgmt,mutable,tiles,container,see,org,apache,tiles,impl,mgmt,caching,tiles,container;public,void,set,use,mutable,tiles,container,boolean,use,mutable,tiles,container,this,use,mutable,tiles,container,use,mutable,tiles,container
TilesConfigurer -> @Override 	public void afterPropertiesSet() throws TilesException;1405200227;Creates and exposes a TilesContainer for this web application,_delegating to the TilesInitializer._@throws TilesException in case of setup failure;@Override_	public void afterPropertiesSet() throws TilesException {_		ApplicationContext preliminaryContext = new SpringWildcardServletTilesApplicationContext(this.servletContext)__		if (this.tilesInitializer == null) {_			this.tilesInitializer = new SpringTilesInitializer()__		}_		this.tilesInitializer.initialize(preliminaryContext)__	};creates,and,exposes,a,tiles,container,for,this,web,application,delegating,to,the,tiles,initializer,throws,tiles,exception,in,case,of,setup,failure;override,public,void,after,properties,set,throws,tiles,exception,application,context,preliminary,context,new,spring,wildcard,servlet,tiles,application,context,this,servlet,context,if,this,tiles,initializer,null,this,tiles,initializer,new,spring,tiles,initializer,this,tiles,initializer,initialize,preliminary,context
TilesConfigurer -> @Override 	public void afterPropertiesSet() throws TilesException;1414077832;Creates and exposes a TilesContainer for this web application,_delegating to the TilesInitializer._@throws TilesException in case of setup failure;@Override_	public void afterPropertiesSet() throws TilesException {_		ApplicationContext preliminaryContext = new SpringWildcardServletTilesApplicationContext(this.servletContext)__		if (this.tilesInitializer == null) {_			this.tilesInitializer = new SpringTilesInitializer()__		}_		this.tilesInitializer.initialize(preliminaryContext)__	};creates,and,exposes,a,tiles,container,for,this,web,application,delegating,to,the,tiles,initializer,throws,tiles,exception,in,case,of,setup,failure;override,public,void,after,properties,set,throws,tiles,exception,application,context,preliminary,context,new,spring,wildcard,servlet,tiles,application,context,this,servlet,context,if,this,tiles,initializer,null,this,tiles,initializer,new,spring,tiles,initializer,this,tiles,initializer,initialize,preliminary,context
TilesConfigurer -> @Override 	public void afterPropertiesSet() throws TilesException;1464366289;Creates and exposes a TilesContainer for this web application,_delegating to the TilesInitializer._@throws TilesException in case of setup failure;@Override_	public void afterPropertiesSet() throws TilesException {_		ApplicationContext preliminaryContext = new SpringWildcardServletTilesApplicationContext(this.servletContext)__		if (this.tilesInitializer == null) {_			this.tilesInitializer = new SpringTilesInitializer()__		}_		this.tilesInitializer.initialize(preliminaryContext)__	};creates,and,exposes,a,tiles,container,for,this,web,application,delegating,to,the,tiles,initializer,throws,tiles,exception,in,case,of,setup,failure;override,public,void,after,properties,set,throws,tiles,exception,application,context,preliminary,context,new,spring,wildcard,servlet,tiles,application,context,this,servlet,context,if,this,tiles,initializer,null,this,tiles,initializer,new,spring,tiles,initializer,this,tiles,initializer,initialize,preliminary,context
TilesConfigurer -> @Override 	public void afterPropertiesSet() throws TilesException;1467730834;Creates and exposes a TilesContainer for this web application,_delegating to the TilesInitializer._@throws TilesException in case of setup failure;@Override_	public void afterPropertiesSet() throws TilesException {_		ApplicationContext preliminaryContext = new SpringWildcardServletTilesApplicationContext(this.servletContext)__		if (this.tilesInitializer == null) {_			this.tilesInitializer = new SpringTilesInitializer()__		}_		this.tilesInitializer.initialize(preliminaryContext)__	};creates,and,exposes,a,tiles,container,for,this,web,application,delegating,to,the,tiles,initializer,throws,tiles,exception,in,case,of,setup,failure;override,public,void,after,properties,set,throws,tiles,exception,application,context,preliminary,context,new,spring,wildcard,servlet,tiles,application,context,this,servlet,context,if,this,tiles,initializer,null,this,tiles,initializer,new,spring,tiles,initializer,this,tiles,initializer,initialize,preliminary,context
TilesConfigurer -> @Override 	public void afterPropertiesSet() throws TilesException;1468948866;Creates and exposes a TilesContainer for this web application,_delegating to the TilesInitializer._@throws TilesException in case of setup failure;@Override_	public void afterPropertiesSet() throws TilesException {_		ApplicationContext preliminaryContext = new SpringWildcardServletTilesApplicationContext(this.servletContext)__		if (this.tilesInitializer == null) {_			this.tilesInitializer = new SpringTilesInitializer()__		}_		this.tilesInitializer.initialize(preliminaryContext)__	};creates,and,exposes,a,tiles,container,for,this,web,application,delegating,to,the,tiles,initializer,throws,tiles,exception,in,case,of,setup,failure;override,public,void,after,properties,set,throws,tiles,exception,application,context,preliminary,context,new,spring,wildcard,servlet,tiles,application,context,this,servlet,context,if,this,tiles,initializer,null,this,tiles,initializer,new,spring,tiles,initializer,this,tiles,initializer,initialize,preliminary,context
TilesConfigurer -> @Override 	public void afterPropertiesSet() throws TilesException;1498780456;Creates and exposes a TilesContainer for this web application,_delegating to the TilesInitializer._@throws TilesException in case of setup failure;@Override_	public void afterPropertiesSet() throws TilesException {_		Assert.state(this.servletContext != null, "No ServletContext available")__		ApplicationContext preliminaryContext = new SpringWildcardServletTilesApplicationContext(this.servletContext)__		if (this.tilesInitializer == null) {_			this.tilesInitializer = new SpringTilesInitializer()__		}_		this.tilesInitializer.initialize(preliminaryContext)__	};creates,and,exposes,a,tiles,container,for,this,web,application,delegating,to,the,tiles,initializer,throws,tiles,exception,in,case,of,setup,failure;override,public,void,after,properties,set,throws,tiles,exception,assert,state,this,servlet,context,null,no,servlet,context,available,application,context,preliminary,context,new,spring,wildcard,servlet,tiles,application,context,this,servlet,context,if,this,tiles,initializer,null,this,tiles,initializer,new,spring,tiles,initializer,this,tiles,initializer,initialize,preliminary,context
TilesConfigurer -> public void setCheckRefresh(boolean checkRefresh);1405200227;Set whether to check Tiles definition files for a refresh at runtime._Default is "false".;public void setCheckRefresh(boolean checkRefresh) {_		this.checkRefresh = checkRefresh__	};set,whether,to,check,tiles,definition,files,for,a,refresh,at,runtime,default,is,false;public,void,set,check,refresh,boolean,check,refresh,this,check,refresh,check,refresh
TilesConfigurer -> public void setCheckRefresh(boolean checkRefresh);1414077832;Set whether to check Tiles definition files for a refresh at runtime._Default is "false".;public void setCheckRefresh(boolean checkRefresh) {_		this.checkRefresh = checkRefresh__	};set,whether,to,check,tiles,definition,files,for,a,refresh,at,runtime,default,is,false;public,void,set,check,refresh,boolean,check,refresh,this,check,refresh,check,refresh
TilesConfigurer -> public void setCheckRefresh(boolean checkRefresh);1464366289;Set whether to check Tiles definition files for a refresh at runtime._Default is "false".;public void setCheckRefresh(boolean checkRefresh) {_		this.checkRefresh = checkRefresh__	};set,whether,to,check,tiles,definition,files,for,a,refresh,at,runtime,default,is,false;public,void,set,check,refresh,boolean,check,refresh,this,check,refresh,check,refresh
TilesConfigurer -> public void setCheckRefresh(boolean checkRefresh);1467730834;Set whether to check Tiles definition files for a refresh at runtime._Default is "false".;public void setCheckRefresh(boolean checkRefresh) {_		this.checkRefresh = checkRefresh__	};set,whether,to,check,tiles,definition,files,for,a,refresh,at,runtime,default,is,false;public,void,set,check,refresh,boolean,check,refresh,this,check,refresh,check,refresh
TilesConfigurer -> public void setCheckRefresh(boolean checkRefresh);1468948866;Set whether to check Tiles definition files for a refresh at runtime._Default is "false".;public void setCheckRefresh(boolean checkRefresh) {_		this.checkRefresh = checkRefresh__	};set,whether,to,check,tiles,definition,files,for,a,refresh,at,runtime,default,is,false;public,void,set,check,refresh,boolean,check,refresh,this,check,refresh,check,refresh
TilesConfigurer -> public void setCheckRefresh(boolean checkRefresh);1498780456;Set whether to check Tiles definition files for a refresh at runtime._Default is "false".;public void setCheckRefresh(boolean checkRefresh) {_		this.checkRefresh = checkRefresh__	};set,whether,to,check,tiles,definition,files,for,a,refresh,at,runtime,default,is,false;public,void,set,check,refresh,boolean,check,refresh,this,check,refresh,check,refresh
TilesConfigurer -> public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass);1405200227;Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use._Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating_shared instances for specified preparer classes._<p>Specify {@link SimpleSpringPreparerFactory} to autowire_{@link org.apache.tiles.preparer.ViewPreparer} instances based on specified_preparer classes, applying Spring's container callbacks as well as applying_configured Spring BeanPostProcessors. If Spring's context-wide annotation-config_has been activated, annotations in ViewPreparer classes will be automatically_detected and applied._<p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer_<i>names</i> instead of classes, obtaining the corresponding Spring bean from_the DispatcherServlet's application context. The full bean creation process_will be in the control of the Spring application context in this case,_allowing for the use of scoped beans etc. Note that you need to define one_Spring bean definition per preparer name (as used in your Tiles definitions)._@see SimpleSpringPreparerFactory_@see SpringBeanPreparerFactory;public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass) {_		this.preparerFactoryClass = preparerFactoryClass__	};set,the,link,org,apache,tiles,preparer,factory,preparer,factory,implementation,to,use,default,is,link,org,apache,tiles,preparer,factory,basic,preparer,factory,creating,shared,instances,for,specified,preparer,classes,p,specify,link,simple,spring,preparer,factory,to,autowire,link,org,apache,tiles,preparer,view,preparer,instances,based,on,specified,preparer,classes,applying,spring,s,container,callbacks,as,well,as,applying,configured,spring,bean,post,processors,if,spring,s,context,wide,annotation,config,has,been,activated,annotations,in,view,preparer,classes,will,be,automatically,detected,and,applied,p,specify,link,spring,bean,preparer,factory,to,operate,on,specified,preparer,i,names,i,instead,of,classes,obtaining,the,corresponding,spring,bean,from,the,dispatcher,servlet,s,application,context,the,full,bean,creation,process,will,be,in,the,control,of,the,spring,application,context,in,this,case,allowing,for,the,use,of,scoped,beans,etc,note,that,you,need,to,define,one,spring,bean,definition,per,preparer,name,as,used,in,your,tiles,definitions,see,simple,spring,preparer,factory,see,spring,bean,preparer,factory;public,void,set,preparer,factory,class,class,extends,preparer,factory,preparer,factory,class,this,preparer,factory,class,preparer,factory,class
TilesConfigurer -> public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass);1414077832;Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use._Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating_shared instances for specified preparer classes._<p>Specify {@link SimpleSpringPreparerFactory} to autowire_{@link org.apache.tiles.preparer.ViewPreparer} instances based on specified_preparer classes, applying Spring's container callbacks as well as applying_configured Spring BeanPostProcessors. If Spring's context-wide annotation-config_has been activated, annotations in ViewPreparer classes will be automatically_detected and applied._<p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer_<i>names</i> instead of classes, obtaining the corresponding Spring bean from_the DispatcherServlet's application context. The full bean creation process_will be in the control of the Spring application context in this case,_allowing for the use of scoped beans etc. Note that you need to define one_Spring bean definition per preparer name (as used in your Tiles definitions)._@see SimpleSpringPreparerFactory_@see SpringBeanPreparerFactory;public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass) {_		this.preparerFactoryClass = preparerFactoryClass__	};set,the,link,org,apache,tiles,preparer,factory,preparer,factory,implementation,to,use,default,is,link,org,apache,tiles,preparer,factory,basic,preparer,factory,creating,shared,instances,for,specified,preparer,classes,p,specify,link,simple,spring,preparer,factory,to,autowire,link,org,apache,tiles,preparer,view,preparer,instances,based,on,specified,preparer,classes,applying,spring,s,container,callbacks,as,well,as,applying,configured,spring,bean,post,processors,if,spring,s,context,wide,annotation,config,has,been,activated,annotations,in,view,preparer,classes,will,be,automatically,detected,and,applied,p,specify,link,spring,bean,preparer,factory,to,operate,on,specified,preparer,i,names,i,instead,of,classes,obtaining,the,corresponding,spring,bean,from,the,dispatcher,servlet,s,application,context,the,full,bean,creation,process,will,be,in,the,control,of,the,spring,application,context,in,this,case,allowing,for,the,use,of,scoped,beans,etc,note,that,you,need,to,define,one,spring,bean,definition,per,preparer,name,as,used,in,your,tiles,definitions,see,simple,spring,preparer,factory,see,spring,bean,preparer,factory;public,void,set,preparer,factory,class,class,extends,preparer,factory,preparer,factory,class,this,preparer,factory,class,preparer,factory,class
TilesConfigurer -> public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass);1464366289;Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use._Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating_shared instances for specified preparer classes._<p>Specify {@link SimpleSpringPreparerFactory} to autowire_{@link org.apache.tiles.preparer.ViewPreparer} instances based on specified_preparer classes, applying Spring's container callbacks as well as applying_configured Spring BeanPostProcessors. If Spring's context-wide annotation-config_has been activated, annotations in ViewPreparer classes will be automatically_detected and applied._<p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer_<i>names</i> instead of classes, obtaining the corresponding Spring bean from_the DispatcherServlet's application context. The full bean creation process_will be in the control of the Spring application context in this case,_allowing for the use of scoped beans etc. Note that you need to define one_Spring bean definition per preparer name (as used in your Tiles definitions)._@see SimpleSpringPreparerFactory_@see SpringBeanPreparerFactory;public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass) {_		this.preparerFactoryClass = preparerFactoryClass__	};set,the,link,org,apache,tiles,preparer,factory,preparer,factory,implementation,to,use,default,is,link,org,apache,tiles,preparer,factory,basic,preparer,factory,creating,shared,instances,for,specified,preparer,classes,p,specify,link,simple,spring,preparer,factory,to,autowire,link,org,apache,tiles,preparer,view,preparer,instances,based,on,specified,preparer,classes,applying,spring,s,container,callbacks,as,well,as,applying,configured,spring,bean,post,processors,if,spring,s,context,wide,annotation,config,has,been,activated,annotations,in,view,preparer,classes,will,be,automatically,detected,and,applied,p,specify,link,spring,bean,preparer,factory,to,operate,on,specified,preparer,i,names,i,instead,of,classes,obtaining,the,corresponding,spring,bean,from,the,dispatcher,servlet,s,application,context,the,full,bean,creation,process,will,be,in,the,control,of,the,spring,application,context,in,this,case,allowing,for,the,use,of,scoped,beans,etc,note,that,you,need,to,define,one,spring,bean,definition,per,preparer,name,as,used,in,your,tiles,definitions,see,simple,spring,preparer,factory,see,spring,bean,preparer,factory;public,void,set,preparer,factory,class,class,extends,preparer,factory,preparer,factory,class,this,preparer,factory,class,preparer,factory,class
TilesConfigurer -> public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass);1467730834;Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use._Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating_shared instances for specified preparer classes._<p>Specify {@link SimpleSpringPreparerFactory} to autowire_{@link org.apache.tiles.preparer.ViewPreparer} instances based on specified_preparer classes, applying Spring's container callbacks as well as applying_configured Spring BeanPostProcessors. If Spring's context-wide annotation-config_has been activated, annotations in ViewPreparer classes will be automatically_detected and applied._<p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer_<i>names</i> instead of classes, obtaining the corresponding Spring bean from_the DispatcherServlet's application context. The full bean creation process_will be in the control of the Spring application context in this case,_allowing for the use of scoped beans etc. Note that you need to define one_Spring bean definition per preparer name (as used in your Tiles definitions)._@see SimpleSpringPreparerFactory_@see SpringBeanPreparerFactory;public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass) {_		this.preparerFactoryClass = preparerFactoryClass__	};set,the,link,org,apache,tiles,preparer,factory,preparer,factory,implementation,to,use,default,is,link,org,apache,tiles,preparer,factory,basic,preparer,factory,creating,shared,instances,for,specified,preparer,classes,p,specify,link,simple,spring,preparer,factory,to,autowire,link,org,apache,tiles,preparer,view,preparer,instances,based,on,specified,preparer,classes,applying,spring,s,container,callbacks,as,well,as,applying,configured,spring,bean,post,processors,if,spring,s,context,wide,annotation,config,has,been,activated,annotations,in,view,preparer,classes,will,be,automatically,detected,and,applied,p,specify,link,spring,bean,preparer,factory,to,operate,on,specified,preparer,i,names,i,instead,of,classes,obtaining,the,corresponding,spring,bean,from,the,dispatcher,servlet,s,application,context,the,full,bean,creation,process,will,be,in,the,control,of,the,spring,application,context,in,this,case,allowing,for,the,use,of,scoped,beans,etc,note,that,you,need,to,define,one,spring,bean,definition,per,preparer,name,as,used,in,your,tiles,definitions,see,simple,spring,preparer,factory,see,spring,bean,preparer,factory;public,void,set,preparer,factory,class,class,extends,preparer,factory,preparer,factory,class,this,preparer,factory,class,preparer,factory,class
TilesConfigurer -> public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass);1468948866;Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use._Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating_shared instances for specified preparer classes._<p>Specify {@link SimpleSpringPreparerFactory} to autowire_{@link org.apache.tiles.preparer.ViewPreparer} instances based on specified_preparer classes, applying Spring's container callbacks as well as applying_configured Spring BeanPostProcessors. If Spring's context-wide annotation-config_has been activated, annotations in ViewPreparer classes will be automatically_detected and applied._<p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer_<i>names</i> instead of classes, obtaining the corresponding Spring bean from_the DispatcherServlet's application context. The full bean creation process_will be in the control of the Spring application context in this case,_allowing for the use of scoped beans etc. Note that you need to define one_Spring bean definition per preparer name (as used in your Tiles definitions)._@see SimpleSpringPreparerFactory_@see SpringBeanPreparerFactory;public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass) {_		this.preparerFactoryClass = preparerFactoryClass__	};set,the,link,org,apache,tiles,preparer,factory,preparer,factory,implementation,to,use,default,is,link,org,apache,tiles,preparer,factory,basic,preparer,factory,creating,shared,instances,for,specified,preparer,classes,p,specify,link,simple,spring,preparer,factory,to,autowire,link,org,apache,tiles,preparer,view,preparer,instances,based,on,specified,preparer,classes,applying,spring,s,container,callbacks,as,well,as,applying,configured,spring,bean,post,processors,if,spring,s,context,wide,annotation,config,has,been,activated,annotations,in,view,preparer,classes,will,be,automatically,detected,and,applied,p,specify,link,spring,bean,preparer,factory,to,operate,on,specified,preparer,i,names,i,instead,of,classes,obtaining,the,corresponding,spring,bean,from,the,dispatcher,servlet,s,application,context,the,full,bean,creation,process,will,be,in,the,control,of,the,spring,application,context,in,this,case,allowing,for,the,use,of,scoped,beans,etc,note,that,you,need,to,define,one,spring,bean,definition,per,preparer,name,as,used,in,your,tiles,definitions,see,simple,spring,preparer,factory,see,spring,bean,preparer,factory;public,void,set,preparer,factory,class,class,extends,preparer,factory,preparer,factory,class,this,preparer,factory,class,preparer,factory,class
TilesConfigurer -> public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass);1498780456;Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use._Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating_shared instances for specified preparer classes._<p>Specify {@link SimpleSpringPreparerFactory} to autowire_{@link org.apache.tiles.preparer.ViewPreparer} instances based on specified_preparer classes, applying Spring's container callbacks as well as applying_configured Spring BeanPostProcessors. If Spring's context-wide annotation-config_has been activated, annotations in ViewPreparer classes will be automatically_detected and applied._<p>Specify {@link SpringBeanPreparerFactory} to operate on specified preparer_<i>names</i> instead of classes, obtaining the corresponding Spring bean from_the DispatcherServlet's application context. The full bean creation process_will be in the control of the Spring application context in this case,_allowing for the use of scoped beans etc. Note that you need to define one_Spring bean definition per preparer name (as used in your Tiles definitions)._@see SimpleSpringPreparerFactory_@see SpringBeanPreparerFactory;public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass) {_		this.preparerFactoryClass = preparerFactoryClass__	};set,the,link,org,apache,tiles,preparer,factory,preparer,factory,implementation,to,use,default,is,link,org,apache,tiles,preparer,factory,basic,preparer,factory,creating,shared,instances,for,specified,preparer,classes,p,specify,link,simple,spring,preparer,factory,to,autowire,link,org,apache,tiles,preparer,view,preparer,instances,based,on,specified,preparer,classes,applying,spring,s,container,callbacks,as,well,as,applying,configured,spring,bean,post,processors,if,spring,s,context,wide,annotation,config,has,been,activated,annotations,in,view,preparer,classes,will,be,automatically,detected,and,applied,p,specify,link,spring,bean,preparer,factory,to,operate,on,specified,preparer,i,names,i,instead,of,classes,obtaining,the,corresponding,spring,bean,from,the,dispatcher,servlet,s,application,context,the,full,bean,creation,process,will,be,in,the,control,of,the,spring,application,context,in,this,case,allowing,for,the,use,of,scoped,beans,etc,note,that,you,need,to,define,one,spring,bean,definition,per,preparer,name,as,used,in,your,tiles,definitions,see,simple,spring,preparer,factory,see,spring,bean,preparer,factory;public,void,set,preparer,factory,class,class,extends,preparer,factory,preparer,factory,class,this,preparer,factory,class,preparer,factory,class
