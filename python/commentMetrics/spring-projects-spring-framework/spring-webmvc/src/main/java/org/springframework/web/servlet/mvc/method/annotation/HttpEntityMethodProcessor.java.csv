commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public boolean supportsParameter(MethodParameter parameter) {     return (HttpEntity.class == parameter.getParameterType() || RequestEntity.class == parameter.getParameterType()). }
false;public;1;5;;@Override public boolean supportsReturnType(MethodParameter returnType) {     return (HttpEntity.class.isAssignableFrom(returnType.getParameterType()) && !RequestEntity.class.isAssignableFrom(returnType.getParameterType())). }
false;public;4;22;;@Override @Nullable public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws IOException, HttpMediaTypeNotSupportedException {     ServletServerHttpRequest inputMessage = createInputMessage(webRequest).     Type paramType = getHttpEntityType(parameter).     if (paramType == null) {         throw new IllegalArgumentException("HttpEntity parameter '" + parameter.getParameterName() + "' in method " + parameter.getMethod() + " is not parameterized").     }     Object body = readWithMessageConverters(webRequest, parameter, paramType).     if (RequestEntity.class == parameter.getParameterType()) {         return new RequestEntity<>(body, inputMessage.getHeaders(), inputMessage.getMethod(), inputMessage.getURI()).     } else {         return new HttpEntity<>(body, inputMessage.getHeaders()).     } }
false;private;1;19;;@Nullable private Type getHttpEntityType(MethodParameter parameter) {     Assert.isAssignable(HttpEntity.class, parameter.getParameterType()).     Type parameterType = parameter.getGenericParameterType().     if (parameterType instanceof ParameterizedType) {         ParameterizedType type = (ParameterizedType) parameterType.         if (type.getActualTypeArguments().length != 1) {             throw new IllegalArgumentException("Expected single generic parameter on '" + parameter.getParameterName() + "' in method " + parameter.getMethod()).         }         return type.getActualTypeArguments()[0].     } else if (parameterType instanceof Class) {         return Object.class.     } else {         return null.     } }
false;public;4;57;;@Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {     mavContainer.setRequestHandled(true).     if (returnValue == null) {         return.     }     ServletServerHttpRequest inputMessage = createInputMessage(webRequest).     ServletServerHttpResponse outputMessage = createOutputMessage(webRequest).     Assert.isInstanceOf(HttpEntity.class, returnValue).     HttpEntity<?> responseEntity = (HttpEntity<?>) returnValue.     HttpHeaders outputHeaders = outputMessage.getHeaders().     HttpHeaders entityHeaders = responseEntity.getHeaders().     if (!entityHeaders.isEmpty()) {         entityHeaders.forEach((key, value) -> {             if (HttpHeaders.VARY.equals(key) && outputHeaders.containsKey(HttpHeaders.VARY)) {                 List<String> values = getVaryRequestHeadersToAdd(outputHeaders, entityHeaders).                 if (!values.isEmpty()) {                     outputHeaders.setVary(values).                 }             } else {                 outputHeaders.put(key, value).             }         }).     }     if (responseEntity instanceof ResponseEntity) {         int returnStatus = ((ResponseEntity<?>) responseEntity).getStatusCodeValue().         outputMessage.getServletResponse().setStatus(returnStatus).         if (returnStatus == 200) {             if (SAFE_METHODS.contains(inputMessage.getMethod()) && isResourceNotModified(inputMessage, outputMessage)) {                 // Ensure headers are flushed, no body should be written.                 outputMessage.flush().                 // Skip call to converters, as they may update the body.                 return.             }         } else if (returnStatus / 100 == 3) {             String location = outputHeaders.getFirst("location").             if (location != null) {                 saveFlashAttributes(mavContainer, webRequest, location).             }         }     }     // Try even with null body. ResponseBodyAdvice could get involved.     writeWithMessageConverters(responseEntity.getBody(), returnType, inputMessage, outputMessage).     // Ensure headers are flushed even if no body was written.     outputMessage.flush(). }
false;private;2;21;;private List<String> getVaryRequestHeadersToAdd(HttpHeaders responseHeaders, HttpHeaders entityHeaders) {     List<String> entityHeadersVary = entityHeaders.getVary().     List<String> vary = responseHeaders.get(HttpHeaders.VARY).     if (vary != null) {         List<String> result = new ArrayList<>(entityHeadersVary).         for (String header : vary) {             for (String existing : StringUtils.tokenizeToStringArray(header, ",")) {                 if ("*".equals(existing)) {                     return Collections.emptyList().                 }                 for (String value : entityHeadersVary) {                     if (value.equalsIgnoreCase(existing)) {                         result.remove(value).                     }                 }             }         }         return result.     }     return entityHeadersVary. }
false;private;2;13;;private boolean isResourceNotModified(ServletServerHttpRequest request, ServletServerHttpResponse response) {     ServletWebRequest servletWebRequest = new ServletWebRequest(request.getServletRequest(), response.getServletResponse()).     HttpHeaders responseHeaders = response.getHeaders().     String etag = responseHeaders.getETag().     long lastModifiedTimestamp = responseHeaders.getLastModified().     if (request.getMethod() == HttpMethod.GET || request.getMethod() == HttpMethod.HEAD) {         responseHeaders.remove(HttpHeaders.ETAG).         responseHeaders.remove(HttpHeaders.LAST_MODIFIED).     }     return servletWebRequest.checkNotModified(etag, lastModifiedTimestamp). }
false;private;3;17;;private void saveFlashAttributes(ModelAndViewContainer mav, NativeWebRequest request, String location) {     mav.setRedirectModelScenario(true).     ModelMap model = mav.getModel().     if (model instanceof RedirectAttributes) {         Map<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes().         if (!CollectionUtils.isEmpty(flashAttributes)) {             HttpServletRequest req = request.getNativeRequest(HttpServletRequest.class).             HttpServletResponse res = request.getNativeResponse(HttpServletResponse.class).             if (req != null) {                 RequestContextUtils.getOutputFlashMap(req).putAll(flashAttributes).                 if (res != null) {                     RequestContextUtils.saveOutputFlashMap(location, req, res).                 }             }         }     } }
false;protected;2;11;;@Override protected Class<?> getReturnValueType(@Nullable Object returnValue, MethodParameter returnType) {     if (returnValue != null) {         return returnValue.getClass().     } else {         Type type = getHttpEntityType(returnType).         type = (type != null ? type : Object.class).         return ResolvableType.forMethodParameter(returnType, type).toClass().     } }
