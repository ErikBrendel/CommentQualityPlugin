# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1446470398;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1466683957;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1495868221;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1496242568;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1498780456;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1502974979;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1525517218;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1525532664;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1529361191;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1529721864;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1530174524;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1534319871;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1534414106;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1539917387;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1540223162;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1540224798;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses);1547854179;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1495868221;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1496242568;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1498780456;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1502974979;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1525517218;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1525532664;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1529361191;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1529721864;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1530174524;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1534319871;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1534414106;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1539917387;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1540223162;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1540224798;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1547854179;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			@Nullable Object handler, Exception ex);1496242568;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			@Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			@Nullable Object handler, Exception ex);1498780456;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			@Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1328020251;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1356735495;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1357119239;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1366717989;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1368482696;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1385412762;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1385423968;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1427130064;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._Always passes the full exception to the logger._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request), ex)__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,always,passes,the,full,exception,to,the,logger,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request,ex
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1434443272;Log the given exception message at warn level._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,message,at,warn,level,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1444145445;Log the given exception message at warn level._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,message,at,warn,level,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1446457253;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1446470398;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1466683957;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1495868221;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1496242568;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1498780456;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1502974979;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1525517218;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1525532664;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1529361191;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1529721864;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1530174524;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1534319871;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1534414106;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1539917387;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1540223162;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1540224798;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> protected void logException(Exception ex, HttpServletRequest request);1547854179;Log the given exception at warn level, provided that warn logging has been_activated through the {@link #setWarnLogCategory "warnLogCategory"} property._<p>Calls {@link #buildLogMessage} in order to determine the concrete message to log._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@see #setWarnLogCategory_@see #buildLogMessage_@see org.apache.commons.logging.Log#warn(Object, Throwable);protected void logException(Exception ex, HttpServletRequest request) {_		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {_			this.warnLogger.warn(buildLogMessage(ex, request))__		}_	};log,the,given,exception,at,warn,level,provided,that,warn,logging,has,been,activated,through,the,link,set,warn,log,category,warn,log,category,property,p,calls,link,build,log,message,in,order,to,determine,the,concrete,message,to,log,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,see,set,warn,log,category,see,build,log,message,see,org,apache,commons,logging,log,warn,object,throwable;protected,void,log,exception,exception,ex,http,servlet,request,request,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,this,warn,logger,warn,build,log,message,ex,request
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses);1385412762;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses);1385423968;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses);1427130064;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses);1434443272;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses);1444145445;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses);1446457253;Specify the set of classes that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to handlers of the_specified types_ the specified types may be interfaces or superclasses of handlers as well._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class<?>[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,types,the,specified,types,may,be,interfaces,or,superclasses,of,handlers,as,well,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1328020251;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1357119239;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1366717989;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1525517218;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1525532664;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1529361191;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}_				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,debug,enabled,logger,debug,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1529721864;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {__				_				if (logger.isDebugEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {_					logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}__				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,debug,enabled,this,warn,logger,null,this,warn,logger,is,warn,enabled,logger,debug,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1530174524;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {__				_				if (logger.isDebugEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {_					logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}__				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,debug,enabled,this,warn,logger,null,this,warn,logger,is,warn,enabled,logger,debug,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1534319871;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {__				_				if (logger.isWarnEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {_					logger.warn("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}__				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,warn,enabled,this,warn,logger,null,this,warn,logger,is,warn,enabled,logger,warn,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1534414106;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				_				if (logger.isWarnEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {_					logger.warn("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}_				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,warn,enabled,this,warn,logger,null,this,warn,logger,is,warn,enabled,logger,warn,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1539917387;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				_				if (this.warnLogger == null || !this.warnLogger.isWarnEnabled()) {_					if (!useWarnLevelWhenWarnLoggerNotEnabled()) {_						if (logger.isDebugEnabled()) {_							logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__						}_					}_					else if (logger.isWarnEnabled()) {_						logger.warn("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__					}_				}_				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,this,warn,logger,null,this,warn,logger,is,warn,enabled,if,use,warn,level,when,warn,logger,not,enabled,if,logger,is,debug,enabled,logger,debug,resolved,ex,result,is,empty,to,result,else,if,logger,is,warn,enabled,logger,warn,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1540223162;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				_				if (logger.isWarnEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {_					logger.warn("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}_				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,warn,enabled,this,warn,logger,null,this,warn,logger,is,warn,enabled,logger,warn,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1540224798;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				_				if (logger.isDebugEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {_					logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}_				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,debug,enabled,this,warn,logger,null,this,warn,logger,is,warn,enabled,logger,debug,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	@Nullable 	public ModelAndView resolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);1547854179;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	@Nullable_	public ModelAndView resolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				_				if (logger.isDebugEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {_					logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result))__				}_				_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,nullable,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex,if,should,apply,to,request,handler,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,if,logger,is,debug,enabled,this,warn,logger,null,this,warn,logger,is,warn,enabled,logger,debug,resolved,ex,result,is,empty,to,result,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1328020251;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1356735495;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1357119239;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1366717989;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1368482696;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1385412762;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1385423968;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1427130064;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1434443272;Specify whether to prevent HTTP response caching for any view resolved_by this HandlerExceptionResolver._<p>Default is "false". Switch this to "true" in order to automatically_generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,handler,exception,resolver,p,default,is,false,switch,this,to,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1444145445;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1446457253;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1446470398;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1466683957;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1495868221;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1496242568;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1498780456;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1502974979;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1525517218;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1525532664;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1529361191;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1529721864;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1530174524;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1534319871;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1534414106;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1539917387;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1540223162;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1540224798;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setPreventResponseCaching(boolean preventResponseCaching);1547854179;Specify whether to prevent HTTP response caching for any view resolved_by this exception resolver._<p>Default is {@code false}. Switch this to {@code true} in order to_automatically generate HTTP response headers that suppress response caching.;public void setPreventResponseCaching(boolean preventResponseCaching) {_		this.preventResponseCaching = preventResponseCaching__	};specify,whether,to,prevent,http,response,caching,for,any,view,resolved,by,this,exception,resolver,p,default,is,code,false,switch,this,to,code,true,in,order,to,automatically,generate,http,response,headers,that,suppress,response,caching;public,void,set,prevent,response,caching,boolean,prevent,response,caching,this,prevent,response,caching,prevent,response,caching
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class[] mappedHandlerClasses);1328020251;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class[] mappedHandlerClasses);1356735495;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class[] mappedHandlerClasses);1357119239;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class[] mappedHandlerClasses);1366717989;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> public void setMappedHandlerClasses(Class[] mappedHandlerClasses);1368482696;Specify the set of classes that this exception resolver should apply to._The exception mappings and the default error view will only apply to handlers of the_specified type_ the specified types may be interfaces and superclasses of handlers as well._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlerClasses(Class[] mappedHandlerClasses) {_		this.mappedHandlerClasses = mappedHandlerClasses__	};specify,the,set,of,classes,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,handlers,of,the,specified,type,the,specified,types,may,be,interfaces,and,superclasses,of,handlers,as,well,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handler,classes,class,mapped,handler,classes,this,mapped,handler,classes,mapped,handler,classes
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1328020251;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or <code>null</code> if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1356735495;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1357119239;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1366717989;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1368482696;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1385412762;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1385423968;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1427130064;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1434443272;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the specified mapped handlers_and handler classes, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,specified,mapped,handlers,and,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1444145445;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1446457253;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1446470398;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1466683957;Check whether this resolver is supposed to apply to the given handler._<p>The default implementation checks against the configured_{@linkplain #setMappedHandlers handlers} and_{@linkplain #setMappedHandlerClasses handler classes}, if any._@param request current HTTP request_@param handler the executed handler, or {@code null} if none chosen_at the time of the exception (for example, if multipart resolution failed)_@return whether this resolved should proceed with resolving the exception_for the given request and handler_@see #setMappedHandlers_@see #setMappedHandlerClasses;protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler != null) {_			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {_				return true__			}_			if (this.mappedHandlerClasses != null) {_				for (Class<?> handlerClass : this.mappedHandlerClasses) {_					if (handlerClass.isInstance(handler)) {_						return true__					}_				}_			}_		}_		_		return (this.mappedHandlers == null && this.mappedHandlerClasses == null)__	};check,whether,this,resolver,is,supposed,to,apply,to,the,given,handler,p,the,default,implementation,checks,against,the,configured,linkplain,set,mapped,handlers,handlers,and,linkplain,set,mapped,handler,classes,handler,classes,if,any,param,request,current,http,request,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,return,whether,this,resolved,should,proceed,with,resolving,the,exception,for,the,given,request,and,handler,see,set,mapped,handlers,see,set,mapped,handler,classes;protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,if,this,mapped,handlers,null,this,mapped,handlers,contains,handler,return,true,if,this,mapped,handler,classes,null,for,class,handler,class,this,mapped,handler,classes,if,handler,class,is,instance,handler,return,true,return,this,mapped,handlers,null,this,mapped,handler,classes,null
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1328020251;Build a log message for the given exception, occured during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occured,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1356735495;Build a log message for the given exception, occured during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occured,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1357119239;Build a log message for the given exception, occured during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occured,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1366717989;Build a log message for the given exception, occured during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occured,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1368482696;Build a log message for the given exception, occured during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occured,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1385412762;Build a log message for the given exception, occured during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occured,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1385423968;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1427130064;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1434443272;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		String message = (ex != null ? ex.getMessage() : "null")__		return "Handler execution resulted in exception: " + (message != null ? message : "null")__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,string,message,ex,null,ex,get,message,null,return,handler,execution,resulted,in,exception,message,null,message,null
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1444145445;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		String message = (ex != null ? ex.getMessage() : "null")__		return "Handler execution resulted in exception: " + (message != null ? message : "null")__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,string,message,ex,null,ex,get,message,null,return,handler,execution,resulted,in,exception,message,null,message,null
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1446457253;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1446470398;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Handler execution resulted in exception: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,handler,execution,resulted,in,exception,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1466683957;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1495868221;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1496242568;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1498780456;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1502974979;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1525517218;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1525532664;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1529361191;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved exception caused by Handler execution: " + ex__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,exception,caused,by,handler,execution,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1529721864;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1530174524;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1534319871;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1534414106;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1539917387;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1540223162;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1540224798;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected String buildLogMessage(Exception ex, HttpServletRequest request);1547854179;Build a log message for the given exception, occurred during processing the given request._@param ex the exception that got thrown during handler execution_@param request current HTTP request (useful for obtaining metadata)_@return the log message to use;protected String buildLogMessage(Exception ex, HttpServletRequest request) {_		return "Resolved [" + ex + "]"__	};build,a,log,message,for,the,given,exception,occurred,during,processing,the,given,request,param,ex,the,exception,that,got,thrown,during,handler,execution,param,request,current,http,request,useful,for,obtaining,metadata,return,the,log,message,to,use;protected,string,build,log,message,exception,ex,http,servlet,request,request,return,resolved,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1328020251;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or <code>null</code> if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or <code>null</code> for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,code,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1356735495;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1357119239;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1366717989;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1368482696;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1385412762;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1385423968;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1427130064;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1434443272;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1444145445;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1446457253;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1446470398;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, Object handler, Exception ex)_;1466683957;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1328020251;Prevents the response from being cached, through setting corresponding_HTTP headers. See <code>http://www.mnot.net/cache_docs</code>._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		response.setDateHeader(HEADER_EXPIRES, 1L)__		response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,headers,see,code,http,www,mnot,net,code,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,response,set,date,header,1l,response,set,header,no,cache,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1356735495;Prevents the response from being cached, through setting corresponding_HTTP headers. See {@code http://www.mnot.net/cache_docs}._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		response.setDateHeader(HEADER_EXPIRES, 1L)__		response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,headers,see,code,http,www,mnot,net,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,response,set,date,header,1l,response,set,header,no,cache,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1357119239;Prevents the response from being cached, through setting corresponding_HTTP headers. See {@code http://www.mnot.net/cache_docs}._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		response.setDateHeader(HEADER_EXPIRES, 1L)__		response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,headers,see,code,http,www,mnot,net,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,response,set,date,header,1l,response,set,header,no,cache,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1366717989;Prevents the response from being cached, through setting corresponding_HTTP headers. See {@code http://www.mnot.net/cache_docs}._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		response.setDateHeader(HEADER_EXPIRES, 1L)__		response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,headers,see,code,http,www,mnot,net,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,response,set,date,header,1l,response,set,header,no,cache,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1368482696;Prevents the response from being cached, through setting corresponding_HTTP headers. See {@code http://www.mnot.net/cache_docs}._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		response.setDateHeader(HEADER_EXPIRES, 1L)__		response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,headers,see,code,http,www,mnot,net,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,response,set,date,header,1l,response,set,header,no,cache,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1385412762;Prevents the response from being cached, through setting corresponding_HTTP headers. See {@code http://www.mnot.net/cache_docs}._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		response.setDateHeader(HEADER_EXPIRES, 1L)__		response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,headers,see,code,http,www,mnot,net,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,response,set,date,header,1l,response,set,header,no,cache,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1385423968;Prevents the response from being cached, through setting corresponding_HTTP headers. See {@code http://www.mnot.net/cache_docs}._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		response.setDateHeader(HEADER_EXPIRES, 1L)__		response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,headers,see,code,http,www,mnot,net,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,response,set,date,header,1l,response,set,header,no,cache,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1427130064;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1434443272;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1444145445;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1446457253;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1446470398;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1466683957;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1495868221;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1496242568;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1498780456;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1502974979;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1525517218;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1525532664;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1529361191;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1529721864;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1530174524;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1534319871;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1534414106;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1539917387;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1540223162;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1540224798;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> protected void preventCaching(HttpServletResponse response);1547854179;Prevents the response from being cached, through setting corresponding_HTTP {@code Cache-Control: no-store} header._@param response current HTTP response;protected void preventCaching(HttpServletResponse response) {_		response.addHeader(HEADER_CACHE_CONTROL, "no-store")__	};prevents,the,response,from,being,cached,through,setting,corresponding,http,code,cache,control,no,store,header,param,response,current,http,response;protected,void,prevent,caching,http,servlet,response,response,response,add,header,no,store
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1366717989;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1368482696;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1385412762;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1385423968;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1427130064;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1434443272;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1444145445;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1446457253;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1446470398;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1466683957;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1495868221;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1496242568;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1498780456;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1502974979;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1525517218;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1525532664;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1529361191;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1529721864;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1530174524;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1534319871;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1534414106;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1539917387;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1540223162;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1540224798;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set<?> mappedHandlers);1547854179;Specify the set of handlers that this exception resolver should apply to._<p>The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers or handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as a fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set<?> mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,p,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,or,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,a,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex)_;1495868221;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex)_;1496242568;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex)_;1498780456;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex)_;1502974979;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException(HttpServletRequest request, 			HttpServletResponse response, @Nullable Object handler, Exception ex)_;1525517218;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveException(HttpServletRequest request,_			HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set mappedHandlers);1328020251;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set mappedHandlers);1356735495;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> public void setMappedHandlers(Set mappedHandlers);1357119239;Specify the set of handlers that this exception resolver should apply to._The exception mappings and the default error view will only apply to the specified handlers._<p>If no handlers and handler classes are set, the exception mappings and the default error_view will apply to all handlers. This means that a specified default error view will be used_as fallback for all exceptions_ any further HandlerExceptionResolvers in the chain will be_ignored in this case.;public void setMappedHandlers(Set mappedHandlers) {_		this.mappedHandlers = mappedHandlers__	};specify,the,set,of,handlers,that,this,exception,resolver,should,apply,to,the,exception,mappings,and,the,default,error,view,will,only,apply,to,the,specified,handlers,p,if,no,handlers,and,handler,classes,are,set,the,exception,mappings,and,the,default,error,view,will,apply,to,all,handlers,this,means,that,a,specified,default,error,view,will,be,used,as,fallback,for,all,exceptions,any,further,handler,exception,resolvers,in,the,chain,will,be,ignored,in,this,case;public,void,set,mapped,handlers,set,mapped,handlers,this,mapped,handlers,mapped,handlers
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1525532664;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1529361191;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1529721864;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1530174524;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1534319871;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1534414106;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1539917387;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1540223162;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1540224798;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveException( 			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;1547854179;Actually resolve the given exception that got thrown during handler execution,_returning a {@link ModelAndView} that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handler the executed handler, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding {@code ModelAndView} to forward to,_or {@code null} for default processing in the resolution chain;@Nullable_	protected abstract ModelAndView doResolveException(_			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,handler,execution,returning,a,link,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,the,executed,handler,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,code,model,and,view,to,forward,to,or,code,null,for,default,processing,in,the,resolution,chain;nullable,protected,abstract,model,and,view,do,resolve,exception,http,servlet,request,request,http,servlet,response,response,nullable,object,handler,exception,ex
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1328020251;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1356735495;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1357119239;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1366717989;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1368482696;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1385412762;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1385423968;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1427130064;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1434443272;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as log category according_to the logger's configuration._<p>Default is warn logging using the {@link AbstractHandlerExceptionResolver} class name derived logger._Set to {@code null} to disable warn logging._Override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = (loggerName != null ? LogFactory.getLog(loggerName) : null)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,default,is,warn,logging,using,the,link,abstract,handler,exception,resolver,class,name,derived,logger,set,to,code,null,to,disable,warn,logging,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,logger,name,null,log,factory,get,log,logger,name,null
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1444145445;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is warn logging using the {@link AbstractHandlerExceptionResolver} class name derived logger._<p>Set to {@code null} to disable warn logging._<p>Override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = (loggerName != null ? LogFactory.getLog(loggerName) : null)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,warn,logging,using,the,link,abstract,handler,exception,resolver,class,name,derived,logger,p,set,to,code,null,to,disable,warn,logging,p,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,logger,name,null,log,factory,get,log,logger,name,null
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1446457253;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1446470398;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1466683957;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1495868221;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1496242568;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1498780456;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1502974979;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1525517218;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1525532664;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1529361191;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1529721864;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1530174524;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1534319871;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1534414106;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1539917387;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1540223162;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1540224798;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration._<p>Default is no warn logging. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = LogFactory.getLog(loggerName)__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,p,default,is,no,warn,logging,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,log,factory,get,log,logger,name
AbstractHandlerExceptionResolver -> public void setWarnLogCategory(String loggerName);1547854179;Set the log category for warn logging. The name will be passed to the underlying logger_implementation through Commons Logging, getting interpreted as a log category according_to the logger's configuration. If {@code null} is passed, warn logging is turned off._<p>By default there is no warn logging although sub-classes like_{@link org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver}_can change that default. Specify this setting to activate warn logging into a specific_category. Alternatively, override the {@link #logException} method for custom logging._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setWarnLogCategory(String loggerName) {_		this.warnLogger = !StringUtils.isEmpty(loggerName) ? LogFactory.getLog(loggerName) : null__	};set,the,log,category,for,warn,logging,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,a,log,category,according,to,the,logger,s,configuration,if,code,null,is,passed,warn,logging,is,turned,off,p,by,default,there,is,no,warn,logging,although,sub,classes,like,link,org,springframework,web,servlet,mvc,support,default,handler,exception,resolver,can,change,that,default,specify,this,setting,to,activate,warn,logging,into,a,specific,category,alternatively,override,the,link,log,exception,method,for,custom,logging,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,warn,log,category,string,logger,name,this,warn,logger,string,utils,is,empty,logger,name,log,factory,get,log,logger,name,null
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1328020251;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1356735495;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1357119239;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1366717989;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1368482696;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1385412762;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1385423968;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1427130064;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1434443272;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1444145445;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1446457253;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1446470398;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1466683957;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1495868221;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1496242568;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1498780456;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1502974979;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1525517218;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1525532664;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1529361191;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1529721864;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1530174524;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1534319871;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1534414106;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1539917387;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1540223162;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1540224798;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> protected void prepareResponse(Exception ex, HttpServletResponse response);1547854179;Prepare the response for the exceptional case._<p>The default implementation prevents the response from being cached,_if the {@link #setPreventResponseCaching "preventResponseCaching"} property_has been set to "true"._@param ex the exception that got thrown during handler execution_@param response current HTTP response_@see #preventCaching;protected void prepareResponse(Exception ex, HttpServletResponse response) {_		if (this.preventResponseCaching) {_			preventCaching(response)__		}_	};prepare,the,response,for,the,exceptional,case,p,the,default,implementation,prevents,the,response,from,being,cached,if,the,link,set,prevent,response,caching,prevent,response,caching,property,has,been,set,to,true,param,ex,the,exception,that,got,thrown,during,handler,execution,param,response,current,http,response,see,prevent,caching;protected,void,prepare,response,exception,ex,http,servlet,response,response,if,this,prevent,response,caching,prevent,caching,response
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1356735495;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1368482696;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1385412762;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1385423968;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1427130064;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,logger,is,debug,enabled,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1434443272;Checks whether this resolver is supposed to apply (i.e. the handler matches_in case of "mappedHandlers" having been specified), then delegates to the_{@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView mav = doResolveException(request, response, handler, ex)__			if (mav != null) {_				_				logException(ex, request)__			}_			return mav__		}_		else {_			return null__		}_	};checks,whether,this,resolver,is,supposed,to,apply,i,e,the,handler,matches,in,case,of,mapped,handlers,having,been,specified,then,delegates,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,mav,do,resolve,exception,request,response,handler,ex,if,mav,null,log,exception,ex,request,return,mav,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1444145445;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView mav = doResolveException(request, response, handler, ex)__			if (mav != null) {_				_				logException(ex, request)__			}_			return mav__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,mav,do,resolve,exception,request,response,handler,ex,if,mav,null,log,exception,ex,request,return,mav,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1446457253;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1446470398;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			logException(ex, request)__			prepareResponse(ex, response)__			return doResolveException(request, response, handler, ex)__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,log,exception,ex,request,prepare,response,ex,response,return,do,resolve,exception,request,response,handler,ex,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1466683957;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,log,exception,ex,request,return,result,else,return,null
AbstractHandlerExceptionResolver -> @Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex);1495868221;Check whether this resolver is supposed to apply (i.e. if the supplied handler_matches any of the configured {@linkplain #setMappedHandlers handlers} or_{@linkplain #setMappedHandlerClasses handler classes}), and then delegate_to the {@link #doResolveException} template method.;@Override_	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,_			Object handler, Exception ex) {__		if (shouldApplyTo(request, handler)) {_			if (this.logger.isDebugEnabled()) {_				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex)__			}_			prepareResponse(ex, response)__			ModelAndView result = doResolveException(request, response, handler, ex)__			if (result != null) {_				logException(ex, request)__			}_			return result__		}_		else {_			return null__		}_	};check,whether,this,resolver,is,supposed,to,apply,i,e,if,the,supplied,handler,matches,any,of,the,configured,linkplain,set,mapped,handlers,handlers,or,linkplain,set,mapped,handler,classes,handler,classes,and,then,delegate,to,the,link,do,resolve,exception,template,method;override,public,model,and,view,resolve,exception,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,if,should,apply,to,request,handler,if,this,logger,is,debug,enabled,this,logger,debug,resolving,exception,from,handler,handler,ex,prepare,response,ex,response,model,and,view,result,do,resolve,exception,request,response,handler,ex,if,result,null,log,exception,ex,request,return,result,else,return,null
