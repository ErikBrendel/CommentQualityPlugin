commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link java.util.Collection}, {@link java.util.Map} or array  * of objects used to generate the inner '{@code option}' tags.  * <p>Required when wishing to render '{@code option}' tags from an  * array, {@link java.util.Collection} or {@link java.util.Map}.  * <p>Typically a runtime expression.  */ ;/**  * Set the {@link java.util.Collection}, {@link java.util.Map} or array  * of objects used to generate the inner '{@code option}' tags.  * <p>Required when wishing to render '{@code option}' tags from an  * array, {@link java.util.Collection} or {@link java.util.Map}.  * <p>Typically a runtime expression.  */ public void setItems(Object items) {     this.items = items. }
true;protected;0;4;/**  * Get the {@link java.util.Collection}, {@link java.util.Map} or array  * of objects used to generate the inner '{@code option}' tags.  * <p>Typically a runtime expression.  */ ;/**  * Get the {@link java.util.Collection}, {@link java.util.Map} or array  * of objects used to generate the inner '{@code option}' tags.  * <p>Typically a runtime expression.  */ @Nullable protected Object getItems() {     return this.items. }
true;public;1;4;/**  * Set the name of the property mapped to the '{@code value}'  * attribute of the '{@code option}' tag.  * <p>Required when wishing to render '{@code option}' tags from  * an array or {@link java.util.Collection}.  */ ;/**  * Set the name of the property mapped to the '{@code value}'  * attribute of the '{@code option}' tag.  * <p>Required when wishing to render '{@code option}' tags from  * an array or {@link java.util.Collection}.  */ public void setItemValue(String itemValue) {     Assert.hasText(itemValue, "'itemValue' must not be empty").     this.itemValue = itemValue. }
true;protected;0;4;/**  * Return the name of the property mapped to the '{@code value}'  * attribute of the '{@code option}' tag.  */ ;/**  * Return the name of the property mapped to the '{@code value}'  * attribute of the '{@code option}' tag.  */ @Nullable protected String getItemValue() {     return this.itemValue. }
true;public;1;4;/**  * Set the name of the property mapped to the label (inner text) of the  * '{@code option}' tag.  */ ;/**  * Set the name of the property mapped to the label (inner text) of the  * '{@code option}' tag.  */ public void setItemLabel(String itemLabel) {     Assert.hasText(itemLabel, "'itemLabel' must not be empty").     this.itemLabel = itemLabel. }
true;protected;0;4;/**  * Get the name of the property mapped to the label (inner text) of the  * '{@code option}' tag.  */ ;/**  * Get the name of the property mapped to the label (inner text) of the  * '{@code option}' tag.  */ @Nullable protected String getItemLabel() {     return this.itemLabel. }
true;public;1;3;/**  * Set the value of the '{@code disabled}' attribute.  */ ;/**  * Set the value of the '{@code disabled}' attribute.  */ public void setDisabled(boolean disabled) {     this.disabled = disabled. }
true;protected;0;3;/**  * Get the value of the '{@code disabled}' attribute.  */ ;/**  * Get the value of the '{@code disabled}' attribute.  */ protected boolean isDisabled() {     return this.disabled. }
false;protected;1;27;;@Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     SelectTag selectTag = getSelectTag().     Object items = getItems().     Object itemsObject = null.     if (items != null) {         itemsObject = (items instanceof String ? evaluate("items", items) : items).     } else {         Class<?> selectTagBoundType = selectTag.getBindStatus().getValueType().         if (selectTagBoundType != null && selectTagBoundType.isEnum()) {             itemsObject = selectTagBoundType.getEnumConstants().         }     }     if (itemsObject != null) {         String selectName = selectTag.getName().         String itemValue = getItemValue().         String itemLabel = getItemLabel().         String valueProperty = (itemValue != null ? ObjectUtils.getDisplayString(evaluate("itemValue", itemValue)) : null).         String labelProperty = (itemLabel != null ? ObjectUtils.getDisplayString(evaluate("itemLabel", itemLabel)) : null).         OptionsWriter optionWriter = new OptionsWriter(selectName, itemsObject, valueProperty, labelProperty).         optionWriter.writeOptions(tagWriter).     }     return SKIP_BODY. }
true;protected;0;9;/**  * Appends a counter to a specified id,  * since we're dealing with multiple HTML elements.  */ ;/**  * Appends a counter to a specified id,  * since we're dealing with multiple HTML elements.  */ @Override protected String resolveId() throws JspException {     Object id = evaluate("id", getId()).     if (id != null) {         String idString = id.toString().         return (StringUtils.hasText(idString) ? TagIdGenerator.nextId(idString, this.pageContext) : null).     }     return null. }
false;private;0;4;;private SelectTag getSelectTag() {     TagUtils.assertHasAncestorOfType(this, SelectTag.class, "options", "select").     return (SelectTag) findAncestorWithClass(this, SelectTag.class). }
false;protected;0;4;;@Override protected BindStatus getBindStatus() {     return (BindStatus) this.pageContext.getAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE). }
false;protected;0;4;;@Override protected boolean isOptionDisabled() throws JspException {     return isDisabled(). }
false;protected;1;5;;@Override protected void writeCommonAttributes(TagWriter tagWriter) throws JspException {     writeOptionalAttribute(tagWriter, "id", resolveId()).     writeOptionalAttributes(tagWriter). }
false;protected;1;4;;@Override protected String processOptionValue(String value) {     return processFieldValue(this.selectName, value, "option"). }
