commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;12;;@Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     onWriteTagContent().     this.tagWriter = tagWriter.     if (shouldRender()) {         exposeAttributes().         return EVAL_BODY_BUFFERED.     } else {         return SKIP_BODY.     } }
true;public;0;13;/**  * If {@link #shouldRender rendering}, flush any buffered  * {@link BodyContent} or, if no {@link BodyContent} is supplied,  * {@link #renderDefaultContent render the default content}.  * @return a {@link javax.servlet.jsp.tagext.Tag#EVAL_PAGE} result  */ ;/**  * If {@link #shouldRender rendering}, flush any buffered  * {@link BodyContent} or, if no {@link BodyContent} is supplied,  * {@link #renderDefaultContent render the default content}.  * @return a {@link javax.servlet.jsp.tagext.Tag#EVAL_PAGE} result  */ @Override public int doEndTag() throws JspException {     if (shouldRender()) {         Assert.state(this.tagWriter != null, "No TagWriter set").         if (this.bodyContent != null && StringUtils.hasText(this.bodyContent.getString())) {             renderFromBodyContent(this.bodyContent, this.tagWriter).         } else {             renderDefaultContent(this.tagWriter).         }     }     return EVAL_PAGE. }
true;protected;2;3;/**  * Render the tag contents based on the supplied {@link BodyContent}.  * <p>The default implementation simply {@link #flushBufferedBodyContent flushes}  * the {@link BodyContent} directly to the output. Subclasses may choose to  * override this to add additional content to the output.  */ ;/**  * Render the tag contents based on the supplied {@link BodyContent}.  * <p>The default implementation simply {@link #flushBufferedBodyContent flushes}  * the {@link BodyContent} directly to the output. Subclasses may choose to  * override this to add additional content to the output.  */ protected void renderFromBodyContent(BodyContent bodyContent, TagWriter tagWriter) throws JspException {     flushBufferedBodyContent(bodyContent). }
true;public;0;7;/**  * Clean up any attributes and stored resources.  */ ;/**  * Clean up any attributes and stored resources.  */ @Override public void doFinally() {     super.doFinally().     removeAttributes().     this.tagWriter = null.     this.bodyContent = null. }
true;protected;0;2;/**  * Called at the start of {@link #writeTagContent} allowing subclasses to perform  * any precondition checks or setup tasks that might be necessary.  */ ;// --------------------------------------------------------------------- // Template methods // --------------------------------------------------------------------- /**  * Called at the start of {@link #writeTagContent} allowing subclasses to perform  * any precondition checks or setup tasks that might be necessary.  */ protected void onWriteTagContent() { }
true;protected;0;3;/**  * Should rendering of this tag proceed at all. Returns '{@code true}' by default  * causing rendering to occur always, Subclasses can override this if they  * provide conditional rendering.  */ ;/**  * Should rendering of this tag proceed at all. Returns '{@code true}' by default  * causing rendering to occur always, Subclasses can override this if they  * provide conditional rendering.  */ protected boolean shouldRender() throws JspException {     return true. }
true;protected;0;2;/**  * Called during {@link #writeTagContent} allowing subclasses to add any attributes to the  * {@link javax.servlet.jsp.PageContext} as needed.  */ ;/**  * Called during {@link #writeTagContent} allowing subclasses to add any attributes to the  * {@link javax.servlet.jsp.PageContext} as needed.  */ protected void exposeAttributes() throws JspException { }
true;protected;0;2;/**  * Called by {@link #doFinally} allowing subclasses to remove any attributes from the  * {@link javax.servlet.jsp.PageContext} as needed.  */ ;/**  * Called by {@link #doFinally} allowing subclasses to remove any attributes from the  * {@link javax.servlet.jsp.PageContext} as needed.  */ protected void removeAttributes() { }
true;protected;1;8;/**  * The user customised the output of the error messages - flush the  * buffered content into the main {@link javax.servlet.jsp.JspWriter}.  */ ;/**  * The user customised the output of the error messages - flush the  * buffered content into the main {@link javax.servlet.jsp.JspWriter}.  */ protected void flushBufferedBodyContent(BodyContent bodyContent) throws JspException {     try {         bodyContent.writeOut(bodyContent.getEnclosingWriter()).     } catch (IOException ex) {         throw new JspException("Unable to write buffered body content.", ex).     } }
false;protected,abstract;1;1;;protected abstract void renderDefaultContent(TagWriter tagWriter) throws JspException.
false;public;0;4;;// --------------------------------------------------------------------- // BodyTag implementation // --------------------------------------------------------------------- @Override public void doInitBody() throws JspException { // no op }
false;public;1;4;;@Override public void setBodyContent(BodyContent bodyContent) {     this.bodyContent = bodyContent. }
