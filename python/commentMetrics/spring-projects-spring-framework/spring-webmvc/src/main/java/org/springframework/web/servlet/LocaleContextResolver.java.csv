commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Resolve the current locale context via the given request.  * <p>This is primarily intended for framework-level processing. consider using  * {@link org.springframework.web.servlet.support.RequestContextUtils} or  * {@link org.springframework.web.servlet.support.RequestContext} for  * application-level access to the current locale and/or time zone.  * <p>The returned context may be a  * {@link org.springframework.context.i18n.TimeZoneAwareLocaleContext},  * containing a locale with associated time zone information.  * Simply apply an {@code instanceof} check and downcast accordingly.  * <p>Custom resolver implementations may also return extra settings in  * the returned context, which again can be accessed through downcasting.  * @param request the request to resolve the locale context for  * @return the current locale context (never {@code null}  * @see #resolveLocale(HttpServletRequest)  * @see org.springframework.web.servlet.support.RequestContextUtils#getLocale  * @see org.springframework.web.servlet.support.RequestContextUtils#getTimeZone  */ ;/**  * Resolve the current locale context via the given request.  * <p>This is primarily intended for framework-level processing. consider using  * {@link org.springframework.web.servlet.support.RequestContextUtils} or  * {@link org.springframework.web.servlet.support.RequestContext} for  * application-level access to the current locale and/or time zone.  * <p>The returned context may be a  * {@link org.springframework.context.i18n.TimeZoneAwareLocaleContext},  * containing a locale with associated time zone information.  * Simply apply an {@code instanceof} check and downcast accordingly.  * <p>Custom resolver implementations may also return extra settings in  * the returned context, which again can be accessed through downcasting.  * @param request the request to resolve the locale context for  * @return the current locale context (never {@code null}  * @see #resolveLocale(HttpServletRequest)  * @see org.springframework.web.servlet.support.RequestContextUtils#getLocale  * @see org.springframework.web.servlet.support.RequestContextUtils#getTimeZone  */ LocaleContext resolveLocaleContext(HttpServletRequest request).
true;;3;2;/**  * Set the current locale context to the given one,  * potentially including a locale with associated time zone information.  * @param request the request to be used for locale modification  * @param response the response to be used for locale modification  * @param localeContext the new locale context, or {@code null} to clear the locale  * @throws UnsupportedOperationException if the LocaleResolver implementation  * does not support dynamic changing of the locale or time zone  * @see #setLocale(HttpServletRequest, HttpServletResponse, Locale)  * @see org.springframework.context.i18n.SimpleLocaleContext  * @see org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext  */ ;/**  * Set the current locale context to the given one,  * potentially including a locale with associated time zone information.  * @param request the request to be used for locale modification  * @param response the response to be used for locale modification  * @param localeContext the new locale context, or {@code null} to clear the locale  * @throws UnsupportedOperationException if the LocaleResolver implementation  * does not support dynamic changing of the locale or time zone  * @see #setLocale(HttpServletRequest, HttpServletResponse, Locale)  * @see org.springframework.context.i18n.SimpleLocaleContext  * @see org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext  */ void setLocaleContext(HttpServletRequest request, @Nullable HttpServletResponse response, @Nullable LocaleContext localeContext).
