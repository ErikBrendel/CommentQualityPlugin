commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@code ObjectMapper} for this view.  * If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} will be used.  * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of  * the JSON serialization process. The other option is to use Jackson's provided annotations  * on the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary.  */ ;/**  * Set the {@code ObjectMapper} for this view.  * If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} will be used.  * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of  * the JSON serialization process. The other option is to use Jackson's provided annotations  * on the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary.  */ public void setObjectMapper(ObjectMapper objectMapper) {     this.objectMapper = objectMapper.     configurePrettyPrint(). }
true;public,final;0;3;/**  * Return the {@code ObjectMapper} for this view.  */ ;/**  * Return the {@code ObjectMapper} for this view.  */ public final ObjectMapper getObjectMapper() {     return this.objectMapper. }
true;public;1;4;/**  * Set the {@code JsonEncoding} for this view.  * By default, {@linkplain JsonEncoding#UTF8 UTF-8} is used.  */ ;/**  * Set the {@code JsonEncoding} for this view.  * By default, {@linkplain JsonEncoding#UTF8 UTF-8} is used.  */ public void setEncoding(JsonEncoding encoding) {     Assert.notNull(encoding, "'encoding' must not be null").     this.encoding = encoding. }
true;public,final;0;3;/**  * Return the {@code JsonEncoding} for this view.  */ ;/**  * Return the {@code JsonEncoding} for this view.  */ public final JsonEncoding getEncoding() {     return this.encoding. }
true;public;1;4;/**  * Whether to use the default pretty printer when writing the output.  * This is a shortcut for setting up an {@code ObjectMapper} as follows:  * <pre class="code">  * ObjectMapper mapper = new ObjectMapper().  * mapper.configure(SerializationFeature.INDENT_OUTPUT, true).  * </pre>  * <p>The default value is {@code false}.  */ ;/**  * Whether to use the default pretty printer when writing the output.  * This is a shortcut for setting up an {@code ObjectMapper} as follows:  * <pre class="code">  * ObjectMapper mapper = new ObjectMapper().  * mapper.configure(SerializationFeature.INDENT_OUTPUT, true).  * </pre>  * <p>The default value is {@code false}.  */ public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint.     configurePrettyPrint(). }
false;private;0;5;;private void configurePrettyPrint() {     if (this.prettyPrint != null) {         this.objectMapper.configure(SerializationFeature.INDENT_OUTPUT, this.prettyPrint).     } }
true;public;1;3;/**  * Disables caching of the generated JSON.  * <p>Default is {@code true}, which will prevent the client from caching the generated JSON.  */ ;/**  * Disables caching of the generated JSON.  * <p>Default is {@code true}, which will prevent the client from caching the generated JSON.  */ public void setDisableCaching(boolean disableCaching) {     this.disableCaching = disableCaching. }
true;public;1;3;/**  * Whether to update the 'Content-Length' header of the response. When set to  * {@code true}, the response is buffered in order to determine the content  * length and set the 'Content-Length' header of the response.  * <p>The default setting is {@code false}.  */ ;/**  * Whether to update the 'Content-Length' header of the response. When set to  * {@code true}, the response is buffered in order to determine the content  * length and set the 'Content-Length' header of the response.  * <p>The default setting is {@code false}.  */ public void setUpdateContentLength(boolean updateContentLength) {     this.updateContentLength = updateContentLength. }
false;protected;2;8;;@Override protected void prepareResponse(HttpServletRequest request, HttpServletResponse response) {     setResponseContentType(request, response).     response.setCharacterEncoding(this.encoding.getJavaName()).     if (this.disableCaching) {         response.addHeader("Cache-Control", "no-store").     } }
false;protected;3;22;;@Override protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     ByteArrayOutputStream temporaryStream = null.     OutputStream stream.     if (this.updateContentLength) {         temporaryStream = createTemporaryOutputStream().         stream = temporaryStream.     } else {         stream = response.getOutputStream().     }     Object value = filterAndWrapModel(model, request).     writeContent(stream, value).     if (temporaryStream != null) {         writeToResponse(response, temporaryStream).     } }
true;protected;2;16;/**  * Filter and optionally wrap the model in {@link MappingJacksonValue} container.  * @param model the model, as passed on to {@link #renderMergedOutputModel}  * @param request current HTTP request  * @return the wrapped or unwrapped value to be rendered  */ ;/**  * Filter and optionally wrap the model in {@link MappingJacksonValue} container.  * @param model the model, as passed on to {@link #renderMergedOutputModel}  * @param request current HTTP request  * @return the wrapped or unwrapped value to be rendered  */ protected Object filterAndWrapModel(Map<String, Object> model, HttpServletRequest request) {     Object value = filterModel(model).     Class<?> serializationView = (Class<?>) model.get(JsonView.class.getName()).     FilterProvider filters = (FilterProvider) model.get(FilterProvider.class.getName()).     if (serializationView != null || filters != null) {         MappingJacksonValue container = new MappingJacksonValue(value).         if (serializationView != null) {             container.setSerializationView(serializationView).         }         if (filters != null) {             container.setFilters(filters).         }         value = container.     }     return value. }
true;protected;2;25;/**  * Write the actual JSON content to the stream.  * @param stream the output stream to use  * @param object the value to be rendered, as returned from {@link #filterModel}  * @throws IOException if writing failed  */ ;/**  * Write the actual JSON content to the stream.  * @param stream the output stream to use  * @param object the value to be rendered, as returned from {@link #filterModel}  * @throws IOException if writing failed  */ protected void writeContent(OutputStream stream, Object object) throws IOException {     JsonGenerator generator = this.objectMapper.getFactory().createGenerator(stream, this.encoding).     writePrefix(generator, object).     Object value = object.     Class<?> serializationView = null.     FilterProvider filters = null.     if (value instanceof MappingJacksonValue) {         MappingJacksonValue container = (MappingJacksonValue) value.         value = container.getValue().         serializationView = container.getSerializationView().         filters = container.getFilters().     }     ObjectWriter objectWriter = (serializationView != null ? this.objectMapper.writerWithView(serializationView) : this.objectMapper.writer()).     if (filters != null) {         objectWriter = objectWriter.with(filters).     }     objectWriter.writeValue(generator, value).     writeSuffix(generator, object).     generator.flush(). }
true;public,abstract;1;1;/**  * Set the attribute in the model that should be rendered by this view.  * When set, all other model attributes will be ignored.  */ ;/**  * Set the attribute in the model that should be rendered by this view.  * When set, all other model attributes will be ignored.  */ public abstract void setModelKey(String modelKey).
true;protected,abstract;1;1;/**  * Filter out undesired attributes from the given model.  * The return value can be either another {@link Map} or a single value object.  * @param model the model, as passed on to {@link #renderMergedOutputModel}  * @return the value to be rendered  */ ;/**  * Filter out undesired attributes from the given model.  * The return value can be either another {@link Map} or a single value object.  * @param model the model, as passed on to {@link #renderMergedOutputModel}  * @return the value to be rendered  */ protected abstract Object filterModel(Map<String, Object> model).
true;protected;2;2;/**  * Write a prefix before the main content.  * @param generator the generator to use for writing content.  * @param object the object to write to the output message.  */ ;/**  * Write a prefix before the main content.  * @param generator the generator to use for writing content.  * @param object the object to write to the output message.  */ protected void writePrefix(JsonGenerator generator, Object object) throws IOException { }
true;protected;2;2;/**  * Write a suffix after the main content.  * @param generator the generator to use for writing content.  * @param object the object to write to the output message.  */ ;/**  * Write a suffix after the main content.  * @param generator the generator to use for writing content.  * @param object the object to write to the output message.  */ protected void writeSuffix(JsonGenerator generator, Object object) throws IOException { }
