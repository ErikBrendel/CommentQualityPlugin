commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean generatesDownloadContent() {     return true. }
false;protected,final;3;15;;@Override protected final void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     // IE workaround: write into byte array first.     ByteArrayOutputStream baos = createTemporaryOutputStream().     PdfReader reader = readPdfResource().     PdfStamper stamper = new PdfStamper(reader, baos).     mergePdfDocument(model, stamper, request, response).     stamper.close().     // Flush to HTTP response.     writeToResponse(response, baos). }
true;protected;0;5;/**  * Read the raw PDF resource into an iText PdfReader.  * <p>The default implementation resolve the specified "url" property  * as ApplicationContext resource.  * @return the PdfReader instance  * @throws IOException if resource access failed  * @see #setUrl  */ ;/**  * Read the raw PDF resource into an iText PdfReader.  * <p>The default implementation resolve the specified "url" property  * as ApplicationContext resource.  * @return the PdfReader instance  * @throws IOException if resource access failed  * @see #setUrl  */ protected PdfReader readPdfResource() throws IOException {     String url = getUrl().     Assert.state(url != null, "'url' not set").     return new PdfReader(obtainApplicationContext().getResource(url).getInputStream()). }
true;protected,abstract;4;2;/**  * Subclasses must implement this method to merge the PDF form  * with the given model data.  * <p>This is where you are able to set values on the AcroForm.  * An example of what can be done at this level is:  * <pre class="code">  * // get the form from the document  * AcroFields form = stamper.getAcroFields().  *  * // set some values on the form  * form.setField("field1", "value1").  * form.setField("field2", "Vvlue2").  *  * // set the disposition and filename  * response.setHeader("Content-disposition", "attachment. FILENAME=someName.pdf").</pre>  * <p>Note that the passed-in HTTP response is just supposed to be used  * for setting cookies or other HTTP headers. The built PDF document itself  * will automatically get written to the response after this method returns.  * @param model the model Map  * @param stamper the PdfStamper instance that will contain the AcroFields.  * You may also customize this PdfStamper instance according to your needs,  * e.g. setting the "formFlattening" property.  * @param request in case we need locale etc. Shouldn't look at attributes.  * @param response in case we need to set cookies. Shouldn't write to it.  * @throws Exception any exception that occurred during document building  */ ;/**  * Subclasses must implement this method to merge the PDF form  * with the given model data.  * <p>This is where you are able to set values on the AcroForm.  * An example of what can be done at this level is:  * <pre class="code">  * // get the form from the document  * AcroFields form = stamper.getAcroFields().  *  * // set some values on the form  * form.setField("field1", "value1").  * form.setField("field2", "Vvlue2").  *  * // set the disposition and filename  * response.setHeader("Content-disposition", "attachment. FILENAME=someName.pdf").</pre>  * <p>Note that the passed-in HTTP response is just supposed to be used  * for setting cookies or other HTTP headers. The built PDF document itself  * will automatically get written to the response after this method returns.  * @param model the model Map  * @param stamper the PdfStamper instance that will contain the AcroFields.  * You may also customize this PdfStamper instance according to your needs,  * e.g. setting the "formFlattening" property.  * @param request in case we need locale etc. Shouldn't look at attributes.  * @param response in case we need to set cookies. Shouldn't write to it.  * @throws Exception any exception that occurred during document building  */ protected abstract void mergePdfDocument(Map<String, Object> model, PdfStamper stamper, HttpServletRequest request, HttpServletResponse response) throws Exception.
