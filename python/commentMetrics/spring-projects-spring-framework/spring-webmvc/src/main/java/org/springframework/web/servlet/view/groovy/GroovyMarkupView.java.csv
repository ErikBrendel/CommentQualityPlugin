commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the MarkupTemplateEngine to use in this view.  * <p>If not set, the engine is auto-detected by looking up a single  * {@link GroovyMarkupConfig} bean in the web application context and using  * it to obtain the configured {@code MarkupTemplateEngine} instance.  * @see GroovyMarkupConfig  */ ;/**  * Set the MarkupTemplateEngine to use in this view.  * <p>If not set, the engine is auto-detected by looking up a single  * {@link GroovyMarkupConfig} bean in the web application context and using  * it to obtain the configured {@code MarkupTemplateEngine} instance.  * @see GroovyMarkupConfig  */ public void setTemplateEngine(MarkupTemplateEngine engine) {     this.engine = engine. }
true;protected;1;7;/**  * Invoked at startup.  * If no {@link #setTemplateEngine(MarkupTemplateEngine) templateEngine} has  * been manually set, this method looks up a {@link GroovyMarkupConfig} bean  * by type and uses it to obtain the Groovy Markup template engine.  * @see GroovyMarkupConfig  * @see #setTemplateEngine(groovy.text.markup.MarkupTemplateEngine)  */ ;/**  * Invoked at startup.  * If no {@link #setTemplateEngine(MarkupTemplateEngine) templateEngine} has  * been manually set, this method looks up a {@link GroovyMarkupConfig} bean  * by type and uses it to obtain the Groovy Markup template engine.  * @see GroovyMarkupConfig  * @see #setTemplateEngine(groovy.text.markup.MarkupTemplateEngine)  */ @Override protected void initApplicationContext(ApplicationContext context) {     super.initApplicationContext().     if (this.engine == null) {         setTemplateEngine(autodetectMarkupTemplateEngine()).     } }
true;protected;0;11;/**  * Autodetect a MarkupTemplateEngine via the ApplicationContext.  * Called if a MarkupTemplateEngine has not been manually configured.  */ ;/**  * Autodetect a MarkupTemplateEngine via the ApplicationContext.  * Called if a MarkupTemplateEngine has not been manually configured.  */ protected MarkupTemplateEngine autodetectMarkupTemplateEngine() throws BeansException {     try {         return BeanFactoryUtils.beanOfTypeIncludingAncestors(obtainApplicationContext(), GroovyMarkupConfig.class, true, false).getTemplateEngine().     } catch (NoSuchBeanDefinitionException ex) {         throw new ApplicationContextException("Expected a single GroovyMarkupConfig bean in the current " + "Servlet web application context or the parent root context: GroovyMarkupConfigurer is " + "the usual implementation. This bean may have any name.", ex).     } }
false;public;1;11;;@Override public boolean checkResource(Locale locale) throws Exception {     Assert.state(this.engine != null, "No MarkupTemplateEngine set").     try {         this.engine.resolveTemplate(getUrl()).     } catch (IOException ex) {         return false.     }     return true. }
false;protected;3;10;;@Override protected void renderMergedTemplateModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     String url = getUrl().     Assert.state(url != null, "'url' not set").     Template template = getTemplate(url).     template.make(model).writeTo(new BufferedWriter(response.getWriter())). }
true;protected;1;12;/**  * Return a template compiled by the configured Groovy Markup template engine  * for the given view URL.  */ ;/**  * Return a template compiled by the configured Groovy Markup template engine  * for the given view URL.  */ protected Template getTemplate(String viewUrl) throws Exception {     Assert.state(this.engine != null, "No MarkupTemplateEngine set").     try {         return this.engine.createTemplateByPath(viewUrl).     } catch (ClassNotFoundException ex) {         Throwable cause = (ex.getCause() != null ? ex.getCause() : ex).         throw new NestedServletException("Could not find class while rendering Groovy Markup view with name '" + getUrl() + "': " + ex.getMessage() + "'", cause).     } }
