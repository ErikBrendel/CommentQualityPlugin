commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(getWriter()). }
false;protected;0;11;;@Override @SuppressWarnings("serial") protected void onSetUp() {     this.tag = new HiddenInputTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(getWriter()).         }     }.     this.tag.setPageContext(getPageContext()). }
false;public;0;15;;@Test public void render() throws Exception {     this.tag.setPath("name").     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", "hidden").     assertContainsAttribute(output, "value", "Sally Greenwood").     assertAttributeNotPresent(output, "disabled"). }
false;public;0;18;;@Test public void withCustomBinder() throws Exception {     this.tag.setPath("myFloat").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.bean, COMMAND_NAME).     errors.getPropertyAccessor().registerCustomEditor(Float.class, new SimpleFloatEditor()).     exposeBindingResult(errors).     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", "hidden").     assertContainsAttribute(output, "value", "12.34f"). }
false;public;0;10;;@Test public void dynamicTypeAttribute() throws JspException {     try {         this.tag.setDynamicAttribute(null, "type", "email").         fail("Expected exception").     } catch (IllegalArgumentException e) {         assertEquals("Attribute type=\"email\" is not allowed", e.getMessage()).     } }
false;public;0;13;;@Test public void disabledTrue() throws Exception {     this.tag.setDisabled(true).     this.tag.doStartTag().     this.tag.doEndTag().     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "disabled", "disabled"). }
false;public;0;13;;// SPR-8661 @Test public void disabledFalse() throws Exception {     this.tag.setDisabled(false).     this.tag.doStartTag().     this.tag.doEndTag().     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertAttributeNotPresent(output, "disabled"). }
false;private;1;3;;private void assertTagClosed(String output) {     assertTrue(output.endsWith("/>")). }
false;private;1;3;;private void assertTagOpened(String output) {     assertTrue(output.startsWith("<input ")). }
false;protected;0;7;;@Override protected TestBean createTestBean() {     this.bean = new TestBean().     bean.setName("Sally Greenwood").     bean.setMyFloat(new Float("12.34")).     return bean. }
