commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     servletContext = new MyMockServletContext().     initializer = new MyAnnotationConfigDispatcherServletInitializer().     servlets = new LinkedHashMap<>(1).     servletRegistrations = new LinkedHashMap<>(1).     filters = new LinkedHashMap<>(1).     filterRegistrations = new LinkedHashMap<>(). }
false;public;0;38;;@Test public void register() throws ServletException {     initializer.onStartup(servletContext).     assertEquals(1, servlets.size()).     assertNotNull(servlets.get(SERVLET_NAME)).     DispatcherServlet servlet = (DispatcherServlet) servlets.get(SERVLET_NAME).     WebApplicationContext wac = servlet.getWebApplicationContext().     ((AnnotationConfigWebApplicationContext) wac).refresh().     assertTrue(wac.containsBean("bean")).     assertTrue(wac.getBean("bean") instanceof MyBean).     assertEquals(1, servletRegistrations.size()).     assertNotNull(servletRegistrations.get(SERVLET_NAME)).     MockServletRegistration servletRegistration = servletRegistrations.get(SERVLET_NAME).     assertEquals(Collections.singleton(SERVLET_MAPPING), servletRegistration.getMappings()).     assertEquals(1, servletRegistration.getLoadOnStartup()).     assertEquals(ROLE_NAME, servletRegistration.getRunAsRole()).     assertTrue(servletRegistration.isAsyncSupported()).     assertEquals(4, filterRegistrations.size()).     assertNotNull(filterRegistrations.get("hiddenHttpMethodFilter")).     assertNotNull(filterRegistrations.get("delegatingFilterProxy")).     assertNotNull(filterRegistrations.get("delegatingFilterProxy#0")).     assertNotNull(filterRegistrations.get("delegatingFilterProxy#1")).     for (MockFilterRegistration filterRegistration : filterRegistrations.values()) {         assertTrue(filterRegistration.isAsyncSupported()).         EnumSet<DispatcherType> enumSet = EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ASYNC).         assertEquals(enumSet, filterRegistration.getMappings().get(SERVLET_NAME)).     } }
false;protected;0;4;;@Override protected boolean isAsyncSupported() {     return false. }
false;public;0;20;;@Test public void asyncSupportedFalse() throws ServletException {     initializer = new MyAnnotationConfigDispatcherServletInitializer() {          @Override         protected boolean isAsyncSupported() {             return false.         }     }.     initializer.onStartup(servletContext).     MockServletRegistration servletRegistration = servletRegistrations.get(SERVLET_NAME).     assertFalse(servletRegistration.isAsyncSupported()).     for (MockFilterRegistration filterRegistration : filterRegistrations.values()) {         assertFalse(filterRegistration.isAsyncSupported()).         assertEquals(EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), filterRegistration.getMappings().get(SERVLET_NAME)).     } }
false;protected;0;4;;@Override protected Class<?>[] getRootConfigClasses() {     return new Class<?>[] { MyConfiguration.class }. }
false;protected;0;4;;@Override protected Class<?>[] getServletConfigClasses() {     return null. }
true;public;0;24;// SPR-11357 ;// SPR-11357 @Test public void rootContextOnly() throws ServletException {     initializer = new MyAnnotationConfigDispatcherServletInitializer() {          @Override         protected Class<?>[] getRootConfigClasses() {             return new Class<?>[] { MyConfiguration.class }.         }          @Override         protected Class<?>[] getServletConfigClasses() {             return null.         }     }.     initializer.onStartup(servletContext).     DispatcherServlet servlet = (DispatcherServlet) servlets.get(SERVLET_NAME).     servlet.init(new MockServletConfig(this.servletContext)).     WebApplicationContext wac = servlet.getWebApplicationContext().     ((AnnotationConfigWebApplicationContext) wac).refresh().     assertTrue(wac.containsBean("bean")).     assertTrue(wac.getBean("bean") instanceof MyBean). }
false;protected;0;4;;@Override protected Filter[] getServletFilters() {     return null. }
false;public;0;13;;@Test public void noFilters() throws ServletException {     initializer = new MyAnnotationConfigDispatcherServletInitializer() {          @Override         protected Filter[] getServletFilters() {             return null.         }     }.     initializer.onStartup(servletContext).     assertEquals(0, filterRegistrations.size()). }
false;public;1;6;;@Override public <T extends EventListener> void addListener(T t) {     if (t instanceof ServletContextListener) {         ((ServletContextListener) t).contextInitialized(new ServletContextEvent(this)).     } }
false;public;2;10;;@Override public ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet) {     if (servlets.containsKey(servletName)) {         return null.     }     servlets.put(servletName, servlet).     MockServletRegistration registration = new MockServletRegistration().     servletRegistrations.put(servletName, registration).     return registration. }
false;public;2;10;;@Override public Dynamic addFilter(String filterName, Filter filter) {     if (filters.containsKey(filterName)) {         return null.     }     filters.put(filterName, filter).     MockFilterRegistration registration = new MockFilterRegistration().     filterRegistrations.put(filterName, registration).     return registration. }
false;protected;0;4;;@Override protected String getServletName() {     return SERVLET_NAME. }
false;protected;0;4;;@Override protected Class<?>[] getServletConfigClasses() {     return new Class<?>[] { MyConfiguration.class }. }
false;protected;0;4;;@Override protected String[] getServletMappings() {     return new String[] { "/myservlet" }. }
false;protected;0;9;;@Override protected Filter[] getServletFilters() {     return new Filter[] { new HiddenHttpMethodFilter(), new DelegatingFilterProxy("a"), new DelegatingFilterProxy("b"), new DelegatingFilterProxy("c") }. }
false;protected;1;4;;@Override protected void customizeRegistration(ServletRegistration.Dynamic registration) {     registration.setRunAsRole("role"). }
false;protected;0;4;;@Override protected Class<?>[] getRootConfigClasses() {     return null. }
false;public;0;4;;@Bean public MyBean bean() {     return new MyBean(). }
