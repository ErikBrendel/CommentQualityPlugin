commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     mavResolvers = new ArrayList<>().     handler = new ModelAndViewResolverMethodReturnValueHandler(mavResolvers).     mavContainer = new ModelAndViewContainer().     request = new ServletWebRequest(new MockHttpServletRequest()). }
false;public;0;12;;@Test public void modelAndViewResolver() throws Exception {     MethodParameter returnType = new MethodParameter(getClass().getDeclaredMethod("testBeanReturnValue"), -1).     mavResolvers.add(new TestModelAndViewResolver(TestBean.class)).     TestBean testBean = new TestBean("name").     handler.handleReturnValue(testBean, returnType, mavContainer, request).     assertEquals("viewName", mavContainer.getViewName()).     assertSame(testBean, mavContainer.getModel().get("modelAttrName")).     assertFalse(mavContainer.isRequestHandled()). }
false;public;0;6;;@Test(expected = UnsupportedOperationException.class) public void modelAndViewResolverUnresolved() throws Exception {     MethodParameter returnType = new MethodParameter(getClass().getDeclaredMethod("intReturnValue"), -1).     mavResolvers.add(new TestModelAndViewResolver(TestBean.class)).     handler.handleReturnValue(99, returnType, mavContainer, request). }
false;public;0;9;;@Test public void handleNull() throws Exception {     MethodParameter returnType = new MethodParameter(getClass().getDeclaredMethod("testBeanReturnValue"), -1).     handler.handleReturnValue(null, returnType, mavContainer, request).     assertNull(mavContainer.getView()).     assertNull(mavContainer.getViewName()).     assertTrue(mavContainer.getModel().isEmpty()). }
false;public;0;5;;@Test(expected = UnsupportedOperationException.class) public void handleSimpleType() throws Exception {     MethodParameter returnType = new MethodParameter(getClass().getDeclaredMethod("intReturnValue"), -1).     handler.handleReturnValue(55, returnType, mavContainer, request). }
false;public;0;7;;@Test public void handleNonSimpleType() throws Exception {     MethodParameter returnType = new MethodParameter(getClass().getDeclaredMethod("testBeanReturnValue"), -1).     handler.handleReturnValue(new TestBean(), returnType, mavContainer, request).     assertTrue(mavContainer.containsAttribute("testBean")). }
false;private;0;4;;@SuppressWarnings("unused") private int intReturnValue() {     return 0. }
false;private;0;4;;@SuppressWarnings("unused") private TestBean testBeanReturnValue() {     return null. }
false;public;5;11;;@Override public ModelAndView resolveModelAndView(Method method, Class<?> handlerType, Object returnValue, ExtendedModelMap model, NativeWebRequest request) {     if (returnValue != null && returnValue.getClass().equals(returnValueType)) {         return new ModelAndView("viewName", "modelAttrName", returnValue).     } else {         return ModelAndViewResolver.UNRESOLVED.     } }
