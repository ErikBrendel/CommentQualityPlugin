commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void resolve() {     assertEquals(CANADA, this.resolver.resolveLocale(request(CANADA))).     assertEquals(US, this.resolver.resolveLocale(request(US, CANADA))). }
false;public;0;5;;@Test public void resolvePreferredSupported() {     this.resolver.setSupportedLocales(Collections.singletonList(CANADA)).     assertEquals(CANADA, this.resolver.resolveLocale(request(US, CANADA))). }
false;public;0;5;;@Test public void resolvePreferredNotSupported() {     this.resolver.setSupportedLocales(Collections.singletonList(CANADA)).     assertEquals(US, this.resolver.resolveLocale(request(US, UK))). }
false;public;0;5;;@Test public void resolvePreferredAgainstLanguageOnly() {     this.resolver.setSupportedLocales(Collections.singletonList(ENGLISH)).     assertEquals(ENGLISH, this.resolver.resolveLocale(request(GERMANY, US, UK))). }
false;public;0;5;;@Test public void resolvePreferredAgainstCountryIfPossible() {     this.resolver.setSupportedLocales(Arrays.asList(ENGLISH, UK)).     assertEquals(UK, this.resolver.resolveLocale(request(GERMANY, US, UK))). }
false;public;0;5;;@Test public void resolvePreferredAgainstLanguageWithMultipleSupportedLocales() {     this.resolver.setSupportedLocales(Arrays.asList(GERMAN, US)).     assertEquals(GERMAN, this.resolver.resolveLocale(request(GERMANY, US, UK))). }
false;public;0;10;;@Test public void resolvePreferredNotSupportedWithDefault() {     this.resolver.setSupportedLocales(Arrays.asList(US, JAPAN)).     this.resolver.setDefaultLocale(Locale.JAPAN).     MockHttpServletRequest request = new MockHttpServletRequest().     request.addHeader("Accept-Language", KOREA.toLanguageTag()).     request.setPreferredLocales(Collections.singletonList(KOREA)).     assertEquals(Locale.JAPAN, this.resolver.resolveLocale(request)). }
false;public;0;10;;@Test public void defaultLocale() {     this.resolver.setDefaultLocale(JAPANESE).     MockHttpServletRequest request = new MockHttpServletRequest().     assertEquals(JAPANESE, this.resolver.resolveLocale(request)).     request.addHeader("Accept-Language", US.toLanguageTag()).     request.setPreferredLocales(Collections.singletonList(US)).     assertEquals(US, this.resolver.resolveLocale(request)). }
false;private;1;5;;private HttpServletRequest request(Locale... locales) {     MockHttpServletRequest request = new MockHttpServletRequest().     request.setPreferredLocales(Arrays.asList(locales)).     return request. }
