commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() {     StaticWebApplicationContext context = new StaticWebApplicationContext().     context.registerSingleton("freeMarkerConfigurer", FreeMarkerConfigurer.class).     context.registerSingleton("tilesConfigurer", TilesConfigurer.class).     context.registerSingleton("groovyMarkupConfigurer", GroovyMarkupConfigurer.class).     context.registerSingleton("scriptTemplateConfigurer", ScriptTemplateConfigurer.class).     this.registry = new ViewResolverRegistry(new ContentNegotiationManager(), context). }
false;public;0;6;;@Test public void order() {     assertEquals(Ordered.LOWEST_PRECEDENCE, this.registry.getOrder()).     this.registry.enableContentNegotiation().     assertEquals(Ordered.HIGHEST_PRECEDENCE, this.registry.getOrder()). }
false;public;0;6;;@Test public void hasRegistrations() {     assertFalse(this.registry.hasRegistrations()).     this.registry.freeMarker().     assertTrue(this.registry.hasRegistrations()). }
false;public;0;6;;@Test public void hasRegistrationsWhenContentNegotiationEnabled() {     assertFalse(this.registry.hasRegistrations()).     this.registry.enableContentNegotiation().     assertTrue(this.registry.hasRegistrations()). }
false;public;0;6;;@Test public void noResolvers() {     assertNotNull(this.registry.getViewResolvers()).     assertEquals(0, this.registry.getViewResolvers().size()).     assertFalse(this.registry.hasRegistrations()). }
false;public;0;6;;@Test public void customViewResolver() {     InternalResourceViewResolver viewResolver = new InternalResourceViewResolver("/", ".jsp").     this.registry.viewResolver(viewResolver).     assertSame(viewResolver, this.registry.getViewResolvers().get(0)). }
false;public;0;6;;@Test public void beanName() {     this.registry.beanName().     assertEquals(1, this.registry.getViewResolvers().size()).     assertEquals(BeanNameViewResolver.class, registry.getViewResolvers().get(0).getClass()). }
false;public;0;6;;@Test public void jspDefaultValues() {     this.registry.jsp().     InternalResourceViewResolver resolver = checkAndGetResolver(InternalResourceViewResolver.class).     checkPropertyValues(resolver, "prefix", "/WEB-INF/", "suffix", ".jsp"). }
false;public;0;6;;@Test public void jsp() {     this.registry.jsp("/", ".jsp").     InternalResourceViewResolver resolver = checkAndGetResolver(InternalResourceViewResolver.class).     checkPropertyValues(resolver, "prefix", "/", "suffix", ".jsp"). }
false;public;0;9;;@Test public void jspMultipleResolvers() {     this.registry.jsp().viewNames("view1", "view2").     this.registry.jsp().viewNames("view3", "view4").     assertNotNull(this.registry.getViewResolvers()).     assertEquals(2, this.registry.getViewResolvers().size()).     assertEquals(InternalResourceViewResolver.class, this.registry.getViewResolvers().get(0).getClass()).     assertEquals(InternalResourceViewResolver.class, this.registry.getViewResolvers().get(1).getClass()). }
false;public;0;5;;@Test public void tiles() {     this.registry.tiles().     checkAndGetResolver(TilesViewResolver.class). }
false;public;0;6;;@Test public void freeMarker() {     this.registry.freeMarker().prefix("/").suffix(".fmt").cache(false).     FreeMarkerViewResolver resolver = checkAndGetResolver(FreeMarkerViewResolver.class).     checkPropertyValues(resolver, "prefix", "/", "suffix", ".fmt", "cacheLimit", 0). }
false;public;0;6;;@Test public void freeMarkerDefaultValues() {     this.registry.freeMarker().     FreeMarkerViewResolver resolver = checkAndGetResolver(FreeMarkerViewResolver.class).     checkPropertyValues(resolver, "prefix", "", "suffix", ".ftl"). }
false;public;0;6;;@Test public void groovyMarkup() {     this.registry.groovy().prefix("/").suffix(".groovy").cache(true).     GroovyMarkupViewResolver resolver = checkAndGetResolver(GroovyMarkupViewResolver.class).     checkPropertyValues(resolver, "prefix", "/", "suffix", ".groovy", "cacheLimit", 1024). }
false;public;0;6;;@Test public void groovyMarkupDefaultValues() {     this.registry.groovy().     GroovyMarkupViewResolver resolver = checkAndGetResolver(GroovyMarkupViewResolver.class).     checkPropertyValues(resolver, "prefix", "", "suffix", ".tpl"). }
false;public;0;6;;@Test public void scriptTemplate() {     this.registry.scriptTemplate().prefix("/").suffix(".html").cache(true).     ScriptTemplateViewResolver resolver = checkAndGetResolver(ScriptTemplateViewResolver.class).     checkPropertyValues(resolver, "prefix", "/", "suffix", ".html", "cacheLimit", 1024). }
false;public;0;6;;@Test public void scriptTemplateDefaultValues() {     this.registry.scriptTemplate().     ScriptTemplateViewResolver resolver = checkAndGetResolver(ScriptTemplateViewResolver.class).     checkPropertyValues(resolver, "prefix", "", "suffix", ""). }
false;public;0;8;;@Test public void contentNegotiation() {     MappingJackson2JsonView view = new MappingJackson2JsonView().     this.registry.enableContentNegotiation(view).     ContentNegotiatingViewResolver resolver = checkAndGetResolver(ContentNegotiatingViewResolver.class).     assertEquals(Arrays.asList(view), resolver.getDefaultViews()).     assertEquals(Ordered.HIGHEST_PRECEDENCE, this.registry.getOrder()). }
false;public;0;15;;@Test public void contentNegotiationAddsDefaultViewRegistrations() {     MappingJackson2JsonView view1 = new MappingJackson2JsonView().     this.registry.enableContentNegotiation(view1).     ContentNegotiatingViewResolver resolver1 = checkAndGetResolver(ContentNegotiatingViewResolver.class).     assertEquals(Arrays.asList(view1), resolver1.getDefaultViews()).     MarshallingView view2 = new MarshallingView().     this.registry.enableContentNegotiation(view2).     ContentNegotiatingViewResolver resolver2 = checkAndGetResolver(ContentNegotiatingViewResolver.class).     assertEquals(Arrays.asList(view1, view2), resolver2.getDefaultViews()).     assertSame(resolver1, resolver2). }
false;private;1;7;;@SuppressWarnings("unchecked") private <T extends ViewResolver> T checkAndGetResolver(Class<T> resolverType) {     assertNotNull(this.registry.getViewResolvers()).     assertEquals(1, this.registry.getViewResolvers().size()).     assertEquals(resolverType, this.registry.getViewResolvers().get(0).getClass()).     return (T) registry.getViewResolvers().get(0). }
false;private;2;8;;private void checkPropertyValues(ViewResolver resolver, Object... nameValuePairs) {     DirectFieldAccessor accessor = new DirectFieldAccessor(resolver).     for (int i = 0. i < nameValuePairs.length. i++, i++) {         Object expected = nameValuePairs[i + 1].         Object actual = accessor.getPropertyValue((String) nameValuePairs[i]).         assertEquals(expected, actual).     } }
