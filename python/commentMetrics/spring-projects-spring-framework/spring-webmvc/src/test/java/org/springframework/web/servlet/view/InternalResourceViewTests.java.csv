commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * If the url property isn't supplied, view initialization should fail.  */ ;/**  * If the url property isn't supplied, view initialization should fail.  */ @Test(expected = IllegalArgumentException.class) public void rejectsNullUrl() throws Exception {     view.afterPropertiesSet(). }
false;public;0;4;;@Override public int getMinorVersion() {     return 4. }
false;public;0;22;;@Test public void forward() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myservlet/handler.do").     request.setContextPath("/mycontext").     request.setServletPath("/myservlet").     request.setPathInfo(".mypathinfo").     request.setQueryString("?param1=value1").     view.setUrl(url).     view.setServletContext(new MockServletContext() {          @Override         public int getMinorVersion() {             return 4.         }     }).     view.render(model, request, response).     assertEquals(url, response.getForwardedUrl()).     model.forEach((key, value) -> assertEquals("Values for model key '" + key + "' must match", value, request.getAttribute(key))). }
false;public;0;14;;@Test public void alwaysInclude() throws Exception {     given(request.getAttribute(View.PATH_VARIABLES)).willReturn(null).     given(request.getRequestDispatcher(url)).willReturn(new MockRequestDispatcher(url)).     view.setUrl(url).     view.setAlwaysInclude(true).     // Can now try multiple tests     view.render(model, request, response).     assertEquals(url, response.getIncludedUrl()).     model.forEach((key, value) -> verify(request).setAttribute(key, value)). }
false;public;0;14;;@Test public void includeOnAttribute() throws Exception {     given(request.getAttribute(View.PATH_VARIABLES)).willReturn(null).     given(request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE)).willReturn("somepath").     given(request.getRequestDispatcher(url)).willReturn(new MockRequestDispatcher(url)).     view.setUrl(url).     // Can now try multiple tests     view.render(model, request, response).     assertEquals(url, response.getIncludedUrl()).     model.forEach((key, value) -> verify(request).setAttribute(key, value)). }
false;public;0;15;;@Test public void includeOnCommitted() throws Exception {     given(request.getAttribute(View.PATH_VARIABLES)).willReturn(null).     given(request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE)).willReturn(null).     given(request.getRequestDispatcher(url)).willReturn(new MockRequestDispatcher(url)).     response.setCommitted(true).     view.setUrl(url).     // Can now try multiple tests     view.render(model, request, response).     assertEquals(url, response.getIncludedUrl()).     model.forEach((k, v) -> verify(request).setAttribute(k, v)). }
