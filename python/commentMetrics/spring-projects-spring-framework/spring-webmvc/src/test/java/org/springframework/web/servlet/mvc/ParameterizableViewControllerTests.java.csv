commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.controller = new ParameterizableViewController().     this.request = new MockHttpServletRequest("GET", "/"). }
false;public;0;8;;@Test public void handleRequestWithViewName() throws Exception {     String viewName = "testView".     this.controller.setViewName(viewName).     ModelAndView mav = this.controller.handleRequest(this.request, new MockHttpServletResponse()).     assertEquals(viewName, mav.getViewName()).     assertTrue(mav.getModel().isEmpty()). }
false;public;0;6;;@Test public void handleRequestWithoutViewName() throws Exception {     ModelAndView mav = this.controller.handleRequest(this.request, new MockHttpServletResponse()).     assertNull(mav.getViewName()).     assertTrue(mav.getModel().isEmpty()). }
false;public;0;7;;@Test public void handleRequestWithFlashAttributes() throws Exception {     this.request.setAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE, new ModelMap("name", "value")).     ModelAndView mav = this.controller.handleRequest(this.request, new MockHttpServletResponse()).     assertEquals(1, mav.getModel().size()).     assertEquals("value", mav.getModel().get("name")). }
false;public;0;9;;@Test public void handleRequestHttpOptions() throws Exception {     this.request.setMethod(HttpMethod.OPTIONS.name()).     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mav = this.controller.handleRequest(this.request, response).     assertNull(mav).     assertEquals("GET,HEAD,OPTIONS", response.getHeader("Allow")). }
