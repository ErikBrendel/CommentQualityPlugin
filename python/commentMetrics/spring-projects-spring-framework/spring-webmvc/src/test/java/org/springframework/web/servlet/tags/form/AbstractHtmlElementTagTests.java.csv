commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;10;;@Before public final void setUp() throws Exception {     // set up a writer for the tag content to be written to     this.writer = new StringWriter().     // configure the page context     this.pageContext = createAndPopulatePageContext().     onSetUp(). }
false;protected;0;11;;protected MockPageContext createAndPopulatePageContext() throws JspException {     MockPageContext pageContext = createPageContext().     MockHttpServletRequest request = (MockHttpServletRequest) pageContext.getRequest().     ((StaticWebApplicationContext) RequestContextUtils.findWebApplicationContext(request)).registerSingleton("requestDataValueProcessor", RequestDataValueProcessorWrapper.class).     extendRequest(request).     extendPageContext(pageContext).     RequestContext requestContext = new JspAwareRequestContext(pageContext).     pageContext.setAttribute(RequestContextAwareTag.REQUEST_CONTEXT_PAGE_ATTRIBUTE, requestContext).     return pageContext. }
false;protected;1;2;;protected void extendPageContext(MockPageContext pageContext) throws JspException { }
false;protected;1;2;;protected void extendRequest(MockHttpServletRequest request) { }
false;protected;0;2;;protected void onSetUp() { }
false;protected;0;3;;protected MockPageContext getPageContext() {     return this.pageContext. }
false;protected;0;3;;protected Writer getWriter() {     return this.writer. }
false;protected;0;3;;protected String getOutput() {     return this.writer.toString(). }
false;protected,final;0;3;;protected final RequestContext getRequestContext() {     return (RequestContext) getPageContext().getAttribute(RequestContextAwareTag.REQUEST_CONTEXT_PAGE_ATTRIBUTE). }
false;protected;0;7;;protected RequestDataValueProcessor getMockRequestDataValueProcessor() {     RequestDataValueProcessor mockProcessor = mock(RequestDataValueProcessor.class).     HttpServletRequest request = (HttpServletRequest) getPageContext().getRequest().     WebApplicationContext wac = RequestContextUtils.findWebApplicationContext(request).     wac.getBean(RequestDataValueProcessorWrapper.class).setRequestDataValueProcessor(mockProcessor).     return mockProcessor. }
false;protected;1;10;;protected void exposeBindingResult(Errors errors) {     // wrap errors in a Model     Map<String, Object> model = Collections.singletonMap(BindingResult.MODEL_KEY_PREFIX + COMMAND_NAME, errors).     // replace the request context with one containing the errors     MockPageContext pageContext = getPageContext().     RequestContext context = new RequestContext((HttpServletRequest) pageContext.getRequest(), model).     pageContext.setAttribute(RequestContextAwareTag.REQUEST_CONTEXT_PAGE_ATTRIBUTE, context). }
false;protected,final;3;7;;protected final void assertContainsAttribute(String output, String attributeName, String attributeValue) {     String attributeString = attributeName + "=\"" + attributeValue + "\"".     assertTrue("Expected to find attribute '" + attributeName + "' with value '" + attributeValue + "' in output + '" + output + "'", output.contains(attributeString)). }
false;protected,final;2;4;;protected final void assertAttributeNotPresent(String output, String attributeName) {     assertTrue("Unexpected attribute '" + attributeName + "' in output '" + output + "'.", !output.contains(attributeName + "=\"")). }
false;protected,final;2;5;;protected final void assertBlockTagContains(String output, String desiredContents) {     String contents = output.substring(output.indexOf(">") + 1, output.lastIndexOf("<")).     assertTrue("Expected to find '" + desiredContents + "' in the contents of block tag '" + output + "'", contents.contains(desiredContents)). }
