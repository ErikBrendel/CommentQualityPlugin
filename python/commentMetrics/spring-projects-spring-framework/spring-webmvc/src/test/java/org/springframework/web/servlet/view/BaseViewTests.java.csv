# id;timestamp;commentText;codeText;commentWords;codeWords
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1328020251;Check that all keys in expected have same values in actual_@param expected_@param actual;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		Set<String> keys = expected.keySet()__		for (Iterator<String> iter = keys.iterator()_ iter.hasNext()_) {_			String key = (String) iter.next()__			_			assertTrue("Value for model key '" + key + "' must match", actual.get(key) == expected.get(key))_			_		}_	};check,that,all,keys,in,expected,have,same,values,in,actual,param,expected,param,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,set,string,keys,expected,key,set,for,iterator,string,iter,keys,iterator,iter,has,next,string,key,string,iter,next,assert,true,value,for,model,key,key,must,match,actual,get,key,expected,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1345650228;Check that all keys in expected have same values in actual_@param expected_@param actual;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		Set<String> keys = expected.keySet()__		for (Iterator<String> iter = keys.iterator()_ iter.hasNext()_) {_			String key = (String) iter.next()__			_			assertTrue("Value for model key '" + key + "' must match", actual.get(key) == expected.get(key))_			_		}_	};check,that,all,keys,in,expected,have,same,values,in,actual,param,expected,param,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,set,string,keys,expected,key,set,for,iterator,string,iter,keys,iterator,iter,has,next,string,key,string,iter,next,assert,true,value,for,model,key,key,must,match,actual,get,key,expected,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1354292158;Check that all keys in expected have same values in actual_@param expected_@param actual;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		Set<String> keys = expected.keySet()__		for (Iterator<String> iter = keys.iterator()_ iter.hasNext()_) {_			String key = (String) iter.next()__			_			assertTrue("Value for model key '" + key + "' must match", actual.get(key) == expected.get(key))_			_		}_	};check,that,all,keys,in,expected,have,same,values,in,actual,param,expected,param,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,set,string,keys,expected,key,set,for,iterator,string,iter,keys,iterator,iter,has,next,string,key,string,iter,next,assert,true,value,for,model,key,key,must,match,actual,get,key,expected,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1356735495;Check that all keys in expected have same values in actual_@param expected_@param actual;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		Set<String> keys = expected.keySet()__		for (Iterator<String> iter = keys.iterator()_ iter.hasNext()_) {_			String key = iter.next()__			_			assertTrue("Value for model key '" + key + "' must match", actual.get(key) == expected.get(key))__		}_	};check,that,all,keys,in,expected,have,same,values,in,actual,param,expected,param,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,set,string,keys,expected,key,set,for,iterator,string,iter,keys,iterator,iter,has,next,string,key,iter,next,assert,true,value,for,model,key,key,must,match,actual,get,key,expected,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1363208506;Check that all keys in expected have same values in actual_@param expected_@param actual;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		Set<String> keys = expected.keySet()__		for (Iterator<String> iter = keys.iterator()_ iter.hasNext()_) {_			String key = iter.next()__			_			assertTrue("Value for model key '" + key + "' must match", actual.get(key) == expected.get(key))__		}_	};check,that,all,keys,in,expected,have,same,values,in,actual,param,expected,param,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,set,string,keys,expected,key,set,for,iterator,string,iter,keys,iterator,iter,has,next,string,key,iter,next,assert,true,value,for,model,key,key,must,match,actual,get,key,expected,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1413848647;Check that all keys in expected have same values in actual_@param expected_@param actual;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		Set<String> keys = expected.keySet()__		for (Iterator<String> iter = keys.iterator()_ iter.hasNext()_) {_			String key = iter.next()__			_			assertTrue("Value for model key '" + key + "' must match", actual.get(key) == expected.get(key))__		}_	};check,that,all,keys,in,expected,have,same,values,in,actual,param,expected,param,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,set,string,keys,expected,key,set,for,iterator,string,iter,keys,iterator,iter,has,next,string,key,iter,next,assert,true,value,for,model,key,key,must,match,actual,get,key,expected,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1443381471;Check that all keys in expected have same values in actual.;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		expected.keySet().stream().forEach(_			key -> assertEquals("Values for model key '" + key + "' must match", expected.get(key), actual.get(key))_		)__	};check,that,all,keys,in,expected,have,same,values,in,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,expected,key,set,stream,for,each,key,assert,equals,values,for,model,key,key,must,match,expected,get,key,actual,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1467730834;Check that all keys in expected have same values in actual.;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		expected.keySet().stream().forEach(_			key -> assertEquals("Values for model key '" + key + "' must match", expected.get(key), actual.get(key))_		)__	};check,that,all,keys,in,expected,have,same,values,in,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,expected,key,set,stream,for,each,key,assert,equals,values,for,model,key,key,must,match,expected,get,key,actual,get,key
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1497271072;Check that all keys in expected have same values in actual.;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		expected.forEach((k, v) -> assertEquals("Values for model key '" + k_				+ "' must match", expected.get(k), actual.get(k)))__	};check,that,all,keys,in,expected,have,same,values,in,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,expected,for,each,k,v,assert,equals,values,for,model,key,k,must,match,expected,get,k,actual,get,k
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1508532146;Check that all keys in expected have same values in actual.;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		expected.forEach((k, v) -> assertEquals("Values for model key '" + k_				+ "' must match", expected.get(k), actual.get(k)))__	};check,that,all,keys,in,expected,have,same,values,in,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,expected,for,each,k,v,assert,equals,values,for,model,key,k,must,match,expected,get,k,actual,get,k
BaseViewTests -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	private void checkContainsAll(Map expected, Map<String, Object> actual);1542613849;Check that all keys in expected have same values in actual.;@SuppressWarnings({ "rawtypes", "unchecked" })_	private void checkContainsAll(Map expected, Map<String, Object> actual) {_		expected.forEach((k, v) -> assertEquals("Values for model key '" + k_				+ "' must match", expected.get(k), actual.get(k)))__	};check,that,all,keys,in,expected,have,same,values,in,actual;suppress,warnings,rawtypes,unchecked,private,void,check,contains,all,map,expected,map,string,object,actual,expected,for,each,k,v,assert,equals,values,for,model,key,k,must,match,expected,get,k,actual,get,k
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1356735495;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (inited)_				throw new RuntimeException("Already initialized")__			this.inited = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,inited,throw,new,runtime,exception,already,initialized,this,inited,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1363208506;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (inited)_				throw new RuntimeException("Already initialized")__			this.inited = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,inited,throw,new,runtime,exception,already,initialized,this,inited,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1413848647;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (inited)_				throw new RuntimeException("Already initialized")__			this.inited = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,inited,throw,new,runtime,exception,already,initialized,this,inited,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1443381471;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (initialized) {_				throw new RuntimeException("Already initialized")__			}_			this.initialized = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,initialized,throw,new,runtime,exception,already,initialized,this,initialized,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1467730834;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (initialized) {_				throw new RuntimeException("Already initialized")__			}_			this.initialized = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,initialized,throw,new,runtime,exception,already,initialized,this,initialized,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1497271072;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (initialized) {_				throw new RuntimeException("Already initialized")__			}_			this.initialized = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,initialized,throw,new,runtime,exception,already,initialized,this,initialized,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1508532146;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (initialized) {_				throw new RuntimeException("Already initialized")__			}_			this.initialized = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,initialized,throw,new,runtime,exception,already,initialized,this,initialized,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> @Override 		protected void initApplicationContext() throws ApplicationContextException;1542613849;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();@Override_		protected void initApplicationContext() throws ApplicationContextException {_			if (initialized) {_				throw new RuntimeException("Already initialized")__			}_			this.initialized = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;override,protected,void,init,application,context,throws,application,context,exception,if,initialized,throw,new,runtime,exception,already,initialized,this,initialized,true,assert,true,get,application,context,wac
BaseViewTests -> @Test 	public void attributeCSVParsingValid();1443381471;Format is attname0={value1},attname1={value1};@Test_	public void attributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;test,public,void,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> @Test 	public void attributeCSVParsingValid();1467730834;Format is attname0={value1},attname1={value1};@Test_	public void attributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;test,public,void,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> @Test 	public void attributeCSVParsingValid();1497271072;Format is attname0={value1},attname1={value1};@Test_	public void attributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;test,public,void,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> @Test 	public void attributeCSVParsingValid();1508532146;Format is attname0={value1},attname1={value1};@Test_	public void attributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;test,public,void,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> @Test 	public void attributeCSVParsingValid();1542613849;Format is attname0={value1},attname1={value1};@Test_	public void attributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;test,public,void,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> public void testAttributeCSVParsingValid();1328020251;Format is attname0={value1},attname1={value1};public void testAttributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;public,void,test,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> public void testAttributeCSVParsingValid();1345650228;Format is attname0={value1},attname1={value1};public void testAttributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;public,void,test,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> public void testAttributeCSVParsingValid();1354292158;Format is attname0={value1},attname1={value1};public void testAttributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;public,void,test,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> public void testAttributeCSVParsingValid();1356735495;Format is attname0={value1},attname1={value1};public void testAttributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;public,void,test,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> public void testAttributeCSVParsingValid();1363208506;Format is attname0={value1},attname1={value1};public void testAttributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;public,void,test,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> public void testAttributeCSVParsingValid();1413848647;Format is attname0={value1},attname1={value1};public void testAttributeCSVParsingValid() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV("foo=[bar],king=[kong]")__		assertTrue(v.getStaticAttributes().size() == 2)__		assertTrue(v.getStaticAttributes().get("foo").equals("bar"))__		assertTrue(v.getStaticAttributes().get("king").equals("kong"))__	};format,is,attname0,value1,attname1,value1;public,void,test,attribute,csvparsing,valid,abstract,view,v,new,concrete,view,v,set,attributes,csv,foo,bar,king,kong,assert,true,v,get,static,attributes,size,2,assert,true,v,get,static,attributes,get,foo,equals,bar,assert,true,v,get,static,attributes,get,king,equals,kong
BaseViewTests -> @Test 	public void renderWithStaticAttributesNoCollision() throws Exception;1443381471;Test attribute passing, NOT CSV parsing.;@Test_	public void renderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = mock(WebApplicationContext.class)__		given(wac.getServletContext()).willReturn(new MockServletContext())___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<String, Object>()__		model.put("one", new HashMap<Object, Object>())__		model.put("two", new Object())__		tv.render(model, request, response)___		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.initialized)__	};test,attribute,passing,not,csv,parsing;test,public,void,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,mock,web,application,context,class,given,wac,get,servlet,context,will,return,new,mock,servlet,context,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,string,object,model,put,one,new,hash,map,object,object,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,initialized
BaseViewTests -> @Test 	public void renderWithStaticAttributesNoCollision() throws Exception;1467730834;Test attribute passing, NOT CSV parsing.;@Test_	public void renderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = mock(WebApplicationContext.class)__		given(wac.getServletContext()).willReturn(new MockServletContext())___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<>()__		model.put("one", new HashMap<>())__		model.put("two", new Object())__		tv.render(model, request, response)___		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.initialized)__	};test,attribute,passing,not,csv,parsing;test,public,void,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,mock,web,application,context,class,given,wac,get,servlet,context,will,return,new,mock,servlet,context,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,model,put,one,new,hash,map,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,initialized
BaseViewTests -> @Test 	public void renderWithStaticAttributesNoCollision() throws Exception;1497271072;Test attribute passing, NOT CSV parsing.;@Test_	public void renderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = mock(WebApplicationContext.class)__		given(wac.getServletContext()).willReturn(new MockServletContext())___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<>()__		model.put("one", new HashMap<>())__		model.put("two", new Object())__		tv.render(model, request, response)___		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.initialized)__	};test,attribute,passing,not,csv,parsing;test,public,void,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,mock,web,application,context,class,given,wac,get,servlet,context,will,return,new,mock,servlet,context,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,model,put,one,new,hash,map,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,initialized
BaseViewTests -> @Test 	public void renderWithStaticAttributesNoCollision() throws Exception;1508532146;Test attribute passing, NOT CSV parsing.;@Test_	public void renderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = mock(WebApplicationContext.class)__		given(wac.getServletContext()).willReturn(new MockServletContext())___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<>()__		model.put("one", new HashMap<>())__		model.put("two", new Object())__		tv.render(model, request, response)___		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.initialized)__	};test,attribute,passing,not,csv,parsing;test,public,void,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,mock,web,application,context,class,given,wac,get,servlet,context,will,return,new,mock,servlet,context,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,model,put,one,new,hash,map,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,initialized
BaseViewTests -> @Test 	public void renderWithStaticAttributesNoCollision() throws Exception;1542613849;Test attribute passing, NOT CSV parsing.;@Test_	public void renderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = mock(WebApplicationContext.class)__		given(wac.getServletContext()).willReturn(new MockServletContext())___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<>()__		model.put("one", new HashMap<>())__		model.put("two", new Object())__		tv.render(model, request, response)___		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.initialized)__	};test,attribute,passing,not,csv,parsing;test,public,void,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,mock,web,application,context,class,given,wac,get,servlet,context,will,return,new,mock,servlet,context,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,model,put,one,new,hash,map,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,initialized
BaseViewTests -> public void testAttributeCSVParsingIgnoresNull();1328020251;Test only the CSV parsing implementation.;public void testAttributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertTrue(v.getStaticAttributes().size() == 0)__	};test,only,the,csv,parsing,implementation;public,void,test,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,true,v,get,static,attributes,size,0
BaseViewTests -> public void testAttributeCSVParsingIgnoresNull();1345650228;Test only the CSV parsing implementation.;public void testAttributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertTrue(v.getStaticAttributes().size() == 0)__	};test,only,the,csv,parsing,implementation;public,void,test,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,true,v,get,static,attributes,size,0
BaseViewTests -> public void testAttributeCSVParsingIgnoresNull();1354292158;Test only the CSV parsing implementation.;public void testAttributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertTrue(v.getStaticAttributes().size() == 0)__	};test,only,the,csv,parsing,implementation;public,void,test,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,true,v,get,static,attributes,size,0
BaseViewTests -> public void testAttributeCSVParsingIgnoresNull();1356735495;Test only the CSV parsing implementation.;public void testAttributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertTrue(v.getStaticAttributes().size() == 0)__	};test,only,the,csv,parsing,implementation;public,void,test,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,true,v,get,static,attributes,size,0
BaseViewTests -> public void testAttributeCSVParsingIgnoresNull();1363208506;Test only the CSV parsing implementation.;public void testAttributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertTrue(v.getStaticAttributes().size() == 0)__	};test,only,the,csv,parsing,implementation;public,void,test,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,true,v,get,static,attributes,size,0
BaseViewTests -> public void testAttributeCSVParsingIgnoresNull();1413848647;Test only the CSV parsing implementation.;public void testAttributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertTrue(v.getStaticAttributes().size() == 0)__	};test,only,the,csv,parsing,implementation;public,void,test,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,true,v,get,static,attributes,size,0
BaseViewTests -> public void testRenderWithStaticAttributesNoCollision() throws Exception;1328020251;Test attribute passing, NOT CSV parsing.;public void testRenderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = createMock(WebApplicationContext.class)__		wac.getServletContext()__		expectLastCall().andReturn(new MockServletContext())__		replay(wac)___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)__	_		tv.setApplicationContext(wac)__		Properties p = new Properties()_	_		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)_	_	_		Map<String, Object> model = new HashMap<String, Object>()__		model.put("one", new HashMap<Object, Object>())__		model.put("two", new Object())__		tv.render(model, request, response)___		_		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)__	_		assertTrue(tv.inited)__		verify(wac)__	};test,attribute,passing,not,csv,parsing;public,void,test,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,create,mock,web,application,context,class,wac,get,servlet,context,expect,last,call,and,return,new,mock,servlet,context,replay,wac,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,string,object,model,put,one,new,hash,map,object,object,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,inited,verify,wac
BaseViewTests -> public void testRenderWithStaticAttributesNoCollision() throws Exception;1345650228;Test attribute passing, NOT CSV parsing.;public void testRenderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = createMock(WebApplicationContext.class)__		wac.getServletContext()__		expectLastCall().andReturn(new MockServletContext())__		replay(wac)___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)__	_		tv.setApplicationContext(wac)__		Properties p = new Properties()_	_		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)_	_	_		Map<String, Object> model = new HashMap<String, Object>()__		model.put("one", new HashMap<Object, Object>())__		model.put("two", new Object())__		tv.render(model, request, response)___		_		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)__	_		assertTrue(tv.inited)__		verify(wac)__	};test,attribute,passing,not,csv,parsing;public,void,test,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,create,mock,web,application,context,class,wac,get,servlet,context,expect,last,call,and,return,new,mock,servlet,context,replay,wac,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,string,object,model,put,one,new,hash,map,object,object,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,inited,verify,wac
BaseViewTests -> public void testRenderWithStaticAttributesNoCollision() throws Exception;1354292158;Test attribute passing, NOT CSV parsing.;public void testRenderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = createMock(WebApplicationContext.class)__		wac.getServletContext()__		expectLastCall().andReturn(new MockServletContext())__		replay(wac)___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)__	_		tv.setApplicationContext(wac)__		Properties p = new Properties()_	_		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)_	_	_		Map<String, Object> model = new HashMap<String, Object>()__		model.put("one", new HashMap<Object, Object>())__		model.put("two", new Object())__		tv.render(model, request, response)___		_		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)__	_		assertTrue(tv.inited)__		verify(wac)__	};test,attribute,passing,not,csv,parsing;public,void,test,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,create,mock,web,application,context,class,wac,get,servlet,context,expect,last,call,and,return,new,mock,servlet,context,replay,wac,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,string,object,model,put,one,new,hash,map,object,object,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,inited,verify,wac
BaseViewTests -> public void testRenderWithStaticAttributesNoCollision() throws Exception;1356735495;Test attribute passing, NOT CSV parsing.;public void testRenderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = createMock(WebApplicationContext.class)__		wac.getServletContext()__		expectLastCall().andReturn(new MockServletContext())__		replay(wac)___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<String, Object>()__		model.put("one", new HashMap<Object, Object>())__		model.put("two", new Object())__		tv.render(model, request, response)___		_		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.inited)__		verify(wac)__	};test,attribute,passing,not,csv,parsing;public,void,test,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,create,mock,web,application,context,class,wac,get,servlet,context,expect,last,call,and,return,new,mock,servlet,context,replay,wac,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,string,object,model,put,one,new,hash,map,object,object,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,inited,verify,wac
BaseViewTests -> public void testRenderWithStaticAttributesNoCollision() throws Exception;1363208506;Test attribute passing, NOT CSV parsing.;public void testRenderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = mock(WebApplicationContext.class)__		given(wac.getServletContext()).willReturn(new MockServletContext())___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<String, Object>()__		model.put("one", new HashMap<Object, Object>())__		model.put("two", new Object())__		tv.render(model, request, response)___		_		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.inited)__	};test,attribute,passing,not,csv,parsing;public,void,test,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,mock,web,application,context,class,given,wac,get,servlet,context,will,return,new,mock,servlet,context,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,string,object,model,put,one,new,hash,map,object,object,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,inited
BaseViewTests -> public void testRenderWithStaticAttributesNoCollision() throws Exception;1413848647;Test attribute passing, NOT CSV parsing.;public void testRenderWithStaticAttributesNoCollision() throws Exception {_		WebApplicationContext wac = mock(WebApplicationContext.class)__		given(wac.getServletContext()).willReturn(new MockServletContext())___		HttpServletRequest request = new MockHttpServletRequest()__		HttpServletResponse response = new MockHttpServletResponse()__		TestView tv = new TestView(wac)___		tv.setApplicationContext(wac)__		Properties p = new Properties()__		p.setProperty("foo", "bar")__		p.setProperty("something", "else")__		tv.setAttributes(p)___		Map<String, Object> model = new HashMap<String, Object>()__		model.put("one", new HashMap<Object, Object>())__		model.put("two", new Object())__		tv.render(model, request, response)___		_		checkContainsAll(model, tv.model)__		checkContainsAll(p, tv.model)___		assertTrue(tv.inited)__	};test,attribute,passing,not,csv,parsing;public,void,test,render,with,static,attributes,no,collision,throws,exception,web,application,context,wac,mock,web,application,context,class,given,wac,get,servlet,context,will,return,new,mock,servlet,context,http,servlet,request,request,new,mock,http,servlet,request,http,servlet,response,response,new,mock,http,servlet,response,test,view,tv,new,test,view,wac,tv,set,application,context,wac,properties,p,new,properties,p,set,property,foo,bar,p,set,property,something,else,tv,set,attributes,p,map,string,object,model,new,hash,map,string,object,model,put,one,new,hash,map,object,object,model,put,two,new,object,tv,render,model,request,response,check,contains,all,model,tv,model,check,contains,all,p,tv,model,assert,true,tv,inited
BaseViewTests -> TestView -> protected void initApplicationContext() throws ApplicationContextException;1328020251;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();protected void initApplicationContext() throws ApplicationContextException {_			if (inited)_				throw new RuntimeException("Already initialized")__			this.inited = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;protected,void,init,application,context,throws,application,context,exception,if,inited,throw,new,runtime,exception,already,initialized,this,inited,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> protected void initApplicationContext() throws ApplicationContextException;1345650228;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();protected void initApplicationContext() throws ApplicationContextException {_			if (inited)_				throw new RuntimeException("Already initialized")__			this.inited = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;protected,void,init,application,context,throws,application,context,exception,if,inited,throw,new,runtime,exception,already,initialized,this,inited,true,assert,true,get,application,context,wac
BaseViewTests -> TestView -> protected void initApplicationContext() throws ApplicationContextException;1354292158;@see org.springframework.context.support.ApplicationObjectSupport#initApplicationContext();protected void initApplicationContext() throws ApplicationContextException {_			if (inited)_				throw new RuntimeException("Already initialized")__			this.inited = true__			assertTrue(getApplicationContext() == wac)__		};see,org,springframework,context,support,application,object,support,init,application,context;protected,void,init,application,context,throws,application,context,exception,if,inited,throw,new,runtime,exception,already,initialized,this,inited,true,assert,true,get,application,context,wac
BaseViewTests -> @Test 	public void attributeCSVParsingIgnoresNull();1443381471;Test only the CSV parsing implementation.;@Test_	public void attributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertEquals(0, v.getStaticAttributes().size())__	};test,only,the,csv,parsing,implementation;test,public,void,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,equals,0,v,get,static,attributes,size
BaseViewTests -> @Test 	public void attributeCSVParsingIgnoresNull();1467730834;Test only the CSV parsing implementation.;@Test_	public void attributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertEquals(0, v.getStaticAttributes().size())__	};test,only,the,csv,parsing,implementation;test,public,void,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,equals,0,v,get,static,attributes,size
BaseViewTests -> @Test 	public void attributeCSVParsingIgnoresNull();1497271072;Test only the CSV parsing implementation.;@Test_	public void attributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertEquals(0, v.getStaticAttributes().size())__	};test,only,the,csv,parsing,implementation;test,public,void,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,equals,0,v,get,static,attributes,size
BaseViewTests -> @Test 	public void attributeCSVParsingIgnoresNull();1508532146;Test only the CSV parsing implementation.;@Test_	public void attributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertEquals(0, v.getStaticAttributes().size())__	};test,only,the,csv,parsing,implementation;test,public,void,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,equals,0,v,get,static,attributes,size
BaseViewTests -> @Test 	public void attributeCSVParsingIgnoresNull();1542613849;Test only the CSV parsing implementation.;@Test_	public void attributeCSVParsingIgnoresNull() {_		AbstractView v = new ConcreteView()__		v.setAttributesCSV(null)__		assertEquals(0, v.getStaticAttributes().size())__	};test,only,the,csv,parsing,implementation;test,public,void,attribute,csvparsing,ignores,null,abstract,view,v,new,concrete,view,v,set,attributes,csv,null,assert,equals,0,v,get,static,attributes,size
