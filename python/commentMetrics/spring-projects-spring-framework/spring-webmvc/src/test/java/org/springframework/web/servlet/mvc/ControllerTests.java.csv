commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void parameterizableViewController() throws Exception {     String viewName = "viewName".     ParameterizableViewController pvc = new ParameterizableViewController().     pvc.setViewName(viewName).     // We don't care about the params.     ModelAndView mv = pvc.handleRequest(new MockHttpServletRequest("GET", "foo.html"), new MockHttpServletResponse()).     assertTrue("model has no data", mv.getModel().size() == 0).     assertTrue("model has correct viewname", mv.getViewName().equals(viewName)).     assertTrue("getViewName matches", pvc.getViewName().equals(viewName)). }
false;public;0;6;;@Test public void servletForwardingController() throws Exception {     ServletForwardingController sfc = new ServletForwardingController().     sfc.setServletName("action").     doTestServletForwardingController(sfc, false). }
false;public;0;6;;@Test public void servletForwardingControllerWithInclude() throws Exception {     ServletForwardingController sfc = new ServletForwardingController().     sfc.setServletName("action").     doTestServletForwardingController(sfc, true). }
false;public;0;6;;@Test public void servletForwardingControllerWithBeanName() throws Exception {     ServletForwardingController sfc = new ServletForwardingController().     sfc.setBeanName("action").     doTestServletForwardingController(sfc, false). }
false;private;2;29;;private void doTestServletForwardingController(ServletForwardingController sfc, boolean include) throws Exception {     HttpServletRequest request = mock(HttpServletRequest.class).     HttpServletResponse response = mock(HttpServletResponse.class).     ServletContext context = mock(ServletContext.class).     RequestDispatcher dispatcher = mock(RequestDispatcher.class).     given(request.getMethod()).willReturn("GET").     given(context.getNamedDispatcher("action")).willReturn(dispatcher).     if (include) {         given(request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE)).willReturn("somePath").     } else {         given(request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE)).willReturn(null).     }     StaticWebApplicationContext sac = new StaticWebApplicationContext().     sac.setServletContext(context).     sfc.setApplicationContext(sac).     assertNull(sfc.handleRequest(request, response)).     if (include) {         verify(dispatcher).include(request, response).     } else {         verify(dispatcher).forward(request, response).     } }
false;public;0;27;;@Test public void servletWrappingController() throws Exception {     HttpServletRequest request = new MockHttpServletRequest("GET", "/somePath").     HttpServletResponse response = new MockHttpServletResponse().     ServletWrappingController swc = new ServletWrappingController().     swc.setServletClass(TestServlet.class).     swc.setServletName("action").     Properties props = new Properties().     props.setProperty("config", "myValue").     swc.setInitParameters(props).     swc.afterPropertiesSet().     assertNotNull(TestServlet.config).     assertEquals("action", TestServlet.config.getServletName()).     assertEquals("myValue", TestServlet.config.getInitParameter("config")).     assertNull(TestServlet.request).     assertFalse(TestServlet.destroyed).     assertNull(swc.handleRequest(request, response)).     assertEquals(request, TestServlet.request).     assertEquals(response, TestServlet.response).     assertFalse(TestServlet.destroyed).     swc.destroy().     assertTrue(TestServlet.destroyed). }
false;public;0;23;;@Test public void servletWrappingControllerWithBeanName() throws Exception {     HttpServletRequest request = new MockHttpServletRequest("GET", "/somePath").     HttpServletResponse response = new MockHttpServletResponse().     ServletWrappingController swc = new ServletWrappingController().     swc.setServletClass(TestServlet.class).     swc.setBeanName("action").     swc.afterPropertiesSet().     assertNotNull(TestServlet.config).     assertEquals("action", TestServlet.config.getServletName()).     assertNull(TestServlet.request).     assertFalse(TestServlet.destroyed).     assertNull(swc.handleRequest(request, response)).     assertEquals(request, TestServlet.request).     assertEquals(response, TestServlet.response).     assertFalse(TestServlet.destroyed).     swc.destroy().     assertTrue(TestServlet.destroyed). }
false;public;1;4;;@Override public void init(ServletConfig servletConfig) {     config = servletConfig. }
false;public;0;4;;@Override public ServletConfig getServletConfig() {     return config. }
false;public;2;5;;@Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) {     request = servletRequest.     response = servletResponse. }
false;public;0;4;;@Override public String getServletInfo() {     return "TestServlet". }
false;public;0;4;;@Override public void destroy() {     destroyed = true. }
