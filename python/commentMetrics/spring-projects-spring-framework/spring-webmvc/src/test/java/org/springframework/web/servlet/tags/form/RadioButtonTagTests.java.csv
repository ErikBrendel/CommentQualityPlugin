commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(getWriter()). }
false;protected;0;11;;@Override @SuppressWarnings("serial") protected void onSetUp() {     this.tag = new RadioButtonTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(getWriter()).         }     }.     this.tag.setPageContext(getPageContext()). }
false;public;0;23;;@Test public void withCheckedValue() throws Exception {     String dynamicAttribute1 = "attr1".     String dynamicAttribute2 = "attr2".     this.tag.setPath("sex").     this.tag.setValue("M").     this.tag.setDynamicAttribute(null, dynamicAttribute1, dynamicAttribute1).     this.tag.setDynamicAttribute(null, dynamicAttribute2, dynamicAttribute2).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "name", "sex").     assertContainsAttribute(output, "type", "radio").     assertContainsAttribute(output, "value", "M").     assertContainsAttribute(output, "checked", "checked").     assertContainsAttribute(output, dynamicAttribute1, dynamicAttribute1).     assertContainsAttribute(output, dynamicAttribute2, dynamicAttribute2). }
false;public;0;15;;@Test public void withCheckedValueAndDynamicAttributes() throws Exception {     this.tag.setPath("sex").     this.tag.setValue("M").     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "name", "sex").     assertContainsAttribute(output, "type", "radio").     assertContainsAttribute(output, "value", "M").     assertContainsAttribute(output, "checked", "checked"). }
false;public;0;15;;@Test public void withCheckedObjectValue() throws Exception {     this.tag.setPath("myFloat").     this.tag.setValue(getFloat()).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "name", "myFloat").     assertContainsAttribute(output, "type", "radio").     assertContainsAttribute(output, "value", getFloat().toString()).     assertContainsAttribute(output, "checked", "checked"). }
false;public;0;21;;@Test public void withCheckedObjectValueAndEditor() throws Exception {     this.tag.setPath("myFloat").     this.tag.setValue("F12.99").     BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(this.bean, COMMAND_NAME).     MyFloatEditor editor = new MyFloatEditor().     bindingResult.getPropertyEditorRegistry().registerCustomEditor(Float.class, editor).     getPageContext().getRequest().setAttribute(BindingResult.MODEL_KEY_PREFIX + COMMAND_NAME, bindingResult).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "name", "myFloat").     assertContainsAttribute(output, "type", "radio").     assertContainsAttribute(output, "value", "F" + getFloat().toString()).     assertContainsAttribute(output, "checked", "checked"). }
false;public;0;16;;@Test public void withUncheckedObjectValue() throws Exception {     Float value = new Float("99.45").     this.tag.setPath("myFloat").     this.tag.setValue(value).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "name", "myFloat").     assertContainsAttribute(output, "type", "radio").     assertContainsAttribute(output, "value", value.toString()).     assertAttributeNotPresent(output, "checked"). }
false;public;0;15;;@Test public void withUncheckedValue() throws Exception {     this.tag.setPath("sex").     this.tag.setValue("F").     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "name", "sex").     assertContainsAttribute(output, "type", "radio").     assertContainsAttribute(output, "value", "F").     assertAttributeNotPresent(output, "checked"). }
false;public;0;22;;@Test public void collectionOfPets() throws Exception {     this.tag.setPath("pets").     this.tag.setValue(new Pet("Rudiger")).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     // wrap the output so it is valid XML     output = "<doc>" + output + "</doc>".     SAXReader reader = new SAXReader().     Document document = reader.read(new StringReader(output)).     Element checkboxElement = (Element) document.getRootElement().elements().get(0).     assertEquals("input", checkboxElement.getName()).     assertEquals("radio", checkboxElement.attribute("type").getValue()).     assertEquals("pets", checkboxElement.attribute("name").getValue()).     assertEquals("Rudiger", checkboxElement.attribute("value").getValue()).     assertEquals("checked", checkboxElement.attribute("checked").getValue()). }
false;public;0;22;;@Test public void collectionOfPetsNotSelected() throws Exception {     this.tag.setPath("pets").     this.tag.setValue(new Pet("Santa's Little Helper")).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     // wrap the output so it is valid XML     output = "<doc>" + output + "</doc>".     SAXReader reader = new SAXReader().     Document document = reader.read(new StringReader(output)).     Element checkboxElement = (Element) document.getRootElement().elements().get(0).     assertEquals("input", checkboxElement.getName()).     assertEquals("radio", checkboxElement.attribute("type").getValue()).     assertEquals("pets", checkboxElement.attribute("name").getValue()).     assertEquals("Santa's Little Helper", checkboxElement.attribute("value").getValue()).     assertNull(checkboxElement.attribute("checked")). }
false;public;0;27;;@Test public void collectionOfPetsWithEditor() throws Exception {     this.tag.setPath("pets").     this.tag.setValue(new ItemPet("Rudiger")).     BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(this.bean, COMMAND_NAME).     PropertyEditorSupport editor = new ItemPet.CustomEditor().     bindingResult.getPropertyEditorRegistry().registerCustomEditor(ItemPet.class, editor).     getPageContext().getRequest().setAttribute(BindingResult.MODEL_KEY_PREFIX + COMMAND_NAME, bindingResult).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     String output = getOutput().     // wrap the output so it is valid XML     output = "<doc>" + output + "</doc>".     SAXReader reader = new SAXReader().     Document document = reader.read(new StringReader(output)).     Element checkboxElement = (Element) document.getRootElement().elements().get(0).     assertEquals("input", checkboxElement.getName()).     assertEquals("radio", checkboxElement.attribute("type").getValue()).     assertEquals("pets", checkboxElement.attribute("name").getValue()).     assertEquals("Rudiger", checkboxElement.attribute("value").getValue()).     assertEquals("checked", checkboxElement.attribute("checked").getValue()). }
false;public;0;10;;@Test public void dynamicTypeAttribute() throws JspException {     try {         this.tag.setDynamicAttribute(null, "type", "email").         fail("Expected exception").     } catch (IllegalArgumentException e) {         assertEquals("Attribute type=\"email\" is not allowed", e.getMessage()).     } }
false;private;1;3;;private void assertTagOpened(String output) {     assertTrue(output.contains("<input ")). }
false;private;1;3;;private void assertTagClosed(String output) {     assertTrue(output.contains("/>")). }
false;private;0;3;;private Float getFloat() {     return new Float("12.99"). }
false;protected;0;8;;@Override protected TestBean createTestBean() {     this.bean = new TestBean().     bean.setSex("M").     bean.setMyFloat(getFloat()).     bean.setPets(Collections.singletonList(new Pet("Rudiger"))).     return bean. }
false;public;1;4;;@Override public void setAsText(String text) throws IllegalArgumentException {     setValue(text.substring(1)). }
false;public;0;4;;@Override public String getAsText() {     return "F" + getValue(). }
