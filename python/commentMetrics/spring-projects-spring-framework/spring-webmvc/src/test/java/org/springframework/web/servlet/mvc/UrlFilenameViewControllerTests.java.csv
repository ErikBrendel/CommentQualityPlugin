commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void withPlainFilename() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/index").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("index", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;9;;@Test public void withFilenamePlusExtension() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/index.html").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("index", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;9;;@Test public void withFilenameAndMatrixVariables() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/index.a=A.b=B").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("index", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;11;;@Test public void withPrefixAndSuffix() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     ctrl.setPrefix("mypre_").     ctrl.setSuffix("_mysuf").     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/index.html").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("mypre_index_mysuf", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;10;;@Test public void withPrefix() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     ctrl.setPrefix("mypre_").     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/index.html").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("mypre_index", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;10;;@Test public void withSuffix() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     ctrl.setSuffix("_mysuf").     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/index.html").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("index_mysuf", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;9;;@Test public void multiLevel() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/docs/cvs/commit.html").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("docs/cvs/commit", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;10;;@Test public void multiLevelWithMapping() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/docs/cvs/commit.html").     exposePathInMapping(request, "/docs/**").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("cvs/commit", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;10;;@Test public void multiLevelMappingWithFallback() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/docs/cvs/commit.html").     exposePathInMapping(request, "/docs/cvs/commit.html").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("docs/cvs/commit", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;10;;@Test public void withContextMapping() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myapp/docs/cvs/commit.html").     request.setContextPath("/myapp").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("docs/cvs/commit", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;7;;@Test public void settingPrefixToNullCausesEmptyStringToBeUsed() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     ctrl.setPrefix(null).     assertNotNull("For setPrefix(..) with null, the empty string must be used instead.", ctrl.getPrefix()).     assertEquals("For setPrefix(..) with null, the empty string must be used instead.", "", ctrl.getPrefix()). }
false;public;0;7;;@Test public void settingSuffixToNullCausesEmptyStringToBeUsed() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     ctrl.setSuffix(null).     assertNotNull("For setPrefix(..) with null, the empty string must be used instead.", ctrl.getSuffix()).     assertEquals("For setPrefix(..) with null, the empty string must be used instead.", "", ctrl.getSuffix()). }
true;public;0;9;/**  * This is the expected behavior, and it now has a test to prove it.  * http://opensource.atlassian.com/projects/spring/browse/SPR-2789  */ ;/**  * This is the expected behavior, and it now has a test to prove it.  * http://opensource.atlassian.com/projects/spring/browse/SPR-2789  */ @Test public void nestedPathisUsedAsViewName_InBreakingChangeFromSpring12Line() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/products/view.html").     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("products/view", mv.getViewName()).     assertTrue(mv.getModel().isEmpty()). }
false;public;0;11;;@Test public void withFlashAttributes() throws Exception {     UrlFilenameViewController ctrl = new UrlFilenameViewController().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/index").     request.setAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE, new ModelMap("name", "value")).     MockHttpServletResponse response = new MockHttpServletResponse().     ModelAndView mv = ctrl.handleRequest(request, response).     assertEquals("index", mv.getViewName()).     assertEquals(1, mv.getModel().size()).     assertEquals("value", mv.getModel().get("name")). }
false;private;2;4;;private void exposePathInMapping(MockHttpServletRequest request, String mapping) {     String pathInMapping = this.pathMatcher.extractPathWithinPattern(mapping, request.getRequestURI()).     request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathInMapping). }
