commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(getWriter()). }
false;public;0;6;;@Override public String getName() {     // RequestDataValueDataProcessor     return "testName". }
false;protected;0;20;;@Override @SuppressWarnings("serial") protected void onSetUp() {     this.tag = new OptionTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(getWriter()).         }     }.     this.parentTag = new SelectTag() {          @Override         public String getName() {             // RequestDataValueDataProcessor             return "testName".         }     }.     this.tag.setParent(this.parentTag).     this.tag.setPageContext(getPageContext()). }
false;public;0;24;;@Test @SuppressWarnings("rawtypes") public void withJavaEnum() throws Exception {     GenericBean testBean = new GenericBean().     testBean.setCustomEnum(CustomEnum.VALUE_1).     getPageContext().getRequest().setAttribute("testBean", testBean).     String selectName = "testBean.customEnum".     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, new BindStatus(getRequestContext(), selectName, false)).     this.tag.setValue("VALUE_1").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getWriter().toString().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "VALUE_1").     assertContainsAttribute(output, "selected", "selected"). }
false;private;1;3;;private void assertOptionTagOpened(String output) {     assertTrue(output.startsWith("<option")). }
false;private;1;3;;private void assertOptionTagClosed(String output) {     assertTrue(output.endsWith("</option>")). }
