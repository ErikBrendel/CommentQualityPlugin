commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     this.conversionService = new DefaultFormattingConversionService().     DataBinder dataBinder = new DataBinder(null).     dataBinder.setConversionService(conversionService).     this.redirectAttributes = new RedirectAttributesModelMap(dataBinder). }
false;public;0;5;;@Test public void addAttributePrimitiveType() {     this.redirectAttributes.addAttribute("speed", 65).     assertEquals("65", this.redirectAttributes.get("speed")). }
false;public;0;12;;@Test public void addAttributeCustomType() {     String attrName = "person".     this.redirectAttributes.addAttribute(attrName, new TestBean("Fred")).     assertEquals("ConversionService should have invoked toString()", "Fred", this.redirectAttributes.get(attrName)).     this.conversionService.addConverter(new TestBeanConverter()).     this.redirectAttributes.addAttribute(attrName, new TestBean("Fred")).     assertEquals("Type converter should have been used", "[Fred]", this.redirectAttributes.get(attrName)). }
false;public;0;8;;@Test public void addAttributeToString() {     String attrName = "person".     RedirectAttributesModelMap model = new RedirectAttributesModelMap().     model.addAttribute(attrName, new TestBean("Fred")).     assertEquals("toString() should have been used", "Fred", model.get(attrName)). }
false;public;0;6;;@Test public void addAttributeValue() {     this.redirectAttributes.addAttribute(new TestBean("Fred")).     assertEquals("Fred", this.redirectAttributes.get("testBean")). }
false;public;0;7;;@Test public void addAllAttributesList() {     this.redirectAttributes.addAllAttributes(Arrays.asList(new TestBean("Fred"), new Integer(5))).     assertEquals("Fred", this.redirectAttributes.get("testBean")).     assertEquals("5", this.redirectAttributes.get("integer")). }
false;public;0;10;;@Test public void addAttributesMap() {     Map<String, Object> map = new HashMap<>().     map.put("person", new TestBean("Fred")).     map.put("age", 33).     this.redirectAttributes.addAllAttributes(map).     assertEquals("Fred", this.redirectAttributes.get("person")).     assertEquals("33", this.redirectAttributes.get("age")). }
false;public;0;12;;@Test public void mergeAttributes() {     Map<String, Object> map = new HashMap<>().     map.put("person", new TestBean("Fred")).     map.put("age", 33).     this.redirectAttributes.addAttribute("person", new TestBean("Ralph")).     this.redirectAttributes.mergeAttributes(map).     assertEquals("Ralph", this.redirectAttributes.get("person")).     assertEquals("33", this.redirectAttributes.get("age")). }
false;public;0;6;;@Test public void put() {     this.redirectAttributes.put("testBean", new TestBean("Fred")).     assertEquals("Fred", this.redirectAttributes.get("testBean")). }
false;public;0;10;;@Test public void putAll() {     Map<String, Object> map = new HashMap<>().     map.put("person", new TestBean("Fred")).     map.put("age", 33).     this.redirectAttributes.putAll(map).     assertEquals("Fred", this.redirectAttributes.get("person")).     assertEquals("33", this.redirectAttributes.get("age")). }
false;public;1;4;;@Override public String convert(TestBean source) {     return "[" + source.getName() + "]". }
