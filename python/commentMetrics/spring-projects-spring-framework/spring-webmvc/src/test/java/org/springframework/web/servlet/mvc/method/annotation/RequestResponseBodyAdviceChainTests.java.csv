commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() {     this.body = "body".     this.contentType = MediaType.TEXT_PLAIN.     this.converterType = StringHttpMessageConverter.class.     this.paramType = new MethodParameter(ClassUtils.getMethod(this.getClass(), "handle", String.class), 0).     this.returnType = new MethodParameter(ClassUtils.getMethod(this.getClass(), "handle", String.class), -1).     this.request = new ServletServerHttpRequest(new MockHttpServletRequest()).     this.response = new ServletServerHttpResponse(new MockHttpServletResponse()). }
false;public;0;22;;@SuppressWarnings("unchecked") @Test public void requestBodyAdvice() throws IOException {     RequestBodyAdvice requestAdvice = Mockito.mock(RequestBodyAdvice.class).     ResponseBodyAdvice<String> responseAdvice = Mockito.mock(ResponseBodyAdvice.class).     List<Object> advice = Arrays.asList(requestAdvice, responseAdvice).     RequestResponseBodyAdviceChain chain = new RequestResponseBodyAdviceChain(advice).     HttpInputMessage wrapped = new ServletServerHttpRequest(new MockHttpServletRequest()).     given(requestAdvice.supports(this.paramType, String.class, this.converterType)).willReturn(true).     given(requestAdvice.beforeBodyRead(eq(this.request), eq(this.paramType), eq(String.class), eq(this.converterType))).willReturn(wrapped).     assertSame(wrapped, chain.beforeBodyRead(this.request, this.paramType, String.class, this.converterType)).     String modified = "body++".     given(requestAdvice.afterBodyRead(eq(this.body), eq(this.request), eq(this.paramType), eq(String.class), eq(this.converterType))).willReturn(modified).     assertEquals(modified, chain.afterBodyRead(this.body, this.request, this.paramType, String.class, this.converterType)). }
false;public;0;18;;@SuppressWarnings("unchecked") @Test public void responseBodyAdvice() {     RequestBodyAdvice requestAdvice = Mockito.mock(RequestBodyAdvice.class).     ResponseBodyAdvice<String> responseAdvice = Mockito.mock(ResponseBodyAdvice.class).     List<Object> advice = Arrays.asList(requestAdvice, responseAdvice).     RequestResponseBodyAdviceChain chain = new RequestResponseBodyAdviceChain(advice).     String expected = "body++".     given(responseAdvice.supports(this.returnType, this.converterType)).willReturn(true).     given(responseAdvice.beforeBodyWrite(eq(this.body), eq(this.returnType), eq(this.contentType), eq(this.converterType), same(this.request), same(this.response))).willReturn(expected).     String actual = (String) chain.beforeBodyWrite(this.body, this.returnType, this.contentType, this.converterType, this.request, this.response).     assertEquals(expected, actual). }
false;public;0;10;;@Test public void controllerAdvice() {     Object adviceBean = new ControllerAdviceBean(new MyControllerAdvice()).     RequestResponseBodyAdviceChain chain = new RequestResponseBodyAdviceChain(Collections.singletonList(adviceBean)).     String actual = (String) chain.beforeBodyWrite(this.body, this.returnType, this.contentType, this.converterType, this.request, this.response).     assertEquals("body-MyControllerAdvice", actual). }
false;public;0;10;;@Test public void controllerAdviceNotApplicable() {     Object adviceBean = new ControllerAdviceBean(new TargetedControllerAdvice()).     RequestResponseBodyAdviceChain chain = new RequestResponseBodyAdviceChain(Collections.singletonList(adviceBean)).     String actual = (String) chain.beforeBodyWrite(this.body, this.returnType, this.contentType, this.converterType, this.request, this.response).     assertEquals(this.body, actual). }
false;public;2;4;;@Override public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {     return true. }
false;public;6;7;;@Override public String beforeBodyWrite(String body, MethodParameter returnType, MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType, ServerHttpRequest request, ServerHttpResponse response) {     return body + "-MyControllerAdvice". }
false;public;2;4;;@Override public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {     return true. }
false;public;6;7;;@Override public String beforeBodyWrite(String body, MethodParameter returnType, MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType, ServerHttpRequest request, ServerHttpResponse response) {     return body + "-TargetedControllerAdvice". }
false;public;1;5;;@SuppressWarnings("unused") @ResponseBody public String handle(String body) {     return "". }
