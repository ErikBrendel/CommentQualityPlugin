commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() throws Exception {     ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean().     factoryBean.afterPropertiesSet().     ContentNegotiationManager manager = factoryBean.getObject().     ReactiveAdapterRegistry adapterRegistry = ReactiveAdapterRegistry.getSharedInstance().     this.handler = new ReactiveTypeHandler(adapterRegistry, new SyncTaskExecutor(), manager).     resetRequest(). }
false;private;0;9;;private void resetRequest() {     this.servletRequest = new MockHttpServletRequest().     this.servletResponse = new MockHttpServletResponse().     this.webRequest = new ServletWebRequest(this.servletRequest, this.servletResponse).     AsyncWebRequest webRequest = new StandardServletAsyncWebRequest(this.servletRequest, this.servletResponse).     WebAsyncUtils.getAsyncManager(this.webRequest).setAsyncWebRequest(webRequest).     this.servletRequest.setAsyncSupported(true). }
false;public;0;6;;@Test public void supportsType() throws Exception {     assertTrue(this.handler.isReactiveType(Mono.class)).     assertTrue(this.handler.isReactiveType(Single.class)).     assertTrue(this.handler.isReactiveType(io.reactivex.Single.class)). }
false;public;0;4;;@Test public void doesNotSupportType() throws Exception {     assertFalse(this.handler.isReactiveType(String.class)). }
false;public;0;23;;@Test public void deferredResultSubscriberWithOneValue() throws Exception {     // Mono     MonoProcessor<String> mono = MonoProcessor.create().     testDeferredResultSubscriber(mono, Mono.class, forClass(String.class), () -> mono.onNext("foo"), "foo").     // Mono empty     MonoProcessor<String> monoEmpty = MonoProcessor.create().     testDeferredResultSubscriber(monoEmpty, Mono.class, forClass(String.class), monoEmpty::onComplete, null).     // RxJava 1 Single     AtomicReference<SingleEmitter<String>> ref = new AtomicReference<>().     Single<String> single = Single.fromEmitter(ref::set).     testDeferredResultSubscriber(single, Single.class, forClass(String.class), () -> ref.get().onSuccess("foo"), "foo").     // RxJava 2 Single     AtomicReference<io.reactivex.SingleEmitter<String>> ref2 = new AtomicReference<>().     io.reactivex.Single<String> single2 = io.reactivex.Single.create(ref2::set).     testDeferredResultSubscriber(single2, io.reactivex.Single.class, forClass(String.class), () -> ref2.get().onSuccess("foo"), "foo"). }
false;public;0;5;;@Test public void deferredResultSubscriberWithNoValues() throws Exception {     MonoProcessor<String> monoEmpty = MonoProcessor.create().     testDeferredResultSubscriber(monoEmpty, Mono.class, forClass(String.class), monoEmpty::onComplete, null). }
false;public;0;16;;@Test public void deferredResultSubscriberWithMultipleValues() throws Exception {     // JSON must be preferred for Flux<String> -> List<String> or else we stream     this.servletRequest.addHeader("Accept", "application/json").     Bar bar1 = new Bar("foo").     Bar bar2 = new Bar("bar").     EmitterProcessor<Bar> emitter = EmitterProcessor.create().     testDeferredResultSubscriber(emitter, Flux.class, forClass(Bar.class), () -> {         emitter.onNext(bar1).         emitter.onNext(bar2).         emitter.onComplete().     }, Arrays.asList(bar1, bar2)). }
false;public;0;20;;@Test public void deferredResultSubscriberWithError() throws Exception {     IllegalStateException ex = new IllegalStateException().     // Mono     MonoProcessor<String> mono = MonoProcessor.create().     testDeferredResultSubscriber(mono, Mono.class, forClass(String.class), () -> mono.onError(ex), ex).     // RxJava 1 Single     AtomicReference<SingleEmitter<String>> ref = new AtomicReference<>().     Single<String> single = Single.fromEmitter(ref::set).     testDeferredResultSubscriber(single, Single.class, forClass(String.class), () -> ref.get().onError(ex), ex).     // RxJava 2 Single     AtomicReference<io.reactivex.SingleEmitter<String>> ref2 = new AtomicReference<>().     io.reactivex.Single<String> single2 = io.reactivex.Single.create(ref2::set).     testDeferredResultSubscriber(single2, io.reactivex.Single.class, forClass(String.class), () -> ref2.get().onError(ex), ex). }
false;public;0;15;;@Test public void mediaTypes() throws Exception {     // Media type from request     this.servletRequest.addHeader("Accept", "text/event-stream").     testSseResponse(true).     // Media type from "produces" attribute     Set<MediaType> types = Collections.singleton(MediaType.TEXT_EVENT_STREAM).     this.servletRequest.setAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, types).     testSseResponse(true).     // No media type preferences     testSseResponse(false). }
false;private;1;5;;private void testSseResponse(boolean expectSseEmitter) throws Exception {     ResponseBodyEmitter emitter = handleValue(Flux.empty(), Flux.class, forClass(String.class)).     assertEquals(expectSseEmitter, emitter instanceof SseEmitter).     resetRequest(). }
false;public;0;17;;@Test public void writeServerSentEvents() throws Exception {     this.servletRequest.addHeader("Accept", "text/event-stream").     EmitterProcessor<String> processor = EmitterProcessor.create().     SseEmitter sseEmitter = (SseEmitter) handleValue(processor, Flux.class, forClass(String.class)).     EmitterHandler emitterHandler = new EmitterHandler().     sseEmitter.initialize(emitterHandler).     processor.onNext("foo").     processor.onNext("bar").     processor.onNext("baz").     processor.onComplete().     assertEquals("data:foo\n\ndata:bar\n\ndata:baz\n\n", emitterHandler.getValuesAsText()). }
false;public;0;19;;@Test public void writeServerSentEventsWithBuilder() throws Exception {     ResolvableType type = ResolvableType.forClassWithGenerics(ServerSentEvent.class, String.class).     EmitterProcessor<ServerSentEvent<?>> processor = EmitterProcessor.create().     SseEmitter sseEmitter = (SseEmitter) handleValue(processor, Flux.class, type).     EmitterHandler emitterHandler = new EmitterHandler().     sseEmitter.initialize(emitterHandler).     processor.onNext(ServerSentEvent.builder("foo").id("1").build()).     processor.onNext(ServerSentEvent.builder("bar").id("2").build()).     processor.onNext(ServerSentEvent.builder("baz").id("3").build()).     processor.onComplete().     assertEquals("id:1\ndata:foo\n\nid:2\ndata:bar\n\nid:3\ndata:baz\n\n", emitterHandler.getValuesAsText()). }
false;public;0;24;;@Test public void writeStreamJson() throws Exception {     this.servletRequest.addHeader("Accept", "application/stream+json").     EmitterProcessor<Bar> processor = EmitterProcessor.create().     ResponseBodyEmitter emitter = handleValue(processor, Flux.class, forClass(Bar.class)).     EmitterHandler emitterHandler = new EmitterHandler().     emitter.initialize(emitterHandler).     ServletServerHttpResponse message = new ServletServerHttpResponse(this.servletResponse).     emitter.extendResponse(message).     Bar bar1 = new Bar("foo").     Bar bar2 = new Bar("bar").     processor.onNext(bar1).     processor.onNext(bar2).     processor.onComplete().     assertEquals("application/stream+json", message.getHeaders().getContentType().toString()).     assertEquals(Arrays.asList(bar1, "\n", bar2, "\n"), emitterHandler.getValues()). }
false;public;0;16;;@Test public void writeText() throws Exception {     EmitterProcessor<String> processor = EmitterProcessor.create().     ResponseBodyEmitter emitter = handleValue(processor, Flux.class, forClass(String.class)).     EmitterHandler emitterHandler = new EmitterHandler().     emitter.initialize(emitterHandler).     processor.onNext("The quick").     processor.onNext(" brown fox jumps over ").     processor.onNext("the lazy dog").     processor.onComplete().     assertEquals("The quick brown fox jumps over the lazy dog", emitterHandler.getValuesAsText()). }
false;public;0;22;;@Test public void writeFluxOfString() throws Exception {     // Default to "text/plain"     testEmitterContentType("text/plain").     // Same if no concrete media type     this.servletRequest.addHeader("Accept", "text/*").     testEmitterContentType("text/plain").     // Otherwise pick concrete media type     this.servletRequest.addHeader("Accept", "*/*, text/*, text/markdown").     testEmitterContentType("text/markdown").     // Any concrete media type     this.servletRequest.addHeader("Accept", "*/*, text/*, foo/bar").     testEmitterContentType("foo/bar").     // Including json     this.servletRequest.addHeader("Accept", "*/*, text/*, application/json").     testEmitterContentType("application/json"). }
false;private;1;7;;private void testEmitterContentType(String expected) throws Exception {     ServletServerHttpResponse message = new ServletServerHttpResponse(this.servletResponse).     ResponseBodyEmitter emitter = handleValue(Flux.empty(), Flux.class, forClass(String.class)).     emitter.extendResponse(message).     assertEquals(expected, message.getHeaders().getContentType().toString()).     resetRequest(). }
false;private;5;16;;private void testDeferredResultSubscriber(Object returnValue, Class<?> asyncType, ResolvableType elementType, Runnable produceTask, Object expected) throws Exception {     ResponseBodyEmitter emitter = handleValue(returnValue, asyncType, elementType).     assertNull(emitter).     assertTrue(this.servletRequest.isAsyncStarted()).     assertFalse(WebAsyncUtils.getAsyncManager(this.webRequest).hasConcurrentResult()).     produceTask.run().     assertTrue(WebAsyncUtils.getAsyncManager(this.webRequest).hasConcurrentResult()).     assertEquals(expected, WebAsyncUtils.getAsyncManager(this.webRequest).getConcurrentResult()).     resetRequest(). }
false;private;3;7;;private ResponseBodyEmitter handleValue(Object returnValue, Class<?> asyncType, ResolvableType genericType) throws Exception {     ModelAndViewContainer mavContainer = new ModelAndViewContainer().     MethodParameter returnType = on(TestController.class).resolveReturnType(asyncType, genericType).     return this.handler.handleValue(returnValue, returnType, mavContainer, this.webRequest). }
false;;0;1;;String handleString() {     return null. }
false;;0;1;;Mono<String> handleMono() {     return null. }
false;;0;1;;Single<String> handleSingle() {     return null. }
false;;0;1;;io.reactivex.Single<String> handleSingleRxJava2() {     return null. }
false;;0;1;;Flux<Bar> handleFlux() {     return null. }
false;;0;1;;Flux<String> handleFluxString() {     return null. }
false;;0;1;;Flux<ServerSentEvent<String>> handleFluxSseEventBuilder() {     return null. }
false;public;0;3;;public List<?> getValues() {     return this.values. }
false;public;0;3;;public String getValuesAsText() {     return this.values.stream().map(Object::toString).collect(Collectors.joining()). }
false;public;2;4;;@Override public void send(Object data, MediaType mediaType) throws IOException {     this.values.add(data). }
false;public;0;3;;@Override public void complete() { }
false;public;1;3;;@Override public void completeWithError(Throwable failure) { }
false;public;1;3;;@Override public void onTimeout(Runnable callback) { }
false;public;1;3;;@Override public void onError(Consumer<Throwable> callback) { }
false;public;1;3;;@Override public void onCompletion(Runnable callback) { }
false;public;0;4;;@SuppressWarnings("unused") public String getValue() {     return this.value. }
