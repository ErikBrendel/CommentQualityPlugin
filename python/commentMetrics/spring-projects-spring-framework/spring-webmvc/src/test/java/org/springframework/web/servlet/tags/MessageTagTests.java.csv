commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;16;;@Test public void messageTagWithMessageSourceResolvable() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setMessage(new DefaultMessageSourceResolvable("test")).     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test message", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;16;;@Test public void messageTagWithCode() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("test").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test message", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithCodeAndArgument() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     tag.setArguments("arg1").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test arg1 message {1}", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithCodeAndArguments() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     tag.setArguments("arg1,arg2").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test arg1 message arg2", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;18;;@Test public void messageTagWithCodeAndStringArgumentWithCustomSeparator() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     tag.setArguments("arg1,1.arg2,2").     tag.setArgumentSeparator(".").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test arg1,1 message arg2,2", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithCodeAndArrayArgument() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     tag.setArguments(new Object[] { "arg1", 5 }).     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test arg1 message 5", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithCodeAndObjectArgument() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     tag.setArguments(5).     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test 5 message {1}", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;18;;@Test public void messageTagWithCodeAndArgumentAndNestedArgument() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     tag.setArguments(5).     tag.addArgument(7).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test 5 message 7", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithCodeAndNestedArgument() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     tag.addArgument(7).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test 7 message {1}", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;18;;@Test public void messageTagWithCodeAndNestedArguments() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("testArgs").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     tag.addArgument("arg1").     tag.addArgument(6).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test arg1 message 6", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithCodeAndText() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setCode("test").     tag.setText("testtext").     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test message", (message.toString())). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithText() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setText("test & text Ã©").     tag.setHtmlEscape(true).     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertTrue("Correct message", message.toString().startsWith("test &amp. text &")). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;19;;@Test public void messageTagWithTextEncodingEscaped() throws JspException {     PageContext pc = createPageContext().     pc.getServletContext().setInitParameter(WebUtils.RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM, "true").     pc.getResponse().setCharacterEncoding("UTF-8").     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setText("test <&> Ã©").     tag.setHtmlEscape(true).     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test &lt.&amp.&gt. Ã©", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;17;;@Test public void messageTagWithTextAndJavaScriptEscape() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setText("' test & text \\").     tag.setJavaScriptEscape(true).     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "\\' test & text \\\\", message.toString()). }
false;protected;1;4;;@Override protected void writeMessage(String msg) {     message.append(msg). }
false;public;0;18;;@Test public void messageTagWithTextAndHtmlEscapeAndJavaScriptEscape() throws JspException {     PageContext pc = createPageContext().     final StringBuffer message = new StringBuffer().     MessageTag tag = new MessageTag() {          @Override         protected void writeMessage(String msg) {             message.append(msg).         }     }.     tag.setPageContext(pc).     tag.setText("' test & text \\").     tag.setHtmlEscape(true).     tag.setJavaScriptEscape(true).     assertTrue("Correct doStartTag return value", tag.doStartTag() == Tag.EVAL_BODY_INCLUDE).     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "&#39. test &amp. text \\\\", message.toString()). }
false;public;0;22;;@Test public void messageWithVarAndScope() throws JspException {     PageContext pc = createPageContext().     MessageTag tag = new MessageTag().     tag.setPageContext(pc).     tag.setText("text & text").     tag.setVar("testvar").     tag.setScope("page").     tag.doStartTag().     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("text & text", pc.getAttribute("testvar")).     tag.release().     tag = new MessageTag().     tag.setPageContext(pc).     tag.setCode("test").     tag.setVar("testvar2").     tag.doStartTag().     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test message", pc.getAttribute("testvar2")).     tag.release(). }
false;public;0;21;;@Test public void messageWithVar() throws JspException {     PageContext pc = createPageContext().     MessageTag tag = new MessageTag().     tag.setPageContext(pc).     tag.setText("text & text").     tag.setVar("testvar").     tag.doStartTag().     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("text & text", pc.getAttribute("testvar")).     tag.release().     // try to reuse     tag.setPageContext(pc).     tag.setCode("test").     tag.setVar("testvar").     tag.doStartTag().     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()).     assertEquals("Correct message", "test message", pc.getAttribute("testvar")). }
false;public;0;14;;@Test public void nullMessageSource() throws JspException {     PageContext pc = createPageContext().     ConfigurableWebApplicationContext ctx = (ConfigurableWebApplicationContext) RequestContextUtils.findWebApplicationContext((HttpServletRequest) pc.getRequest(), pc.getServletContext()).     ctx.close().     MessageTag tag = new MessageTag().     tag.setPageContext(pc).     tag.setCode("test").     tag.setVar("testvar2").     tag.doStartTag().     assertEquals("Correct doEndTag return value", Tag.EVAL_PAGE, tag.doEndTag()). }
false;public;0;18;;@Test @SuppressWarnings("rawtypes") public void requestContext() throws ServletException {     PageContext pc = createPageContext().     RequestContext rc = new RequestContext((HttpServletRequest) pc.getRequest(), pc.getServletContext()).     assertEquals("test message", rc.getMessage("test")).     assertEquals("test message", rc.getMessage("test", (Object[]) null)).     assertEquals("test message", rc.getMessage("test", "default")).     assertEquals("test message", rc.getMessage("test", (Object[]) null, "default")).     assertEquals("test arg1 message arg2", rc.getMessage("testArgs", new String[] { "arg1", "arg2" }, "default")).     assertEquals("test arg1 message arg2", rc.getMessage("testArgs", Arrays.asList(new String[] { "arg1", "arg2" }), "default")).     assertEquals("default", rc.getMessage("testa", "default")).     assertEquals("default", rc.getMessage("testa", (List) null, "default")).     MessageSourceResolvable resolvable = new DefaultMessageSourceResolvable(new String[] { "test" }).     assertEquals("test message", rc.getMessage(resolvable)). }
