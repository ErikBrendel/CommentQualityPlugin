commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setup() throws Exception {     Method method = getClass().getDeclaredMethod("handle", HttpEntity.class, HttpEntity.class).     paramList = new MethodParameter(method, 0).     paramSimpleBean = new MethodParameter(method, 1).     mavContainer = new ModelAndViewContainer().     binderFactory = new ValidatingBinderFactory().     servletRequest = new MockHttpServletRequest().     servletResponse = new MockHttpServletResponse().     servletRequest.setMethod("POST").     webRequest = new ServletWebRequest(servletRequest, servletResponse). }
false;public;0;17;;@Test public void resolveArgument() throws Exception {     String content = "{\"name\" : \"Jad\"}".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType("application/json").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters).     @SuppressWarnings("unchecked")     HttpEntity<SimpleBean> result = (HttpEntity<SimpleBean>) processor.resolveArgument(paramSimpleBean, mavContainer, webRequest, binderFactory).     assertNotNull(result).     assertEquals("Jad", result.getBody().getName()). }
false;public;0;15;;// SPR-12861 @Test public void resolveArgumentWithEmptyBody() throws Exception {     this.servletRequest.setContent(new byte[0]).     this.servletRequest.setContentType("application/json").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters).     HttpEntity<?> result = (HttpEntity<?>) processor.resolveArgument(this.paramSimpleBean, this.mavContainer, this.webRequest, this.binderFactory).     assertNotNull(result).     assertNull(result.getBody()). }
false;public;0;18;;@Test public void resolveGenericArgument() throws Exception {     String content = "[{\"name\" : \"Jad\"}, {\"name\" : \"Robert\"}]".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType("application/json").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters).     @SuppressWarnings("unchecked")     HttpEntity<List<SimpleBean>> result = (HttpEntity<List<SimpleBean>>) processor.resolveArgument(paramList, mavContainer, webRequest, binderFactory).     assertNotNull(result).     assertEquals("Jad", result.getBody().get(0).getName()).     assertEquals("Robert", result.getBody().get(1).getName()). }
false;public;0;21;;@Test public void resolveArgumentTypeVariable() throws Exception {     Method method = MySimpleParameterizedController.class.getMethod("handleDto", HttpEntity.class).     HandlerMethod handlerMethod = new HandlerMethod(new MySimpleParameterizedController(), method).     MethodParameter methodParam = handlerMethod.getMethodParameters()[0].     String content = "{\"name\" : \"Jad\"}".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters).     @SuppressWarnings("unchecked")     HttpEntity<SimpleBean> result = (HttpEntity<SimpleBean>) processor.resolveArgument(methodParam, mavContainer, webRequest, binderFactory).     assertNotNull(result).     assertEquals("Jad", result.getBody().getName()). }
false;public;0;17;;// SPR-12811 @Test public void jacksonTypeInfoList() throws Exception {     Method method = JacksonController.class.getMethod("handleList").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters).     Object returnValue = new JacksonController().handleList().     processor.handleReturnValue(returnValue, methodReturnType, this.mavContainer, this.webRequest).     String content = this.servletResponse.getContentAsString().     assertTrue(content.contains("\"type\":\"foo\"")).     assertTrue(content.contains("\"type\":\"bar\"")). }
false;public;0;16;;// SPR-13423 @Test public void handleReturnValueCharSequence() throws Exception {     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new ByteArrayHttpMessageConverter()).     converters.add(new StringHttpMessageConverter()).     Method method = getClass().getDeclaredMethod("handle").     MethodParameter returnType = new MethodParameter(method, -1).     ResponseEntity<StringBuilder> returnValue = ResponseEntity.ok(new StringBuilder("Foo")).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters).     processor.handleReturnValue(returnValue, returnType, mavContainer, webRequest).     assertEquals("text/plain.charset=ISO-8859-1", servletResponse.getHeader("Content-Type")).     assertEquals("Foo", servletResponse.getContentAsString()). }
false;private;2;3;;@SuppressWarnings("unused") private void handle(HttpEntity<List<SimpleBean>> arg1, HttpEntity<SimpleBean> arg2) { }
false;private;0;3;;private ResponseEntity<CharSequence> handle() {     return null. }
false;public;1;2;;public void handleDto(HttpEntity<DTO> dto) { }
false;;0;1;;Long getId().
false;;1;1;;void setId(Long id).
false;public;0;4;;@Override public Long getId() {     return id. }
false;public;1;4;;@Override public void setId(Long id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;4;;@SuppressWarnings("unused") public void setName(String name) {     this.name = name. }
false;public;3;8;;@Override public WebDataBinder createBinder(NativeWebRequest webRequest, @Nullable Object target, String objectName) {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     WebDataBinder dataBinder = new WebDataBinder(target, objectName).     dataBinder.setValidator(validator).     return dataBinder. }
false;public;0;3;;public String getParentProperty() {     return parentProperty. }
false;public;1;3;;public void setParentProperty(String parentProperty) {     this.parentProperty = parentProperty. }
false;public;0;8;;@RequestMapping @ResponseBody public HttpEntity<List<ParentClass>> handleList() {     List<ParentClass> list = new ArrayList<>().     list.add(new Foo("foo")).     list.add(new Bar("bar")).     return new HttpEntity<>(list). }
