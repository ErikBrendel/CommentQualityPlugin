commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void resolveFromClasspath() throws IOException {     Resource location = new ClassPathResource("test/", PathResourceResolver.class).     String requestPath = "bar.css".     Resource actual = this.resolver.resolveResource(null, requestPath, Collections.singletonList(location), null).     assertEquals(location.createRelative(requestPath), actual). }
false;public;0;8;;@Test public void resolveFromClasspathRoot() {     Resource location = new ClassPathResource("/").     String requestPath = "org/springframework/web/servlet/resource/test/bar.css".     Resource actual = this.resolver.resolveResource(null, requestPath, Collections.singletonList(location), null).     assertNotNull(actual). }
false;public;0;18;;@Test public void checkResource() throws IOException {     Resource location = new ClassPathResource("test/", PathResourceResolver.class).     testCheckResource(location, "../testsecret/secret.txt").     testCheckResource(location, "test/../../testsecret/secret.txt").     location = new UrlResource(getClass().getResource("./test/")).     String secretPath = new UrlResource(getClass().getResource("testsecret/secret.txt")).getURL().getPath().     testCheckResource(location, "file:" + secretPath).     testCheckResource(location, "/file:" + secretPath).     testCheckResource(location, "/" + secretPath).     testCheckResource(location, "////../.." + secretPath).     testCheckResource(location, "/%2E%2E/testsecret/secret.txt").     testCheckResource(location, "/%2e%2e/testsecret/secret.txt").     testCheckResource(location, " " + secretPath).     testCheckResource(location, "/  " + secretPath).     testCheckResource(location, "url:" + secretPath). }
false;private;2;8;;private void testCheckResource(Resource location, String requestPath) throws IOException {     List<Resource> locations = Collections.singletonList(location).     Resource actual = this.resolver.resolveResource(null, requestPath, locations, null).     if (!location.createRelative(requestPath).exists() && !requestPath.contains(":")) {         fail(requestPath + " doesn't actually exist as a relative path").     }     assertNull(actual). }
false;public;0;12;;@Test public void checkResourceWithAllowedLocations() {     this.resolver.setAllowedLocations(new ClassPathResource("test/", PathResourceResolver.class), new ClassPathResource("testalternatepath/", PathResourceResolver.class)).     Resource location = getResource("main.css").     List<Resource> locations = Collections.singletonList(location).     String actual = this.resolver.resolveUrlPath("../testalternatepath/bar.css", locations, null).     assertEquals("../testalternatepath/bar.css", actual). }
true;public;0;11;// SPR-12432 ;// SPR-12432 @Test public void checkServletContextResource() throws Exception {     Resource classpathLocation = new ClassPathResource("test/", PathResourceResolver.class).     MockServletContext context = new MockServletContext().     ServletContextResource servletContextLocation = new ServletContextResource(context, "/webjars/").     ServletContextResource resource = new ServletContextResource(context, "/webjars/webjar-foo/1.0/foo.js").     assertFalse(this.resolver.checkResource(resource, classpathLocation)).     assertTrue(this.resolver.checkResource(resource, servletContextLocation)). }
true;public;0;7;// SPR-12624 ;// SPR-12624 @Test public void checkRelativeLocation() throws Exception {     String locationUrl = new UrlResource(getClass().getResource("./test/")).getURL().toExternalForm().     Resource location = new UrlResource(locationUrl.replace("/springframework", "/../org/springframework")).     assertNotNull(this.resolver.resolveResource(null, "main.css", Collections.singletonList(location), null)). }
true;public;0;5;// SPR-12747 ;// SPR-12747 @Test public void checkFileLocation() throws Exception {     Resource resource = getResource("main.css").     assertTrue(this.resolver.checkResource(resource, resource)). }
true;public;0;7;// SPR-13241 ;// SPR-13241 @Test public void resolvePathRootResource() {     Resource webjarsLocation = new ClassPathResource("/META-INF/resources/webjars/", PathResourceResolver.class).     String path = this.resolver.resolveUrlPathInternal("", Collections.singletonList(webjarsLocation), null).     assertNull(path). }
false;public;0;24;;@Test public void relativePathEncodedForUrlResource() throws Exception {     TestUrlResource location = new TestUrlResource("file:///tmp").     List<TestUrlResource> locations = Collections.singletonList(location).     // ISO-8859-1     this.resolver.setUrlPathHelper(new UrlPathHelper()).     this.resolver.setLocationCharsets(Collections.singletonMap(location, StandardCharsets.ISO_8859_1)).     this.resolver.resolveResource(new MockHttpServletRequest(), "/Ä .ä.txt", locations, null).     assertEquals("%C4%20%3B%E4.txt", location.getSavedRelativePath()).     // UTF-8     this.resolver.setLocationCharsets(Collections.singletonMap(location, StandardCharsets.UTF_8)).     this.resolver.resolveResource(new MockHttpServletRequest(), "/Ä .ä.txt", locations, null).     assertEquals("%C3%84%20%3B%C3%A4.txt", location.getSavedRelativePath()).     // UTF-8 by default     this.resolver.setLocationCharsets(Collections.emptyMap()).     this.resolver.resolveResource(new MockHttpServletRequest(), "/Ä .ä.txt", locations, null).     assertEquals("%C3%84%20%3B%C3%A4.txt", location.getSavedRelativePath()). }
false;private;1;3;;private Resource getResource(String filePath) {     return new ClassPathResource("test/" + filePath, getClass()). }
false;public;0;3;;public String getSavedRelativePath() {     return this.relativePath. }
false;public;1;5;;@Override public Resource createRelative(String relativePath) throws MalformedURLException {     this.relativePath = relativePath.     return this. }
