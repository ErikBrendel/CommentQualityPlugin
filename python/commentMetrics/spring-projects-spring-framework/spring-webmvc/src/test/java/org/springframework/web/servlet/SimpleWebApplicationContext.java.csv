commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Override public void refresh() throws BeansException {     MutablePropertyValues pvs = new MutablePropertyValues().     pvs.add("commandClass", "org.springframework.tests.sample.beans.TestBean").     pvs.add("formView", "form").     registerSingleton("/locale.do", LocaleChecker.class).     addMessage("test", Locale.ENGLISH, "test message").     addMessage("test", Locale.CANADA, "Canadian & test message").     addMessage("testArgs", Locale.ENGLISH, "test {0} message {1}").     addMessage("testArgsFormat", Locale.ENGLISH, "test {0} message {1,number,#.##} X").     registerSingleton(UiApplicationContextUtils.THEME_SOURCE_BEAN_NAME, DummyThemeSource.class).     registerSingleton("handlerMapping", BeanNameUrlHandlerMapping.class).     registerSingleton("viewResolver", InternalResourceViewResolver.class).     pvs = new MutablePropertyValues().     pvs.add("location", "org/springframework/web/context/WEB-INF/sessionContext.xml").     registerSingleton("viewResolver2", XmlViewResolver.class, pvs).     super.refresh(). }
false;public;2;14;;@Override public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     if (!(RequestContextUtils.findWebApplicationContext(request) instanceof SimpleWebApplicationContext)) {         throw new ServletException("Incorrect WebApplicationContext").     }     if (!(RequestContextUtils.getLocaleResolver(request) instanceof AcceptHeaderLocaleResolver)) {         throw new ServletException("Incorrect LocaleResolver").     }     if (!Locale.CANADA.equals(RequestContextUtils.getLocale(request))) {         throw new ServletException("Incorrect Locale").     }     return null. }
false;public;1;4;;@Override public long getLastModified(HttpServletRequest request) {     return 1427846400000L. }
false;public;1;9;;@Override public Theme getTheme(String themeName) {     if (AbstractThemeResolver.ORIGINAL_DEFAULT_THEME_NAME.equals(themeName)) {         return new SimpleTheme(AbstractThemeResolver.ORIGINAL_DEFAULT_THEME_NAME, this.messageSource).     } else {         return null.     } }
