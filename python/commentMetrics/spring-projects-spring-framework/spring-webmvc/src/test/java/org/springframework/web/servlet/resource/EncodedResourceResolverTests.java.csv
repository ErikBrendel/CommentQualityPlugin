commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void createGzippedResources() throws IOException {     createGzippedFile("/js/foo.js").     createGzippedFile("foo.css"). }
false;static;1;12;;static void createGzippedFile(String filePath) throws IOException {     Resource location = new ClassPathResource("test/", EncodedResourceResolverTests.class).     Resource resource = new FileSystemResource(location.createRelative(filePath).getFile()).     Path gzFilePath = Paths.get(resource.getFile().getAbsolutePath() + ".gz").     Files.deleteIfExists(gzFilePath).     File gzFile = Files.createFile(gzFilePath).toFile().     GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(gzFile)).     FileCopyUtils.copy(resource.getInputStream(), out).     gzFile.deleteOnExit(). }
false;public;0;18;;@Before public void setup() {     this.cache = new ConcurrentMapCache("resourceCache").     VersionResourceResolver versionResolver = new VersionResourceResolver().     versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy())).     List<ResourceResolver> resolvers = new ArrayList<>().     resolvers.add(new CachingResourceResolver(this.cache)).     resolvers.add(new EncodedResourceResolver()).     resolvers.add(versionResolver).     resolvers.add(new PathResourceResolver()).     this.resolver = new DefaultResourceResolverChain(resolvers).     this.locations = new ArrayList<>().     this.locations.add(new ClassPathResource("test/", getClass())).     this.locations.add(new ClassPathResource("testalternatepath/", getClass())). }
false;public;0;15;;@Test public void resolveGzipped() {     String file = "js/foo.js".     MockHttpServletRequest request = new MockHttpServletRequest().     request.addHeader("Accept-Encoding", "gzip").     Resource actual = this.resolver.resolveResource(request, file, this.locations).     assertEquals(getResource(file + ".gz").getDescription(), actual.getDescription()).     assertEquals(getResource(file).getFilename(), actual.getFilename()).     assertTrue(actual instanceof HttpResource).     HttpHeaders headers = ((HttpResource) actual).getResponseHeaders().     assertEquals("gzip", headers.getFirst(HttpHeaders.CONTENT_ENCODING)).     assertEquals("Accept-Encoding", headers.getFirst(HttpHeaders.VARY)). }
false;public;0;11;;@Test public void resolveGzippedWithVersion() {     String file = "foo-e36d2e05253c6c7085a91522ce43a0b4.css".     MockHttpServletRequest request = new MockHttpServletRequest().     request.addHeader("Accept-Encoding", "gzip").     Resource resolved = this.resolver.resolveResource(request, file, this.locations).     assertEquals(getResource("foo.css.gz").getDescription(), resolved.getDescription()).     assertEquals(getResource("foo.css").getFilename(), resolved.getFilename()).     assertTrue(resolved instanceof HttpResource). }
false;public;0;20;;@Test public void resolveFromCacheWithEncodingVariants() {     // 1. Resolve, and cache .gz variant     String file = "js/foo.js".     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/js/foo.js").     request.addHeader("Accept-Encoding", "gzip").     Resource resolved = this.resolver.resolveResource(request, file, this.locations).     assertEquals(getResource(file + ".gz").getDescription(), resolved.getDescription()).     assertEquals(getResource(file).getFilename(), resolved.getFilename()).     assertTrue(resolved instanceof HttpResource).     // 2. Resolve unencoded resource     request = new MockHttpServletRequest("GET", "/js/foo.js").     resolved = this.resolver.resolveResource(request, file, this.locations).     assertEquals(getResource(file).getDescription(), resolved.getDescription()).     assertEquals(getResource(file).getFilename(), resolved.getFilename()).     assertFalse(resolved instanceof HttpResource). }
false;public;0;8;;// SPR-13149 @Test public void resolveWithNullRequest() {     String file = "js/foo.js".     Resource resolved = this.resolver.resolveResource(null, file, this.locations).     assertEquals(getResource(file).getDescription(), resolved.getDescription()).     assertEquals(getResource(file).getFilename(), resolved.getFilename()). }
false;private;1;3;;private Resource getResource(String filePath) {     return new ClassPathResource("test/" + filePath, getClass()). }
