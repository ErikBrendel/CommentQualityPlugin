commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setup() throws Exception {     TestController testController = new TestController().     this.fooMethod = new HandlerMethod(testController, "foo").     this.fooParamMethod = new HandlerMethod(testController, "fooParam").     this.barMethod = new HandlerMethod(testController, "bar").     this.emptyMethod = new HandlerMethod(testController, "empty").     this.handlerMapping = new TestRequestMappingInfoHandlerMapping().     this.handlerMapping.registerHandler(testController).     this.handlerMapping.setRemoveSemicolonContent(false). }
false;public;0;8;;@Test public void getMappingPathPatterns() throws Exception {     String[] patterns = { "/foo/*", "/foo", "/bar/*", "/bar" }.     RequestMappingInfo info = RequestMappingInfo.paths(patterns).build().     Set<String> actual = this.handlerMapping.getMappingPathPatterns(info).     assertEquals(new HashSet<>(Arrays.asList(patterns)), actual). }
false;public;0;7;;@Test public void getHandlerDirectMatch() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo").     HandlerMethod handlerMethod = getHandler(request).     assertEquals(this.fooMethod.getMethod(), handlerMethod.getMethod()). }
false;public;0;6;;@Test public void getHandlerGlobMatch() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bar").     HandlerMethod handlerMethod = getHandler(request).     assertEquals(this.barMethod.getMethod(), handlerMethod.getMethod()). }
false;public;0;12;;@Test public void getHandlerEmptyPathMatch() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("GET", "").     HandlerMethod handlerMethod = getHandler(request).     assertEquals(this.emptyMethod.getMethod(), handlerMethod.getMethod()).     request = new MockHttpServletRequest("GET", "/").     handlerMethod = getHandler(request).     assertEquals(this.emptyMethod.getMethod(), handlerMethod.getMethod()). }
false;public;0;8;;@Test public void getHandlerBestMatch() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo").     request.setParameter("p", "anything").     HandlerMethod handlerMethod = getHandler(request).     assertEquals(this.fooParamMethod.getMethod(), handlerMethod.getMethod()). }
false;public;0;12;;@Test public void getHandlerRequestMethodNotAllowed() throws Exception {     try {         MockHttpServletRequest request = new MockHttpServletRequest("POST", "/bar").         this.handlerMapping.getHandler(request).         fail("HttpRequestMethodNotSupportedException expected").     } catch (HttpRequestMethodNotSupportedException ex) {         assertArrayEquals("Invalid supported methods", new String[] { "GET", "HEAD" }, ex.getSupportedMethods()).     } }
false;public;0;7;;// SPR-9603 @Test(expected = HttpMediaTypeNotAcceptableException.class) public void getHandlerRequestMethodMatchFalsePositive() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/users").     request.addHeader("Accept", "application/xml").     this.handlerMapping.registerHandler(new UserController()).     this.handlerMapping.getHandler(request). }
false;public;0;6;;// SPR-8462 @Test public void getHandlerMediaTypeNotSupported() throws Exception {     testHttpMediaTypeNotSupportedException("/person/1").     testHttpMediaTypeNotSupportedException("/person/1/").     testHttpMediaTypeNotSupportedException("/person/1.json"). }
false;public;0;7;;@Test public void getHandlerHttpOptions() throws Exception {     testHttpOptions("/foo", "GET,HEAD,OPTIONS").     testHttpOptions("/person/1", "PUT,OPTIONS").     testHttpOptions("/persons", "GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS").     testHttpOptions("/something", "PUT,POST"). }
false;public;0;12;;@Test public void getHandlerTestInvalidContentType() throws Exception {     try {         MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/person/1").         request.setContentType("bogus").         this.handlerMapping.getHandler(request).         fail("HttpMediaTypeNotSupportedException expected").     } catch (HttpMediaTypeNotSupportedException ex) {         assertEquals("Invalid mime type \"bogus\": does not contain '/'", ex.getMessage()).     } }
false;public;0;6;;// SPR-8462 @Test public void getHandlerMediaTypeNotAccepted() throws Exception {     testHttpMediaTypeNotAcceptableException("/persons").     testHttpMediaTypeNotAcceptableException("/persons/").     testHttpMediaTypeNotAcceptableException("/persons.json"). }
false;public;0;14;;// SPR-12854 @Test public void getHandlerUnsatisfiedServletRequestParameterException() throws Exception {     try {         MockHttpServletRequest request = new MockHttpServletRequest("GET", "/params").         this.handlerMapping.getHandler(request).         fail("UnsatisfiedServletRequestParameterException expected").     } catch (UnsatisfiedServletRequestParameterException ex) {         List<String[]> groups = ex.getParamConditionGroups().         assertEquals(2, groups.size()).         assertThat(Arrays.asList("foo=bar", "bar=baz"), containsInAnyOrder(groups.get(0)[0], groups.get(1)[0])).     } }
false;public;0;15;;@Test public void getHandlerProducibleMediaTypesAttribute() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/content").     request.addHeader("Accept", "application/xml").     this.handlerMapping.getHandler(request).     String name = HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE.     assertEquals(Collections.singleton(MediaType.APPLICATION_XML), request.getAttribute(name)).     request = new MockHttpServletRequest("GET", "/content").     request.addHeader("Accept", "application/json").     this.handlerMapping.getHandler(request).     assertNull("Negated expression shouldn't be listed as producible type", request.getAttribute(name)). }
false;public;0;19;;@Test public void getHandlerMappedInterceptors() throws Exception {     String path = "/foo".     HandlerInterceptor interceptor = new HandlerInterceptorAdapter() {     }.     MappedInterceptor mappedInterceptor = new MappedInterceptor(new String[] { path }, interceptor).     TestRequestMappingInfoHandlerMapping mapping = new TestRequestMappingInfoHandlerMapping().     mapping.registerHandler(new TestController()).     mapping.setInterceptors(new Object[] { mappedInterceptor }).     mapping.setApplicationContext(new StaticWebApplicationContext()).     HandlerExecutionChain chain = mapping.getHandler(new MockHttpServletRequest("GET", path)).     assertNotNull(chain).     assertNotNull(chain.getInterceptors()).     assertSame(interceptor, chain.getInterceptors()[0]).     chain = mapping.getHandler(new MockHttpServletRequest("GET", "/invalid")).     assertNull(chain). }
false;public;0;15;;@SuppressWarnings("unchecked") @Test public void handleMatchUriTemplateVariables() {     RequestMappingInfo key = RequestMappingInfo.paths("/{path1}/{path2}").build().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/1/2").     String lookupPath = new UrlPathHelper().getLookupPathForRequest(request).     this.handlerMapping.handleMatch(key, lookupPath, request).     String name = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE.     Map<String, String> uriVariables = (Map<String, String>) request.getAttribute(name).     assertNotNull(uriVariables).     assertEquals("1", uriVariables.get("path1")).     assertEquals("2", uriVariables.get("path2")). }
false;public;0;20;;@SuppressWarnings("unchecked") // SPR-9098 @Test public void handleMatchUriTemplateVariablesDecode() {     RequestMappingInfo key = RequestMappingInfo.paths("/{group}/{identifier}").build().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/group/a%2Fb").     UrlPathHelper pathHelper = new UrlPathHelper().     pathHelper.setUrlDecode(false).     String lookupPath = pathHelper.getLookupPathForRequest(request).     this.handlerMapping.setUrlPathHelper(pathHelper).     this.handlerMapping.handleMatch(key, lookupPath, request).     String name = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE.     Map<String, String> uriVariables = (Map<String, String>) request.getAttribute(name).     assertNotNull(uriVariables).     assertEquals("group", uriVariables.get("group")).     assertEquals("a/b", uriVariables.get("identifier")). }
false;public;0;8;;@Test public void handleMatchBestMatchingPatternAttribute() {     RequestMappingInfo key = RequestMappingInfo.paths("/{path1}/2", "/**").build().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/1/2").     this.handlerMapping.handleMatch(key, "/1/2", request).     assertEquals("/{path1}/2", request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE)). }
false;public;0;9;;@Test public void handleMatchBestMatchingPatternAttributeNoPatternsDefined() {     RequestMappingInfo key = RequestMappingInfo.paths().build().     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/1/2").     this.handlerMapping.handleMatch(key, "/1/2", request).     assertEquals("/1/2", request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE)). }
false;public;0;55;;@Test public void handleMatchMatrixVariables() {     MockHttpServletRequest request.     MultiValueMap<String, String> matrixVariables.     Map<String, String> uriVariables.     // URI var parsed into path variable + matrix params..     request = new MockHttpServletRequest().     handleMatch(request, "/{cars}", "/cars.colors=red,blue,green.year=2012").     matrixVariables = getMatrixVariables(request, "cars").     uriVariables = getUriTemplateVariables(request).     assertNotNull(matrixVariables).     assertEquals(Arrays.asList("red", "blue", "green"), matrixVariables.get("colors")).     assertEquals("2012", matrixVariables.getFirst("year")).     assertEquals("cars", uriVariables.get("cars")).     // URI var with regex for path variable, and URI var for matrix params..     request = new MockHttpServletRequest().     handleMatch(request, "/{cars:[^.]+}{params}", "/cars.colors=red,blue,green.year=2012").     matrixVariables = getMatrixVariables(request, "params").     uriVariables = getUriTemplateVariables(request).     assertNotNull(matrixVariables).     assertEquals(Arrays.asList("red", "blue", "green"), matrixVariables.get("colors")).     assertEquals("2012", matrixVariables.getFirst("year")).     assertEquals("cars", uriVariables.get("cars")).     assertEquals(".colors=red,blue,green.year=2012", uriVariables.get("params")).     // URI var with regex for path variable, and (empty) URI var for matrix params..     request = new MockHttpServletRequest().     handleMatch(request, "/{cars:[^.]+}{params}", "/cars").     matrixVariables = getMatrixVariables(request, "params").     uriVariables = getUriTemplateVariables(request).     assertNull(matrixVariables).     assertEquals("cars", uriVariables.get("cars")).     assertEquals("", uriVariables.get("params")).     // SPR-11897     request = new MockHttpServletRequest().     handleMatch(request, "/{foo}", "/a=42.b=c").     matrixVariables = getMatrixVariables(request, "foo").     uriVariables = getUriTemplateVariables(request).     assertNotNull(matrixVariables).     assertEquals(2, matrixVariables.size()).     assertEquals("42", matrixVariables.getFirst("a")).     assertEquals("c", matrixVariables.getFirst("b")).     assertEquals("a=42", uriVariables.get("foo")). }
false;public;0;21;;// SPR-10140, SPR-16867 @Test public void handleMatchMatrixVariablesDecoding() {     MockHttpServletRequest request.     UrlPathHelper urlPathHelper = new UrlPathHelper().     urlPathHelper.setUrlDecode(false).     urlPathHelper.setRemoveSemicolonContent(false).     this.handlerMapping.setUrlPathHelper(urlPathHelper).     request = new MockHttpServletRequest().     handleMatch(request, "/{cars}", "/cars.mvar=a%2Fb").     MultiValueMap<String, String> matrixVariables = getMatrixVariables(request, "cars").     Map<String, String> uriVariables = getUriTemplateVariables(request).     assertNotNull(matrixVariables).     assertEquals(Collections.singletonList("a/b"), matrixVariables.get("mvar")).     assertEquals("cars", uriVariables.get("cars")). }
false;private;1;5;;private HandlerMethod getHandler(MockHttpServletRequest request) throws Exception {     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     assertNotNull(chain).     return (HandlerMethod) chain.getHandler(). }
false;private;1;13;;private void testHttpMediaTypeNotSupportedException(String url) throws Exception {     try {         MockHttpServletRequest request = new MockHttpServletRequest("PUT", url).         request.setContentType("application/json").         this.handlerMapping.getHandler(request).         fail("HttpMediaTypeNotSupportedException expected").     } catch (HttpMediaTypeNotSupportedException ex) {         assertEquals("Invalid supported consumable media types", Collections.singletonList(new MediaType("application", "xml")), ex.getSupportedMediaTypes()).     } }
false;private;2;12;;private void testHttpOptions(String requestURI, String allowHeader) throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("OPTIONS", requestURI).     HandlerMethod handlerMethod = getHandler(request).     ServletWebRequest webRequest = new ServletWebRequest(request).     ModelAndViewContainer mavContainer = new ModelAndViewContainer().     Object result = new InvocableHandlerMethod(handlerMethod).invokeForRequest(webRequest, mavContainer).     assertNotNull(result).     assertEquals(HttpHeaders.class, result.getClass()).     assertEquals(allowHeader, ((HttpHeaders) result).getFirst("Allow")). }
false;private;1;13;;private void testHttpMediaTypeNotAcceptableException(String url) throws Exception {     try {         MockHttpServletRequest request = new MockHttpServletRequest("GET", url).         request.addHeader("Accept", "application/json").         this.handlerMapping.getHandler(request).         fail("HttpMediaTypeNotAcceptableException expected").     } catch (HttpMediaTypeNotAcceptableException ex) {         assertEquals("Invalid supported producible media types", Collections.singletonList(new MediaType("application", "xml")), ex.getSupportedMediaTypes()).     } }
false;private;3;4;;private void handleMatch(MockHttpServletRequest request, String pattern, String lookupPath) {     RequestMappingInfo info = RequestMappingInfo.paths(pattern).build().     this.handlerMapping.handleMatch(info, lookupPath, request). }
false;private;2;5;;@SuppressWarnings("unchecked") private MultiValueMap<String, String> getMatrixVariables(HttpServletRequest request, String uriVarName) {     String attrName = HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE.     return ((Map<String, MultiValueMap<String, String>>) request.getAttribute(attrName)).get(uriVarName). }
false;private;1;5;;@SuppressWarnings("unchecked") private Map<String, String> getUriTemplateVariables(HttpServletRequest request) {     String attrName = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE.     return (Map<String, String>) request.getAttribute(attrName). }
false;public;0;3;;@RequestMapping(value = "/foo", method = RequestMethod.GET) public void foo() { }
false;public;0;3;;@RequestMapping(value = "/foo", method = RequestMethod.GET, params = "p") public void fooParam() { }
false;public;0;3;;@RequestMapping(value = "/ba*", method = { RequestMethod.GET, RequestMethod.HEAD }) public void bar() { }
false;public;0;3;;@RequestMapping(value = "") public void empty() { }
false;public;1;3;;@RequestMapping(value = "/person/{id}", method = RequestMethod.PUT, consumes = "application/xml") public void consumes(@RequestBody String text) { }
false;public;0;4;;@RequestMapping(value = "/persons", produces = "application/xml") public String produces() {     return "". }
false;public;0;4;;@RequestMapping(value = "/params", params = "foo=bar") public String param() {     return "". }
false;public;0;4;;@RequestMapping(value = "/params", params = "bar=baz") public String param2() {     return "". }
false;public;0;4;;@RequestMapping(value = "/content", produces = "application/xml") public String xmlContent() {     return "". }
false;public;0;4;;@RequestMapping(value = "/content", produces = "!application/xml") public String nonXmlContent() {     return "". }
false;public;0;6;;@RequestMapping(value = "/something", method = RequestMethod.OPTIONS) public HttpHeaders fooOptions() {     HttpHeaders headers = new HttpHeaders().     headers.add("Allow", "PUT,POST").     return headers. }
false;public;0;3;;@RequestMapping(value = "/users", method = RequestMethod.GET, produces = "application/json") public void getUser() { }
false;public;0;3;;@RequestMapping(value = "/users", method = RequestMethod.PUT) public void saveUser() { }
false;public;1;3;;public void registerHandler(Object handler) {     super.detectHandlerMethods(handler). }
false;protected;1;4;;@Override protected boolean isHandler(Class<?> beanType) {     return AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null. }
false;protected;2;16;;@Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {     RequestMapping annot = AnnotationUtils.findAnnotation(method, RequestMapping.class).     if (annot != null) {         return new RequestMappingInfo(new PatternsRequestCondition(annot.value(), getUrlPathHelper(), getPathMatcher(), true, true), new RequestMethodsRequestCondition(annot.method()), new ParamsRequestCondition(annot.params()), new HeadersRequestCondition(annot.headers()), new ConsumesRequestCondition(annot.consumes(), annot.headers()), new ProducesRequestCondition(annot.produces(), annot.headers()), null).     } else {         return null.     } }
