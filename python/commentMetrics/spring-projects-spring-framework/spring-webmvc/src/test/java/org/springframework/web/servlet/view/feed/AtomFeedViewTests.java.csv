commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void render() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest().     MockHttpServletResponse response = new MockHttpServletResponse().     Map<String, String> model = new LinkedHashMap<>().     model.put("2", "This is entry 2").     model.put("1", "This is entry 1").     view.render(model, request, response).     assertEquals("Invalid content-type", "application/atom+xml", response.getContentType()).     String expected = "<feed xmlns=\"http://www.w3.org/2005/Atom\">" + "<title>Test Feed</title>" + "<entry><title>2</title><summary>This is entry 2</summary></entry>" + "<entry><title>1</title><summary>This is entry 1</summary></entry>" + "</feed>".     assertThat(response.getContentAsString(), isSimilarTo(expected)). }
false;private,static;1;3;;private static CompareMatcher isSimilarTo(String content) {     return CompareMatcher.isSimilarTo(content).ignoreWhitespace(). }
false;protected;3;4;;@Override protected void buildFeedMetadata(Map<String, Object> model, Feed feed, HttpServletRequest request) {     feed.setTitle("Test Feed"). }
false;protected;3;13;;@Override protected List<Entry> buildFeedEntries(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) {     List<Entry> entries = new ArrayList<>().     for (String name : model.keySet()) {         Entry entry = new Entry().         entry.setTitle(name).         Content content = new Content().         content.setValue((String) model.get(name)).         entry.setSummary(content).         entries.add(entry).     }     return entries. }
