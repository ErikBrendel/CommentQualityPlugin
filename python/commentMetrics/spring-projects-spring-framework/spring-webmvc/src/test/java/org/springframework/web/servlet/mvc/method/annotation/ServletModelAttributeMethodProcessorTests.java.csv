commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Before public void setup() throws Exception {     processor = new ServletModelAttributeMethodProcessor(false).     ConfigurableWebBindingInitializer initializer = new ConfigurableWebBindingInitializer().     initializer.setConversionService(new DefaultConversionService()).     binderFactory = new ServletRequestDataBinderFactory(null, initializer).     mavContainer = new ModelAndViewContainer().     request = new MockHttpServletRequest().     webRequest = new ServletWebRequest(request).     Method method = getClass().getDeclaredMethod("modelAttribute", TestBean.class, TestBeanWithoutStringConstructor.class, Optional.class).     testBeanModelAttr = new MethodParameter(method, 0).     testBeanWithoutStringConstructorModelAttr = new MethodParameter(method, 1).     testBeanWithOptionalModelAttr = new MethodParameter(method, 2). }
false;public;0;12;;@Test public void createAttributeUriTemplateVar() throws Exception {     Map<String, String> uriTemplateVars = new HashMap<>().     uriTemplateVars.put("testBean1", "Patty").     request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars).     // Type conversion from "Patty" to TestBean via TestBean(String) constructor     TestBean testBean = (TestBean) processor.resolveArgument(testBeanModelAttr, mavContainer, webRequest, binderFactory).     assertEquals("Patty", testBean.getName()). }
false;public;0;11;;@Test public void createAttributeUriTemplateVarCannotConvert() throws Exception {     Map<String, String> uriTemplateVars = new HashMap<>().     uriTemplateVars.put("testBean2", "Patty").     request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars).     TestBeanWithoutStringConstructor testBean = (TestBeanWithoutStringConstructor) processor.resolveArgument(testBeanWithoutStringConstructorModelAttr, mavContainer, webRequest, binderFactory).     assertNotNull(testBean). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void createAttributeUriTemplateVarWithOptional() throws Exception {     Map<String, String> uriTemplateVars = new HashMap<>().     uriTemplateVars.put("testBean3", "Patty").     request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars).     // Type conversion from "Patty" to TestBean via TestBean(String) constructor     Optional<TestBean> testBean = (Optional<TestBean>) processor.resolveArgument(testBeanWithOptionalModelAttr, mavContainer, webRequest, binderFactory).     assertEquals("Patty", testBean.get().getName()). }
false;public;0;10;;@Test public void createAttributeRequestParameter() throws Exception {     request.addParameter("testBean1", "Patty").     // Type conversion from "Patty" to TestBean via TestBean(String) constructor     TestBean testBean = (TestBean) processor.resolveArgument(testBeanModelAttr, mavContainer, webRequest, binderFactory).     assertEquals("Patty", testBean.getName()). }
false;public;0;9;;@Test public void createAttributeRequestParameterCannotConvert() throws Exception {     request.addParameter("testBean2", "Patty").     TestBeanWithoutStringConstructor testBean = (TestBeanWithoutStringConstructor) processor.resolveArgument(testBeanWithoutStringConstructorModelAttr, mavContainer, webRequest, binderFactory).     assertNotNull(testBean). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void createAttributeRequestParameterWithOptional() throws Exception {     request.addParameter("testBean3", "Patty").     Optional<TestBean> testBean = (Optional<TestBean>) processor.resolveArgument(testBeanWithOptionalModelAttr, mavContainer, webRequest, binderFactory).     assertEquals("Patty", testBean.get().getName()). }
false;public;0;19;;@Test @SuppressWarnings("unchecked") public void attributesAsNullValues() throws Exception {     request.addParameter("name", "Patty").     mavContainer.getModel().put("testBean1", null).     mavContainer.getModel().put("testBean2", null).     mavContainer.getModel().put("testBean3", null).     assertNull(processor.resolveArgument(testBeanModelAttr, mavContainer, webRequest, binderFactory)).     assertNull(processor.resolveArgument(testBeanWithoutStringConstructorModelAttr, mavContainer, webRequest, binderFactory)).     Optional<TestBean> testBean = (Optional<TestBean>) processor.resolveArgument(testBeanWithOptionalModelAttr, mavContainer, webRequest, binderFactory).     assertFalse(testBean.isPresent()). }
false;public;0;19;;@Test @SuppressWarnings("unchecked") public void attributesAsOptionalEmpty() throws Exception {     request.addParameter("name", "Patty").     mavContainer.getModel().put("testBean1", Optional.empty()).     mavContainer.getModel().put("testBean2", Optional.empty()).     mavContainer.getModel().put("testBean3", Optional.empty()).     assertNull(processor.resolveArgument(testBeanModelAttr, mavContainer, webRequest, binderFactory)).     assertNull(processor.resolveArgument(testBeanWithoutStringConstructorModelAttr, mavContainer, webRequest, binderFactory)).     Optional<TestBean> testBean = (Optional<TestBean>) processor.resolveArgument(testBeanWithOptionalModelAttr, mavContainer, webRequest, binderFactory).     assertFalse(testBean.isPresent()). }
false;private;3;5;;@SuppressWarnings("unused") private void modelAttribute(@ModelAttribute("testBean1") TestBean testBean1, @ModelAttribute("testBean2") TestBeanWithoutStringConstructor testBean2, @ModelAttribute("testBean3") Optional<TestBean> testBean3) { }
