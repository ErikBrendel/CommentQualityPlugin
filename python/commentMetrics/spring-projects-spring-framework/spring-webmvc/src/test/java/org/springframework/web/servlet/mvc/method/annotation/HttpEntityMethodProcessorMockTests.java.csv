commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Before @SuppressWarnings("unchecked") public void setup() throws Exception {     stringHttpMessageConverter = mock(HttpMessageConverter.class).     given(stringHttpMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(TEXT_PLAIN)).     resourceMessageConverter = mock(HttpMessageConverter.class).     given(resourceMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.ALL)).     resourceRegionMessageConverter = mock(HttpMessageConverter.class).     given(resourceRegionMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.ALL)).     processor = new HttpEntityMethodProcessor(Arrays.asList(stringHttpMessageConverter, resourceMessageConverter, resourceRegionMessageConverter)).     Method handle1 = getClass().getMethod("handle1", HttpEntity.class, ResponseEntity.class, Integer.TYPE, RequestEntity.class).     paramHttpEntity = new MethodParameter(handle1, 0).     paramRequestEntity = new MethodParameter(handle1, 3).     paramResponseEntity = new MethodParameter(handle1, 1).     paramInt = new MethodParameter(handle1, 2).     returnTypeResponseEntity = new MethodParameter(handle1, -1).     returnTypeResponseEntityProduces = new MethodParameter(getClass().getMethod("handle4"), -1).     returnTypeHttpEntity = new MethodParameter(getClass().getMethod("handle2", HttpEntity.class), -1).     returnTypeHttpEntitySubclass = new MethodParameter(getClass().getMethod("handle2x", HttpEntity.class), -1).     returnTypeInt = new MethodParameter(getClass().getMethod("handle3"), -1).     returnTypeResponseEntityResource = new MethodParameter(getClass().getMethod("handle5"), -1).     mavContainer = new ModelAndViewContainer().     servletRequest = new MockHttpServletRequest("GET", "/foo").     servletResponse = new MockHttpServletResponse().     webRequest = new ServletWebRequest(servletRequest, servletResponse). }
false;public;0;7;;@Test public void supportsParameter() {     assertTrue("HttpEntity parameter not supported", processor.supportsParameter(paramHttpEntity)).     assertTrue("RequestEntity parameter not supported", processor.supportsParameter(paramRequestEntity)).     assertFalse("ResponseEntity parameter supported", processor.supportsParameter(paramResponseEntity)).     assertFalse("non-entity parameter supported", processor.supportsParameter(paramInt)). }
false;public;0;9;;@Test public void supportsReturnType() {     assertTrue("ResponseEntity return type not supported", processor.supportsReturnType(returnTypeResponseEntity)).     assertTrue("HttpEntity return type not supported", processor.supportsReturnType(returnTypeHttpEntity)).     assertTrue("Custom HttpEntity subclass not supported", processor.supportsReturnType(returnTypeHttpEntitySubclass)).     assertFalse("RequestEntity parameter supported", processor.supportsReturnType(paramRequestEntity)).     assertFalse("non-ResponseBody return type supported", processor.supportsReturnType(returnTypeInt)). }
false;public;0;17;;@Test public void shouldResolveHttpEntityArgument() throws Exception {     String body = "Foo".     MediaType contentType = TEXT_PLAIN.     servletRequest.addHeader("Content-Type", contentType.toString()).     servletRequest.setContent(body.getBytes(StandardCharsets.UTF_8)).     given(stringHttpMessageConverter.canRead(String.class, contentType)).willReturn(true).     given(stringHttpMessageConverter.read(eq(String.class), isA(HttpInputMessage.class))).willReturn(body).     Object result = processor.resolveArgument(paramHttpEntity, mavContainer, webRequest, null).     assertTrue(result instanceof HttpEntity).     assertFalse("The requestHandled flag shouldn't change", mavContainer.isRequestHandled()).     assertEquals("Invalid argument", body, ((HttpEntity<?>) result).getBody()). }
false;public;0;26;;@Test public void shouldResolveRequestEntityArgument() throws Exception {     String body = "Foo".     MediaType contentType = TEXT_PLAIN.     servletRequest.addHeader("Content-Type", contentType.toString()).     servletRequest.setMethod("GET").     servletRequest.setServerName("www.example.com").     servletRequest.setServerPort(80).     servletRequest.setRequestURI("/path").     servletRequest.setContent(body.getBytes(StandardCharsets.UTF_8)).     given(stringHttpMessageConverter.canRead(String.class, contentType)).willReturn(true).     given(stringHttpMessageConverter.read(eq(String.class), isA(HttpInputMessage.class))).willReturn(body).     Object result = processor.resolveArgument(paramRequestEntity, mavContainer, webRequest, null).     assertTrue(result instanceof RequestEntity).     assertFalse("The requestHandled flag shouldn't change", mavContainer.isRequestHandled()).     RequestEntity<?> requestEntity = (RequestEntity<?>) result.     assertEquals("Invalid method", HttpMethod.GET, requestEntity.getMethod()).     // using default port (which is 80), so do not need to append the port (-1 means ignore)     URI uri = new URI("http", null, "www.example.com", -1, "/path", null, null).     assertEquals("Invalid url", uri, requestEntity.getUrl()).     assertEquals("Invalid argument", body, requestEntity.getBody()). }
false;public;0;12;;@Test public void shouldFailResolvingWhenConverterCannotRead() throws Exception {     MediaType contentType = TEXT_PLAIN.     servletRequest.setMethod("POST").     servletRequest.addHeader("Content-Type", contentType.toString()).     given(stringHttpMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(contentType)).     given(stringHttpMessageConverter.canRead(String.class, contentType)).willReturn(false).     this.thrown.expect(HttpMediaTypeNotSupportedException.class).     processor.resolveArgument(paramHttpEntity, mavContainer, webRequest, null). }
false;public;0;7;;@Test public void shouldFailResolvingWhenContentTypeNotSupported() throws Exception {     servletRequest.setMethod("POST").     servletRequest.setContent("some content".getBytes(StandardCharsets.UTF_8)).     this.thrown.expect(HttpMediaTypeNotSupportedException.class).     processor.resolveArgument(paramHttpEntity, mavContainer, webRequest, null). }
false;public;0;13;;@Test public void shouldHandleReturnValue() throws Exception {     String body = "Foo".     ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK).     MediaType accepted = TEXT_PLAIN.     servletRequest.addHeader("Accept", accepted.toString()).     initStringMessageConversion(accepted).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertTrue(mavContainer.isRequestHandled()).     verify(stringHttpMessageConverter).write(eq(body), eq(accepted), isA(HttpOutputMessage.class)). }
false;public;0;13;;@Test public void shouldHandleReturnValueWithProducibleMediaType() throws Exception {     String body = "Foo".     ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK).     servletRequest.addHeader("Accept", "text/*").     servletRequest.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, Collections.singleton(MediaType.TEXT_HTML)).     given(stringHttpMessageConverter.canWrite(String.class, MediaType.TEXT_HTML)).willReturn(true).     processor.handleReturnValue(returnValue, returnTypeResponseEntityProduces, mavContainer, webRequest).     assertTrue(mavContainer.isRequestHandled()).     verify(stringHttpMessageConverter).write(eq(body), eq(MediaType.TEXT_HTML), isA(HttpOutputMessage.class)). }
false;public;0;21;;@Test @SuppressWarnings("unchecked") public void shouldHandleReturnValueWithResponseBodyAdvice() throws Exception {     servletRequest.addHeader("Accept", "text/*").     servletRequest.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, Collections.singleton(MediaType.TEXT_HTML)).     ResponseEntity<String> returnValue = new ResponseEntity<>(HttpStatus.OK).     ResponseBodyAdvice<String> advice = mock(ResponseBodyAdvice.class).     given(advice.supports(any(), any())).willReturn(true).     given(advice.beforeBodyWrite(any(), any(), any(), any(), any(), any())).willReturn("Foo").     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(Collections.singletonList(stringHttpMessageConverter), null, Collections.singletonList(advice)).     reset(stringHttpMessageConverter).     given(stringHttpMessageConverter.canWrite(String.class, MediaType.TEXT_HTML)).willReturn(true).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertTrue(mavContainer.isRequestHandled()).     verify(stringHttpMessageConverter).write(eq("Foo"), eq(MediaType.TEXT_HTML), isA(HttpOutputMessage.class)). }
false;public;0;14;;@Test public void shouldFailHandlingWhenContentTypeNotSupported() throws Exception {     String body = "Foo".     ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK).     MediaType accepted = MediaType.APPLICATION_ATOM_XML.     servletRequest.addHeader("Accept", accepted.toString()).     given(stringHttpMessageConverter.canWrite(String.class, null)).willReturn(true).     given(stringHttpMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(TEXT_PLAIN)).     this.thrown.expect(HttpMediaTypeNotAcceptableException.class).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest). }
false;public;0;15;;@Test public void shouldFailHandlingWhenConverterCannotWrite() throws Exception {     String body = "Foo".     ResponseEntity<String> returnValue = new ResponseEntity<>(body, HttpStatus.OK).     MediaType accepted = TEXT_PLAIN.     servletRequest.addHeader("Accept", accepted.toString()).     given(stringHttpMessageConverter.canWrite(String.class, null)).willReturn(true).     given(stringHttpMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(TEXT_PLAIN)).     given(stringHttpMessageConverter.canWrite(String.class, accepted)).willReturn(false).     this.thrown.expect(HttpMediaTypeNotAcceptableException.class).     processor.handleReturnValue(returnValue, returnTypeResponseEntityProduces, mavContainer, webRequest). }
false;public;0;8;;// SPR-9142 @Test public void shouldFailHandlingWhenAcceptHeaderIllegal() throws Exception {     ResponseEntity<String> returnValue = new ResponseEntity<>("Body", HttpStatus.ACCEPTED).     servletRequest.addHeader("Accept", "01").     this.thrown.expect(HttpMediaTypeNotAcceptableException.class).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest). }
false;public;0;11;;@Test public void shouldHandleResponseHeaderNoBody() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.set("headerName", "headerValue").     ResponseEntity<String> returnValue = new ResponseEntity<>(headers, HttpStatus.ACCEPTED).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertTrue(mavContainer.isRequestHandled()).     assertEquals("headerValue", servletResponse.getHeader("headerName")). }
false;public;0;14;;@Test public void shouldHandleResponseHeaderAndBody() throws Exception {     HttpHeaders responseHeaders = new HttpHeaders().     responseHeaders.set("header", "headerValue").     ResponseEntity<String> returnValue = new ResponseEntity<>("body", responseHeaders, HttpStatus.ACCEPTED).     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     ArgumentCaptor<HttpOutputMessage> outputMessage = ArgumentCaptor.forClass(HttpOutputMessage.class).     verify(stringHttpMessageConverter).write(eq("body"), eq(TEXT_PLAIN), outputMessage.capture()).     assertTrue(mavContainer.isRequestHandled()).     assertEquals("headerValue", outputMessage.getValue().getHeaders().get("header").get(0)). }
false;public;0;13;;@Test public void shouldHandleLastModifiedWithHttp304() throws Exception {     long currentTime = new Date().getTime().     long oneMinuteAgo = currentTime - (1000 * 60).     ZonedDateTime dateTime = ofEpochMilli(currentTime).atZone(GMT).     servletRequest.addHeader(HttpHeaders.IF_MODIFIED_SINCE, RFC_1123_DATE_TIME.format(dateTime)).     ResponseEntity<String> returnValue = ResponseEntity.ok().lastModified(oneMinuteAgo).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, null, oneMinuteAgo). }
false;public;0;11;;@Test public void handleEtagWithHttp304() throws Exception {     String etagValue = "\"deadb33f8badf00d\"".     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, etagValue).     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, -1). }
false;public;0;11;;// SPR-14559 @Test public void shouldHandleInvalidIfNoneMatchWithHttp200() throws Exception {     String etagValue = "\"deadb33f8badf00d\"".     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, "unquoted").     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1). }
false;public;0;16;;@Test public void shouldHandleETagAndLastModifiedWithHttp304() throws Exception {     long currentTime = new Date().getTime().     long oneMinuteAgo = currentTime - (1000 * 60).     String etagValue = "\"deadb33f8badf00d\"".     ZonedDateTime dateTime = ofEpochMilli(currentTime).atZone(GMT).     servletRequest.addHeader(HttpHeaders.IF_MODIFIED_SINCE, RFC_1123_DATE_TIME.format(dateTime)).     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, etagValue).     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).lastModified(oneMinuteAgo).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, oneMinuteAgo). }
false;public;0;13;;@Test public void shouldHandleNotModifiedResponse() throws Exception {     long currentTime = new Date().getTime().     long oneMinuteAgo = currentTime - (1000 * 60).     String etagValue = "\"deadb33f8badf00d\"".     ResponseEntity<String> returnValue = ResponseEntity.status(HttpStatus.NOT_MODIFIED).eTag(etagValue).lastModified(oneMinuteAgo).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, oneMinuteAgo). }
false;public;0;17;;@Test public void shouldHandleChangedETagAndLastModified() throws Exception {     long currentTime = new Date().getTime().     long oneMinuteAgo = currentTime - (1000 * 60).     String etagValue = "\"deadb33f8badf00d\"".     String changedEtagValue = "\"changed-etag-value\"".     ZonedDateTime dateTime = ofEpochMilli(currentTime).atZone(GMT).     servletRequest.addHeader(HttpHeaders.IF_MODIFIED_SINCE, RFC_1123_DATE_TIME.format(dateTime)).     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, etagValue).     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(changedEtagValue).lastModified(oneMinuteAgo).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.OK, null, changedEtagValue, oneMinuteAgo). }
false;public;0;13;;// SPR-13496 @Test public void shouldHandleConditionalRequestIfNoneMatchWildcard() throws Exception {     String wildcardValue = "*".     String etagValue = "\"some-etag\"".     servletRequest.setMethod("POST").     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, wildcardValue).     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1). }
false;public;0;12;;// SPR-13626 @Test public void shouldHandleGetIfNoneMatchWildcard() throws Exception {     String wildcardValue = "*".     String etagValue = "\"some-etag\"".     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, wildcardValue).     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1). }
false;public;0;12;;// SPR-13626 @Test public void shouldHandleIfNoneMatchIfMatch() throws Exception {     String etagValue = "\"some-etag\"".     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, etagValue).     servletRequest.addHeader(HttpHeaders.IF_MATCH, "ifmatch").     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, -1). }
false;public;0;13;;// SPR-13626 @Test public void shouldHandleIfNoneMatchIfUnmodifiedSince() throws Exception {     String etagValue = "\"some-etag\"".     servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, etagValue).     ZonedDateTime dateTime = ofEpochMilli(new Date().getTime()).atZone(GMT).     servletRequest.addHeader(HttpHeaders.IF_UNMODIFIED_SINCE, RFC_1123_DATE_TIME.format(dateTime)).     ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, -1). }
false;public;0;15;;@Test public void shouldHandleResource() throws Exception {     ResponseEntity<Resource> returnValue = ResponseEntity.ok(new ByteArrayResource("Content".getBytes(StandardCharsets.UTF_8))).     given(resourceMessageConverter.canWrite(ByteArrayResource.class, null)).willReturn(true).     given(resourceMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.ALL)).     given(resourceMessageConverter.canWrite(ByteArrayResource.class, APPLICATION_OCTET_STREAM)).willReturn(true).     processor.handleReturnValue(returnValue, returnTypeResponseEntityResource, mavContainer, webRequest).     then(resourceMessageConverter).should(times(1)).write(any(ByteArrayResource.class), eq(APPLICATION_OCTET_STREAM), any(HttpOutputMessage.class)).     assertEquals(200, servletResponse.getStatus()). }
false;public;0;16;;@Test public void shouldHandleResourceByteRange() throws Exception {     ResponseEntity<Resource> returnValue = ResponseEntity.ok(new ByteArrayResource("Content".getBytes(StandardCharsets.UTF_8))).     servletRequest.addHeader("Range", "bytes=0-5").     given(resourceRegionMessageConverter.canWrite(any(), eq(null))).willReturn(true).     given(resourceRegionMessageConverter.canWrite(any(), eq(APPLICATION_OCTET_STREAM))).willReturn(true).     processor.handleReturnValue(returnValue, returnTypeResponseEntityResource, mavContainer, webRequest).     then(resourceRegionMessageConverter).should(times(1)).write(anyCollection(), eq(APPLICATION_OCTET_STREAM), argThat(outputMessage -> "bytes".equals(outputMessage.getHeaders().getFirst(HttpHeaders.ACCEPT_RANGES)))).     assertEquals(206, servletResponse.getStatus()). }
false;public;0;15;;@Test public void handleReturnTypeResourceIllegalByteRange() throws Exception {     ResponseEntity<Resource> returnValue = ResponseEntity.ok(new ByteArrayResource("Content".getBytes(StandardCharsets.UTF_8))).     servletRequest.addHeader("Range", "illegal").     given(resourceRegionMessageConverter.canWrite(any(), eq(null))).willReturn(true).     given(resourceRegionMessageConverter.canWrite(any(), eq(APPLICATION_OCTET_STREAM))).willReturn(true).     processor.handleReturnValue(returnValue, returnTypeResponseEntityResource, mavContainer, webRequest).     then(resourceRegionMessageConverter).should(never()).write(anyCollection(), eq(APPLICATION_OCTET_STREAM), any(HttpOutputMessage.class)).     assertEquals(416, servletResponse.getStatus()). }
false;public;0;16;;// SPR-16754 @Test public void disableRangeSupportForStreamingResponses() throws Exception {     InputStream is = new ByteArrayInputStream("Content".getBytes(StandardCharsets.UTF_8)).     InputStreamResource resource = new InputStreamResource(is, "test").     ResponseEntity<Resource> returnValue = ResponseEntity.ok(resource).     servletRequest.addHeader("Range", "bytes=0-5").     given(resourceMessageConverter.canWrite(any(), eq(null))).willReturn(true).     given(resourceMessageConverter.canWrite(any(), eq(APPLICATION_OCTET_STREAM))).willReturn(true).     processor.handleReturnValue(returnValue, returnTypeResponseEntityResource, mavContainer, webRequest).     then(resourceMessageConverter).should(times(1)).write(any(InputStreamResource.class), eq(APPLICATION_OCTET_STREAM), any(HttpOutputMessage.class)).     assertEquals(200, servletResponse.getStatus()).     assertThat(servletResponse.getHeader(HttpHeaders.ACCEPT_RANGES), Matchers.isEmptyOrNullString()). }
false;public;0;15;;// SPR-16921 @Test public void disableRangeSupportIfContentRangePresent() throws Exception {     ResponseEntity<Resource> returnValue = ResponseEntity.status(HttpStatus.PARTIAL_CONTENT).header(HttpHeaders.RANGE, "bytes=0-5").body(new ByteArrayResource("Content".getBytes(StandardCharsets.UTF_8))).     given(resourceRegionMessageConverter.canWrite(any(), eq(null))).willReturn(true).     given(resourceRegionMessageConverter.canWrite(any(), eq(APPLICATION_OCTET_STREAM))).willReturn(true).     processor.handleReturnValue(returnValue, returnTypeResponseEntityResource, mavContainer, webRequest).     then(resourceRegionMessageConverter).should(never()).write(anyCollection(), any(), any()).     assertEquals(206, servletResponse.getStatus()). }
false;public;0;11;;// SPR-14767 @Test public void shouldHandleValidatorHeadersInputResponses() throws Exception {     servletRequest.setMethod("PUT").     String etagValue = "\"some-etag\"".     ResponseEntity<String> returnValue = ResponseEntity.ok().header(HttpHeaders.ETAG, etagValue).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1). }
false;public;0;14;;@Test public void shouldNotFailPreconditionForPutRequests() throws Exception {     servletRequest.setMethod("PUT").     ZonedDateTime dateTime = ofEpochMilli(new Date().getTime()).atZone(GMT).     servletRequest.addHeader(HttpHeaders.IF_UNMODIFIED_SINCE, RFC_1123_DATE_TIME.format(dateTime)).     long justModified = dateTime.plus(1, ChronoUnit.SECONDS).toEpochSecond() * 1000.     ResponseEntity<String> returnValue = ResponseEntity.ok().lastModified(justModified).body("body").     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertConditionalResponse(HttpStatus.OK, null, null, justModified). }
false;public;0;7;;@Test public void varyHeader() throws Exception {     String[] entityValues = { "Accept-Language", "User-Agent" }.     String[] existingValues = {}.     String[] expected = { "Accept-Language, User-Agent" }.     testVaryHeader(entityValues, existingValues, expected). }
false;public;0;7;;@Test public void varyHeaderWithExistingWildcard() throws Exception {     String[] entityValues = { "Accept-Language" }.     String[] existingValues = { "*" }.     String[] expected = { "*" }.     testVaryHeader(entityValues, existingValues, expected). }
false;public;0;7;;@Test public void varyHeaderWithExistingCommaValues() throws Exception {     String[] entityValues = { "Accept-Language", "User-Agent" }.     String[] existingValues = { "Accept-Encoding", "Accept-Language" }.     String[] expected = { "Accept-Encoding", "Accept-Language", "User-Agent" }.     testVaryHeader(entityValues, existingValues, expected). }
false;public;0;7;;@Test public void varyHeaderWithExistingCommaSeparatedValues() throws Exception {     String[] entityValues = { "Accept-Language", "User-Agent" }.     String[] existingValues = { "Accept-Encoding, Accept-Language" }.     String[] expected = { "Accept-Encoding, Accept-Language", "User-Agent" }.     testVaryHeader(entityValues, existingValues, expected). }
false;public;0;7;;@Test public void handleReturnValueVaryHeader() throws Exception {     String[] entityValues = { "Accept-Language", "User-Agent" }.     String[] existingValues = { "Accept-Encoding, Accept-Language" }.     String[] expected = { "Accept-Encoding, Accept-Language", "User-Agent" }.     testVaryHeader(entityValues, existingValues, expected). }
false;private;3;12;;private void testVaryHeader(String[] entityValues, String[] existingValues, String[] expected) throws Exception {     ResponseEntity<String> returnValue = ResponseEntity.ok().varyBy(entityValues).body("Foo").     for (String value : existingValues) {         servletResponse.addHeader("Vary", value).     }     initStringMessageConversion(TEXT_PLAIN).     processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest).     assertTrue(mavContainer.isRequestHandled()).     assertEquals(Arrays.asList(expected), servletResponse.getHeaders("Vary")).     verify(stringHttpMessageConverter).write(eq("Foo"), eq(TEXT_PLAIN), isA(HttpOutputMessage.class)). }
false;private;1;5;;private void initStringMessageConversion(MediaType accepted) {     given(stringHttpMessageConverter.canWrite(String.class, null)).willReturn(true).     given(stringHttpMessageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(TEXT_PLAIN)).     given(stringHttpMessageConverter.canWrite(String.class, accepted)).willReturn(true). }
false;private;1;4;;private void assertResponseBody(String body) throws IOException {     ArgumentCaptor<HttpOutputMessage> outputMessage = ArgumentCaptor.forClass(HttpOutputMessage.class).     verify(stringHttpMessageConverter).write(eq(body), eq(TEXT_PLAIN), outputMessage.capture()). }
false;private;4;20;;private void assertConditionalResponse(HttpStatus status, String body, String etag, long lastModified) throws IOException {     assertEquals(status.value(), servletResponse.getStatus()).     assertTrue(mavContainer.isRequestHandled()).     if (body != null) {         assertResponseBody(body).     } else {         assertEquals(0, servletResponse.getContentAsByteArray().length).     }     if (etag != null) {         assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.ETAG).size()).         assertEquals(etag, servletResponse.getHeader(HttpHeaders.ETAG)).     }     if (lastModified != -1) {         assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.LAST_MODIFIED).size()).         assertEquals(lastModified / 1000, servletResponse.getDateHeader(HttpHeaders.LAST_MODIFIED) / 1000).     } }
false;public;4;6;;@SuppressWarnings("unused") public ResponseEntity<String> handle1(HttpEntity<String> httpEntity, ResponseEntity<String> entity, int i, RequestEntity<String> requestEntity) {     return entity. }
false;public;1;4;;@SuppressWarnings("unused") public HttpEntity<?> handle2(HttpEntity<?> entity) {     return entity. }
false;public;1;4;;@SuppressWarnings("unused") public CustomHttpEntity handle2x(HttpEntity<?> entity) {     return new CustomHttpEntity(). }
false;public;0;4;;@SuppressWarnings("unused") public int handle3() {     return 42. }
false;public;0;5;;@SuppressWarnings("unused") @RequestMapping(produces = { "text/html", "application/xhtml+xml" }) public ResponseEntity<String> handle4() {     return null. }
false;public;0;4;;@SuppressWarnings("unused") public ResponseEntity<Resource> handle5() {     return null. }
