commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws Exception {     this.handler = new DeferredResultMethodReturnValueHandler().     this.request = new MockHttpServletRequest().     MockHttpServletResponse response = new MockHttpServletResponse().     this.webRequest = new ServletWebRequest(this.request, response).     AsyncWebRequest asyncWebRequest = new StandardServletAsyncWebRequest(this.request, response).     WebAsyncUtils.getAsyncManager(this.webRequest).setAsyncWebRequest(asyncWebRequest).     this.request.setAsyncSupported(true). }
false;public;0;11;;@Test public void supportsReturnType() throws Exception {     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(DeferredResult.class, String.class))).     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(ListenableFuture.class, String.class))).     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(CompletableFuture.class, String.class))). }
false;public;0;4;;@Test public void doesNotSupportReturnType() throws Exception {     assertFalse(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(String.class))). }
false;public;0;6;;@Test public void deferredResult() throws Exception {     DeferredResult<String> result = new DeferredResult<>().     IllegalStateException ex = new IllegalStateException().     testHandle(result, DeferredResult.class, () -> result.setErrorResult(ex), ex). }
false;public;0;5;;@Test public void listenableFuture() throws Exception {     SettableListenableFuture<String> future = new SettableListenableFuture<>().     testHandle(future, ListenableFuture.class, () -> future.set("foo"), "foo"). }
false;public;0;5;;@Test public void completableFuture() throws Exception {     CompletableFuture<String> future = new CompletableFuture<>().     testHandle(future, CompletableFuture.class, () -> future.complete("foo"), "foo"). }
false;public;0;5;;@Test public void deferredResultWithError() throws Exception {     DeferredResult<String> result = new DeferredResult<>().     testHandle(result, DeferredResult.class, () -> result.setResult("foo"), "foo"). }
false;public;0;6;;@Test public void listenableFutureWithError() throws Exception {     SettableListenableFuture<String> future = new SettableListenableFuture<>().     IllegalStateException ex = new IllegalStateException().     testHandle(future, ListenableFuture.class, () -> future.setException(ex), ex). }
false;public;0;6;;@Test public void completableFutureWithError() throws Exception {     CompletableFuture<String> future = new CompletableFuture<>().     IllegalStateException ex = new IllegalStateException().     testHandle(future, CompletableFuture.class, () -> future.completeExceptionally(ex), ex). }
false;private;4;15;;private void testHandle(Object returnValue, Class<?> asyncType, Runnable setResultTask, Object expectedValue) throws Exception {     ModelAndViewContainer mavContainer = new ModelAndViewContainer().     MethodParameter returnType = on(TestController.class).resolveReturnType(asyncType, String.class).     this.handler.handleReturnValue(returnValue, returnType, mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertFalse(WebAsyncUtils.getAsyncManager(this.webRequest).hasConcurrentResult()).     setResultTask.run().     assertTrue(WebAsyncUtils.getAsyncManager(this.webRequest).hasConcurrentResult()).     assertEquals(expectedValue, WebAsyncUtils.getAsyncManager(this.webRequest).getConcurrentResult()). }
false;;0;1;;String handleString() {     return null. }
false;;0;1;;DeferredResult<String> handleDeferredResult() {     return null. }
false;;0;1;;ListenableFuture<String> handleListenableFuture() {     return null. }
false;;0;1;;CompletableFuture<String> handleCompletableFuture() {     return null. }
