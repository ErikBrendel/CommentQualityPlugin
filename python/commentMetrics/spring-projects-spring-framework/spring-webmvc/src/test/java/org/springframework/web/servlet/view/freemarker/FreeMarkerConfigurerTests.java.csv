commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test(expected = IOException.class) public void freeMarkerConfigurationFactoryBeanWithConfigLocation() throws Exception {     FreeMarkerConfigurationFactoryBean fcfb = new FreeMarkerConfigurationFactoryBean().     fcfb.setConfigLocation(new FileSystemResource("myprops.properties")).     Properties props = new Properties().     props.setProperty("myprop", "/mydir").     fcfb.setFreemarkerSettings(props).     fcfb.afterPropertiesSet(). }
false;public;0;8;;@Test public void freeMarkerConfigurationFactoryBeanWithResourceLoaderPath() throws Exception {     FreeMarkerConfigurationFactoryBean fcfb = new FreeMarkerConfigurationFactoryBean().     fcfb.setTemplateLoaderPath("file:/mydir").     fcfb.afterPropertiesSet().     Configuration cfg = fcfb.getObject().     assertTrue(cfg.getTemplateLoader() instanceof SpringTemplateLoader). }
false;public;1;7;;@Override public Resource getResource(String location) {     if (!("file:/mydir".equals(location) || "file:/mydir/test".equals(location))) {         throw new IllegalArgumentException(location).     }     return new ByteArrayResource("test".getBytes(), "test"). }
false;public;0;4;;@Override public ClassLoader getClassLoader() {     return getClass().getClassLoader(). }
false;public;0;27;;@Test @SuppressWarnings("rawtypes") public void freeMarkerConfigurationFactoryBeanWithNonFileResourceLoaderPath() throws Exception {     FreeMarkerConfigurationFactoryBean fcfb = new FreeMarkerConfigurationFactoryBean().     fcfb.setTemplateLoaderPath("file:/mydir").     Properties settings = new Properties().     settings.setProperty("localized_lookup", "false").     fcfb.setFreemarkerSettings(settings).     fcfb.setResourceLoader(new ResourceLoader() {          @Override         public Resource getResource(String location) {             if (!("file:/mydir".equals(location) || "file:/mydir/test".equals(location))) {                 throw new IllegalArgumentException(location).             }             return new ByteArrayResource("test".getBytes(), "test").         }          @Override         public ClassLoader getClassLoader() {             return getClass().getClassLoader().         }     }).     fcfb.afterPropertiesSet().     assertThat(fcfb.getObject(), instanceOf(Configuration.class)).     Configuration fc = fcfb.getObject().     Template ft = fc.getTemplate("test").     assertEquals("test", FreeMarkerTemplateUtils.processTemplateIntoString(ft, new HashMap())). }
false;public;0;11;;// SPR-12448 @Test public void freeMarkerConfigurationAsBean() {     DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().     RootBeanDefinition loaderDef = new RootBeanDefinition(SpringTemplateLoader.class).     loaderDef.getConstructorArgumentValues().addGenericArgumentValue(new DefaultResourceLoader()).     loaderDef.getConstructorArgumentValues().addGenericArgumentValue("/freemarker").     RootBeanDefinition configDef = new RootBeanDefinition(Configuration.class).     configDef.getPropertyValues().add("templateLoader", loaderDef).     beanFactory.registerBeanDefinition("freeMarkerConfig", configDef).     beanFactory.getBean(Configuration.class). }
