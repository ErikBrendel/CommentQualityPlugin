commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.webAppContext = mock(WebApplicationContext.class).     this.servletContext = new MockServletContext().     this.servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.webAppContext). }
false;public;0;15;;@Test public void missingGroovyMarkupConfig() throws Exception {     GroovyMarkupView view = new GroovyMarkupView().     given(this.webAppContext.getBeansOfType(GroovyMarkupConfig.class, true, false)).willReturn(new HashMap<>()).     view.setUrl("sampleView").     try {         view.setApplicationContext(this.webAppContext).         fail().     } catch (ApplicationContextException ex) {         assertTrue(ex.getMessage().contains("GroovyMarkupConfig")).     } }
false;public;0;11;;@Test public void customTemplateEngine() throws Exception {     GroovyMarkupView view = new GroovyMarkupView().     view.setTemplateEngine(new TestTemplateEngine()).     view.setApplicationContext(this.webAppContext).     DirectFieldAccessor accessor = new DirectFieldAccessor(view).     TemplateEngine engine = (TemplateEngine) accessor.getPropertyValue("engine").     assertNotNull(engine).     assertEquals(TestTemplateEngine.class, engine.getClass()). }
false;public;0;11;;@Test public void detectTemplateEngine() throws Exception {     GroovyMarkupView view = new GroovyMarkupView().     view.setTemplateEngine(new TestTemplateEngine()).     view.setApplicationContext(this.webAppContext).     DirectFieldAccessor accessor = new DirectFieldAccessor(view).     TemplateEngine engine = (TemplateEngine) accessor.getPropertyValue("engine").     assertNotNull(engine).     assertEquals(TestTemplateEngine.class, engine.getClass()). }
false;public;0;5;;@Test public void checkResource() throws Exception {     GroovyMarkupView view = createViewWithUrl("test.tpl").     assertTrue(view.checkResource(Locale.US)). }
false;public;0;5;;@Test public void checkMissingResource() throws Exception {     GroovyMarkupView view = createViewWithUrl("missing.tpl").     assertFalse(view.checkResource(Locale.US)). }
false;public;0;5;;@Test public void checkI18nResource() throws Exception {     GroovyMarkupView view = createViewWithUrl("i18n.tpl").     assertTrue(view.checkResource(Locale.FRENCH)). }
false;public;0;5;;@Test public void checkI18nResourceMissingLocale() throws Exception {     GroovyMarkupView view = createViewWithUrl("i18n.tpl").     assertTrue(view.checkResource(Locale.CHINESE)). }
false;public;0;7;;@Test public void renderMarkupTemplate() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("name", "Spring").     MockHttpServletResponse response = renderViewWithModel("test.tpl", model, Locale.US).     assertThat(response.getContentAsString(), Matchers.containsString("<h1>Hello Spring</h1>")). }
false;public;0;13;;@Test public void renderI18nTemplate() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("name", "Spring").     MockHttpServletResponse response = renderViewWithModel("i18n.tpl", model, Locale.FRANCE).     assertEquals("<p>Bonjour Spring</p>", response.getContentAsString()).     response = renderViewWithModel("i18n.tpl", model, Locale.GERMANY).     assertEquals("<p>Include German</p><p>Hallo Spring</p>", response.getContentAsString()).     response = renderViewWithModel("i18n.tpl", model, new Locale("es")).     assertEquals("<p>Include Default</p><p>Hola Spring</p>", response.getContentAsString()). }
false;public;0;7;;@Test public void renderLayoutTemplate() throws Exception {     Map<String, Object> model = new HashMap<>().     MockHttpServletResponse response = renderViewWithModel("content.tpl", model, Locale.US).     assertEquals("<html><head><title>Layout example</title></head><body><p>This is the body</p></body></html>", response.getContentAsString()). }
false;private;3;11;;private MockHttpServletResponse renderViewWithModel(String viewUrl, Map<String, Object> model, Locale locale) throws Exception {     GroovyMarkupView view = createViewWithUrl(viewUrl).     MockHttpServletResponse response = new MockHttpServletResponse().     MockHttpServletRequest request = new MockHttpServletRequest().     request.addPreferredLocale(locale).     LocaleContextHolder.setLocale(locale).     view.renderMergedTemplateModel(model, request, response).     return response. }
false;private;1;11;;private GroovyMarkupView createViewWithUrl(String viewUrl) throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(GroovyMarkupConfiguration.class).     ctx.refresh().     GroovyMarkupView view = new GroovyMarkupView().     view.setUrl(viewUrl).     view.setApplicationContext(ctx).     view.afterPropertiesSet().     return view. }
false;public;1;4;;@Override public Template createTemplate(Reader reader) {     return null. }
false;public;0;6;;@Bean public GroovyMarkupConfig groovyMarkupConfigurer() {     GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer().     configurer.setResourceLoaderPath(RESOURCE_LOADER_PATH).     return configurer. }
