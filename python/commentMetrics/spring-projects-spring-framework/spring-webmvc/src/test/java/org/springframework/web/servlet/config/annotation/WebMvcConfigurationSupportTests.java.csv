commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void requestMappingHandlerMapping() throws Exception {     ApplicationContext context = initContext(WebConfig.class, ScopedController.class, ScopedProxyController.class).     RequestMappingHandlerMapping handlerMapping = context.getBean(RequestMappingHandlerMapping.class).     assertEquals(0, handlerMapping.getOrder()).     HandlerExecutionChain chain = handlerMapping.getHandler(new MockHttpServletRequest("GET", "/")).     assertNotNull(chain).     assertNotNull(chain.getInterceptors()).     assertEquals(ConversionServiceExposingInterceptor.class, chain.getInterceptors()[0].getClass()).     chain = handlerMapping.getHandler(new MockHttpServletRequest("GET", "/scoped")).     assertNotNull("HandlerExecutionChain for '/scoped' mapping should not be null.", chain).     chain = handlerMapping.getHandler(new MockHttpServletRequest("GET", "/scopedProxy")).     assertNotNull("HandlerExecutionChain for '/scopedProxy' mapping should not be null.", chain). }
false;public;0;18;;@Test public void emptyHandlerMappings() {     ApplicationContext context = initContext(WebConfig.class).     Map<String, HandlerMapping> handlerMappings = context.getBeansOfType(HandlerMapping.class).     assertFalse(handlerMappings.containsKey("viewControllerHandlerMapping")).     assertFalse(handlerMappings.containsKey("resourceHandlerMapping")).     assertFalse(handlerMappings.containsKey("defaultServletHandlerMapping")).     Object nullBean = context.getBean("viewControllerHandlerMapping").     assertTrue(nullBean.equals(null)).     nullBean = context.getBean("resourceHandlerMapping").     assertTrue(nullBean.equals(null)).     nullBean = context.getBean("defaultServletHandlerMapping").     assertTrue(nullBean.equals(null)). }
false;public;0;15;;@Test public void beanNameHandlerMapping() throws Exception {     ApplicationContext context = initContext(WebConfig.class).     BeanNameUrlHandlerMapping handlerMapping = context.getBean(BeanNameUrlHandlerMapping.class).     assertEquals(2, handlerMapping.getOrder()).     HttpServletRequest request = new MockHttpServletRequest("GET", "/testController").     HandlerExecutionChain chain = handlerMapping.getHandler(request).     assertNotNull(chain).     assertNotNull(chain.getInterceptors()).     assertEquals(3, chain.getInterceptors().length).     assertEquals(ConversionServiceExposingInterceptor.class, chain.getInterceptors()[1].getClass()).     assertEquals(ResourceUrlProviderExposingInterceptor.class, chain.getInterceptors()[2].getClass()). }
false;public;0;37;;@Test public void requestMappingHandlerAdapter() throws Exception {     ApplicationContext context = initContext(WebConfig.class).     RequestMappingHandlerAdapter adapter = context.getBean(RequestMappingHandlerAdapter.class).     List<HttpMessageConverter<?>> converters = adapter.getMessageConverters().     assertEquals(12, converters.size()).     converters.stream().filter(converter -> converter instanceof AbstractJackson2HttpMessageConverter).forEach(converter -> {         ObjectMapper mapper = ((AbstractJackson2HttpMessageConverter) converter).getObjectMapper().         assertFalse(mapper.getDeserializationConfig().isEnabled(DEFAULT_VIEW_INCLUSION)).         assertFalse(mapper.getSerializationConfig().isEnabled(DEFAULT_VIEW_INCLUSION)).         assertFalse(mapper.getDeserializationConfig().isEnabled(FAIL_ON_UNKNOWN_PROPERTIES)).         if (converter instanceof MappingJackson2XmlHttpMessageConverter) {             assertEquals(XmlMapper.class, mapper.getClass()).         }     }).     ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer) adapter.getWebBindingInitializer().     assertNotNull(initializer).     ConversionService conversionService = initializer.getConversionService().     assertNotNull(conversionService).     assertTrue(conversionService instanceof FormattingConversionService).     Validator validator = initializer.getValidator().     assertNotNull(validator).     assertTrue(validator instanceof LocalValidatorFactoryBean).     DirectFieldAccessor fieldAccessor = new DirectFieldAccessor(adapter).     @SuppressWarnings("unchecked")     List<Object> bodyAdvice = (List<Object>) fieldAccessor.getPropertyValue("requestResponseBodyAdvice").     assertEquals(2, bodyAdvice.size()).     assertEquals(JsonViewRequestBodyAdvice.class, bodyAdvice.get(0).getClass()).     assertEquals(JsonViewResponseBodyAdvice.class, bodyAdvice.get(1).getClass()). }
false;public;0;9;;@Test public void uriComponentsContributor() throws Exception {     ApplicationContext context = initContext(WebConfig.class).     CompositeUriComponentsContributor uriComponentsContributor = context.getBean(MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME, CompositeUriComponentsContributor.class).     assertNotNull(uriComponentsContributor). }
false;public;0;34;;@Test @SuppressWarnings("unchecked") public void handlerExceptionResolver() throws Exception {     ApplicationContext context = initContext(WebConfig.class).     HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class).     assertEquals(0, compositeResolver.getOrder()).     List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers().     assertEquals(ExceptionHandlerExceptionResolver.class, expectedResolvers.get(0).getClass()).     assertEquals(ResponseStatusExceptionResolver.class, expectedResolvers.get(1).getClass()).     assertEquals(DefaultHandlerExceptionResolver.class, expectedResolvers.get(2).getClass()).     ExceptionHandlerExceptionResolver eher = (ExceptionHandlerExceptionResolver) expectedResolvers.get(0).     assertNotNull(eher.getApplicationContext()).     DirectFieldAccessor fieldAccessor = new DirectFieldAccessor(eher).     List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice").     assertEquals(1, interceptors.size()).     assertEquals(JsonViewResponseBodyAdvice.class, interceptors.get(0).getClass()).     LocaleContextHolder.setLocale(Locale.ENGLISH).     try {         ResponseStatusExceptionResolver rser = (ResponseStatusExceptionResolver) expectedResolvers.get(1).         MockHttpServletRequest request = new MockHttpServletRequest("GET", "/").         MockHttpServletResponse response = new MockHttpServletResponse().         rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException()).         assertEquals("User already exists!", response.getErrorMessage()).     } finally {         LocaleContextHolder.resetLocaleContext().     } }
false;public;0;24;;@Test public void customArgumentResolvers() {     ApplicationContext context = initContext(CustomArgumentResolverConfig.class).     RequestMappingHandlerAdapter adapter = context.getBean(RequestMappingHandlerAdapter.class).     HandlerExceptionResolverComposite composite = context.getBean(HandlerExceptionResolverComposite.class).     assertNotNull(adapter).     assertEquals(1, adapter.getCustomArgumentResolvers().size()).     assertEquals(TestArgumentResolver.class, adapter.getCustomArgumentResolvers().get(0).getClass()).     assertEquals(1, adapter.getCustomReturnValueHandlers().size()).     assertEquals(TestReturnValueHandler.class, adapter.getCustomReturnValueHandlers().get(0).getClass()).     assertNotNull(composite).     assertEquals(3, composite.getExceptionResolvers().size()).     assertEquals(ExceptionHandlerExceptionResolver.class, composite.getExceptionResolvers().get(0).getClass()).     ExceptionHandlerExceptionResolver resolver = (ExceptionHandlerExceptionResolver) composite.getExceptionResolvers().get(0).     assertEquals(1, resolver.getCustomArgumentResolvers().size()).     assertEquals(TestArgumentResolver.class, resolver.getCustomArgumentResolvers().get(0).getClass()).     assertEquals(1, resolver.getCustomReturnValueHandlers().size()).     assertEquals(TestReturnValueHandler.class, resolver.getCustomReturnValueHandlers().get(0).getClass()). }
false;public;0;10;;@Test public void mvcViewResolver() {     ApplicationContext context = initContext(WebConfig.class).     ViewResolverComposite resolver = context.getBean("mvcViewResolver", ViewResolverComposite.class).     assertNotNull(resolver).     assertEquals(1, resolver.getViewResolvers().size()).     assertEquals(InternalResourceViewResolver.class, resolver.getViewResolvers().get(0).getClass()).     assertEquals(Ordered.LOWEST_PRECEDENCE, resolver.getOrder()). }
false;public;0;10;;@Test public void mvcViewResolverWithExistingResolver() throws Exception {     ApplicationContext context = initContext(WebConfig.class, ViewResolverConfig.class).     ViewResolverComposite resolver = context.getBean("mvcViewResolver", ViewResolverComposite.class).     assertNotNull(resolver).     assertEquals(0, resolver.getViewResolvers().size()).     assertEquals(Ordered.LOWEST_PRECEDENCE, resolver.getOrder()).     assertNull(resolver.resolveViewName("anyViewName", Locale.ENGLISH)). }
false;public;0;10;;@Test public void mvcViewResolverWithOrderSet() {     ApplicationContext context = initContext(CustomViewResolverOrderConfig.class).     ViewResolverComposite resolver = context.getBean("mvcViewResolver", ViewResolverComposite.class).     assertNotNull(resolver).     assertEquals(1, resolver.getViewResolvers().size()).     assertEquals(InternalResourceViewResolver.class, resolver.getViewResolvers().get(0).getClass()).     assertEquals(123, resolver.getOrder()). }
false;public;0;10;;@Test public void defaultPathMatchConfiguration() throws Exception {     ApplicationContext context = initContext(WebConfig.class).     UrlPathHelper urlPathHelper = context.getBean(UrlPathHelper.class).     PathMatcher pathMatcher = context.getBean(PathMatcher.class).     assertNotNull(urlPathHelper).     assertNotNull(pathMatcher).     assertEquals(AntPathMatcher.class, pathMatcher.getClass()). }
false;private;1;7;;private ApplicationContext initContext(Class<?>... configClasses) {     AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().     context.setServletContext(new MockServletContext()).     context.register(configClasses).     context.refresh().     return context. }
false;public;0;4;;@Bean("/testController") public TestController testController() {     return new TestController(). }
false;public;0;6;;@Bean public MessageSource messageSource() {     StaticMessageSource messageSource = new StaticMessageSource().     messageSource.addMessage("exception.user.exists", Locale.ENGLISH, "User already exists!").     return messageSource. }
false;public;0;4;;@Bean public ViewResolver beanNameViewResolver() {     return new BeanNameViewResolver(). }
false;public;1;5;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.jsp().     registry.order(123). }
false;public;1;4;;@Override public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {     resolvers.add(new TestArgumentResolver()). }
false;public;1;4;;@Override public void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) {     handlers.add(new TestReturnValueHandler()). }
false;public;0;3;;@RequestMapping("/") public void handle() { }
false;public;2;5;;@RequestMapping("/foo/{id}/bar/{date}") public HttpEntity<Void> methodWithTwoPathVariables(@PathVariable Integer id, @DateTimeFormat(iso = ISO.DATE) @PathVariable DateTime date) {     return null. }
false;public;0;3;;@RequestMapping("/scoped") public void handle() { }
false;public;0;3;;@RequestMapping("/scopedProxy") public void handle() { }
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return false. }
false;public;4;5;;@Override public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer container, NativeWebRequest request, WebDataBinderFactory factory) {     return null. }
false;public;1;4;;@Override public boolean supportsReturnType(MethodParameter returnType) {     return false. }
false;public;4;4;;@Override public void handleReturnValue(Object value, MethodParameter parameter, ModelAndViewContainer container, NativeWebRequest request) { }
