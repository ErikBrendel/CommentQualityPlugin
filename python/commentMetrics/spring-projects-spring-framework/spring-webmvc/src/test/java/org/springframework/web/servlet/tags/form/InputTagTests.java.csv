commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void onSetUp() {     this.tag = createTag(getWriter()).     this.tag.setParent(getFormTag()).     this.tag.setPageContext(getPageContext()). }
false;protected;0;13;;@Override protected TestBean createTestBean() {     // set up test data     this.rob = new TestBean().     this.rob.setName("Rob").     this.rob.setMyFloat(new Float(12.34)).     TestBean sally = new TestBean().     sally.setName("Sally").     this.rob.setSpouse(sally).     return this.rob. }
false;protected,final;0;3;;protected final InputTag getTag() {     return this.tag. }
false;public;0;13;;@Test public void simpleBind() throws Exception {     this.tag.setPath("name").     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, "Rob"). }
false;public;0;10;;@Test public void simpleBindTagWithinForm() throws Exception {     BindTag bindTag = new BindTag().     bindTag.setPath("name").     bindTag.setPageContext(getPageContext()).     bindTag.doStartTag().     BindStatus bindStatus = (BindStatus) getPageContext().findAttribute(BindTag.STATUS_VARIABLE_NAME).     assertEquals("Rob", bindStatus.getValue()). }
false;public;0;17;;@Test public void simpleBindWithHtmlEscaping() throws Exception {     final String NAME = "Rob \"I Love Mangos\" Harrop".     final String HTML_ESCAPED_NAME = "Rob &quot.I Love Mangos&quot. Harrop".     this.tag.setPath("name").     this.rob.setName(NAME).     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, HTML_ESCAPED_NAME). }
false;protected;2;3;;protected void assertValueAttribute(String output, String expectedValue) {     assertContainsAttribute(output, "value", expectedValue). }
false;public;0;15;;@Test public void complexBind() throws Exception {     this.tag.setPath("spouse.name").     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "id", "spouse.name").     assertContainsAttribute(output, "name", "spouse.name").     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, "Sally"). }
false;public;0;105;;@Test public void withAllAttributes() throws Exception {     String title = "aTitle".     String id = "123".     String size = "12".     String cssClass = "textfield".     String cssStyle = "width:10px".     String lang = "en".     String dir = "ltr".     String tabindex = "2".     boolean disabled = true.     String onclick = "doClick()".     String ondblclick = "doDblclick()".     String onkeydown = "doKeydown()".     String onkeypress = "doKeypress()".     String onkeyup = "doKeyup()".     String onmousedown = "doMouseDown()".     String onmousemove = "doMouseMove()".     String onmouseout = "doMouseOut()".     String onmouseover = "doMouseOver()".     String onmouseup = "doMouseUp()".     String onfocus = "doFocus()".     String onblur = "doBlur()".     String onchange = "doChange()".     String accesskey = "a".     String maxlength = "12".     String alt = "Some text".     String onselect = "doSelect()".     boolean readonly = true.     String autocomplete = "off".     String dynamicAttribute1 = "attr1".     String dynamicAttribute2 = "attr2".     this.tag.setId(id).     this.tag.setPath("name").     this.tag.setSize(size).     this.tag.setCssClass(cssClass).     this.tag.setCssStyle(cssStyle).     this.tag.setTitle(title).     this.tag.setLang(lang).     this.tag.setDir(dir).     this.tag.setTabindex(tabindex).     this.tag.setDisabled(disabled).     this.tag.setOnclick(onclick).     this.tag.setOndblclick(ondblclick).     this.tag.setOnkeydown(onkeydown).     this.tag.setOnkeypress(onkeypress).     this.tag.setOnkeyup(onkeyup).     this.tag.setOnmousedown(onmousedown).     this.tag.setOnmousemove(onmousemove).     this.tag.setOnmouseout(onmouseout).     this.tag.setOnmouseover(onmouseover).     this.tag.setOnmouseup(onmouseup).     this.tag.setOnfocus(onfocus).     this.tag.setOnblur(onblur).     this.tag.setOnchange(onchange).     this.tag.setAccesskey(accesskey).     this.tag.setMaxlength(maxlength).     this.tag.setAlt(alt).     this.tag.setOnselect(onselect).     this.tag.setReadonly(readonly).     this.tag.setAutocomplete(autocomplete).     this.tag.setDynamicAttribute(null, dynamicAttribute1, dynamicAttribute1).     this.tag.setDynamicAttribute(null, dynamicAttribute2, dynamicAttribute2).     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertContainsAttribute(output, "id", id).     assertValueAttribute(output, "Rob").     assertContainsAttribute(output, "size", size).     assertContainsAttribute(output, "class", cssClass).     assertContainsAttribute(output, "style", cssStyle).     assertContainsAttribute(output, "title", title).     assertContainsAttribute(output, "lang", lang).     assertContainsAttribute(output, "dir", dir).     assertContainsAttribute(output, "tabindex", tabindex).     assertContainsAttribute(output, "disabled", "disabled").     assertContainsAttribute(output, "onclick", onclick).     assertContainsAttribute(output, "ondblclick", ondblclick).     assertContainsAttribute(output, "onkeydown", onkeydown).     assertContainsAttribute(output, "onkeypress", onkeypress).     assertContainsAttribute(output, "onkeyup", onkeyup).     assertContainsAttribute(output, "onmousedown", onmousedown).     assertContainsAttribute(output, "onmousemove", onmousemove).     assertContainsAttribute(output, "onmouseout", onmouseout).     assertContainsAttribute(output, "onmouseover", onmouseover).     assertContainsAttribute(output, "onmouseup", onmouseup).     assertContainsAttribute(output, "onfocus", onfocus).     assertContainsAttribute(output, "onblur", onblur).     assertContainsAttribute(output, "onchange", onchange).     assertContainsAttribute(output, "accesskey", accesskey).     assertContainsAttribute(output, "maxlength", maxlength).     assertContainsAttribute(output, "alt", alt).     assertContainsAttribute(output, "onselect", onselect).     assertContainsAttribute(output, "readonly", "readonly").     assertContainsAttribute(output, "autocomplete", autocomplete).     assertContainsAttribute(output, dynamicAttribute1, dynamicAttribute1).     assertContainsAttribute(output, dynamicAttribute2, dynamicAttribute2). }
false;public;0;18;;@Test public void withNestedBind() throws Exception {     NestedPathTag nestedPathTag = new NestedPathTag().     nestedPathTag.setPath("spouse.").     nestedPathTag.setPageContext(getPageContext()).     nestedPathTag.doStartTag().     this.tag.setPath("name").     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, "Sally"). }
false;public;0;15;;@Test public void withNestedBindTagWithinForm() throws Exception {     NestedPathTag nestedPathTag = new NestedPathTag().     nestedPathTag.setPath("spouse.").     nestedPathTag.setPageContext(getPageContext()).     nestedPathTag.doStartTag().     BindTag bindTag = new BindTag().     bindTag.setPath("name").     bindTag.setPageContext(getPageContext()).     bindTag.doStartTag().     BindStatus bindStatus = (BindStatus) getPageContext().findAttribute(BindTag.STATUS_VARIABLE_NAME).     assertEquals("Sally", bindStatus.getValue()). }
false;public;0;21;;@Test public void withErrors() throws Exception {     this.tag.setPath("name").     this.tag.setCssClass("good").     this.tag.setCssErrorClass("bad").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.rob, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default Message").     errors.rejectValue("name", "too.short", "Too Short").     exposeBindingResult(errors).     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, "Rob").     assertContainsAttribute(output, "class", "bad"). }
false;public;0;9;;@Test public void disabledFalse() throws Exception {     this.tag.setPath("name").     this.tag.setDisabled(false).     this.tag.doStartTag().     String output = getOutput().     assertAttributeNotPresent(output, "disabled"). }
false;public;0;17;;@Test public void withCustomBinder() throws Exception {     this.tag.setPath("myFloat").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.rob, COMMAND_NAME).     errors.getPropertyAccessor().registerCustomEditor(Float.class, new SimpleFloatEditor()).     exposeBindingResult(errors).     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, "12.34f"). }
true;public;0;15;/**  * See SPR-3127 (http://opensource.atlassian.com/projects/spring/browse/SPR-3127)  */ ;/**  * See SPR-3127 (http://opensource.atlassian.com/projects/spring/browse/SPR-3127)  */ @Test public void readOnlyAttributeRenderingWhenReadonlyIsTrue() throws Exception {     this.tag.setPath("name").     this.tag.setReadonly(true).     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertContainsAttribute(output, "readonly", "readonly").     assertValueAttribute(output, "Rob"). }
false;public;0;14;;@Test public void dynamicTypeAttribute() throws JspException {     this.tag.setPath("myFloat").     this.tag.setDynamicAttribute(null, "type", "number").     assertEquals(Tag.SKIP_BODY, this.tag.doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", "number").     assertValueAttribute(output, "12.34"). }
false;public;0;10;;@Test public void dynamicTypeRadioAttribute() throws JspException {     try {         this.tag.setDynamicAttribute(null, "type", "radio").         fail("Expected exception").     } catch (IllegalArgumentException e) {         assertEquals("Attribute type=\"radio\" is not allowed", e.getMessage()).     } }
false;public;0;10;;@Test public void dynamicTypeCheckboxAttribute() throws JspException {     try {         this.tag.setDynamicAttribute(null, "type", "checkbox").         fail("Expected exception").     } catch (IllegalArgumentException e) {         assertEquals("Attribute type=\"checkbox\" is not allowed", e.getMessage()).     } }
false;protected,final;1;3;;protected final void assertTagClosed(String output) {     assertTrue("Tag not closed properly", output.endsWith("/>")). }
false;protected,final;1;3;;protected final void assertTagOpened(String output) {     assertTrue("Tag not opened properly", output.startsWith("<input ")). }
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(writer). }
false;protected;1;9;;@SuppressWarnings("serial") protected InputTag createTag(final Writer writer) {     return new InputTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(writer).         }     }. }
false;protected;0;3;;protected String getType() {     return "text". }
