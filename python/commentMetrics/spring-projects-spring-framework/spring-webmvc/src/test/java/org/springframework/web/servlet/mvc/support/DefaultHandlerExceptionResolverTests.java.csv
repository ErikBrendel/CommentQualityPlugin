commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     exceptionResolver.setWarnLogCategory(exceptionResolver.getClass().getName()). }
false;public;0;10;;@Test public void handleHttpRequestMethodNotSupported() {     HttpRequestMethodNotSupportedException ex = new HttpRequestMethodNotSupportedException("GET", new String[] { "POST", "PUT" }).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 405, response.getStatus()).     assertEquals("Invalid Allow header", "POST, PUT", response.getHeader("Allow")). }
false;public;0;10;;@Test public void handleHttpMediaTypeNotSupported() {     HttpMediaTypeNotSupportedException ex = new HttpMediaTypeNotSupportedException(new MediaType("text", "plain"), Collections.singletonList(new MediaType("application", "pdf"))).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 415, response.getStatus()).     assertEquals("Invalid Accept header", "application/pdf", response.getHeader("Accept")). }
false;public;0;12;;@Test public void handleMissingPathVariable() throws NoSuchMethodException {     Method method = getClass().getMethod("handle", String.class).     MethodParameter parameter = new MethodParameter(method, 0).     MissingPathVariableException ex = new MissingPathVariableException("foo", parameter).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 500, response.getStatus()).     assertEquals("Missing URI template variable 'foo' for method parameter of type String", response.getErrorMessage()). }
false;public;0;9;;@Test public void handleMissingServletRequestParameter() {     MissingServletRequestParameterException ex = new MissingServletRequestParameterException("foo", "bar").     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 400, response.getStatus()).     assertEquals("Required bar parameter 'foo' is not present", response.getErrorMessage()). }
false;public;0;9;;@Test public void handleServletRequestBindingException() {     String message = "Missing required value - header, cookie, or pathvar".     ServletRequestBindingException ex = new ServletRequestBindingException(message).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 400, response.getStatus()). }
false;public;0;8;;@Test public void handleTypeMismatch() {     TypeMismatchException ex = new TypeMismatchException("foo", String.class).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 400, response.getStatus()). }
false;public;0;8;;@Test public void handleHttpMessageNotReadable() {     HttpMessageNotReadableException ex = new HttpMessageNotReadableException("foo").     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 400, response.getStatus()). }
false;public;0;8;;@Test public void handleHttpMessageNotWritable() {     HttpMessageNotWritableException ex = new HttpMessageNotWritableException("foo").     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 500, response.getStatus()). }
false;public;0;11;;@Test public void handleMethodArgumentNotValid() throws Exception {     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(new TestBean(), "testBean").     errors.rejectValue("name", "invalid").     MethodParameter parameter = new MethodParameter(this.getClass().getMethod("handle", String.class), 0).     MethodArgumentNotValidException ex = new MethodArgumentNotValidException(parameter, errors).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 400, response.getStatus()). }
false;public;0;11;;@Test public void handleMissingServletRequestPartException() throws Exception {     MissingServletRequestPartException ex = new MissingServletRequestPartException("name").     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 400, response.getStatus()).     assertTrue(response.getErrorMessage().contains("request part")).     assertTrue(response.getErrorMessage().contains("name")).     assertTrue(response.getErrorMessage().contains("not present")). }
false;public;0;8;;@Test public void handleBindException() throws Exception {     BindException ex = new BindException(new Object(), "name").     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 400, response.getStatus()). }
false;public;0;11;;@Test public void handleNoHandlerFoundException() throws Exception {     ServletServerHttpRequest req = new ServletServerHttpRequest(new MockHttpServletRequest("GET", "/resource")).     NoHandlerFoundException ex = new NoHandlerFoundException(req.getMethod().name(), req.getServletRequest().getRequestURI(), req.getHeaders()).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 404, response.getStatus()). }
false;public;0;12;;@Test public void handleConversionNotSupportedException() throws Exception {     ConversionNotSupportedException ex = new ConversionNotSupportedException(new Object(), String.class, new Exception()).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 500, response.getStatus()).     // SPR-9653     assertSame(ex, request.getAttribute("javax.servlet.error.exception")). }
false;public;0;8;;// SPR-14669 @Test public void handleAsyncRequestTimeoutException() throws Exception {     Exception ex = new AsyncRequestTimeoutException().     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNotNull("No ModelAndView returned", mav).     assertTrue("No Empty ModelAndView returned", mav.isEmpty()).     assertEquals("Invalid status code", 503, response.getStatus()). }
false;public;1;3;;@SuppressWarnings("unused") public void handle(String arg) { }
