commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(getWriter()). }
false;public;0;6;;@Override public String getName() {     // RequestDataValueDataProcessor     return "testName". }
false;protected;0;20;;@Override @SuppressWarnings("serial") protected void onSetUp() {     this.tag = new OptionTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(getWriter()).         }     }.     this.parentTag = new SelectTag() {          @Override         public String getName() {             // RequestDataValueDataProcessor             return "testName".         }     }.     this.tag.setParent(this.parentTag).     this.tag.setPageContext(getPageContext()). }
false;public;0;21;;@Test public void canBeDisabledEvenWhenSelected() throws Exception {     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue("bar").     this.tag.setLabel("Bar").     this.tag.setDisabled(true).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "bar").     assertContainsAttribute(output, "disabled", "disabled").     assertBlockTagContains(output, "Bar"). }
false;public;0;19;;@Test public void renderNotSelected() throws Exception {     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue("bar").     this.tag.setLabel("Bar").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "bar").     assertBlockTagContains(output, "Bar"). }
false;public;0;27;;@Test public void renderWithDynamicAttributes() throws Exception {     String dynamicAttribute1 = "attr1".     String dynamicAttribute2 = "attr2".     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue("bar").     this.tag.setLabel("Bar").     this.tag.setDynamicAttribute(null, dynamicAttribute1, dynamicAttribute1).     this.tag.setDynamicAttribute(null, dynamicAttribute2, dynamicAttribute2).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "bar").     assertContainsAttribute(output, dynamicAttribute1, dynamicAttribute1).     assertContainsAttribute(output, dynamicAttribute2, dynamicAttribute2).     assertBlockTagContains(output, "Bar"). }
false;public;0;22;;@Test public void renderSelected() throws Exception {     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setId("myOption").     this.tag.setValue("foo").     this.tag.setLabel("Foo").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "id", "myOption").     assertContainsAttribute(output, "value", "foo").     assertContainsAttribute(output, "selected", "selected").     assertBlockTagContains(output, "Foo"). }
false;public;0;22;;@Test public void withNoLabel() throws Exception {     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue("bar").     this.tag.setCssClass("myClass").     this.tag.setOnclick("CLICK").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "bar").     assertContainsAttribute(output, "class", "myClass").     assertContainsAttribute(output, "onclick", "CLICK").     assertBlockTagContains(output, "bar"). }
false;public;0;13;;@Test public void withoutContext() throws Exception {     this.tag.setParent(null).     this.tag.setValue("foo").     this.tag.setLabel("Foo").     try {         tag.doStartTag().         fail("Must not be able to use <option> tag without exposed context.").     } catch (IllegalStateException ex) {     // expected     } }
false;public;0;4;;@Override public PropertyEditor getEditor() {     return new StringArrayPropertyEditor(). }
false;public;0;28;;@Test public void withPropertyEditor() throws Exception {     String selectName = "testBean.stringArray".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false) {          @Override         public PropertyEditor getEditor() {             return new StringArrayPropertyEditor().         }     }.     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue(ARRAY_SOURCE).     this.tag.setLabel("someArray").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", ARRAY_SOURCE).     assertContainsAttribute(output, "selected", "selected").     assertBlockTagContains(output, "someArray"). }
false;public;0;4;;@Override public PropertyEditor getEditor() {     return testBeanEditor. }
false;public;0;27;;@Test public void withPropertyEditorStringComparison() throws Exception {     final PropertyEditor testBeanEditor = new TestBeanPropertyEditor().     testBeanEditor.setValue(new TestBean("Sally")).     String selectName = "testBean.spouse".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false) {          @Override         public PropertyEditor getEditor() {             return testBeanEditor.         }     }.     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue("Sally").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "Sally").     assertContainsAttribute(output, "selected", "selected").     assertBlockTagContains(output, "Sally"). }
false;public;0;20;;@Test public void withCustomObjectSelected() throws Exception {     String selectName = "testBean.someNumber".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue(new Float(12.34)).     this.tag.setLabel("GBP 12.34").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "12.34").     assertContainsAttribute(output, "selected", "selected").     assertBlockTagContains(output, "GBP 12.34"). }
false;public;0;20;;@Test public void withCustomObjectNotSelected() throws Exception {     String selectName = "testBean.someNumber".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue(new Float(12.35)).     this.tag.setLabel("GBP 12.35").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", "12.35").     assertAttributeNotPresent(output, "selected").     assertBlockTagContains(output, "GBP 12.35"). }
false;public;0;4;;@Override public PropertyEditor getEditor() {     return floatEditor. }
false;public;0;27;;@Test public void withCustomObjectAndEditorSelected() throws Exception {     final PropertyEditor floatEditor = new SimpleFloatEditor().     floatEditor.setValue(new Float("12.34")).     String selectName = "testBean.someNumber".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false) {          @Override         public PropertyEditor getEditor() {             return floatEditor.         }     }.     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue(new Float(12.34)).     this.tag.setLabel("12.34f").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "selected", "selected").     assertBlockTagContains(output, "12.34f"). }
false;public;0;4;;@Override public PropertyEditor getEditor() {     return floatEditor. }
false;public;0;26;;@Test public void withCustomObjectAndEditorNotSelected() throws Exception {     final PropertyEditor floatEditor = new SimpleFloatEditor().     String selectName = "testBean.someNumber".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false) {          @Override         public PropertyEditor getEditor() {             return floatEditor.         }     }.     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue(new Float(12.35)).     this.tag.setLabel("12.35f").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertAttributeNotPresent(output, "selected").     assertBlockTagContains(output, "12.35f"). }
false;public;0;21;;@Test public void asBodyTag() throws Exception {     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     String bodyContent = "some content".     this.tag.setValue("foo").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     this.tag.setBodyContent(new MockBodyContent(bodyContent, getWriter())).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "selected", "selected").     assertBlockTagContains(output, bodyContent). }
false;public;0;20;;@Test public void asBodyTagSelected() throws Exception {     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     String bodyContent = "some content".     this.tag.setValue("Rob Harrop").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     this.tag.setBodyContent(new MockBodyContent(bodyContent, getWriter())).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertBlockTagContains(output, bodyContent). }
false;public;0;21;;@Test public void asBodyTagCollapsed() throws Exception {     String selectName = "testBean.name".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     String bodyContent = "some content".     this.tag.setValue(bodyContent).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     this.tag.setBodyContent(new MockBodyContent(bodyContent, getWriter())).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertOptionTagOpened(output).     assertOptionTagClosed(output).     assertContainsAttribute(output, "value", bodyContent).     assertBlockTagContains(output, bodyContent). }
false;public;0;4;;@Override public PropertyEditor getEditor() {     return new RulesVariantEditor(). }
false;public;0;23;;@Test public void asBodyTagWithEditor() throws Exception {     String selectName = "testBean.stringArray".     BindStatus bindStatus = new BindStatus(getRequestContext(), selectName, false) {          @Override         public PropertyEditor getEditor() {             return new RulesVariantEditor().         }     }.     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     RulesVariant rulesVariant = new RulesVariant("someRules", "someVariant").     this.tag.setValue(rulesVariant).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     assertEquals(rulesVariant, getPageContext().getAttribute("value")).     assertEquals(rulesVariant.toId(), getPageContext().getAttribute("displayValue")).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result). }
false;public;0;15;;@Test public void multiBind() throws Exception {     BeanPropertyBindingResult result = new BeanPropertyBindingResult(new TestBean(), "testBean").     result.getPropertyAccessor().registerCustomEditor(TestBean.class, "friends", new FriendEditor()).     exposeBindingResult(result).     BindStatus bindStatus = new BindStatus(getRequestContext(), "testBean.friends", false).     getPageContext().setAttribute(SelectTag.LIST_VALUE_PAGE_ATTRIBUTE, bindStatus).     this.tag.setValue(new TestBean("foo")).     this.tag.doStartTag().     this.tag.doEndTag().     assertEquals("<option value=\"foo\">foo</option>", getOutput()). }
false;public;0;12;;@Test public void optionTagNotNestedWithinSelectTag() throws Exception {     try {         tag.setParent(null).         tag.setValue("foo").         tag.doStartTag().         fail("Must throw an IllegalStateException when not nested within a <select/> tag.").     } catch (IllegalStateException ex) {     // expected     } }
false;private;1;3;;private void assertOptionTagOpened(String output) {     assertTrue(output.startsWith("<option")). }
false;private;1;3;;private void assertOptionTagClosed(String output) {     assertTrue(output.endsWith("</option>")). }
false;protected;1;16;;@Override protected void extendRequest(MockHttpServletRequest request) {     TestBean bean = new TestBean().     bean.setName("foo").     bean.setFavouriteColour(Colour.GREEN).     bean.setStringArray(ARRAY).     bean.setSpouse(new TestBean("Sally")).     bean.setSomeNumber(new Float("12.34")).     List friends = new ArrayList().     friends.add(new TestBean("bar")).     friends.add(new TestBean("penc")).     bean.setFriends(friends).     request.setAttribute("testBean", bean). }
false;public;1;4;;@Override public void setAsText(String text) throws IllegalArgumentException {     setValue(new TestBean(text + "k", 123)). }
false;public;0;4;;@Override public String getAsText() {     return ((TestBean) getValue()).getName(). }
false;private;1;3;;private void setRules(String rules) {     this.rules = rules. }
false;public;0;3;;public String getRules() {     return rules. }
false;private;1;3;;private void setVariant(String variant) {     this.variant = variant. }
false;public;0;3;;public String getVariant() {     return variant. }
false;public;0;8;;public String toId() {     if (this.variant != null) {         return this.rules + "-" + this.variant.     } else {         return rules.     } }
false;public,static;1;6;;public static RulesVariant fromId(String id) {     String[] s = id.split("-", 2).     String rules = s[0].     String variant = s.length > 1 ? s[1] : null.     return new RulesVariant(rules, variant). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj instanceof RulesVariant) {         RulesVariant other = (RulesVariant) obj.         return this.toId().equals(other.toId()).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return this.toId().hashCode(). }
false;public;1;4;;@Override public void setAsText(String text) throws IllegalArgumentException {     setValue(RulesVariant.fromId(text)). }
false;public;0;5;;@Override public String getAsText() {     RulesVariant rulesVariant = (RulesVariant) getValue().     return rulesVariant.toId(). }
false;public;1;4;;@Override public void setAsText(String text) throws IllegalArgumentException {     setValue(new TestBean(text)). }
false;public;0;4;;@Override public String getAsText() {     return ((TestBean) getValue()).getName(). }
