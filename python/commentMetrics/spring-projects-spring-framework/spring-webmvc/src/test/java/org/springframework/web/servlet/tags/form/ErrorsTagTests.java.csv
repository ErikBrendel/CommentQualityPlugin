commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(getWriter()). }
false;protected;0;13;;@Override @SuppressWarnings("serial") protected void onSetUp() {     this.tag = new ErrorsTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(getWriter()).         }     }.     this.tag.setPath("name").     this.tag.setParent(getFormTag()).     this.tag.setPageContext(getPageContext()). }
false;protected;0;4;;@Override protected TestBean createTestBean() {     return new TestBean(). }
false;public;0;20;;@Test public void withExplicitNonWhitespaceBodyContent() throws Exception {     String mockContent = "This is some explicit body content".     this.tag.setBodyContent(new MockBodyContent(mockContent, getWriter())).     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default Message").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     assertEquals(mockContent, getOutput()). }
false;public;0;25;;@Test public void withExplicitWhitespaceBodyContent() throws Exception {     this.tag.setBodyContent(new MockBodyContent("\t\n   ", getWriter())).     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default Message").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertElementTagOpened(output).     assertElementTagClosed(output).     assertContainsAttribute(output, "id", "name.errors").     assertBlockTagContains(output, "Default Message"). }
false;public;0;25;;@Test public void withExplicitEmptyWhitespaceBodyContent() throws Exception {     this.tag.setBodyContent(new MockBodyContent("", getWriter())).     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default Message").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertElementTagOpened(output).     assertElementTagClosed(output).     assertContainsAttribute(output, "id", "name.errors").     assertBlockTagContains(output, "Default Message"). }
false;public;0;26;;@Test public void withErrors() throws Exception {     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default Message").     errors.rejectValue("name", "too.short", "Too Short").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertElementTagOpened(output).     assertElementTagClosed(output).     assertContainsAttribute(output, "id", "name.errors").     assertBlockTagContains(output, "<br/>").     assertBlockTagContains(output, "Default Message").     assertBlockTagContains(output, "Too Short"). }
false;public;0;34;;@Test public void withErrorsAndDynamicAttributes() throws Exception {     String dynamicAttribute1 = "attr1".     String dynamicAttribute2 = "attr2".     this.tag.setDynamicAttribute(null, dynamicAttribute1, dynamicAttribute1).     this.tag.setDynamicAttribute(null, dynamicAttribute2, dynamicAttribute2).     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default Message").     errors.rejectValue("name", "too.short", "Too Short").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertElementTagOpened(output).     assertElementTagClosed(output).     assertContainsAttribute(output, "id", "name.errors").     assertContainsAttribute(output, dynamicAttribute1, dynamicAttribute1).     assertContainsAttribute(output, dynamicAttribute2, dynamicAttribute2).     assertBlockTagContains(output, "<br/>").     assertBlockTagContains(output, "Default Message").     assertBlockTagContains(output, "Too Short"). }
false;public;0;26;;@Test public void withEscapedErrors() throws Exception {     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default <> Message").     errors.rejectValue("name", "too.short", "Too & Short").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertElementTagOpened(output).     assertElementTagClosed(output).     assertContainsAttribute(output, "id", "name.errors").     assertBlockTagContains(output, "<br/>").     assertBlockTagContains(output, "Default &lt.&gt. Message").     assertBlockTagContains(output, "Too &amp. Short"). }
false;public;0;28;;@Test public void withNonEscapedErrors() throws Exception {     this.tag.setHtmlEscape(false).     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default <> Message").     errors.rejectValue("name", "too.short", "Too & Short").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertElementTagOpened(output).     assertElementTagClosed(output).     assertContainsAttribute(output, "id", "name.errors").     assertBlockTagContains(output, "<br/>").     assertBlockTagContains(output, "Default <> Message").     assertBlockTagContains(output, "Too & Short"). }
false;public;0;27;;@Test public void withErrorsAndCustomElement() throws Exception {     // construct an errors instance of the tag     TestBean target = new TestBean().     target.setName("Rob Harrop").     Errors errors = new BeanPropertyBindingResult(target, COMMAND_NAME).     errors.rejectValue("name", "some.code", "Default Message").     errors.rejectValue("name", "too.short", "Too Short").     exposeBindingResult(errors).     this.tag.setElement("div").     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertElementTagOpened(output).     assertElementTagClosed(output).     assertContainsAttribute(output, "id", "name.errors").     assertBlockTagContains(output, "<br/>").     assertBlockTagContains(output, "Default Message").     assertBlockTagContains(output, "Too Short"). }
false;public;0;13;;@Test public void withoutErrors() throws Exception {     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertEquals(0, output.length()). }
false;public;0;11;;@Test public void withoutErrorsInstance() throws Exception {     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertEquals(0, output.length()). }
false;public;0;16;;@Test public void asBodyTag() throws Exception {     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     errors.rejectValue("name", "some.code", "Default Message").     errors.rejectValue("name", "too.short", "Too Short").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     assertNotNull(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)).     String bodyContent = "Foo".     this.tag.setBodyContent(new MockBodyContent(bodyContent, getWriter())).     this.tag.doEndTag().     this.tag.doFinally().     assertEquals(bodyContent, getOutput()).     assertNull(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)). }
false;public;0;19;;@Test public void asBodyTagWithExistingMessagesAttribute() throws Exception {     String existingAttribute = "something".     getPageContext().setAttribute(ErrorsTag.MESSAGES_ATTRIBUTE, existingAttribute).     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     errors.rejectValue("name", "some.code", "Default Message").     errors.rejectValue("name", "too.short", "Too Short").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     assertNotNull(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)).     assertTrue(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE) instanceof List).     String bodyContent = "Foo".     this.tag.setBodyContent(new MockBodyContent(bodyContent, getWriter())).     this.tag.doEndTag().     this.tag.doFinally().     assertEquals(bodyContent, getOutput()).     assertEquals(existingAttribute, getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)). }
true;public;0;20;/**  * https://jira.spring.io/browse/SPR-2788  */ ;/**  * https://jira.spring.io/browse/SPR-2788  */ @Test public void asBodyTagWithErrorsAndExistingMessagesAttributeInNonPageScopeAreNotClobbered() throws Exception {     String existingAttribute = "something".     getPageContext().setAttribute(ErrorsTag.MESSAGES_ATTRIBUTE, existingAttribute, PageContext.APPLICATION_SCOPE).     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     errors.rejectValue("name", "some.code", "Default Message").     errors.rejectValue("name", "too.short", "Too Short").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(BodyTag.EVAL_BODY_BUFFERED, result).     assertNotNull(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)).     assertTrue(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE) instanceof List).     String bodyContent = "Foo".     this.tag.setBodyContent(new MockBodyContent(bodyContent, getWriter())).     this.tag.doEndTag().     this.tag.doFinally().     assertEquals(bodyContent, getOutput()).     assertEquals(existingAttribute, getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE, PageContext.APPLICATION_SCOPE)). }
true;public;0;4;/**  * https://jira.spring.io/browse/SPR-2788  */ ;/**  * https://jira.spring.io/browse/SPR-2788  */ @Test public void asBodyTagWithNoErrorsAndExistingMessagesAttributeInApplicationScopeAreNotClobbered() throws Exception {     assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered(PageContext.APPLICATION_SCOPE). }
true;public;0;4;/**  * https://jira.spring.io/browse/SPR-2788  */ ;/**  * https://jira.spring.io/browse/SPR-2788  */ @Test public void asBodyTagWithNoErrorsAndExistingMessagesAttributeInSessionScopeAreNotClobbered() throws Exception {     assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered(PageContext.SESSION_SCOPE). }
true;public;0;4;/**  * https://jira.spring.io/browse/SPR-2788  */ ;/**  * https://jira.spring.io/browse/SPR-2788  */ @Test public void asBodyTagWithNoErrorsAndExistingMessagesAttributeInPageScopeAreNotClobbered() throws Exception {     assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered(PageContext.PAGE_SCOPE). }
true;public;0;4;/**  * https://jira.spring.io/browse/SPR-2788  */ ;/**  * https://jira.spring.io/browse/SPR-2788  */ @Test public void asBodyTagWithNoErrorsAndExistingMessagesAttributeInRequestScopeAreNotClobbered() throws Exception {     assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered(PageContext.REQUEST_SCOPE). }
true;public;0;15;/**  * https://jira.spring.io/browse/SPR-4005  */ ;/**  * https://jira.spring.io/browse/SPR-4005  */ @Test public void omittedPathMatchesObjectErrorsOnly() throws Exception {     this.tag.setPath(null).     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     errors.reject("some.code", "object error").     errors.rejectValue("name", "some.code", "field error").     exposeBindingResult(errors).     this.tag.doStartTag().     assertNotNull(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)).     this.tag.doEndTag().     String output = getOutput().     assertTrue(output.contains("id=\"testBean.errors\"")).     assertTrue(output.contains("object error")).     assertFalse(output.contains("field error")). }
false;public;0;15;;@Test public void specificPathMatchesSpecificFieldOnly() throws Exception {     this.tag.setPath("name").     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     errors.reject("some.code", "object error").     errors.rejectValue("name", "some.code", "field error").     exposeBindingResult(errors).     this.tag.doStartTag().     assertNotNull(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)).     this.tag.doEndTag().     String output = getOutput().     assertTrue(output.contains("id=\"name.errors\"")).     assertFalse(output.contains("object error")).     assertTrue(output.contains("field error")). }
false;public;0;15;;@Test public void starMatchesAllErrors() throws Exception {     this.tag.setPath("*").     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     errors.reject("some.code", "object error").     errors.rejectValue("name", "some.code", "field error").     exposeBindingResult(errors).     this.tag.doStartTag().     assertNotNull(getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE)).     this.tag.doEndTag().     String output = getOutput().     assertTrue(output.contains("id=\"testBean.errors\"")).     assertTrue(output.contains("object error")).     assertTrue(output.contains("field error")). }
false;protected;1;11;;@Override protected void exposeBindingResult(Errors errors) {     // wrap errors in a Model     Map model = new HashMap().     model.put(BindingResult.MODEL_KEY_PREFIX + COMMAND_NAME, errors).     // replace the request context with one containing the errors     MockPageContext pageContext = getPageContext().     RequestContext context = new RequestContext((HttpServletRequest) pageContext.getRequest(), model).     pageContext.setAttribute(RequestContextAwareTag.REQUEST_CONTEXT_PAGE_ATTRIBUTE, context). }
false;private;1;3;;private void assertElementTagOpened(String output) {     assertTrue(output.startsWith("<" + this.tag.getElement() + " ")). }
false;private;1;3;;private void assertElementTagClosed(String output) {     assertTrue(output.endsWith("</" + this.tag.getElement() + ">")). }
false;private;1;17;;private void assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered(int scope) throws JspException {     String existingAttribute = "something".     getPageContext().setAttribute(ErrorsTag.MESSAGES_ATTRIBUTE, existingAttribute, scope).     Errors errors = new BeanPropertyBindingResult(new TestBean(), "COMMAND_NAME").     exposeBindingResult(errors).     int result = this.tag.doStartTag().     assertEquals(Tag.SKIP_BODY, result).     result = this.tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, result).     String output = getOutput().     assertEquals(0, output.length()).     assertEquals(existingAttribute, getPageContext().getAttribute(ErrorsTag.MESSAGES_ATTRIBUTE, scope)). }
