commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     context = createPageContext().     tag = new UrlTag().     tag.setPageContext(context). }
false;public;0;4;;@Test public void paramSupport() {     assertThat(tag, instanceOf(ParamAware.class)). }
false;public;0;6;;@Test public void doStartTag() throws JspException {     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action). }
false;public;0;8;;@Test public void doEndTag() throws JspException {     tag.setValue("url/path").     tag.doStartTag().     int action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action). }
false;public;0;9;;@Test public void varDefaultScope() throws JspException {     tag.setValue("url/path").     tag.setVar("var").     tag.doStartTag().     tag.doEndTag().     assertEquals("url/path", context.getAttribute("var", PageContext.PAGE_SCOPE)). }
false;public;0;10;;@Test public void varExplicitScope() throws JspException {     tag.setValue("url/path").     tag.setVar("var").     tag.setScope("request").     tag.doStartTag().     tag.doEndTag().     assertEquals("url/path", context.getAttribute("var", PageContext.REQUEST_SCOPE)). }
false;public;0;19;;@Test public void setHtmlEscapeDefault() throws JspException {     tag.setValue("url/path").     tag.setVar("var").     tag.doStartTag().     Param param = new Param().     param.setName("n me").     param.setValue("v&l=e").     tag.addParam(param).     param = new Param().     param.setName("name").     param.setValue("value2").     tag.addParam(param).     tag.doEndTag().     assertEquals("url/path?n%20me=v%26l%3De&name=value2", context.getAttribute("var")). }
false;public;0;21;;@Test public void setHtmlEscapeFalse() throws JspException {     tag.setValue("url/path").     tag.setVar("var").     tag.setHtmlEscape(false).     tag.doStartTag().     Param param = new Param().     param.setName("n me").     param.setValue("v&l=e").     tag.addParam(param).     param = new Param().     param.setName("name").     param.setValue("value2").     tag.addParam(param).     tag.doEndTag().     assertEquals("url/path?n%20me=v%26l%3De&name=value2", context.getAttribute("var")). }
false;public;0;20;;@Test public void setHtmlEscapeTrue() throws JspException {     tag.setValue("url/path").     tag.setVar("var").     tag.setHtmlEscape(true).     tag.doStartTag().     Param param = new Param().     param.setName("n me").     param.setValue("v&l=e").     tag.addParam(param).     param = new Param().     param.setName("name").     param.setValue("value2").     tag.addParam(param).     tag.doEndTag().     assertEquals("url/path?n%20me=v%26l%3De&amp.name=value2", context.getAttribute("var")). }
false;public;0;20;;@Test public void setJavaScriptEscapeTrue() throws JspException {     tag.setValue("url/path").     tag.setVar("var").     tag.setJavaScriptEscape(true).     tag.doStartTag().     Param param = new Param().     param.setName("n me").     param.setValue("v&l=e").     tag.addParam(param).     param = new Param().     param.setName("name").     param.setValue("value2").     tag.addParam(param).     tag.doEndTag().     assertEquals("url\\/path?n%20me=v%26l%3De&name=value2", context.getAttribute("var")). }
false;public;0;21;;@Test public void setHtmlAndJavaScriptEscapeTrue() throws JspException {     tag.setValue("url/path").     tag.setVar("var").     tag.setHtmlEscape(true).     tag.setJavaScriptEscape(true).     tag.doStartTag().     Param param = new Param().     param.setName("n me").     param.setValue("v&l=e").     tag.addParam(param).     param = new Param().     param.setName("name").     param.setValue("value2").     tag.addParam(param).     tag.doEndTag().     assertEquals("url\\/path?n%20me=v%26l%3De&amp.name=value2", context.getAttribute("var")). }
false;public;0;8;;@Test public void createQueryStringNoParams() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("", queryString). }
false;public;0;13;;@Test public void createQueryStringOneParam() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("value").     params.add(param).     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("?name=value", queryString). }
false;public;0;13;;@Test public void createQueryStringOneParamForExsistingQueryString() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("value").     params.add(param).     String queryString = tag.createQueryString(params, usedParams, false).     assertEquals("&name=value", queryString). }
false;public;0;13;;@Test public void createQueryStringOneParamEmptyValue() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("").     params.add(param).     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("?name=", queryString). }
false;public;0;13;;@Test public void createQueryStringOneParamNullValue() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue(null).     params.add(param).     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("?name", queryString). }
false;public;0;14;;@Test public void createQueryStringOneParamAlreadyUsed() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("value").     params.add(param).     usedParams.add("name").     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("", queryString). }
false;public;0;18;;@Test public void createQueryStringTwoParams() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("value").     params.add(param).     param = new Param().     param.setName("name").     param.setValue("value2").     params.add(param).     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("?name=value&name=value2", queryString). }
false;public;0;18;;@Test public void createQueryStringUrlEncoding() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("n me").     param.setValue("v&l=e").     params.add(param).     param = new Param().     param.setName("name").     param.setValue("value2").     params.add(param).     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("?n%20me=v%26l%3De&name=value2", queryString). }
false;public;0;13;;@Test public void createQueryStringParamNullName() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName(null).     param.setValue("value").     params.add(param).     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("", queryString). }
false;public;0;13;;@Test public void createQueryStringParamEmptyName() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("").     param.setValue("value").     params.add(param).     String queryString = tag.createQueryString(params, usedParams, true).     assertEquals("", queryString). }
false;public;0;9;;@Test public void replaceUriTemplateParamsNoParams() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     String uri = tag.replaceUriTemplateParams("url/path", params, usedParams).     assertEquals("url/path", uri).     assertEquals(0, usedParams.size()). }
false;public;0;9;;@Test public void replaceUriTemplateParamsTemplateWithoutParamMatch() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     String uri = tag.replaceUriTemplateParams("url/{path}", params, usedParams).     assertEquals("url/{path}", uri).     assertEquals(0, usedParams.size()). }
false;public;0;15;;@Test public void replaceUriTemplateParamsTemplateWithParamMatch() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("value").     params.add(param).     String uri = tag.replaceUriTemplateParams("url/{name}", params, usedParams).     assertEquals("url/value", uri).     assertEquals(1, usedParams.size()).     assertTrue(usedParams.contains("name")). }
false;public;0;15;;@Test public void replaceUriTemplateParamsTemplateWithParamMatchNamePreEncoding() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("n me").     param.setValue("value").     params.add(param).     String uri = tag.replaceUriTemplateParams("url/{n me}", params, usedParams).     assertEquals("url/value", uri).     assertEquals(1, usedParams.size()).     assertTrue(usedParams.contains("n me")). }
false;public;0;17;;@Test public void replaceUriTemplateParamsTemplateWithParamMatchValueEncoded() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("v lue").     params.add(param).     String uri = tag.replaceUriTemplateParams("url/{name}", params, usedParams).     assertEquals("url/v%20lue", uri).     assertEquals(1, usedParams.size()).     assertTrue(usedParams.contains("name")). }
false;public;0;16;;// SPR-11401 @Test public void replaceUriTemplateParamsTemplateWithPathSegment() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("my/Id").     params.add(param).     String uri = tag.replaceUriTemplateParams("url/{/name}", params, usedParams).     assertEquals("url/my%2FId", uri).     assertEquals(1, usedParams.size()).     assertTrue(usedParams.contains("name")). }
false;public;0;15;;@Test public void replaceUriTemplateParamsTemplateWithPath() throws JspException {     List<Param> params = new LinkedList<>().     Set<String> usedParams = new HashSet<>().     Param param = new Param().     param.setName("name").     param.setValue("my/Id").     params.add(param).     String uri = tag.replaceUriTemplateParams("url/{name}", params, usedParams).     assertEquals("url/my/Id", uri).     assertEquals(1, usedParams.size()).     assertTrue(usedParams.contains("name")). }
false;public;0;8;;@Test public void createUrlRemoteServer() throws JspException {     tag.setValue("http://www.springframework.org/").     tag.doStartTag().     String uri = tag.createUrl().     assertEquals("http://www.springframework.org/", uri). }
false;public;0;8;;@Test public void createUrlRelative() throws JspException {     tag.setValue("url/path").     tag.doStartTag().     String uri = tag.createUrl().     assertEquals("url/path", uri). }
false;public;0;10;;@Test public void createUrlLocalContext() throws JspException {     ((MockHttpServletRequest) context.getRequest()).setContextPath("/app-context").     tag.setValue("/url/path").     tag.doStartTag().     String uri = tag.createUrl().     assertEquals("/app-context/url/path", uri). }
false;public;0;11;;@Test public void createUrlRemoteContext() throws JspException {     ((MockHttpServletRequest) context.getRequest()).setContextPath("/app-context").     tag.setValue("/url/path").     tag.setContext("some-other-context").     tag.doStartTag().     String uri = tag.createUrl().     assertEquals("/some-other-context/url/path", uri). }
false;public;0;11;;@Test public void createUrlRemoteContextWithSlash() throws JspException {     ((MockHttpServletRequest) context.getRequest()).setContextPath("/app-context").     tag.setValue("/url/path").     tag.setContext("/some-other-context").     tag.doStartTag().     String uri = tag.createUrl().     assertEquals("/some-other-context/url/path", uri). }
false;public;0;11;;@Test public void createUrlRemoteContextSingleSlash() throws JspException {     ((MockHttpServletRequest) context.getRequest()).setContextPath("/app-context").     tag.setValue("/url/path").     tag.setContext("/").     tag.doStartTag().     String uri = tag.createUrl().     assertEquals("/url/path", uri). }
false;public;0;18;;@Test public void createUrlWithParams() throws JspException {     tag.setValue("url/path").     tag.doStartTag().     Param param = new Param().     param.setName("name").     param.setValue("value").     tag.addParam(param).     param = new Param().     param.setName("n me").     param.setValue("v lue").     tag.addParam(param).     String uri = tag.createUrl().     assertEquals("url/path?name=value&n%20me=v%20lue", uri). }
false;public;0;18;;@Test public void createUrlWithTemplateParams() throws JspException {     tag.setValue("url/{name}").     tag.doStartTag().     Param param = new Param().     param.setName("name").     param.setValue("value").     tag.addParam(param).     param = new Param().     param.setName("n me").     param.setValue("v lue").     tag.addParam(param).     String uri = tag.createUrl().     assertEquals("url/value?n%20me=v%20lue", uri). }
false;public;0;13;;@Test public void createUrlWithParamAndExistingQueryString() throws JspException {     tag.setValue("url/path?foo=bar").     tag.doStartTag().     Param param = new Param().     param.setName("name").     param.setValue("value").     tag.addParam(param).     String uri = tag.createUrl().     assertEquals("url/path?foo=bar&name=value", uri). }
