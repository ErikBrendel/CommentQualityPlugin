commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setup() throws Exception {     this.resolver = new UriComponentsBuilderMethodArgumentResolver().     this.servletRequest = new MockHttpServletRequest().     this.webRequest = new ServletWebRequest(this.servletRequest).     Method method = this.getClass().getDeclaredMethod("handle", UriComponentsBuilder.class, ServletUriComponentsBuilder.class, int.class).     this.builderParam = new MethodParameter(method, 0).     this.servletBuilderParam = new MethodParameter(method, 1).     this.intParam = new MethodParameter(method, 2). }
false;public;0;6;;@Test public void supportsParameter() throws Exception {     assertTrue(this.resolver.supportsParameter(this.builderParam)).     assertTrue(this.resolver.supportsParameter(this.servletBuilderParam)).     assertFalse(this.resolver.supportsParameter(this.intParam)). }
false;public;0;12;;@Test public void resolveArgument() throws Exception {     this.servletRequest.setContextPath("/myapp").     this.servletRequest.setServletPath("/main").     this.servletRequest.setPathInfo("/accounts").     Object actual = this.resolver.resolveArgument(this.builderParam, new ModelAndViewContainer(), this.webRequest, null).     assertNotNull(actual).     assertEquals(ServletUriComponentsBuilder.class, actual.getClass()).     assertEquals("http://localhost/myapp/main", ((ServletUriComponentsBuilder) actual).build().toUriString()). }
false;;3;2;;void handle(UriComponentsBuilder builder, ServletUriComponentsBuilder servletBuilder, int value) { }
