commented;modifiers;parameterAmount;loc;comment;code
true;public;0;13;/**  * https://jira.spring.io/browse/SPR-2866  */ ;/**  * https://jira.spring.io/browse/SPR-2866  */ @Test public void passwordValueIsNotRenderedByDefault() throws Exception {     this.getTag().setPath("name").     assertEquals(Tag.SKIP_BODY, this.getTag().doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, ""). }
true;public;0;14;/**  * https://jira.spring.io/browse/SPR-2866  */ ;/**  * https://jira.spring.io/browse/SPR-2866  */ @Test public void passwordValueIsRenderedIfShowPasswordAttributeIsSetToTrue() throws Exception {     this.getTag().setPath("name").     this.getPasswordTag().setShowPassword(true).     assertEquals(Tag.SKIP_BODY, this.getTag().doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, "Rob"). }
true;public;0;14;/**  * https://jira.spring.io/browse/SPR-2866  */ ;/**  * https://jira.spring.io/browse/SPR-2866  */ @Test public void passwordValueIsNotRenderedIfShowPasswordAttributeIsSetToFalse() throws Exception {     this.getTag().setPath("name").     this.getPasswordTag().setShowPassword(false).     assertEquals(Tag.SKIP_BODY, this.getTag().doStartTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "type", getType()).     assertValueAttribute(output, ""). }
false;public;0;11;;@Test @Override public void dynamicTypeAttribute() throws JspException {     try {         this.getTag().setDynamicAttribute(null, "type", "email").         fail("Expected exception").     } catch (IllegalArgumentException e) {         assertEquals("Attribute type=\"email\" is not allowed", e.getMessage()).     } }
false;protected;2;9;;@Override protected void assertValueAttribute(String output, String expectedValue) {     if (this.getPasswordTag().isShowPassword()) {         super.assertValueAttribute(output, expectedValue).     } else {         super.assertValueAttribute(output, "").     } }
false;protected;0;4;;@Override protected String getType() {     return "password". }
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(writer). }
false;protected;1;10;;@Override @SuppressWarnings("serial") protected InputTag createTag(final Writer writer) {     return new PasswordInputTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(writer).         }     }. }
false;private;0;3;;private PasswordInputTag getPasswordTag() {     return (PasswordInputTag) this.getTag(). }
