commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void register() throws ServletException {     initializer.onStartup(servletContext).     assertEquals(1, servlets.size()).     assertNotNull(servlets.get(SERVLET_NAME)).     DispatcherServlet servlet = (DispatcherServlet) servlets.get(SERVLET_NAME).     assertEquals(MyDispatcherServlet.class, servlet.getClass()).     WebApplicationContext servletContext = servlet.getWebApplicationContext().     assertTrue(servletContext.containsBean("bean")).     assertTrue(servletContext.getBean("bean") instanceof MyBean).     assertEquals(1, registrations.size()).     assertNotNull(registrations.get(SERVLET_NAME)).     MockServletRegistration registration = registrations.get(SERVLET_NAME).     assertEquals(Collections.singleton(SERVLET_MAPPING), registration.getMappings()).     assertEquals(1, registration.getLoadOnStartup()).     assertEquals(ROLE_NAME, registration.getRunAsRole()). }
false;public;2;7;;@Override public ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet) {     servlets.put(servletName, servlet).     MockServletRegistration registration = new MockServletRegistration().     registrations.put(servletName, registration).     return registration. }
false;protected;0;4;;@Override protected String getServletName() {     return SERVLET_NAME. }
false;protected;1;4;;@Override protected DispatcherServlet createDispatcherServlet(WebApplicationContext servletAppContext) {     return new MyDispatcherServlet(servletAppContext). }
false;protected;0;6;;@Override protected WebApplicationContext createServletApplicationContext() {     StaticWebApplicationContext servletContext = new StaticWebApplicationContext().     servletContext.registerSingleton("bean", MyBean.class).     return servletContext. }
false;protected;0;4;;@Override protected String[] getServletMappings() {     return new String[] { SERVLET_MAPPING }. }
false;protected;1;4;;@Override protected void customizeRegistration(ServletRegistration.Dynamic registration) {     registration.setRunAsRole("role"). }
false;protected;0;4;;@Override protected WebApplicationContext createRootApplicationContext() {     return null. }
