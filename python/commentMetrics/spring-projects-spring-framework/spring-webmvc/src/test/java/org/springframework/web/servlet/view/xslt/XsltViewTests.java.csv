commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void withNoSource() throws Exception {     final XsltView view = getXsltView(HTML_OUTPUT).     view.render(emptyMap(), request, response). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void withoutUrl() throws Exception {     final XsltView view = new XsltView().     view.afterPropertiesSet(). }
false;public;0;5;;@Test public void simpleTransformWithSource() throws Exception {     Source source = new StreamSource(getProductDataResource().getInputStream()).     doTestWithModel(singletonMap("someKey", source)). }
false;public;0;5;;@Test public void testSimpleTransformWithDocument() throws Exception {     org.w3c.dom.Document document = getDomDocument().     doTestWithModel(singletonMap("someKey", document)). }
false;public;0;5;;@Test public void testSimpleTransformWithNode() throws Exception {     org.w3c.dom.Document document = getDomDocument().     doTestWithModel(singletonMap("someKey", document.getDocumentElement())). }
false;public;0;4;;@Test public void testSimpleTransformWithInputStream() throws Exception {     doTestWithModel(singletonMap("someKey", getProductDataResource().getInputStream())). }
false;public;0;4;;@Test public void testSimpleTransformWithReader() throws Exception {     doTestWithModel(singletonMap("someKey", new InputStreamReader(getProductDataResource().getInputStream()))). }
false;public;0;4;;@Test public void testSimpleTransformWithResource() throws Exception {     doTestWithModel(singletonMap("someKey", getProductDataResource())). }
false;public;0;12;;@Test public void testWithSourceKey() throws Exception {     XsltView view = getXsltView(HTML_OUTPUT).     view.setSourceKey("actualData").     Map<String, Object> model = new HashMap<>().     model.put("actualData", getProductDataResource()).     model.put("otherData", new ClassPathResource("dummyData.xsl", getClass())).     view.render(model, this.request, this.response).     assertHtmlOutput(this.response.getContentAsString()). }
false;public;0;9;;@Test public void testContentTypeCarriedFromTemplate() throws Exception {     XsltView view = getXsltView(HTML_OUTPUT).     Source source = new StreamSource(getProductDataResource().getInputStream()).     view.render(singletonMap("someKey", source), this.request, this.response).     assertTrue(this.response.getContentType().startsWith("text/html")).     assertEquals("UTF-8", this.response.getCharacterEncoding()). }
false;public;0;8;;@Test public void testModelParametersCarriedAcross() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("someKey", getProductDataResource()).     model.put("title", "Product List").     doTestWithModel(model).     assertTrue(this.response.getContentAsString().contains("Product List")). }
false;public;0;15;;@Test public void testStaticAttributesCarriedAcross() throws Exception {     XsltView view = getXsltView(HTML_OUTPUT).     view.setSourceKey("actualData").     view.addStaticAttribute("title", "Product List").     Map<String, Object> model = new HashMap<>().     model.put("actualData", getProductDataResource()).     model.put("otherData", new ClassPathResource("dummyData.xsl", getClass())).     view.render(model, this.request, this.response).     assertHtmlOutput(this.response.getContentAsString()).     assertTrue(this.response.getContentAsString().contains("Product List")). }
false;private;0;6;;private org.w3c.dom.Document getDomDocument() throws ParserConfigurationException, SAXException, IOException {     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance().     DocumentBuilder builder = dbf.newDocumentBuilder().     org.w3c.dom.Document document = builder.parse(getProductDataResource().getInputStream()).     return document. }
false;private;1;5;;private void doTestWithModel(Map<String, Object> model) throws Exception {     XsltView view = getXsltView(HTML_OUTPUT).     view.render(model, this.request, this.response).     assertHtmlOutput(this.response.getContentAsString()). }
false;private;1;15;;@SuppressWarnings("rawtypes") private void assertHtmlOutput(String output) throws Exception {     SAXReader reader = new SAXReader().     Document document = reader.read(new StringReader(output)).     List nodes = document.getRootElement().selectNodes("/html/body/table/tr").     Element tr1 = (Element) nodes.get(0).     assertRowElement(tr1, "1", "Whatsit", "12.99").     Element tr2 = (Element) nodes.get(1).     assertRowElement(tr2, "2", "Thingy", "13.99").     Element tr3 = (Element) nodes.get(2).     assertRowElement(tr3, "3", "Gizmo", "14.99").     Element tr4 = (Element) nodes.get(3).     assertRowElement(tr4, "4", "Cranktoggle", "11.99"). }
false;private;4;9;;private void assertRowElement(Element elem, String id, String name, String price) {     Element idElem = (Element) elem.elements().get(0).     Element nameElem = (Element) elem.elements().get(1).     Element priceElem = (Element) elem.elements().get(2).     assertEquals("ID incorrect.", id, idElem.getText()).     assertEquals("Name incorrect.", name, nameElem.getText()).     assertEquals("Price incorrect.", price, priceElem.getText()). }
false;private;1;7;;private XsltView getXsltView(String templatePath) {     XsltView view = new XsltView().     view.setUrl(templatePath).     view.setApplicationContext(new StaticApplicationContext()).     view.initApplicationContext().     return view. }
false;private;0;3;;private Resource getProductDataResource() {     return new ClassPathResource("productData.xml", getClass()). }
