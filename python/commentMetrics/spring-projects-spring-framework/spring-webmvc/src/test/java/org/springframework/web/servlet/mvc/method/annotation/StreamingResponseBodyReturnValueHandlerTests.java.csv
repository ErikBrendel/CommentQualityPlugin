commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setup() throws Exception {     this.handler = new StreamingResponseBodyReturnValueHandler().     this.mavContainer = new ModelAndViewContainer().     this.request = new MockHttpServletRequest("GET", "/path").     this.response = new MockHttpServletResponse().     this.webRequest = new ServletWebRequest(this.request, this.response).     AsyncWebRequest asyncWebRequest = new StandardServletAsyncWebRequest(this.request, this.response).     WebAsyncUtils.getAsyncManager(this.webRequest).setAsyncWebRequest(asyncWebRequest).     this.request.setAsyncSupported(true). }
false;public;0;7;;@Test public void supportsReturnType() throws Exception {     assertTrue(this.handler.supportsReturnType(returnType(TestController.class, "handle"))).     assertTrue(this.handler.supportsReturnType(returnType(TestController.class, "handleResponseEntity"))).     assertFalse(this.handler.supportsReturnType(returnType(TestController.class, "handleResponseEntityString"))).     assertFalse(this.handler.supportsReturnType(returnType(TestController.class, "handleResponseEntityParameterized"))). }
false;public;0;15;;@Test public void streamingResponseBody() throws Exception {     CountDownLatch latch = new CountDownLatch(1).     MethodParameter returnType = returnType(TestController.class, "handle").     StreamingResponseBody streamingBody = outputStream -> {         outputStream.write("foo".getBytes(StandardCharsets.UTF_8)).         latch.countDown().     }.     this.handler.handleReturnValue(streamingBody, returnType, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertTrue(latch.await(5, TimeUnit.SECONDS)).     assertEquals("foo", this.response.getContentAsString()). }
false;public;0;20;;@Test public void responseEntity() throws Exception {     CountDownLatch latch = new CountDownLatch(1).     MethodParameter returnType = returnType(TestController.class, "handleResponseEntity").     ResponseEntity<StreamingResponseBody> emitter = ResponseEntity.ok().header("foo", "bar").body(outputStream -> {         outputStream.write("foo".getBytes(StandardCharsets.UTF_8)).         latch.countDown().     }).     this.handler.handleReturnValue(emitter, returnType, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertEquals(200, this.response.getStatus()).     assertEquals("bar", this.response.getHeader("foo")).     assertTrue(latch.await(5, TimeUnit.SECONDS)).     assertEquals("foo", this.response.getContentAsString()). }
false;public;0;9;;@Test public void responseEntityNoContent() throws Exception {     MethodParameter returnType = returnType(TestController.class, "handleResponseEntity").     ResponseEntity<?> emitter = ResponseEntity.noContent().build().     this.handler.handleReturnValue(emitter, returnType, this.mavContainer, this.webRequest).     assertFalse(this.request.isAsyncStarted()).     assertEquals(204, this.response.getStatus()). }
false;public;0;8;;@Test public void responseEntityWithHeadersAndNoContent() throws Exception {     ResponseEntity<?> emitter = ResponseEntity.noContent().header("foo", "bar").build().     MethodParameter returnType = returnType(TestController.class, "handleResponseEntity").     this.handler.handleReturnValue(emitter, returnType, this.mavContainer, this.webRequest).     assertEquals(Collections.singletonList("bar"), this.response.getHeaders("foo")). }
false;private;2;4;;private MethodParameter returnType(Class<?> clazz, String methodName) throws NoSuchMethodException {     Method method = clazz.getDeclaredMethod(methodName).     return new MethodParameter(method, -1). }
false;private;0;3;;private StreamingResponseBody handle() {     return null. }
false;private;0;3;;private ResponseEntity<StreamingResponseBody> handleResponseEntity() {     return null. }
false;private;0;3;;private ResponseEntity<String> handleResponseEntityString() {     return null. }
false;private;0;3;;private ResponseEntity<AtomicReference<String>> handleResponseEntityParameterized() {     return null. }
