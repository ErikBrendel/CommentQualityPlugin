commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected DispatcherServlet getServlet() {     assertNotNull("DispatcherServlet not initialized", servlet).     return servlet. }
false;public;0;4;;@After public void tearDown() {     this.servlet = null. }
true;protected;1;5;/**  * Initialize a DispatcherServlet instance registering zero or more controller classes.  */ ;/**  * Initialize a DispatcherServlet instance registering zero or more controller classes.  */ protected WebApplicationContext initServletWithControllers(final Class<?>... controllerClasses) throws ServletException {     return initServlet(null, controllerClasses). }
false;protected;1;25;;@Override protected WebApplicationContext createWebApplicationContext(@Nullable WebApplicationContext parent) {     for (Class<?> clazz : controllerClasses) {         wac.registerBeanDefinition(clazz.getSimpleName(), new RootBeanDefinition(clazz)).     }     RootBeanDefinition mappingDef = new RootBeanDefinition(RequestMappingHandlerMapping.class).     mappingDef.getPropertyValues().add("removeSemicolonContent", "false").     wac.registerBeanDefinition("handlerMapping", mappingDef).     wac.registerBeanDefinition("handlerAdapter", new RootBeanDefinition(RequestMappingHandlerAdapter.class)).     wac.registerBeanDefinition("requestMappingResolver", new RootBeanDefinition(ExceptionHandlerExceptionResolver.class)).     wac.registerBeanDefinition("responseStatusResolver", new RootBeanDefinition(ResponseStatusExceptionResolver.class)).     wac.registerBeanDefinition("defaultResolver", new RootBeanDefinition(DefaultHandlerExceptionResolver.class)).     if (initializer != null) {         initializer.initialize(wac).     }     wac.refresh().     return wac. }
true;protected;2;39;/**  * Initialize a DispatcherServlet instance registering zero or more controller classes  * and also providing additional bean definitions through a callback.  */ ;/**  * Initialize a DispatcherServlet instance registering zero or more controller classes  * and also providing additional bean definitions through a callback.  */ @SuppressWarnings("serial") protected WebApplicationContext initServlet(final ApplicationContextInitializer<GenericWebApplicationContext> initializer, final Class<?>... controllerClasses) throws ServletException {     final GenericWebApplicationContext wac = new GenericWebApplicationContext().     servlet = new DispatcherServlet() {          @Override         protected WebApplicationContext createWebApplicationContext(@Nullable WebApplicationContext parent) {             for (Class<?> clazz : controllerClasses) {                 wac.registerBeanDefinition(clazz.getSimpleName(), new RootBeanDefinition(clazz)).             }             RootBeanDefinition mappingDef = new RootBeanDefinition(RequestMappingHandlerMapping.class).             mappingDef.getPropertyValues().add("removeSemicolonContent", "false").             wac.registerBeanDefinition("handlerMapping", mappingDef).             wac.registerBeanDefinition("handlerAdapter", new RootBeanDefinition(RequestMappingHandlerAdapter.class)).             wac.registerBeanDefinition("requestMappingResolver", new RootBeanDefinition(ExceptionHandlerExceptionResolver.class)).             wac.registerBeanDefinition("responseStatusResolver", new RootBeanDefinition(ResponseStatusExceptionResolver.class)).             wac.registerBeanDefinition("defaultResolver", new RootBeanDefinition(DefaultHandlerExceptionResolver.class)).             if (initializer != null) {                 initializer.initialize(wac).             }             wac.refresh().             return wac.         }     }.     servlet.init(new MockServletConfig()).     return wac. }
