commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void emptyValueMapping() throws Exception {     initServletWithControllers(ControllerWithEmptyValueMapping.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo").     request.setContextPath("/foo").     request.setServletPath("").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("test", response.getContentAsString()). }
false;public;0;11;;@Test public void errorThrownFromHandlerMethod() throws Exception {     initServletWithControllers(ControllerWithErrorThrown.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo").     request.setContextPath("/foo").     request.setServletPath("").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("test", response.getContentAsString()). }
false;public;0;9;;@Test public void customAnnotationController() throws Exception {     initServletWithControllers(CustomAnnotationController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Invalid response status code", HttpServletResponse.SC_OK, response.getStatus()). }
false;public;0;10;;@Test public void requiredParamMissing() throws Exception {     WebApplicationContext webAppContext = initServletWithControllers(RequiredParamController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Invalid response status code", HttpServletResponse.SC_BAD_REQUEST, response.getStatus()).     assertTrue(webAppContext.isSingleton(RequiredParamController.class.getSimpleName())). }
false;public;0;10;;@Test public void typeConversionError() throws Exception {     initServletWithControllers(RequiredParamController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("id", "foo").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Invalid response status code", HttpServletResponse.SC_BAD_REQUEST, response.getStatus()). }
false;public;0;12;;@Test public void optionalParamPresent() throws Exception {     initServletWithControllers(OptionalParamController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("id", "val").     request.addParameter("flag", "true").     request.addHeader("header", "otherVal").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("val-true-otherVal", response.getContentAsString()). }
false;public;0;9;;@Test public void optionalParamMissing() throws Exception {     initServletWithControllers(OptionalParamController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("null-false-null", response.getContentAsString()). }
false;public;0;9;;@Test public void defaultParameters() throws Exception {     initServletWithControllers(DefaultValueParamController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("foo--bar", response.getContentAsString()). }
false;public;0;20;;@Test public void defaultExpressionParameters() throws Exception {     initServlet(wac -> {         RootBeanDefinition ppc = new RootBeanDefinition(PropertyPlaceholderConfigurer.class).         ppc.getPropertyValues().add("properties", "myKey=foo").         wac.registerBeanDefinition("ppc", ppc).     }, DefaultExpressionValueParamController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myApp/myPath.do").     request.setContextPath("/myApp").     MockHttpServletResponse response = new MockHttpServletResponse().     System.setProperty("myHeader", "bar").     try {         getServlet().service(request, response).     } finally {         System.clearProperty("myHeader").     }     assertEquals("foo-bar-/myApp", response.getContentAsString()). }
false;public;0;18;;@Test public void typeNestedSetBinding() throws Exception {     initServlet(wac -> {         RootBeanDefinition csDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class).         csDef.getPropertyValues().add("converters", new TestBeanConverter()).         RootBeanDefinition wbiDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class).         wbiDef.getPropertyValues().add("conversionService", csDef).         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("webBindingInitializer", wbiDef).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, NestedSetController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("testBeanSet", "1", "2").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("[1, 2]-org.springframework.tests.sample.beans.TestBean", response.getContentAsString()). }
false;public;0;17;;// SPR-12903 @Test public void pathVariableWithCustomConverter() throws Exception {     initServlet(wac -> {         RootBeanDefinition csDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class).         csDef.getPropertyValues().add("converters", new AnnotatedExceptionRaisingConverter()).         RootBeanDefinition wbiDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class).         wbiDef.getPropertyValues().add("conversionService", csDef).         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("webBindingInitializer", wbiDef).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, PathVariableWithCustomConverterController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath/1").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(404, response.getStatus()). }
false;public;0;20;;@Test public void methodNotAllowed() throws Exception {     initServletWithControllers(MethodNotAllowedController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Invalid response status", HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatus()).     String allowHeader = response.getHeader("Allow").     assertNotNull("No Allow header", allowHeader).     Set<String> allowedMethods = new HashSet<>().     allowedMethods.addAll(Arrays.asList(StringUtils.delimitedListToStringArray(allowHeader, ", "))).     assertEquals("Invalid amount of supported methods", 6, allowedMethods.size()).     assertTrue("PUT not allowed", allowedMethods.contains("PUT")).     assertTrue("DELETE not allowed", allowedMethods.contains("DELETE")).     assertTrue("HEAD not allowed", allowedMethods.contains("HEAD")).     assertTrue("TRACE not allowed", allowedMethods.contains("TRACE")).     assertTrue("OPTIONS not allowed", allowedMethods.contains("OPTIONS")).     assertTrue("POST not allowed", allowedMethods.contains("POST")). }
false;public;0;16;;@Test public void emptyParameterListHandleMethod() throws Exception {     initServlet(wac -> {         RootBeanDefinition vrDef = new RootBeanDefinition(InternalResourceViewResolver.class).         vrDef.getPropertyValues().add("suffix", ".jsp").         wac.registerBeanDefinition("viewResolver", vrDef).     }, EmptyParameterListHandlerMethodController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/emptyParameterListHandler").     MockHttpServletResponse response = new MockHttpServletResponse().     EmptyParameterListHandlerMethodController.called = false.     getServlet().service(request, response).     assertTrue(EmptyParameterListHandlerMethodController.called).     assertEquals("", response.getContentAsString()). }
false;public;0;27;;@SuppressWarnings("rawtypes") @Test public void sessionAttributeExposure() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(ModelExposingViewResolver.class)), MySessionAttributesController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPage").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page1", request.getAttribute("viewName")).     HttpSession session = request.getSession().     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")).     request = new MockHttpServletRequest("POST", "/myPage").     request.setSession(session).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page2", request.getAttribute("viewName")).     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")). }
false;public;0;31;;@SuppressWarnings("rawtypes") @Test public void sessionAttributeExposureWithInterface() throws Exception {     initServlet(wac -> {         wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(ModelExposingViewResolver.class)).         DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().         autoProxyCreator.setBeanFactory(wac.getBeanFactory()).         wac.getBeanFactory().addBeanPostProcessor(autoProxyCreator).         wac.getBeanFactory().registerSingleton("advisor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     }, MySessionAttributesControllerImpl.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPage").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page1", request.getAttribute("viewName")).     HttpSession session = request.getSession().     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")).     request = new MockHttpServletRequest("POST", "/myPage").     request.setSession(session).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page2", request.getAttribute("viewName")).     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")). }
false;public;0;29;;@SuppressWarnings("rawtypes") @Test public void parameterizedAnnotatedInterface() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(ModelExposingViewResolver.class)), MyParameterizedControllerImpl.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPage").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page1", request.getAttribute("viewName")).     HttpSession session = request.getSession().     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")).     assertTrue(((Map) session.getAttribute("model")).containsKey("testBeanList")).     request = new MockHttpServletRequest("POST", "/myPage").     request.setSession(session).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page2", request.getAttribute("viewName")).     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")).     assertTrue(((Map) session.getAttribute("model")).containsKey("testBeanList")). }
false;public;0;29;;@SuppressWarnings("rawtypes") @Test public void parameterizedAnnotatedInterfaceWithOverriddenMappingsInImpl() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(ModelExposingViewResolver.class)), MyParameterizedControllerImplWithOverriddenMappings.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPage").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page1", request.getAttribute("viewName")).     HttpSession session = request.getSession().     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")).     assertTrue(((Map) session.getAttribute("model")).containsKey("testBeanList")).     request = new MockHttpServletRequest("POST", "/myPage").     request.setSession(session).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("page2", request.getAttribute("viewName")).     assertTrue(session.getAttribute("object1") != null).     assertTrue(session.getAttribute("object2") != null).     assertTrue(((Map) session.getAttribute("model")).containsKey("object1")).     assertTrue(((Map) session.getAttribute("model")).containsKey("object2")).     assertTrue(((Map) session.getAttribute("model")).containsKey("testBeanList")). }
false;public;0;4;;@Test public void adaptedHandleMethods() throws Exception {     doTestAdaptedHandleMethods(MyAdaptedController.class). }
false;public;0;4;;@Test public void adaptedHandleMethods2() throws Exception {     doTestAdaptedHandleMethods(MyAdaptedController2.class). }
false;public;0;4;;@Test public void adaptedHandleMethods3() throws Exception {     doTestAdaptedHandleMethods(MyAdaptedController3.class). }
false;private;1;37;;private void doTestAdaptedHandleMethods(final Class<?> controllerClass) throws Exception {     initServletWithControllers(controllerClass).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath1.do").     MockHttpServletResponse response = new MockHttpServletResponse().     request.addParameter("param1", "value1").     request.addParameter("param2", "2").     getServlet().service(request, response).     assertEquals("test", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myPath2.do").     request.addParameter("param1", "value1").     request.addParameter("param2", "2").     request.addHeader("header1", "10").     request.setCookies(new Cookie("cookie1", "3")).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("test-value1-2-10-3", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myPath3.do").     request.addParameter("param1", "value1").     request.addParameter("param2", "2").     request.addParameter("name", "name1").     request.addParameter("age", "2").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("test-name1-2", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myPath4.do").     request.addParameter("param1", "value1").     request.addParameter("param2", "2").     request.addParameter("name", "name1").     request.addParameter("age", "value2").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("test-name1-typeMismatch", response.getContentAsString()). }
false;public;0;13;;@Test public void formController() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)), MyFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("name", "name1").     request.addParameter("age", "value2").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-name1-typeMismatch-tb1-myValue", response.getContentAsString()). }
false;public;0;13;;@Test public void modelFormController() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)), MyModelFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("name", "name1").     request.addParameter("age", "value2").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myPath-name1-typeMismatch-tb1-myValue-yourValue", response.getContentAsString()). }
false;public;0;13;;@Test public void lateBindingFormController() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)), LateBindingFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("name", "name1").     request.addParameter("age", "value2").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-name1-typeMismatch-tb1-myValue", response.getContentAsString()). }
false;public;0;18;;@Test public void proxiedFormController() throws Exception {     initServlet(wac -> {         wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)).         DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().         autoProxyCreator.setBeanFactory(wac.getBeanFactory()).         wac.getBeanFactory().addBeanPostProcessor(autoProxyCreator).         wac.getBeanFactory().registerSingleton("advisor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     }, MyFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("name", "name1").     request.addParameter("age", "value2").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-name1-typeMismatch-tb1-myValue", response.getContentAsString()). }
false;public;0;17;;@Test public void commandProvidingFormControllerWithCustomEditor() throws Exception {     initServlet(wac -> {         wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)).         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("webBindingInitializer", new MyWebBindingInitializer()).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, MyCommandProvidingFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("defaultName", "myDefaultName").     request.addParameter("age", "value2").     request.addParameter("date", "2007-10-02").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-String:myDefaultName-typeMismatch-tb1-myOriginalValue", response.getContentAsString()). }
false;public;0;36;;@Test public void typedCommandProvidingFormController() throws Exception {     initServlet(wac -> {         wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)).         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("webBindingInitializer", new MyWebBindingInitializer()).         List<HandlerMethodArgumentResolver> argumentResolvers = new ArrayList<>().         argumentResolvers.add(new ServletWebArgumentResolverAdapter(new MySpecialArgumentResolver())).         adapterDef.getPropertyValues().add("customArgumentResolvers", argumentResolvers).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, MyTypedCommandProvidingFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("defaultName", "10").     request.addParameter("age", "value2").     request.addParameter("date", "2007-10-02").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-Integer:10-typeMismatch-tb1-myOriginalValue", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myOtherPath.do").     request.addParameter("defaultName", "10").     request.addParameter("age", "value2").     request.addParameter("date", "2007-10-02").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-myName-typeMismatch-tb1-myOriginalValue", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myThirdPath.do").     request.addParameter("defaultName", "10").     request.addParameter("age", "100").     request.addParameter("date", "2007-10-02").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-special-99-special-99", response.getContentAsString()). }
false;public;0;14;;@Test public void binderInitializingCommandProvidingFormController() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)), MyBinderInitializingCommandProvidingFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("defaultName", "myDefaultName").     request.addParameter("age", "value2").     request.addParameter("date", "2007-10-02").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-String:myDefaultName-typeMismatch-tb1-myOriginalValue", response.getContentAsString()). }
false;public;0;14;;@Test public void specificBinderInitializingCommandProvidingFormController() throws Exception {     initServlet(wac -> wac.registerBeanDefinition("viewResolver", new RootBeanDefinition(TestViewResolver.class)), MySpecificBinderInitializingCommandProvidingFormController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do").     request.addParameter("defaultName", "myDefaultName").     request.addParameter("age", "value2").     request.addParameter("date", "2007-10-02").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView-String:myDefaultName-typeMismatch-tb1-myOriginalValue", response.getContentAsString()). }
false;public;0;58;;@Test public void parameterDispatchingController() throws Exception {     final MockServletContext servletContext = new MockServletContext().     final MockServletConfig servletConfig = new MockServletConfig(servletContext).     WebApplicationContext webAppContext = initServlet(wac -> {         wac.setServletContext(servletContext).         AnnotationConfigUtils.registerAnnotationConfigProcessors(wac).         wac.getBeanFactory().registerResolvableDependency(ServletConfig.class, servletConfig).     }, MyParameterDispatchingController.class).     MockHttpServletRequest request = new MockHttpServletRequest(servletContext, "GET", "/myPath.do").     MockHttpServletResponse response = new MockHttpServletResponse().     HttpSession session = request.getSession().     getServlet().service(request, response).     assertEquals("myView", response.getContentAsString()).     assertSame(servletContext, request.getAttribute("servletContext")).     assertSame(servletConfig, request.getAttribute("servletConfig")).     assertSame(session.getId(), request.getAttribute("sessionId")).     assertSame(request.getRequestURI(), request.getAttribute("requestUri")).     assertSame(request.getLocale(), request.getAttribute("locale")).     request = new MockHttpServletRequest(servletContext, "GET", "/myPath.do").     response = new MockHttpServletResponse().     session = request.getSession().     getServlet().service(request, response).     assertEquals("myView", response.getContentAsString()).     assertSame(servletContext, request.getAttribute("servletContext")).     assertSame(servletConfig, request.getAttribute("servletConfig")).     assertSame(session.getId(), request.getAttribute("sessionId")).     assertSame(request.getRequestURI(), request.getAttribute("requestUri")).     request = new MockHttpServletRequest(servletContext, "GET", "/myPath.do").     request.addParameter("view", "other").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myOtherView", response.getContentAsString()).     request = new MockHttpServletRequest(servletContext, "GET", "/myPath.do").     request.addParameter("view", "my").     request.addParameter("lang", "de").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myLangView", response.getContentAsString()).     request = new MockHttpServletRequest(servletContext, "GET", "/myPath.do").     request.addParameter("surprise", "!").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("mySurpriseView", response.getContentAsString()).     MyParameterDispatchingController deserialized = (MyParameterDispatchingController) SerializationTestUtils.serializeAndDeserialize(webAppContext.getBean(MyParameterDispatchingController.class.getSimpleName())).     assertNotNull(deserialized.request).     assertNotNull(deserialized.session). }
false;public;0;25;;@Test public void relativePathDispatchingController() throws Exception {     initServletWithControllers(MyRelativePathDispatchingController.class).     getServlet().init(new MockServletConfig()).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myApp/myHandle").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myApp/myOther").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myOtherView", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myApp/myLang").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myLangView", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/myApp/surprise.do").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("mySurpriseView", response.getContentAsString()). }
false;public;0;25;;@Test public void relativeMethodPathDispatchingController() throws Exception {     initServletWithControllers(MyRelativeMethodPathDispatchingController.class).     getServlet().init(new MockServletConfig()).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myApp/myHandle").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/yourApp/myOther").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myOtherView", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/hisApp/myLang").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myLangView", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/herApp/surprise.do").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("mySurpriseView", response.getContentAsString()). }
false;public;0;11;;@Test public void nullCommandController() throws Exception {     initServletWithControllers(MyNullCommandController.class).     getServlet().init(new MockServletConfig()).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath").     request.setUserPrincipal(new OtherPrincipal()).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myView", response.getContentAsString()). }
false;public;0;11;;@Test public void equivalentMappingsWithSameMethodName() throws Exception {     try {         initServletWithControllers(ChildController.class).         fail("Expected 'method already mapped' error").     } catch (BeanCreationException e) {         assertTrue(e.getCause() instanceof IllegalStateException).         assertTrue(e.getCause().getMessage().contains("Ambiguous mapping")).     } }
false;public;0;9;;@Test public void pathOrdering() throws Exception {     initServletWithControllers(PathOrderingController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/dir/myPath1.do").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("method1", response.getContentAsString()). }
false;public;0;14;;@Test public void requestBodyResponseBody() throws Exception {     initServletWithControllers(RequestResponseBodyController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("Accept", "text/*, */*").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals(requestBody, response.getContentAsString()). }
false;public;0;14;;@Test public void httpPatch() throws Exception {     initServletWithControllers(RequestResponseBodyController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PATCH", "/something").     String requestBody = "Hello world!".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("Accept", "text/*, */*").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals(requestBody, response.getContentAsString()). }
false;public;0;18;;@Test public void responseBodyNoAcceptableMediaType() throws Exception {     initServlet(wac -> {         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         StringHttpMessageConverter converter = new StringHttpMessageConverter().         adapterDef.getPropertyValues().add("messageConverters", converter).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, RequestResponseBodyProducesController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("Accept", "application/pdf, application/msword").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(406, response.getStatus()). }
false;public;0;13;;@Test public void responseBodyWildCardMediaType() throws Exception {     initServletWithControllers(RequestResponseBodyController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("Accept", "*/*").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(requestBody, response.getContentAsString()). }
false;public;0;17;;@Test public void unsupportedRequestBody() throws Exception {     initServlet(wac -> {         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("messageConverters", new ByteArrayHttpMessageConverter()).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, RequestResponseBodyController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "application/pdf").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(415, response.getStatus()).     assertNotNull("No Accept response header set", response.getHeader("Accept")). }
false;public;0;13;;@Test public void responseBodyNoAcceptHeader() throws Exception {     initServletWithControllers(RequestResponseBodyController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "text/plain. charset=utf-8").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals(requestBody, response.getContentAsString()). }
false;public;0;16;;@Test public void badRequestRequestBody() throws Exception {     initServlet(wac -> {         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("messageConverters", new NotReadableMessageConverter()).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, RequestResponseBodyController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "application/pdf").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Invalid response status code", HttpServletResponse.SC_BAD_REQUEST, response.getStatus()). }
false;public;0;22;;@Test public void httpEntity() throws Exception {     initServletWithControllers(ResponseEntityController.class).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/foo").     String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("Accept", "text/*, */*").     request.addHeader("MyRequestHeader", "MyValue").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(201, response.getStatus()).     assertEquals(requestBody, response.getContentAsString()).     assertEquals("MyValue", response.getHeader("MyResponseHeader")).     request = new MockHttpServletRequest("GET", "/bar").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("MyValue", response.getHeader("MyResponseHeader")).     assertEquals(404, response.getStatus()). }
false;public;0;19;;// SPR-16172 @Test public void httpEntityWithContentType() throws Exception {     initServlet(wac -> {         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         List<HttpMessageConverter<?>> messageConverters = new ArrayList<>().         messageConverters.add(new MappingJackson2HttpMessageConverter()).         messageConverters.add(new Jaxb2RootElementHttpMessageConverter()).         adapterDef.getPropertyValues().add("messageConverters", messageConverters).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, ResponseEntityController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test-entity").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("application/xml", response.getHeader("Content-Type")).     assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "<testEntity><name>Foo Bar</name></testEntity>", response.getContentAsString()). }
false;public;0;20;;// SPR-6877 @Test public void overlappingMessageConvertersRequestBody() throws Exception {     initServlet(wac -> {         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         List<HttpMessageConverter<?>> messageConverters = new ArrayList<>().         messageConverters.add(new StringHttpMessageConverter()).         messageConverters.add(new SimpleMessageConverter(new MediaType("application", "json"), MediaType.ALL)).         adapterDef.getPropertyValues().add("messageConverters", messageConverters).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, RequestResponseBodyController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     request.setContent("Hello World".getBytes("UTF-8")).     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("Accept", "application/json, text/javascript, */*").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Invalid content-type", "application/json.charset=ISO-8859-1", response.getHeader("Content-Type")). }
false;public;0;10;;@Test public void responseBodyVoid() throws Exception {     initServletWithControllers(ResponseBodyVoidController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "text/*, */*").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()). }
false;public;0;26;;@Test public void responseBodyArgMismatch() throws Exception {     initServlet(wac -> {         Jaxb2Marshaller marshaller = new Jaxb2Marshaller().         marshaller.setClassesToBeBound(A.class, B.class).         try {             marshaller.afterPropertiesSet().         } catch (Exception ex) {             throw new BeanCreationException(ex.getMessage(), ex).         }         MarshallingHttpMessageConverter messageConverter = new MarshallingHttpMessageConverter(marshaller).         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("messageConverters", messageConverter).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, RequestBodyArgMismatchController.class).     MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something").     String requestBody = "<b/>".     request.setContent(requestBody.getBytes("UTF-8")).     request.addHeader("Content-Type", "application/xml. charset=utf-8").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(400, response.getStatus()). }
false;public;0;22;;@Test public void contentTypeHeaders() throws Exception {     initServletWithControllers(ContentTypeHeadersController.class).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/something").     request.setContentType("application/pdf").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("pdf", response.getContentAsString()).     request = new MockHttpServletRequest("POST", "/something").     request.setContentType("text/html").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("text", response.getContentAsString()).     request = new MockHttpServletRequest("POST", "/something").     request.setContentType("application/xml").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(415, response.getStatus()). }
false;public;0;22;;@Test public void consumes() throws Exception {     initServletWithControllers(ConsumesController.class).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/something").     request.setContentType("application/pdf").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("pdf", response.getContentAsString()).     request = new MockHttpServletRequest("POST", "/something").     request.setContentType("text/html").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("text", response.getContentAsString()).     request = new MockHttpServletRequest("POST", "/something").     request.setContentType("application/xml").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(415, response.getStatus()). }
false;public;0;16;;@Test public void negatedContentTypeHeaders() throws Exception {     initServletWithControllers(NegatedContentTypeHeadersController.class).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/something").     request.setContentType("application/pdf").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("pdf", response.getContentAsString()).     request = new MockHttpServletRequest("POST", "/something").     request.setContentType("text/html").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("non-pdf", response.getContentAsString()). }
false;public;0;34;;@Test public void acceptHeaders() throws Exception {     initServletWithControllers(AcceptHeadersController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "text/html").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("html", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "application/xml").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("xml", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "application/xml, text/html").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("xml", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "text/html.q=0.9, application/xml").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("xml", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "application/msword").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(406, response.getStatus()). }
false;public;0;58;;@Test public void produces() throws Exception {     initServlet(wac -> {         List<HttpMessageConverter<?>> converters = new ArrayList<>().         converters.add(new MappingJackson2HttpMessageConverter()).         converters.add(new Jaxb2RootElementHttpMessageConverter()).         RootBeanDefinition beanDef.         beanDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         beanDef.getPropertyValues().add("messageConverters", converters).         wac.registerBeanDefinition("handlerAdapter", beanDef).         beanDef = new RootBeanDefinition(ExceptionHandlerExceptionResolver.class).         beanDef.getPropertyValues().add("messageConverters", converters).         wac.registerBeanDefinition("requestMappingResolver", beanDef).     }, ProducesController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "text/html").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("html", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "application/xml").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("xml", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "application/xml, text/html").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("xml", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "text/html.q=0.9, application/xml").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("xml", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "application/msword").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(406, response.getStatus()).     // SPR-16318     request = new MockHttpServletRequest("GET", "/something").     request.addHeader("Accept", "text/csv,application/problem+json").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(500, response.getStatus()).     assertEquals("application/problem+json.charset=UTF-8", response.getContentType()).     assertEquals("{\"reason\":\"error\"}", response.getContentAsString()). }
false;public;0;11;;@Test public void responseStatus() throws Exception {     initServletWithControllers(ResponseStatusController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/something").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("something", response.getContentAsString()).     assertEquals(201, response.getStatus()).     assertEquals("It's alive!", response.getErrorMessage()). }
false;public;0;15;;@Test public void mavResolver() throws Exception {     initServlet(wac -> {         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         ModelAndViewResolver[] mavResolvers = new ModelAndViewResolver[] { new MyModelAndViewResolver() }.         adapterDef.getPropertyValues().add("modelAndViewResolvers", mavResolvers).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, ModelAndViewResolverController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myValue", response.getContentAsString()). }
false;public;0;10;;@Test public void bindingCookieValue() throws Exception {     initServletWithControllers(BindingCookieValueController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test").     request.setCookies(new Cookie("date", "2008-11-18")).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("test-2008", response.getContentAsString()). }
false;public;0;15;;@Test public void ambiguousParams() throws Exception {     initServletWithControllers(AmbiguousParamsController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("noParams", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/test").     request.addParameter("myParam", "42").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("myParam-42", response.getContentAsString()). }
false;public;0;10;;// SPR-9062 @Test public void ambiguousPathAndRequestMethod() throws Exception {     initServletWithControllers(AmbiguousPathAndRequestMethodController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bug/EXISTING").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("Pattern", response.getContentAsString()). }
false;public;0;8;;@Test public void bridgeMethods() throws Exception {     initServletWithControllers(TestControllerImpl.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/method").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response). }
false;public;0;8;;@Test public void bridgeMethodsWithMultipleInterfaces() throws Exception {     initServletWithControllers(ArticleController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/method").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response). }
false;public;0;18;;@Test public void requestParamMap() throws Exception {     initServletWithControllers(RequestParamMapController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/map").     request.addParameter("key1", "value1").     request.addParameter("key2", new String[] { "value21", "value22" }).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("key1=value1,key2=value21", response.getContentAsString()).     request.setRequestURI("/multiValueMap").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("key1=[value1],key2=[value21,value22]", response.getContentAsString()). }
false;public;0;24;;@Test public void requestHeaderMap() throws Exception {     initServletWithControllers(RequestHeaderMapController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/map").     request.addHeader("Content-Type", "text/html").     request.addHeader("Custom-Header", new String[] { "value21", "value22" }).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Content-Type=text/html,Custom-Header=value21", response.getContentAsString()).     request.setRequestURI("/multiValueMap").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Content-Type=[text/html],Custom-Header=[value21,value22]", response.getContentAsString()).     request.setRequestURI("/httpHeaders").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Content-Type=[text/html],Custom-Header=[value21,value22]", response.getContentAsString()). }
false;public;0;15;;@Test public void requestMappingInterface() throws Exception {     initServletWithControllers(IMyControllerImpl.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("handle null", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/handle").     request.addParameter("p", "value").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("handle value", response.getContentAsString()). }
false;public;0;20;;@Test public void requestMappingInterfaceWithProxy() throws Exception {     initServlet(wac -> {         DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().         autoProxyCreator.setBeanFactory(wac.getBeanFactory()).         wac.getBeanFactory().addBeanPostProcessor(autoProxyCreator).         wac.getBeanFactory().registerSingleton("advisor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     }, IMyControllerImpl.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("handle null", response.getContentAsString()).     request = new MockHttpServletRequest("GET", "/handle").     request.addParameter("p", "value").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("handle value", response.getContentAsString()). }
false;public;0;10;;@Test public void requestMappingBaseClass() throws Exception {     initServletWithControllers(MyAbstractControllerImpl.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("handle", response.getContentAsString()). }
false;public;0;9;;@Test public void trailingSlash() throws Exception {     initServletWithControllers(TrailingSlashController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo/").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("templatePath", response.getContentAsString()). }
true;public;0;12;/* 	 * See SPR-6021 	 */ ;/* 	 * See SPR-6021 	 */ @Test public void customMapEditor() throws Exception {     initServletWithControllers(CustomMapEditorController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle").     request.addParameter("map", "bar").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("test-{foo=bar}", response.getContentAsString()). }
false;public;0;11;;@Test public void multipartFileAsSingleString() throws Exception {     initServletWithControllers(MultipartController.class).     MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest().     request.setRequestURI("/singleString").     request.addFile(new MockMultipartFile("content", "Juergen".getBytes())).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Juergen", response.getContentAsString()). }
false;public;0;12;;@Test public void regularParameterAsSingleString() throws Exception {     initServletWithControllers(MultipartController.class).     MockHttpServletRequest request = new MockHttpServletRequest().     request.setRequestURI("/singleString").     request.setMethod("POST").     request.addParameter("content", "Juergen").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Juergen", response.getContentAsString()). }
false;public;0;11;;@Test public void multipartFileAsStringArray() throws Exception {     initServletWithControllers(MultipartController.class).     MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest().     request.setRequestURI("/stringArray").     request.addFile(new MockMultipartFile("content", "Juergen".getBytes())).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Juergen", response.getContentAsString()). }
false;public;0;12;;@Test public void regularParameterAsStringArray() throws Exception {     initServletWithControllers(MultipartController.class).     MockHttpServletRequest request = new MockHttpServletRequest().     request.setRequestURI("/stringArray").     request.setMethod("POST").     request.addParameter("content", "Juergen").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Juergen", response.getContentAsString()). }
false;public;0;12;;@Test public void multipartFilesAsStringArray() throws Exception {     initServletWithControllers(MultipartController.class).     MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest().     request.setRequestURI("/stringArray").     request.addFile(new MockMultipartFile("content", "Juergen".getBytes())).     request.addFile(new MockMultipartFile("content", "Eva".getBytes())).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Juergen-Eva", response.getContentAsString()). }
false;public;0;13;;@Test public void regularParametersAsStringArray() throws Exception {     initServletWithControllers(MultipartController.class).     MockHttpServletRequest request = new MockHttpServletRequest().     request.setRequestURI("/stringArray").     request.setMethod("POST").     request.addParameter("content", "Juergen").     request.addParameter("content", "Eva").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Juergen-Eva", response.getContentAsString()). }
false;public;0;19;;@Test public void parameterCsvAsStringArray() throws Exception {     initServlet(wac -> {         RootBeanDefinition csDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class).         RootBeanDefinition wbiDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class).         wbiDef.getPropertyValues().add("conversionService", csDef).         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("webBindingInitializer", wbiDef).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, CsvController.class).     MockHttpServletRequest request = new MockHttpServletRequest().     request.setRequestURI("/integerArray").     request.setMethod("POST").     request.addParameter("content", "1,2").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("1-2", response.getContentAsString()). }
false;public;0;9;;@Test public void testMatchWithoutMethodLevelPath() throws Exception {     initServletWithControllers(NoPathGetAndM2PostController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/t1/m2").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(405, response.getStatus()). }
false;public;0;31;;// SPR-8536 @Test public void testHeadersCondition() throws Exception {     initServletWithControllers(HeadersConditionController.class).     // No "Accept" header     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("home", response.getForwardedUrl()).     // Accept "*/*"     request = new MockHttpServletRequest("GET", "/").     request.addHeader("Accept", "*/*").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("home", response.getForwardedUrl()).     // Accept "application/json"     request = new MockHttpServletRequest("GET", "/").     request.addHeader("Accept", "application/json").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("application/json.charset=ISO-8859-1", response.getHeader("Content-Type")).     assertEquals("homeJson", response.getContentAsString()). }
false;public;0;38;;@Test public void redirectAttribute() throws Exception {     initServletWithControllers(RedirectAttributesController.class).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/messages").     HttpSession session = request.getSession().     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     // POST -> bind error     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("messages/new", response.getForwardedUrl()).     assertTrue(RequestContextUtils.getOutputFlashMap(request).isEmpty()).     // POST -> success     request = new MockHttpServletRequest("POST", "/messages").     request.setSession(session).     request.addParameter("name", "Jeff").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(302, response.getStatus()).     assertEquals("/messages/1?name=value", response.getRedirectedUrl()).     assertEquals("yay!", RequestContextUtils.getOutputFlashMap(request).get("successMessage")).     // GET after POST     request = new MockHttpServletRequest("GET", "/messages/1").     request.setQueryString("name=value").     request.setSession(session).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("Got: yay!", response.getContentAsString()).     assertTrue(RequestContextUtils.getOutputFlashMap(request).isEmpty()). }
false;public;0;25;;// SPR-15176 @Test public void flashAttributesWithResponseEntity() throws Exception {     initServletWithControllers(RedirectAttributesController.class).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/messages-response-entity").     MockHttpServletResponse response = new MockHttpServletResponse().     HttpSession session = request.getSession().     getServlet().service(request, response).     assertEquals(302, response.getStatus()).     assertEquals("/messages/1?name=value", response.getRedirectedUrl()).     assertEquals("yay!", RequestContextUtils.getOutputFlashMap(request).get("successMessage")).     // GET after POST     request = new MockHttpServletRequest("GET", "/messages/1").     request.setQueryString("name=value").     request.setSession(session).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("Got: yay!", response.getContentAsString()).     assertTrue(RequestContextUtils.getOutputFlashMap(request).isEmpty()). }
false;public;0;20;;@Test public void prototypeController() throws Exception {     initServlet(wac -> {         RootBeanDefinition beanDef = new RootBeanDefinition(PrototypeController.class).         beanDef.setScope(BeanDefinition.SCOPE_PROTOTYPE).         wac.registerBeanDefinition("controller", beanDef).     }).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/").     request.addParameter("param", "1").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("count:3", response.getContentAsString()).     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("count:3", response.getContentAsString()). }
false;public;0;9;;@Test public void restController() throws Exception {     initServletWithControllers(ThisWillActuallyRun.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("Hello World!", response.getContentAsString()). }
false;public;0;11;;@Test public void responseAsHttpHeaders() throws Exception {     initServletWithControllers(HttpHeadersResponseController.class).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(new MockHttpServletRequest("POST", "/"), response).     assertEquals("Wrong status code", MockHttpServletResponse.SC_CREATED, response.getStatus()).     assertEquals("Wrong number of headers", 1, response.getHeaderNames().size()).     assertEquals("Wrong value for 'location' header", "/test/items/123", response.getHeader("location")).     assertEquals("Expected an empty content", 0, response.getContentLength()). }
false;public;0;10;;@Test public void responseAsHttpHeadersNoHeader() throws Exception {     initServletWithControllers(HttpHeadersResponseController.class).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(new MockHttpServletRequest("POST", "/empty"), response).     assertEquals("Wrong status code", MockHttpServletResponse.SC_CREATED, response.getStatus()).     assertEquals("Wrong number of headers", 0, response.getHeaderNames().size()).     assertEquals("Expected an empty content", 0, response.getContentLength()). }
false;public;0;22;;@Test public void responseBodyAsHtml() throws Exception {     initServlet(wac -> {         ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean().         factoryBean.afterPropertiesSet().         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("contentNegotiationManager", factoryBean.getObject()).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, TextRestController.class).     byte[] content = "alert('boo')".getBytes(StandardCharsets.ISO_8859_1).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/a1.html").     request.setContent(content).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("text/html.charset=ISO-8859-1", response.getContentType()).     assertEquals("inline.filename=f.txt", response.getHeader("Content-Disposition")).     assertArrayEquals(content, response.getContentAsByteArray()). }
false;public;0;22;;@Test public void responseBodyAsHtmlWithSuffixPresent() throws Exception {     initServlet(wac -> {         ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean().         factoryBean.afterPropertiesSet().         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("contentNegotiationManager", factoryBean.getObject()).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, TextRestController.class).     byte[] content = "alert('boo')".getBytes(StandardCharsets.ISO_8859_1).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/a2.html").     request.setContent(content).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("text/html.charset=ISO-8859-1", response.getContentType()).     assertNull(response.getHeader("Content-Disposition")).     assertArrayEquals(content, response.getContentAsByteArray()). }
false;public;0;22;;@Test public void responseBodyAsHtmlWithProducesCondition() throws Exception {     initServlet(wac -> {         ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean().         factoryBean.afterPropertiesSet().         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("contentNegotiationManager", factoryBean.getObject()).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, TextRestController.class).     byte[] content = "alert('boo')".getBytes(StandardCharsets.ISO_8859_1).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/a3.html").     request.setContent(content).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("text/html.charset=ISO-8859-1", response.getContentType()).     assertNull(response.getHeader("Content-Disposition")).     assertArrayEquals(content, response.getContentAsByteArray()). }
false;public;0;22;;@Test public void responseBodyAsTextWithCssExtension() throws Exception {     initServlet(wac -> {         ContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean().         factoryBean.afterPropertiesSet().         RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class).         adapterDef.getPropertyValues().add("contentNegotiationManager", factoryBean.getObject()).         wac.registerBeanDefinition("handlerAdapter", adapterDef).     }, TextRestController.class).     byte[] content = "body".getBytes(StandardCharsets.ISO_8859_1).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/a4.css").     request.setContent(content).     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("text/css.charset=ISO-8859-1", response.getContentType()).     assertNull(response.getHeader("Content-Disposition")).     assertArrayEquals(content, response.getContentAsByteArray()). }
false;public;0;11;;@Test public void modelAndViewWithStatus() throws Exception {     initServletWithControllers(ModelAndViewController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/path").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(422, response.getStatus()).     assertEquals("view", response.getForwardedUrl()). }
false;public;0;11;;// SPR-14796 @Test public void modelAndViewWithStatusInExceptionHandler() throws Exception {     initServletWithControllers(ModelAndViewController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/exception").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(422, response.getStatus()).     assertEquals("view", response.getForwardedUrl()). }
false;public;0;23;;@Test public void httpHead() throws Exception {     initServletWithControllers(ResponseEntityController.class).     MockHttpServletRequest request = new MockHttpServletRequest("HEAD", "/baz").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("MyValue", response.getHeader("MyResponseHeader")).     assertEquals(4, response.getContentLength()).     assertTrue(response.getContentAsByteArray().length == 0).     // Now repeat with GET     request = new MockHttpServletRequest("GET", "/baz").     response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("MyValue", response.getHeader("MyResponseHeader")).     assertEquals(4, response.getContentLength()).     assertEquals("body", response.getContentAsString()). }
false;public;0;11;;@Test public void httpHeadExplicit() throws Exception {     initServletWithControllers(ResponseEntityController.class).     MockHttpServletRequest request = new MockHttpServletRequest("HEAD", "/stores").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("v1", response.getHeader("h1")). }
false;public;0;12;;@Test public void httpOptions() throws Exception {     initServletWithControllers(ResponseEntityController.class).     MockHttpServletRequest request = new MockHttpServletRequest("OPTIONS", "/baz").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals(200, response.getStatus()).     assertEquals("GET,HEAD,OPTIONS", response.getHeader("Allow")).     assertTrue(response.getContentAsByteArray().length == 0). }
false;public;0;11;;@Test public void dataClassBinding() throws Exception {     initServletWithControllers(DataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "true").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-true-0", response.getContentAsString()). }
false;public;0;12;;@Test public void dataClassBindingWithAdditionalSetter() throws Exception {     initServletWithControllers(DataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "true").     request.addParameter("param3", "3").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-true-3", response.getContentAsString()). }
false;public;0;12;;@Test public void dataClassBindingWithResult() throws Exception {     initServletWithControllers(ValidatedDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "true").     request.addParameter("param3", "3").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-true-3", response.getContentAsString()). }
false;public;0;12;;@Test public void dataClassBindingWithOptionalParameter() throws Exception {     initServletWithControllers(ValidatedDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "true").     request.addParameter("optionalParam", "8").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-true-8", response.getContentAsString()). }
false;public;0;10;;@Test public void dataClassBindingWithMissingParameter() throws Exception {     initServletWithControllers(ValidatedDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("1:value1-null-null", response.getContentAsString()). }
false;public;0;11;;@Test public void dataClassBindingWithConversionError() throws Exception {     initServletWithControllers(ValidatedDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "x").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("1:value1-x-null", response.getContentAsString()). }
false;public;0;11;;@Test public void dataClassBindingWithValidationError() throws Exception {     initServletWithControllers(ValidatedDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param2", "true").     request.addParameter("param3", "0").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("1:null-true-0", response.getContentAsString()). }
false;public;0;10;;@Test public void dataClassBindingWithValidationErrorAndConversionError() throws Exception {     initServletWithControllers(ValidatedDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param2", "x").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("2:null-x-null", response.getContentAsString()). }
false;public;0;12;;@Test public void dataClassBindingWithOptional() throws Exception {     initServletWithControllers(OptionalDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "true").     request.addParameter("param3", "3").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-true-3", response.getContentAsString()). }
false;public;0;11;;@Test public void dataClassBindingWithOptionalAndConversionError() throws Exception {     initServletWithControllers(OptionalDataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "x").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-x-null", response.getContentAsString()). }
false;public;0;12;;@Test public void dataClassBindingWithFieldMarker() throws Exception {     initServletWithControllers(DataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "true").     request.addParameter("_param2", "on").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-true-0", response.getContentAsString()). }
false;public;0;11;;@Test public void dataClassBindingWithFieldMarkerFallback() throws Exception {     initServletWithControllers(DataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("_param2", "on").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-false-0", response.getContentAsString()). }
false;public;0;12;;@Test public void dataClassBindingWithFieldDefault() throws Exception {     initServletWithControllers(DataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("param2", "true").     request.addParameter("!param2", "false").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-true-0", response.getContentAsString()). }
false;public;0;11;;@Test public void dataClassBindingWithFieldDefaultFallback() throws Exception {     initServletWithControllers(DataClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("param1", "value1").     request.addParameter("!param2", "false").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("value1-false-0", response.getContentAsString()). }
false;public;0;10;;@Test public void dataClassBindingWithLocalDate() throws Exception {     initServletWithControllers(DateClassController.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/bind").     request.addParameter("date", "2010-01-01").     MockHttpServletResponse response = new MockHttpServletResponse().     getServlet().service(request, response).     assertEquals("2010-01-01", response.getContentAsString()). }
false;public;1;4;;@RequestMapping("") public void myPath2(HttpServletResponse response) throws IOException {     throw new IllegalStateException("test"). }
false;public;1;4;;@RequestMapping("/bar") public void myPath3(HttpServletResponse response) throws IOException {     response.getWriter().write("testX"). }
false;public;2;4;;@ExceptionHandler public void myPath2(Exception ex, HttpServletResponse response) throws IOException {     response.getWriter().write(ex.getMessage()). }
false;public;1;4;;@RequestMapping("") public void myPath2(HttpServletResponse response) throws IOException {     throw new AssertionError("test"). }
false;public;1;4;;@RequestMapping("/bar") public void myPath3(HttpServletResponse response) throws IOException {     response.getWriter().write("testX"). }
false;public;2;4;;@ExceptionHandler public void myPath2(Error err, HttpServletResponse response) throws IOException {     response.getWriter().write(err.getMessage()). }
false;public;2;4;;@RequestMapping("/myPath1.do") public void myHandle(HttpServletRequest request, HttpServletResponse response) throws IOException {     response.getWriter().write("test"). }
false;public;5;6;;@RequestMapping("/myPath2.do") public void myHandle(@RequestParam("param1") String p1, @RequestParam("param2") int p2, @RequestHeader("header1") long h1, @CookieValue(name = "cookie1") Cookie c1, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + p1 + "-" + p2 + "-" + h1 + "-" + c1.getValue()). }
false;public;2;4;;@RequestMapping("/myPath3") public void myHandle(TestBean tb, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + tb.getName() + "-" + tb.getAge()). }
false;public;3;4;;@RequestMapping("/myPath4.do") public void myHandle(TestBean tb, Errors errors, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + tb.getName() + "-" + errors.getFieldError("age").getCode()). }
false;public;2;4;;@RequestMapping public void myHandle(HttpServletRequest request, HttpServletResponse response) throws IOException {     response.getWriter().write("test"). }
false;public;5;5;;@RequestMapping("/myPath2.do") public void myHandle(@RequestParam("param1") String p1, int param2, HttpServletResponse response, @RequestHeader("header1") String h1, @CookieValue("cookie1") String c1) throws IOException {     response.getWriter().write("test-" + p1 + "-" + param2 + "-" + h1 + "-" + c1). }
false;public;2;4;;@RequestMapping("/myPath3") public void myHandle(TestBean tb, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + tb.getName() + "-" + tb.getAge()). }
false;public;3;4;;@RequestMapping("/myPath4.*") public void myHandle(TestBean tb, Errors errors, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + tb.getName() + "-" + errors.getFieldError("age").getCode()). }
false;public;5;5;;@RequestMapping("/myPath2.do") public void myHandle(@RequestParam("param1") T p1, int param2, @RequestHeader Integer header1, @CookieValue int cookie1, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + p1 + "-" + param2 + "-" + header1 + "-" + cookie1). }
false;public;3;6;;@InitBinder public void initBinder(@RequestParam("param1") String p1, @RequestParam(value = "paramX", required = false) String px, int param2) {     assertNull(px). }
false;public;3;6;;@ModelAttribute public void modelAttribute(@RequestParam("param1") String p1, @RequestParam(value = "paramX", required = false) String px, int param2) {     assertNull(px). }
false;public;2;4;;@RequestMapping public void myHandle(HttpServletRequest request, HttpServletResponse response) throws IOException {     response.getWriter().write("test"). }
false;public;5;5;;@Override public void myHandle(@RequestParam("param1") String p1, int param2, @RequestHeader Integer header1, @CookieValue int cookie1, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + p1 + "-" + param2 + "-" + header1 + "-" + cookie1). }
false;public;2;4;;@RequestMapping("/myPath3") public void myHandle(TestBean tb, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + tb.getName() + "-" + tb.getAge()). }
false;public;3;4;;@RequestMapping("/myPath4.*") public void myHandle(TestBean tb, Errors errors, HttpServletResponse response) throws IOException {     response.getWriter().write("test-" + tb.getName() + "-" + errors.getFieldError("age").getCode()). }
false;public;3;7;;@Override @InitBinder public void initBinder(@RequestParam("param1") String p1, @RequestParam(value = "paramX", required = false) String px, int param2) {     assertNull(px). }
false;public;3;7;;@Override @ModelAttribute public void modelAttribute(@RequestParam("param1") String p1, @RequestParam(value = "paramX", required = false) String px, int param2) {     assertNull(px). }
false;public;0;4;;@RequestMapping("/emptyParameterListHandler") public void emptyParameterListHandler() {     EmptyParameterListHandlerMethodController.called = true. }
false;public;1;3;;@RequestMapping("/nonEmptyParameterListHandler") public void nonEmptyParameterListHandler(HttpServletResponse response) { }
false;public;1;6;;@RequestMapping(method = RequestMethod.GET) public String get(Model model) {     model.addAttribute("object1", new Object()).     model.addAttribute("object2", new Object()).     return "page1". }
false;public;1;6;;@RequestMapping(method = RequestMethod.POST) public String post(@ModelAttribute("object1") Object object1) {     // do something with object1     return "page2". }
false;;1;2;;@RequestMapping(method = RequestMethod.GET) String get(Model model).
false;;1;2;;@RequestMapping(method = RequestMethod.POST) String post(@ModelAttribute("object1") Object object1).
false;public;1;6;;@Override public String get(Model model) {     model.addAttribute("object1", new Object()).     model.addAttribute("object2", new Object()).     return "page1". }
false;public;1;5;;@Override public String post(@ModelAttribute("object1") Object object1) {     // do something with object1     return "page2". }
false;;0;2;;@ModelAttribute("testBeanList") List<TestBean> getTestBeans().
false;;1;2;;@RequestMapping(method = RequestMethod.GET) String get(Model model).
false;;1;2;;@RequestMapping(method = RequestMethod.POST) String post(@ModelAttribute("object1") T object).
false;public;0;7;;@Override public List<TestBean> getTestBeans() {     List<TestBean> list = new LinkedList<>().     list.add(new TestBean("tb1")).     list.add(new TestBean("tb2")).     return list. }
false;public;1;6;;@Override public String get(Model model) {     model.addAttribute("object1", new TestBean()).     model.addAttribute("object2", new TestBean()).     return "page1". }
false;public;1;5;;@Override public String post(TestBean object) {     // do something with object1     return "page2". }
false;public;0;8;;@Override @ModelAttribute("testBeanList") public List<TestBean> getTestBeans() {     List<TestBean> list = new LinkedList<>().     list.add(new TestBean("tb1")).     list.add(new TestBean("tb2")).     return list. }
false;public;1;7;;@Override @RequestMapping(method = RequestMethod.GET) public String get(Model model) {     model.addAttribute("object1", new TestBean()).     model.addAttribute("object2", new TestBean()).     return "page1". }
false;public;1;6;;@Override @RequestMapping(method = RequestMethod.POST) public String post(@ModelAttribute("object1") TestBean object1) {     // do something with object1     return "page2". }
false;public;0;7;;@ModelAttribute("testBeanList") public List<TestBean> getTestBeans() {     List<TestBean> list = new LinkedList<>().     list.add(new TestBean("tb1")).     list.add(new TestBean("tb2")).     return list. }
false;public;3;10;;@RequestMapping("/myPath.do") public String myHandle(@ModelAttribute("myCommand") TestBean tb, BindingResult errors, ModelMap model) {     FieldError error = errors.getFieldError("age").     assertNotNull("Must have field error for age property", error).     assertEquals("value2", error.getRejectedValue()).     if (!model.containsKey("myKey")) {         model.addAttribute("myKey", "myValue").     }     return "myView". }
false;public;1;3;;public void setValidCountry(String validCountry) {     this.validCountry = validCountry. }
false;public;0;3;;public String getValidCountry() {     return this.validCountry. }
false;public;0;7;;@ModelAttribute public List<TestBean> getTestBeans() {     List<TestBean> list = new LinkedList<>().     list.add(new TestBean("tb1")).     list.add(new TestBean("tb2")).     return list. }
false;public;3;8;;@RequestMapping("/myPath.do") @ModelAttribute("yourKey") public String myHandle(@ModelAttribute("myCommand") TestBean tb, BindingResult errors, Model model) {     if (!model.containsAttribute("myKey")) {         model.addAttribute("myKey", "myValue").     }     return "yourValue". }
false;public;1;7;;@ModelAttribute("testBeanList") public List<TestBean> getTestBeans(@ModelAttribute(name = "myCommand", binding = false) TestBean tb) {     List<TestBean> list = new LinkedList<>().     list.add(new TestBean("tb1")).     list.add(new TestBean("tb2")).     return list. }
false;public;3;12;;@RequestMapping("/myPath.do") public String myHandle(@ModelAttribute(name = "myCommand", binding = true) TestBean tb, BindingResult errors, ModelMap model) {     FieldError error = errors.getFieldError("age").     assertNotNull("Must have field error for age property", error).     assertEquals("value2", error.getRejectedValue()).     if (!model.containsKey("myKey")) {         model.addAttribute("myKey", "myValue").     }     return "myView". }
false;public;3;9;;@ModelAttribute("myCommand") public ValidTestBean createTestBean(@RequestParam T defaultName, Map<String, Object> model, @RequestParam Date date) {     model.put("myKey", "myOriginalValue").     ValidTestBean tb = new ValidTestBean().     tb.setName(defaultName.getClass().getSimpleName() + ":" + defaultName.toString()).     return tb. }
false;public;3;8;;@Override @RequestMapping("/myPath.do") public String myHandle(@ModelAttribute("myCommand") @Valid TestBean tb, BindingResult errors, ModelMap model) {     if (!errors.hasFieldErrors("validCountry")) {         throw new IllegalStateException("Declarative validation not applied").     }     return super.myHandle(tb, errors, model). }
false;public;4;8;;@RequestMapping("/myOtherPath.do") public String myOtherHandle(TB tb, BindingResult errors, ExtendedModelMap model, MySpecialArg arg) {     TestBean tbReal = (TestBean) tb.     tbReal.setName("myName").     assertTrue(model.get("ITestBean") instanceof DerivedTestBean).     assertNotNull(arg).     return super.myHandle(tbReal, errors, model). }
false;public;2;5;;@RequestMapping("/myThirdPath.do") public String myThirdHandle(TB tb, Model model) {     model.addAttribute("testBean", new TestBean("special", 99)).     return "myView". }
false;protected;0;5;;@SuppressWarnings("unchecked") @ModelAttribute protected TB2 getModelAttr() {     return (TB2) new DerivedTestBean(). }
false;public;1;11;;@InitBinder public void initBinder(WebDataBinder binder) {     binder.initBeanPropertyAccess().     binder.setRequiredFields("sex").     LocalValidatorFactoryBean vf = new LocalValidatorFactoryBean().     vf.afterPropertiesSet().     binder.setValidator(vf).     SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd").     dateFormat.setLenient(false).     binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false)). }
false;public;3;8;;@Override @RequestMapping("/myPath.do") public String myHandle(@ModelAttribute("myCommand") @Valid TestBean tb, BindingResult errors, ModelMap model) {     if (!errors.hasFieldErrors("sex")) {         throw new IllegalStateException("requiredFields not applied").     }     return super.myHandle(tb, errors, model). }
false;public;3;12;;@InitBinder({ "myCommand", "date" }) public void initBinder(WebDataBinder binder, String date, @RequestParam("date") String[] date2) {     LocalValidatorFactoryBean vf = new LocalValidatorFactoryBean().     vf.afterPropertiesSet().     binder.setValidator(vf).     assertEquals("2007-10-02", date).     assertEquals(1, date2.length).     assertEquals("2007-10-02", date2[0]).     SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd").     dateFormat.setLenient(false).     binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false)). }
false;public;1;9;;@Override public void initBinder(WebDataBinder binder) {     LocalValidatorFactoryBean vf = new LocalValidatorFactoryBean().     vf.afterPropertiesSet().     binder.setValidator(vf).     SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd").     dateFormat.setLenient(false).     binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false)). }
false;public;2;7;;@Override public Object resolveArgument(MethodParameter methodParameter, NativeWebRequest webRequest) {     if (methodParameter.getParameterType().equals(MySpecialArg.class)) {         return new MySpecialArg("myValue").     }     return UNRESOLVED. }
false;public;2;13;;@RequestMapping public void myHandle(HttpServletResponse response, HttpServletRequest request) throws IOException {     if (this.servletContext == null || this.servletConfig == null || this.session == null || this.request == null || this.webRequest == null) {         throw new IllegalStateException().     }     response.getWriter().write("myView").     request.setAttribute("servletContext", this.servletContext).     request.setAttribute("servletConfig", this.servletConfig).     request.setAttribute("sessionId", this.session.getId()).     request.setAttribute("requestUri", this.request.getRequestURI()).     request.setAttribute("locale", this.webRequest.getLocale()). }
false;public;1;4;;@RequestMapping(params = { "view", "!lang" }) public void myOtherHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myOtherView"). }
false;public;1;4;;@RequestMapping(method = RequestMethod.GET, params = { "view=my", "lang=de" }) public void myLangHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myLangView"). }
false;public;1;4;;@RequestMapping(method = { RequestMethod.POST, RequestMethod.GET }, params = "surprise") public void mySurpriseHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("mySurpriseView"). }
false;public;1;4;;@RequestMapping(params = { "view", "!lang" }) public void myOtherHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myOtherView"). }
false;public;1;4;;@RequestMapping(method = RequestMethod.GET, params = { "view=my", "lang=de" }) public void myLangHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myLangView"). }
false;public;1;4;;@RequestMapping public void myHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myView"). }
false;public;1;4;;@RequestMapping("*Other") public void myOtherHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myOtherView"). }
false;public;1;4;;@RequestMapping("myLang") public void myLangHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myLangView"). }
false;public;1;4;;@RequestMapping("surprise") public void mySurpriseHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("mySurpriseView"). }
false;public;1;4;;// was **/myHandle @RequestMapping("*/myHandle") public void myHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myView"). }
false;public;1;4;;// was /**/*Other @RequestMapping("/*/*Other") public void myOtherHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myOtherView"). }
false;public;1;4;;// was **/myLang @RequestMapping("*/myLang") public void myLangHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("myLangView"). }
false;public;1;4;;// was /**/surprise @RequestMapping("/*/surprise") public void mySurpriseHandle(HttpServletResponse response) throws IOException {     response.getWriter().write("mySurpriseView"). }
false;public;0;4;;@ModelAttribute public TestBean getTestBean() {     return null. }
false;public;0;4;;@ModelAttribute public Principal getPrincipal() {     return new TestPrincipal(). }
false;public;5;13;;@RequestMapping("/myPath") public void handle(@ModelAttribute TestBean testBean, Errors errors, @ModelAttribute TestPrincipal modelPrinc, OtherPrincipal requestPrinc, Writer writer) throws IOException {     assertNull(testBean).     assertNotNull(modelPrinc).     assertNotNull(requestPrinc).     assertFalse(errors.hasErrors()).     errors.reject("myCode").     writer.write("myView"). }
false;public;0;4;;@Override public String getName() {     return "test". }
false;public;0;4;;@Override public String getName() {     return "other". }
false;public;0;4;;@Override public String getContentType() {     return null. }
false;public;3;33;;@Override @SuppressWarnings({ "unchecked", "deprecation", "rawtypes" }) public void render(@Nullable Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {     TestBean tb = (TestBean) model.get("testBean").     if (tb == null) {         tb = (TestBean) model.get("myCommand").     }     if (tb.getName() != null && tb.getName().endsWith("myDefaultName")) {         assertEquals(107, tb.getDate().getYear()).     }     Errors errors = (Errors) model.get(BindingResult.MODEL_KEY_PREFIX + "testBean").     if (errors == null) {         errors = (Errors) model.get(BindingResult.MODEL_KEY_PREFIX + "myCommand").     }     if (errors.hasFieldErrors("date")) {         throw new IllegalStateException().     }     if (model.containsKey("ITestBean")) {         assertTrue(model.get(BindingResult.MODEL_KEY_PREFIX + "ITestBean") instanceof Errors).     }     List<TestBean> testBeans = (List<TestBean>) model.get("testBeanList").     if (errors.hasFieldErrors("age")) {         response.getWriter().write(viewName + "-" + tb.getName() + "-" + errors.getFieldError("age").getCode() + "-" + testBeans.get(0).getName() + "-" + model.get("myKey") + (model.containsKey("yourKey") ? "-" + model.get("yourKey") : "")).     } else {         response.getWriter().write(viewName + "-" + tb.getName() + "-" + tb.getAge() + "-" + errors.getFieldValue("name") + "-" + errors.getFieldValue("age")).     } }
false;public;2;42;;@Override public View resolveViewName(final String viewName, Locale locale) throws Exception {     return new View() {          @Override         public String getContentType() {             return null.         }          @Override         @SuppressWarnings({ "unchecked", "deprecation", "rawtypes" })         public void render(@Nullable Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {             TestBean tb = (TestBean) model.get("testBean").             if (tb == null) {                 tb = (TestBean) model.get("myCommand").             }             if (tb.getName() != null && tb.getName().endsWith("myDefaultName")) {                 assertEquals(107, tb.getDate().getYear()).             }             Errors errors = (Errors) model.get(BindingResult.MODEL_KEY_PREFIX + "testBean").             if (errors == null) {                 errors = (Errors) model.get(BindingResult.MODEL_KEY_PREFIX + "myCommand").             }             if (errors.hasFieldErrors("date")) {                 throw new IllegalStateException().             }             if (model.containsKey("ITestBean")) {                 assertTrue(model.get(BindingResult.MODEL_KEY_PREFIX + "ITestBean") instanceof Errors).             }             List<TestBean> testBeans = (List<TestBean>) model.get("testBeanList").             if (errors.hasFieldErrors("age")) {                 response.getWriter().write(viewName + "-" + tb.getName() + "-" + errors.getFieldError("age").getCode() + "-" + testBeans.get(0).getName() + "-" + model.get("myKey") + (model.containsKey("yourKey") ? "-" + model.get("yourKey") : "")).             } else {                 response.getWriter().write(viewName + "-" + tb.getName() + "-" + tb.getAge() + "-" + errors.getFieldValue("name") + "-" + errors.getFieldValue("age")).             }         }     }. }
false;public;0;4;;@Override public String getContentType() {     return null. }
false;public;3;5;;@Override public void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) {     request.setAttribute("viewName", viewName).     request.getSession().setAttribute("model", model). }
false;public;2;14;;@Override public View resolveViewName(final String viewName, Locale locale) throws Exception {     return new View() {          @Override         public String getContentType() {             return null.         }          @Override         public void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) {             request.setAttribute("viewName", viewName).             request.getSession().setAttribute("model", model).         }     }. }
false;public;2;3;;@RequestMapping(method = RequestMethod.GET) public void doGet(HttpServletRequest req, HttpServletResponse resp) { }
false;public;3;3;;@RequestMapping(method = RequestMethod.GET) public void doGet(HttpServletRequest req, HttpServletResponse resp, @RequestParam("childId") String id) { }
false;public;0;3;;@RequestMapping("/myPath.do") public void myHandle() { }
false;public;2;4;;@RequestMapping("/myPath.do") public void myHandle(@RequestParam(value = "id", required = true) int id, @RequestHeader(value = "header", required = true) String header) { }
false;public;4;7;;@RequestMapping("/myPath.do") public void myHandle(@RequestParam(required = false) String id, @RequestParam(required = false) boolean flag, @RequestHeader(value = "header", required = false) String header, HttpServletResponse response) throws IOException {     response.getWriter().write(String.valueOf(id) + "-" + flag + "-" + String.valueOf(header)). }
false;public;4;7;;@RequestMapping("/myPath.do") public void myHandle(@RequestParam(value = "id", defaultValue = "foo") String id, @RequestParam(value = "otherId", defaultValue = "") String id2, @RequestHeader(defaultValue = "bar") String header, HttpServletResponse response) throws IOException {     response.getWriter().write(String.valueOf(id) + "-" + String.valueOf(id2) + "-" + String.valueOf(header)). }
false;public;4;7;;@RequestMapping("/myPath.do") public void myHandle(@RequestParam(value = "id", defaultValue = "${myKey}") String id, @RequestHeader(defaultValue = "#{systemProperties.myHeader}") String header, @Value("#{request.contextPath}") String contextPath, HttpServletResponse response) throws IOException {     response.getWriter().write(String.valueOf(id) + "-" + String.valueOf(header) + "-" + contextPath). }
false;public;2;5;;@RequestMapping("/myPath.do") public void myHandle(GenericBean<?> gb, HttpServletResponse response) throws Exception {     response.getWriter().write(gb.getTestBeanSet().toString() + "-" + gb.getTestBeanSet().iterator().next().getClass().getName()). }
false;public;1;4;;@Override public ITestBean convert(String source) {     return new TestBean(source). }
false;public;1;3;;@RequestMapping("/myPath/{id}") public void myHandle(@PathVariable("id") ITestBean bean) throws Exception { }
false;public;1;4;;@Override public ITestBean convert(String source) {     throw new NotFoundException(). }
false;public;0;3;;@RequestMapping(value = "/myPath.do", method = RequestMethod.DELETE) public void delete() { }
false;public;0;3;;@RequestMapping(value = "/myPath.do", method = RequestMethod.HEAD) public void head() { }
false;public;0;3;;@RequestMapping(value = "/myPath.do", method = RequestMethod.OPTIONS) public void options() { }
false;public;0;3;;@RequestMapping(value = "/myPath.do", method = RequestMethod.POST) public void post() { }
false;public;0;3;;@RequestMapping(value = "/myPath.do", method = RequestMethod.PUT) public void put() { }
false;public;0;3;;@RequestMapping(value = "/myPath.do", method = RequestMethod.TRACE) public void trace() { }
false;public;0;3;;@RequestMapping(value = "/otherPath.do", method = RequestMethod.GET) public void get() { }
false;public;1;4;;@RequestMapping(value = { "/dir/myPath1.do", "/*/*.do" }) public void method1(Writer writer) throws IOException {     writer.write("method1"). }
false;public;1;4;;@RequestMapping("/dir/*.do") public void method2(Writer writer) throws IOException {     writer.write("method2"). }
false;public;1;5;;@RequestMapping(value = "/something", method = RequestMethod.PUT) @ResponseBody public String handle(@RequestBody String body) throws IOException {     return body. }
false;public;1;5;;@RequestMapping(value = "/something", method = RequestMethod.PATCH) @ResponseBody public String handlePartialUpdate(@RequestBody String content) throws IOException {     return content. }
false;public;1;5;;@RequestMapping(value = "/something", method = RequestMethod.PUT, produces = "text/plain") @ResponseBody public String handle(@RequestBody String body) throws IOException {     return body. }
false;public;0;4;;@RequestMapping("/something") @ResponseBody public void handle() throws IOException { }
false;public;1;3;;@RequestMapping(value = "/something", method = RequestMethod.PUT) public void handle(@RequestBody A a) throws IOException { }
false;public;2;4;;@Override public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {     return true. }
false;public;2;4;;@Override public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {     return true. }
false;public;0;4;;@Override public List<MediaType> getSupportedMediaTypes() {     return Collections.singletonList(new MediaType("application", "pdf")). }
false;public;2;4;;@Override public Object read(Class<?> clazz, HttpInputMessage inputMessage) {     throw new HttpMessageNotReadableException("Could not read", inputMessage). }
false;public;3;4;;@Override public void write(Object o, @Nullable MediaType contentType, HttpOutputMessage outputMessage) {     throw new UnsupportedOperationException("Not implemented"). }
false;public;2;4;;@Override public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {     return supportedMediaTypes.contains(mediaType). }
false;public;2;4;;@Override public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {     return supportedMediaTypes.contains(mediaType). }
false;public;0;4;;@Override public List<MediaType> getSupportedMediaTypes() {     return supportedMediaTypes. }
false;public;2;5;;@Override public Object read(Class<?> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     return null. }
false;public;3;6;;@Override public void write(Object o, @Nullable MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     outputMessage.getHeaders().setContentType(contentType).     // force a header write     outputMessage.getBody(). }
false;public;1;4;;@RequestMapping(value = "/something", headers = "content-type=application/pdf") public void handlePdf(Writer writer) throws IOException {     writer.write("pdf"). }
false;public;1;4;;@RequestMapping(value = "/something", headers = "content-type=text/*") public void handleHtml(Writer writer) throws IOException {     writer.write("text"). }
false;public;1;4;;@RequestMapping(value = "/something", consumes = "application/pdf") public void handlePdf(Writer writer) throws IOException {     writer.write("pdf"). }
false;public;1;4;;@RequestMapping(value = "/something", consumes = "text/*") public void handleHtml(Writer writer) throws IOException {     writer.write("text"). }
false;public;1;4;;@RequestMapping(value = "/something", headers = "content-type=application/pdf") public void handlePdf(Writer writer) throws IOException {     writer.write("pdf"). }
false;public;1;4;;@RequestMapping(value = "/something", headers = "content-type!=application/pdf") public void handleNonPdf(Writer writer) throws IOException {     writer.write("non-pdf"). }
false;public;1;4;;@RequestMapping(value = "/something", headers = "accept=text/html") public void handleHtml(Writer writer) throws IOException {     writer.write("html"). }
false;public;1;4;;@RequestMapping(value = "/something", headers = "accept=application/xml") public void handleXml(Writer writer) throws IOException {     writer.write("xml"). }
false;public;1;4;;@GetMapping(path = "/something", produces = "text/html") public void handleHtml(Writer writer) throws IOException {     writer.write("html"). }
false;public;1;4;;@GetMapping(path = "/something", produces = "application/xml") public void handleXml(Writer writer) throws IOException {     writer.write("xml"). }
false;public;0;4;;@GetMapping(path = "/something", produces = "text/csv") public String handleCsv() {     throw new IllegalArgumentException(). }
false;public;1;4;;@ExceptionHandler public ResponseEntity<Map<String, String>> handle(IllegalArgumentException ex) {     return ResponseEntity.status(500).body(Collections.singletonMap("reason", "error")). }
false;public;1;5;;@RequestMapping("/something") @ResponseStatus(code = HttpStatus.CREATED, reason = "It's alive!") public void handle(Writer writer) throws IOException {     writer.write("something"). }
false;public;0;4;;@RequestMapping("/") public MySpecialArg handle() {     return new MySpecialArg("foo"). }
false;public;0;4;;@Override public String getContentType() {     return "text/html". }
false;public;3;5;;@Override public void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     response.getWriter().write("myValue"). }
false;public;5;19;;@Override public ModelAndView resolveModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, NativeWebRequest webRequest) {     if (returnValue instanceof MySpecialArg) {         return new ModelAndView(new View() {              @Override             public String getContentType() {                 return "text/html".             }              @Override             public void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {                 response.getWriter().write("myValue").             }         }).     }     return UNRESOLVED. }
false;public;1;4;;@RequestMapping(method = RequestMethod.GET) public void noParams(Writer writer) throws IOException {     writer.write("noParams"). }
false;public;2;4;;@RequestMapping(params = "myParam") public void param(@RequestParam("myParam") int myParam, Writer writer) throws IOException {     writer.write("myParam-" + myParam). }
false;public;1;4;;@RequestMapping(value = "/bug/EXISTING", method = RequestMethod.POST) public void directMatch(Writer writer) throws IOException {     writer.write("Direct"). }
false;public;1;4;;@RequestMapping(value = "/bug/{type}", method = RequestMethod.GET) public void patternMatch(Writer writer) throws IOException {     writer.write("Pattern"). }
false;public;1;7;;@InitBinder public void initBinder(WebDataBinder binder) {     binder.initBeanPropertyAccess().     SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd").     dateFormat.setLenient(false).     binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false)). }
false;public;2;5;;@RequestMapping(method = RequestMethod.GET) public void handle(@CookieValue("date") Date date, Writer writer) throws IOException {     assertEquals("Invalid path variable value", new GregorianCalendar(2008, 10, 18).getTime(), date).     writer.write("test-" + new SimpleDateFormat("yyyy").format(date)). }
false;;1;1;;ModelAndView method(T object).
false;public;1;5;;@Override @RequestMapping("/method") public ModelAndView method(MyEntity object) {     return new ModelAndView("/something"). }
false;public;2;4;;@GetMapping(params = "page") public Collection<Article> find(String pageable, ArticlePredicate predicate) {     throw new UnsupportedOperationException("not implemented"). }
false;public;2;4;;@GetMapping public List<Article> find(boolean sort, ArticlePredicate predicate) {     throw new UnsupportedOperationException("not implemented"). }
false;;2;1;;Collection<E> find(String pageable, P predicate) throws IOException.
false;;2;1;;List<E> find(boolean sort, P predicate) throws IOException.
false;public;1;5;;public boolean accept(E entity) {     return (createdBy == null || createdBy.equals(entity.createdBy)) && (createdBefore == null || createdBefore.compareTo(entity.createdDate) >= 0) && (createdAfter == null || createdAfter.compareTo(entity.createdDate) >= 0). }
false;public;1;4;;@Override public boolean accept(Article entity) {     return super.accept(entity) && (query == null || (entity.title.contains(query) || entity.content.contains(query))). }
false;public;2;11;;@RequestMapping("/map") public void map(@RequestParam Map<String, String> params, Writer writer) throws IOException {     for (Iterator<Map.Entry<String, String>> it = params.entrySet().iterator(). it.hasNext(). ) {         Map.Entry<String, String> entry = it.next().         writer.write(entry.getKey() + "=" + entry.getValue()).         if (it.hasNext()) {             writer.write(',').         }     } }
false;public;2;18;;@RequestMapping("/multiValueMap") public void multiValueMap(@RequestParam MultiValueMap<String, String> params, Writer writer) throws IOException {     for (Iterator<Map.Entry<String, List<String>>> it1 = params.entrySet().iterator(). it1.hasNext(). ) {         Map.Entry<String, List<String>> entry = it1.next().         writer.write(entry.getKey() + "=[").         for (Iterator<String> it2 = entry.getValue().iterator(). it2.hasNext(). ) {             String value = it2.next().             writer.write(value).             if (it2.hasNext()) {                 writer.write(',').             }         }         writer.write(']').         if (it1.hasNext()) {             writer.write(',').         }     } }
false;public;2;11;;@RequestMapping("/map") public void map(@RequestHeader Map<String, String> headers, Writer writer) throws IOException {     for (Iterator<Map.Entry<String, String>> it = headers.entrySet().iterator(). it.hasNext(). ) {         Map.Entry<String, String> entry = it.next().         writer.write(entry.getKey() + "=" + entry.getValue()).         if (it.hasNext()) {             writer.write(',').         }     } }
false;public;2;19;;@RequestMapping("/multiValueMap") public void multiValueMap(@RequestHeader MultiValueMap<String, String> headers, Writer writer) throws IOException {     for (Iterator<Map.Entry<String, List<String>>> it1 = headers.entrySet().iterator(). it1.hasNext(). ) {         Map.Entry<String, List<String>> entry = it1.next().         writer.write(entry.getKey() + "=[").         for (Iterator<String> it2 = entry.getValue().iterator(). it2.hasNext(). ) {             String value = it2.next().             writer.write(value).             if (it2.hasNext()) {                 writer.write(',').             }         }         writer.write(']').         if (it1.hasNext()) {             writer.write(',').         }     } }
false;public;2;5;;@RequestMapping("/httpHeaders") public void httpHeaders(@RequestHeader HttpHeaders headers, Writer writer) throws IOException {     assertEquals("Invalid Content-Type", new MediaType("text", "html"), headers.getContentType()).     multiValueMap(headers, writer). }
false;;2;2;;@RequestMapping("/handle") void handle(Writer writer, @RequestParam(value = "p", required = false) String param) throws IOException.
false;public;2;4;;@Override public void handle(Writer writer, @RequestParam(value = "p", required = false) String param) throws IOException {     writer.write("handle " + param). }
false;public,abstract;1;2;;@RequestMapping("/handle") public abstract void handle(Writer writer) throws IOException.
false;public;1;4;;@Override public void handle(Writer writer) throws IOException {     writer.write("handle"). }
false;public;1;4;;@RequestMapping(value = "/", method = RequestMethod.GET) public void root(Writer writer) throws IOException {     writer.write("root"). }
false;public;1;4;;@RequestMapping(value = "/{templatePath}/", method = RequestMethod.GET) public void templatePath(Writer writer) throws IOException {     writer.write("templatePath"). }
false;public;1;11;;@PostMapping("/foo") public ResponseEntity<String> foo(HttpEntity<byte[]> requestEntity) throws Exception {     assertNotNull(requestEntity).     assertEquals("MyValue", requestEntity.getHeaders().getFirst("MyRequestHeader")).     String body = new String(requestEntity.getBody(), "UTF-8").     assertEquals("Hello World", body).     URI location = new URI("/foo").     return ResponseEntity.created(location).header("MyResponseHeader", "MyValue").body(body). }
false;public;0;4;;@GetMapping("/bar") public ResponseEntity<Void> bar() {     return ResponseEntity.notFound().header("MyResponseHeader", "MyValue").build(). }
false;public;0;4;;@GetMapping("/baz") public ResponseEntity<String> baz() {     return ResponseEntity.ok().header("MyResponseHeader", "MyValue").body("body"). }
false;public;0;4;;@RequestMapping(path = "/stores", method = RequestMethod.HEAD) public ResponseEntity<Void> headResource() {     return ResponseEntity.ok().header("h1", "v1").build(). }
false;public;0;4;;@GetMapping("/stores") public ResponseEntity<String> getResource() {     return ResponseEntity.ok().body("body"). }
false;public;0;6;;@GetMapping("/test-entity") public ResponseEntity<TestEntity> testEntity() {     TestEntity entity = new TestEntity().     entity.setName("Foo Bar").     return ResponseEntity.ok().contentType(MediaType.APPLICATION_XML).body(entity). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;5;;@InitBinder public void initBinder(WebDataBinder binder) {     binder.initBeanPropertyAccess().     binder.registerCustomEditor(Map.class, new CustomMapEditor()). }
false;public;2;5;;@SuppressWarnings("rawtypes") @RequestMapping("/handle") public void handle(@RequestParam("map") Map map, Writer writer) throws IOException {     writer.write("test-" + map). }
false;public;1;9;;@Override public void setAsText(String text) throws IllegalArgumentException {     if (StringUtils.hasText(text)) {         setValue(Collections.singletonMap("foo", text)).     } else {         setValue(null).     } }
false;public;1;4;;@InitBinder public void initBinder(WebDataBinder binder) {     binder.registerCustomEditor(String.class, new StringMultipartFileEditor()). }
false;public;2;5;;@RequestMapping("/singleString") public void processMultipart(@RequestParam("content") String content, HttpServletResponse response) throws IOException {     response.getWriter().write(content). }
false;public;2;5;;@RequestMapping("/stringArray") public void processMultipart(@RequestParam("content") String[] content, HttpServletResponse response) throws IOException {     response.getWriter().write(StringUtils.arrayToDelimitedString(content, "-")). }
false;public;2;4;;@RequestMapping("/singleInteger") public void processCsv(@RequestParam("content") Integer content, HttpServletResponse response) throws IOException {     response.getWriter().write(content.toString()). }
false;public;2;4;;@RequestMapping("/integerArray") public void processCsv(@RequestParam("content") Integer[] content, HttpServletResponse response) throws IOException {     response.getWriter().write(StringUtils.arrayToDelimitedString(content, "-")). }
false;public;1;4;;@RequestMapping(method = RequestMethod.GET) public void handle1(Writer writer) throws IOException {     writer.write("handle1"). }
false;public;1;4;;@RequestMapping(value = "/m2", method = RequestMethod.POST) public void handle2(Writer writer) throws IOException {     writer.write("handle2"). }
false;public;0;4;;@RequestMapping(value = "/", method = RequestMethod.GET) public String home() {     return "home". }
false;public;0;5;;@RequestMapping(value = "/", method = RequestMethod.GET, headers = "Accept=application/json") @ResponseBody public String homeJson() {     return "homeJson". }
false;public;1;4;;@InitBinder public void initBinder(WebDataBinder dataBinder) {     dataBinder.setRequiredFields("name"). }
false;public;2;4;;@GetMapping("/messages/{id}") public void message(ModelMap model, Writer writer) throws IOException {     writer.write("Got: " + model.get("successMessage")). }
false;public;3;9;;@PostMapping("/messages") public String sendMessage(TestBean testBean, BindingResult result, RedirectAttributes attributes) {     if (result.hasErrors()) {         return "messages/new".     }     attributes.addAttribute("id", "1").addAttribute("name", "value").     attributes.addFlashAttribute("successMessage", "yay!").     return "redirect:/messages/{id}". }
false;public;1;6;;@PostMapping("/messages-response-entity") public ResponseEntity<Void> sendMessage(RedirectAttributes attributes) {     attributes.addFlashAttribute("successMessage", "yay!").     URI location = URI.create("/messages/1?name=value").     return ResponseEntity.status(HttpStatus.FOUND).location(location).build(). }
false;public;1;4;;@InitBinder public void initBinder(WebDataBinder dataBinder) {     this.count++. }
false;public;1;4;;@ModelAttribute public void populate(Model model) {     this.count++. }
false;public;2;5;;@RequestMapping("/") public void message(int param, Writer writer) throws IOException {     this.count++.     writer.write("count:" + this.count). }
false;public;0;4;;@RequestMapping(value = "/", method = RequestMethod.GET) public String home() {     return "Hello World!". }
false;public;0;7;;@RequestMapping(value = "", method = RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public HttpHeaders create() throws URISyntaxException {     HttpHeaders headers = new HttpHeaders().     headers.setLocation(new URI("/test/items/123")).     return headers. }
false;public;0;5;;@RequestMapping(value = "empty", method = RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public HttpHeaders createNoHeader() {     return new HttpHeaders(). }
false;public;1;4;;@RequestMapping(path = "/a1", method = RequestMethod.GET) public String a1(@RequestBody String body) {     return body. }
false;public;1;4;;@RequestMapping(path = "/a2.html", method = RequestMethod.GET) public String a2(@RequestBody String body) {     return body. }
false;public;1;4;;@RequestMapping(path = "/a3", method = RequestMethod.GET, produces = "text/html") public String a3(@RequestBody String body) throws IOException {     return body. }
false;public;1;4;;@RequestMapping(path = "/a4.css", method = RequestMethod.GET) public String a4(@RequestBody String body) {     return body. }
false;public;1;4;;@RequestMapping("/path") public ModelAndView methodWithHttpStatus(MyEntity object) {     return new ModelAndView("view", HttpStatus.UNPROCESSABLE_ENTITY). }
false;public;0;4;;@RequestMapping("/exception") public void raiseException() throws Exception {     throw new TestException(). }
false;public;0;4;;@ExceptionHandler(TestException.class) public ModelAndView handleException() {     return new ModelAndView("view", HttpStatus.UNPROCESSABLE_ENTITY). }
false;public;1;3;;public void setParam3(int param3) {     this.param3 = param3. }
false;public;1;4;;@RequestMapping("/bind") public String handle(DataClass data) {     return data.param1 + "-" + data.param2 + "-" + data.param3. }
false;public;1;8;;@InitBinder public void initBinder(WebDataBinder binder) {     binder.initDirectFieldAccess().     binder.setConversionService(new DefaultFormattingConversionService()).     LocalValidatorFactoryBean vf = new LocalValidatorFactoryBean().     vf.afterPropertiesSet().     binder.setValidator(vf). }
false;public;2;8;;@RequestMapping("/bind") public BindStatusView handle(@Valid DataClass data, BindingResult result) {     if (result.hasErrors()) {         return new BindStatusView(result.getErrorCount() + ":" + result.getFieldValue("param1") + "-" + result.getFieldValue("param2") + "-" + result.getFieldValue("param3")).     }     return new BindStatusView(data.param1 + "-" + data.param2 + "-" + data.param3). }
false;protected;3;10;;@Override protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     RequestContext rc = new RequestContext(request, model).     rc.getBindStatus("dataClass").     rc.getBindStatus("dataClass.param1").     rc.getBindStatus("dataClass.param2").     rc.getBindStatus("dataClass.param3").     response.getWriter().write(this.content). }
false;public;2;10;;@RequestMapping("/bind") public String handle(Optional<DataClass> optionalData, BindingResult result) {     if (result.hasErrors()) {         assertNotNull(optionalData).         assertFalse(optionalData.isPresent()).         return result.getFieldValue("param1") + "-" + result.getFieldValue("param2") + "-" + result.getFieldValue("param3").     }     return optionalData.map(data -> data.param1 + "-" + data.param2 + "-" + data.param3).orElse(""). }
false;public;1;5;;@InitBinder public void initBinder(WebDataBinder binder) {     binder.initDirectFieldAccess().     binder.setConversionService(new DefaultFormattingConversionService()). }
false;public;2;12;;@RequestMapping("/bind") public String handle(DateClass data, BindingResult result) {     if (result.hasErrors()) {         return result.getFieldError().toString().     }     assertNotNull(data).     assertNotNull(data.date).     assertEquals(2010, data.date.getYear()).     assertEquals(1, data.date.getMonthValue()).     assertEquals(1, data.date.getDayOfMonth()).     return result.getFieldValue("date").toString(). }
