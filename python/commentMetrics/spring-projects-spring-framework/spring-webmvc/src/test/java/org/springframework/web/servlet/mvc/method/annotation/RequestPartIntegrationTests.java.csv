commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;28;;@BeforeClass public static void startServer() throws Exception {     // Let server pick its own random, available port.     server = new Server(0).     ServletContextHandler handler = new ServletContextHandler().     handler.setContextPath("/").     Class<?> config = CommonsMultipartResolverTestConfig.class.     ServletHolder commonsResolverServlet = new ServletHolder(DispatcherServlet.class).     commonsResolverServlet.setInitParameter("contextConfigLocation", config.getName()).     commonsResolverServlet.setInitParameter("contextClass", AnnotationConfigWebApplicationContext.class.getName()).     handler.addServlet(commonsResolverServlet, "/commons-resolver/*").     config = StandardMultipartResolverTestConfig.class.     ServletHolder standardResolverServlet = new ServletHolder(DispatcherServlet.class).     standardResolverServlet.setInitParameter("contextConfigLocation", config.getName()).     standardResolverServlet.setInitParameter("contextClass", AnnotationConfigWebApplicationContext.class.getName()).     standardResolverServlet.getRegistration().setMultipartConfig(new MultipartConfigElement("")).     handler.addServlet(standardResolverServlet, "/standard-resolver/*").     server.setHandler(handler).     server.start().     Connector[] connectors = server.getConnectors().     NetworkConnector connector = (NetworkConnector) connectors[0].     baseUrl = "http://localhost:" + connector.getLocalPort(). }
false;public,static;0;6;;@AfterClass public static void stopServer() throws Exception {     if (server != null) {         server.stop().     } }
false;public;0;17;;@Before public void setup() {     ByteArrayHttpMessageConverter emptyBodyConverter = new ByteArrayHttpMessageConverter().     emptyBodyConverter.setSupportedMediaTypes(Collections.singletonList(MediaType.APPLICATION_JSON)).     List<HttpMessageConverter<?>> converters = new ArrayList<>(3).     converters.add(emptyBodyConverter).     converters.add(new ByteArrayHttpMessageConverter()).     converters.add(new ResourceHttpMessageConverter()).     converters.add(new MappingJackson2HttpMessageConverter()).     AllEncompassingFormHttpMessageConverter converter = new AllEncompassingFormHttpMessageConverter().     converter.setPartConverters(converters).     restTemplate = new RestTemplate(new HttpComponentsClientHttpRequestFactory()).     restTemplate.setMessageConverters(Collections.singletonList(converter)). }
false;public;0;5;;@Test public void commonsMultipartResolver() throws Exception {     testCreate(baseUrl + "/commons-resolver/test", "Jason").     testCreate(baseUrl + "/commons-resolver/test", "Arjen"). }
false;public;0;5;;@Test public void standardMultipartResolver() throws Exception {     testCreate(baseUrl + "/standard-resolver/test", "Jason").     testCreate(baseUrl + "/standard-resolver/test", "Arjen"). }
false;public;0;27;;// SPR-13319 @Test public void standardMultipartResolverWithEncodedFileName() throws Exception {     byte[] boundary = MimeTypeUtils.generateMultipartBoundary().     String boundaryText = new String(boundary, "US-ASCII").     Map<String, String> params = Collections.singletonMap("boundary", boundaryText).     String content = "--" + boundaryText + "\n" + "Content-Disposition: form-data. name=\"file\". filename*=\"utf-8''%C3%A9l%C3%A8ve.txt\"\n" + "Content-Type: text/plain\n" + "Content-Length: 7\n" + "\n" + "content\n" + "--" + boundaryText + "--".     RequestEntity<byte[]> requestEntity = RequestEntity.post(new URI(baseUrl + "/standard-resolver/spr13319")).contentType(new MediaType(MediaType.MULTIPART_FORM_DATA, params)).body(content.getBytes(StandardCharsets.US_ASCII)).     ByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter().     converter.setSupportedMediaTypes(Collections.singletonList(MediaType.MULTIPART_FORM_DATA)).     this.restTemplate.setMessageConverters(Collections.singletonList(converter)).     ResponseEntity<Void> responseEntity = restTemplate.exchange(requestEntity, Void.class).     assertEquals(HttpStatus.OK, responseEntity.getStatusCode()). }
false;private;2;13;;private void testCreate(String url, String basename) {     MultiValueMap<String, Object> parts = new LinkedMultiValueMap<>().     parts.add("json-data", new HttpEntity<>(new TestData(basename))).     parts.add("file-data", new ClassPathResource("logo.jpg", getClass())).     // SPR-12860     parts.add("empty-data", new HttpEntity<>(new byte[0])).     HttpHeaders headers = new HttpHeaders().     headers.setContentType(new MediaType("application", "octet-stream", StandardCharsets.ISO_8859_1)).     // SPR-13096     parts.add("iso-8859-1-data", new HttpEntity<>(new byte[] { (byte) 0xC4 }, headers)).     URI location = restTemplate.postForLocation(url, parts).     assertEquals("http://localhost:8080/test/" + basename + "/logo.jpg", location.toString()). }
false;public;0;4;;@Bean public RequestPartTestController controller() {     return new RequestPartTestController(). }
false;public;0;4;;@Bean public MultipartResolver multipartResolver() {     return new CommonsMultipartResolver(). }
false;public;0;4;;@Bean public MultipartResolver multipartResolver() {     return new StandardServletMultipartResolver(). }
false;public;4;13;;@RequestMapping(value = "/test", method = POST, consumes = { "multipart/mixed", "multipart/form-data" }) public ResponseEntity<Object> create(@RequestPart(name = "json-data") TestData testData, @RequestPart("file-data") Optional<MultipartFile> file, @RequestPart(name = "empty-data", required = false) TestData emptyData, @RequestPart(name = "iso-8859-1-data") byte[] iso88591Data) {     Assert.assertArrayEquals(new byte[] { (byte) 0xC4 }, iso88591Data).     String url = "http://localhost:8080/test/" + testData.getName() + "/" + file.get().getOriginalFilename().     HttpHeaders headers = new HttpHeaders().     headers.setLocation(URI.create(url)).     return new ResponseEntity<>(headers, HttpStatus.CREATED). }
false;public;1;5;;@RequestMapping(value = "/spr13319", method = POST, consumes = "multipart/form-data") public ResponseEntity<Void> create(@RequestPart("file") MultipartFile multipartFile) {     assertEquals("élève.txt", multipartFile.getOriginalFilename()).     return ResponseEntity.ok().build(). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
