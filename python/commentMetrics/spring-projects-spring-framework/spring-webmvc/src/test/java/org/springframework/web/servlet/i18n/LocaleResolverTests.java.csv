commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testAcceptHeaderLocaleResolver() {     doTest(new AcceptHeaderLocaleResolver(), false). }
false;public;0;4;;@Test public void testFixedLocaleResolver() {     doTest(new FixedLocaleResolver(Locale.UK), false). }
false;public;0;4;;@Test public void testCookieLocaleResolver() {     doTest(new CookieLocaleResolver(), true). }
false;public;0;4;;@Test public void testSessionLocaleResolver() {     doTest(new SessionLocaleResolver(), true). }
false;private;2;83;;private void doTest(LocaleResolver localeResolver, boolean shouldSet) {     // create mocks     MockServletContext context = new MockServletContext().     MockHttpServletRequest request = new MockHttpServletRequest(context).     request.addPreferredLocale(Locale.UK).     MockHttpServletResponse response = new MockHttpServletResponse().     // check original locale     Locale locale = localeResolver.resolveLocale(request).     assertEquals(Locale.UK, locale).     // set new locale     try {         localeResolver.setLocale(request, response, Locale.GERMANY).         if (!shouldSet)             fail("should not be able to set Locale").         // check new locale         locale = localeResolver.resolveLocale(request).         assertEquals(Locale.GERMANY, locale).     } catch (UnsupportedOperationException ex) {         if (shouldSet) {             fail("should be able to set Locale").         }     }     // check LocaleContext     if (localeResolver instanceof LocaleContextResolver) {         LocaleContextResolver localeContextResolver = (LocaleContextResolver) localeResolver.         LocaleContext localeContext = localeContextResolver.resolveLocaleContext(request).         if (shouldSet) {             assertEquals(Locale.GERMANY, localeContext.getLocale()).         } else {             assertEquals(Locale.UK, localeContext.getLocale()).         }         assertTrue(localeContext instanceof TimeZoneAwareLocaleContext).         assertNull(((TimeZoneAwareLocaleContext) localeContext).getTimeZone()).         if (localeContextResolver instanceof AbstractLocaleContextResolver) {             ((AbstractLocaleContextResolver) localeContextResolver).setDefaultTimeZone(TimeZone.getTimeZone("GMT+1")).             assertEquals(((TimeZoneAwareLocaleContext) localeContext).getTimeZone(), TimeZone.getTimeZone("GMT+1")).         }         try {             localeContextResolver.setLocaleContext(request, response, new SimpleLocaleContext(Locale.US)).             if (!shouldSet) {                 fail("should not be able to set Locale").             }             localeContext = localeContextResolver.resolveLocaleContext(request).             assertEquals(Locale.US, localeContext.getLocale()).             if (localeContextResolver instanceof AbstractLocaleContextResolver) {                 assertEquals(((TimeZoneAwareLocaleContext) localeContext).getTimeZone(), TimeZone.getTimeZone("GMT+1")).             } else {                 assertNull(((TimeZoneAwareLocaleContext) localeContext).getTimeZone()).             }             localeContextResolver.setLocaleContext(request, response, new SimpleTimeZoneAwareLocaleContext(Locale.GERMANY, TimeZone.getTimeZone("GMT+2"))).             localeContext = localeContextResolver.resolveLocaleContext(request).             assertEquals(Locale.GERMANY, localeContext.getLocale()).             assertTrue(localeContext instanceof TimeZoneAwareLocaleContext).             assertEquals(((TimeZoneAwareLocaleContext) localeContext).getTimeZone(), TimeZone.getTimeZone("GMT+2")).             localeContextResolver.setLocaleContext(request, response, new SimpleTimeZoneAwareLocaleContext(null, TimeZone.getTimeZone("GMT+3"))).             localeContext = localeContextResolver.resolveLocaleContext(request).             assertEquals(Locale.UK, localeContext.getLocale()).             assertTrue(localeContext instanceof TimeZoneAwareLocaleContext).             assertEquals(((TimeZoneAwareLocaleContext) localeContext).getTimeZone(), TimeZone.getTimeZone("GMT+3")).             if (localeContextResolver instanceof AbstractLocaleContextResolver) {                 ((AbstractLocaleContextResolver) localeContextResolver).setDefaultLocale(Locale.GERMANY).                 assertEquals(Locale.GERMANY, localeContext.getLocale()).             }         } catch (UnsupportedOperationException ex) {             if (shouldSet) {                 fail("should be able to set Locale").             }         }     } }
