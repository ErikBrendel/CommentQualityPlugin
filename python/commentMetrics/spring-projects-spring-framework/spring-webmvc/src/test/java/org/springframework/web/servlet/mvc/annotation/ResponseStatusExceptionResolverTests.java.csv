commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     exceptionResolver.setWarnLogCategory(exceptionResolver.getClass().getName()). }
false;public;0;6;;@Test public void statusCode() {     StatusCodeException ex = new StatusCodeException().     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertResolved(mav, 400, null). }
false;public;0;6;;@Test public void statusCodeFromComposedResponseStatus() {     StatusCodeFromComposedResponseStatusException ex = new StatusCodeFromComposedResponseStatusException().     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertResolved(mav, 400, null). }
false;public;0;6;;@Test public void statusCodeAndReason() {     StatusCodeAndReasonException ex = new StatusCodeAndReasonException().     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertResolved(mav, 410, "You suck!"). }
false;public;0;17;;@Test public void statusCodeAndReasonMessage() {     Locale locale = Locale.CHINESE.     LocaleContextHolder.setLocale(locale).     try {         StaticMessageSource messageSource = new StaticMessageSource().         messageSource.addMessage("gone.reason", locale, "Gone reason message").         exceptionResolver.setMessageSource(messageSource).         StatusCodeAndReasonMessageException ex = new StatusCodeAndReasonMessageException().         exceptionResolver.resolveException(request, response, null, ex).         assertEquals("Invalid status reason", "Gone reason message", response.getErrorMessage()).     } finally {         LocaleContextHolder.resetLocaleContext().     } }
false;public;0;7;;@Test public void notAnnotated() {     Exception ex = new Exception().     exceptionResolver.resolveException(request, response, null, ex).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertNull("ModelAndView returned", mav). }
false;public;0;7;;// SPR-12903 @Test public void nestedException() throws Exception {     Exception cause = new StatusCodeAndReasonMessageException().     TypeMismatchException ex = new TypeMismatchException("value", ITestBean.class, cause).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertResolved(mav, 410, "gone.reason"). }
false;public;0;6;;@Test public void responseStatusException() throws Exception {     ResponseStatusException ex = new ResponseStatusException(HttpStatus.BAD_REQUEST).     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertResolved(mav, 400, null). }
false;public;0;6;;// SPR-15524 @Test public void responseStatusExceptionWithReason() throws Exception {     ResponseStatusException ex = new ResponseStatusException(HttpStatus.BAD_REQUEST, "The reason").     ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex).     assertResolved(mav, 400, "The reason"). }
false;private;3;6;;private void assertResolved(ModelAndView mav, int status, String reason) {     assertTrue("No Empty ModelAndView returned", mav != null && mav.isEmpty()).     assertEquals(status, response.getStatus()).     assertEquals(reason, response.getErrorMessage()).     assertTrue(response.isCommitted()). }
