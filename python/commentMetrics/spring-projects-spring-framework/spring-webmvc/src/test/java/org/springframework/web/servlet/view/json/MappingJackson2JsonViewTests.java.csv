commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setUp() {     request = new MockHttpServletRequest().     response = new MockHttpServletResponse().     jsContext = ContextFactory.getGlobal().enterContext().     jsScope = jsContext.initStandardObjects().     view = new MappingJackson2JsonView(). }
false;public;0;4;;@Test public void isExposePathVars() {     assertEquals("Must not expose path variables", false, view.isExposePathVariables()). }
false;public;0;19;;@Test public void renderSimpleMap() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("bindingResult", mock(BindingResult.class, "binding_result")).     model.put("foo", "bar").     view.setUpdateContentLength(true).     view.render(model, request, response).     assertEquals("no-store", response.getHeader("Cache-Control")).     assertEquals(MappingJackson2JsonView.DEFAULT_CONTENT_TYPE, response.getContentType()).     String jsonResult = response.getContentAsString().     assertTrue(jsonResult.length() > 0).     assertEquals(jsonResult.length(), response.getContentLength()).     validateResult(). }
false;public;0;13;;@Test public void renderWithSelectedContentType() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("foo", "bar").     view.render(model, request, response).     assertEquals("application/json", response.getContentType()).     request.setAttribute(View.SELECTED_CONTENT_TYPE, new MediaType("application", "vnd.example-v2+xml")).     view.render(model, request, response).     assertEquals("application/vnd.example-v2+xml", response.getContentType()). }
false;public;0;12;;@Test public void renderCaching() throws Exception {     view.setDisableCaching(false).     Map<String, Object> model = new HashMap<>().     model.put("bindingResult", mock(BindingResult.class, "binding_result")).     model.put("foo", "bar").     view.render(model, request, response).     assertNull(response.getHeader("Cache-Control")). }
false;public;0;5;;@Test public void renderSimpleMapPrefixed() throws Exception {     view.setPrefixJson(true).     renderSimpleMap(). }
false;public;0;15;;@Test public void renderSimpleBean() throws Exception {     Object bean = new TestBeanSimple().     Map<String, Object> model = new HashMap<>().     model.put("bindingResult", mock(BindingResult.class, "binding_result")).     model.put("foo", bean).     view.setUpdateContentLength(true).     view.render(model, request, response).     assertTrue(response.getContentAsString().length() > 0).     assertEquals(response.getContentAsString().length(), response.getContentLength()).     validateResult(). }
false;public;0;12;;@Test public void renderWithPrettyPrint() throws Exception {     ModelMap model = new ModelMap("foo", new TestBeanSimple()).     view.setPrettyPrint(true).     view.render(model, request, response).     String result = response.getContentAsString().replace("\r\n", "\n").     assertTrue("Pretty printing not applied:\n" + result, result.startsWith("{\n  \"foo\" : {\n    ")).     validateResult(). }
false;public;0;6;;@Test public void renderSimpleBeanPrefixed() throws Exception {     view.setPrefixJson(true).     renderSimpleBean().     assertTrue(response.getContentAsString().startsWith(")]}', ")). }
false;public;0;6;;@Test public void renderSimpleBeanNotPrefixed() throws Exception {     view.setPrefixJson(false).     renderSimpleBean().     assertFalse(response.getContentAsString().startsWith(")]}', ")). }
false;public;0;13;;@Test public void renderWithCustomSerializerLocatedByAnnotation() throws Exception {     Object bean = new TestBeanSimpleAnnotated().     Map<String, Object> model = new HashMap<>().     model.put("foo", bean).     view.render(model, request, response).     assertTrue(response.getContentAsString().length() > 0).     assertEquals("{\"foo\":{\"testBeanSimple\":\"custom\"}}", response.getContentAsString()).     validateResult(). }
false;public;0;20;;@Test public void renderWithCustomSerializerLocatedByFactory() throws Exception {     SerializerFactory factory = new DelegatingSerializerFactory(null).     ObjectMapper mapper = new ObjectMapper().     mapper.setSerializerFactory(factory).     view.setObjectMapper(mapper).     Object bean = new TestBeanSimple().     Map<String, Object> model = new HashMap<>().     model.put("foo", bean).     model.put("bar", new TestChildBean()).     view.render(model, request, response).     String result = response.getContentAsString().     assertTrue(result.length() > 0).     assertTrue(result.contains("\"foo\":{\"testBeanSimple\":\"custom\"}")).     validateResult(). }
false;public;0;23;;@Test public void renderOnlyIncludedAttributes() throws Exception {     Set<String> attrs = new HashSet<>().     attrs.add("foo").     attrs.add("baz").     attrs.add("nil").     view.setModelKeys(attrs).     Map<String, Object> model = new HashMap<>().     model.put("foo", "foo").     model.put("bar", "bar").     model.put("baz", "baz").     view.render(model, request, response).     String result = response.getContentAsString().     assertTrue(result.length() > 0).     assertTrue(result.contains("\"foo\":\"foo\"")).     assertTrue(result.contains("\"baz\":\"baz\"")).     validateResult(). }
false;public;0;12;;@Test public void filterSingleKeyModel() throws Exception {     view.setExtractValueFromSingleKeyModel(true).     Map<String, Object> model = new HashMap<>().     TestBeanSimple bean = new TestBeanSimple().     model.put("foo", bean).     Object actual = view.filterModel(model).     assertSame(bean, actual). }
false;public;0;17;;@SuppressWarnings("rawtypes") @Test public void filterTwoKeyModel() throws Exception {     view.setExtractValueFromSingleKeyModel(true).     Map<String, Object> model = new HashMap<>().     TestBeanSimple bean1 = new TestBeanSimple().     TestBeanSimple bean2 = new TestBeanSimple().     model.put("foo1", bean1).     model.put("foo2", bean2).     Object actual = view.filterModel(model).     assertTrue(actual instanceof Map).     assertSame(bean1, ((Map) actual).get("foo1")).     assertSame(bean2, ((Map) actual).get("foo2")). }
false;public;0;18;;@Test public void renderSimpleBeanWithJsonView() throws Exception {     Object bean = new TestBeanSimple().     Map<String, Object> model = new HashMap<>().     model.put("bindingResult", mock(BindingResult.class, "binding_result")).     model.put("foo", bean).     model.put(JsonView.class.getName(), MyJacksonView1.class).     view.setUpdateContentLength(true).     view.render(model, request, response).     String content = response.getContentAsString().     assertTrue(content.length() > 0).     assertEquals(content.length(), response.getContentLength()).     assertTrue(content.contains("foo")).     assertFalse(content.contains("boo")).     assertFalse(content.contains(JsonView.class.getName())). }
false;public;0;22;;@Test public void renderSimpleBeanWithFilters() throws Exception {     TestSimpleBeanFiltered bean = new TestSimpleBeanFiltered().     bean.setProperty1("value").     bean.setProperty2("value").     Map<String, Object> model = new HashMap<>().     model.put("bindingResult", mock(BindingResult.class, "binding_result")).     model.put("foo", bean).     FilterProvider filters = new SimpleFilterProvider().addFilter("myJacksonFilter", SimpleBeanPropertyFilter.serializeAllExcept("property2")).     model.put(FilterProvider.class.getName(), filters).     view.setUpdateContentLength(true).     view.render(model, request, response).     String content = response.getContentAsString().     assertTrue(content.length() > 0).     assertEquals(content.length(), response.getContentLength()).     assertThat(content, containsString("\"property1\":\"value\"")).     assertThat(content, not(containsString("\"property2\":\"value\""))).     assertFalse(content.contains(FilterProvider.class.getName())). }
false;private;0;12;;private void validateResult() throws Exception {     String json = response.getContentAsString().     DirectFieldAccessor viewAccessor = new DirectFieldAccessor(view).     String jsonPrefix = (String) viewAccessor.getPropertyValue("jsonPrefix").     if (jsonPrefix != null) {         json = json.substring(5).     }     Object jsResult = jsContext.evaluateString(jsScope, "(" + json + ")", "JSON Stream", 1, null).     assertNotNull("Json Result did not eval as valid JavaScript", jsResult).     assertEquals("application/json", response.getContentType()). }
false;public;0;3;;public String getProperty1() {     return property1. }
false;public;0;3;;public boolean getTest() {     return test. }
false;public;0;3;;public String getProperty2() {     return property2. }
false;public;0;3;;public Date getNow() {     return new Date(). }
false;public;0;3;;public TestChildBean getChild() {     return child. }
false;public;0;3;;public String getValue() {     return value. }
false;public;0;3;;public String getBaz() {     return baz. }
false;public;0;3;;public TestBeanSimple getParent() {     return parent. }
false;public;1;3;;public void setParent(TestBeanSimple parent) {     this.parent = parent. }
false;public;3;7;;@Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {     jgen.writeStartObject().     jgen.writeFieldName("testBeanSimple").     jgen.writeString("custom").     jgen.writeEndObject(). }
false;public;0;3;;public String getProperty1() {     return property1. }
false;public;1;3;;public void setProperty1(String property1) {     this.property1 = property1. }
false;public;0;3;;public String getProperty2() {     return property2. }
false;public;1;3;;public void setProperty2(String property2) {     this.property2 = property2. }
false;public;2;9;;@Override public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType type) throws JsonMappingException {     if (type.getRawClass() == TestBeanSimple.class) {         return new TestBeanSimpleSerializer().     } else {         return super.createSerializer(prov, type).     } }
