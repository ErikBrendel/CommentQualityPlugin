commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.handler = new ViewMethodReturnValueHandler().     this.mavContainer = new ModelAndViewContainer().     this.webRequest = new ServletWebRequest(new MockHttpServletRequest()). }
false;public;0;4;;@Test public void supportsReturnType() throws Exception {     assertTrue(this.handler.supportsReturnType(createReturnValueParam("view"))). }
false;public;0;7;;@Test public void returnView() throws Exception {     InternalResourceView view = new InternalResourceView("testView").     this.handler.handleReturnValue(view, createReturnValueParam("view"), this.mavContainer, this.webRequest).     assertSame(view, this.mavContainer.getView()). }
false;public;0;11;;@Test public void returnViewRedirect() throws Exception {     RedirectView redirectView = new RedirectView("testView").     ModelMap redirectModel = new RedirectAttributesModelMap().     this.mavContainer.setRedirectModel(redirectModel).     MethodParameter param = createReturnValueParam("view").     this.handler.handleReturnValue(redirectView, param, this.mavContainer, this.webRequest).     assertSame(redirectView, this.mavContainer.getView()).     assertSame("Should have switched to the RedirectModel", redirectModel, this.mavContainer.getModel()). }
false;private;1;4;;private MethodParameter createReturnValueParam(String methodName) throws Exception {     Method method = getClass().getDeclaredMethod(methodName).     return new MethodParameter(method, -1). }
false;;0;3;;View view() {     return null. }
