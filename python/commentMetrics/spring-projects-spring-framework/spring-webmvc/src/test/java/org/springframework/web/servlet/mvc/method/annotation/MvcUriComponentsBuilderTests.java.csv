commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(this.request)). }
false;public;0;4;;@After public void reset() {     RequestContextHolder.resetRequestAttributes(). }
false;public;0;5;;@Test public void fromControllerPlain() {     UriComponents uriComponents = fromController(PersonControllerImpl.class).build().     assertThat(uriComponents.toUriString(), Matchers.endsWith("/people")). }
false;public;0;5;;@Test public void fromControllerUriTemplate() {     UriComponents uriComponents = fromController(PersonsAddressesController.class).buildAndExpand(15).     assertThat(uriComponents.toUriString(), endsWith("/people/15/addresses")). }
false;public;0;6;;@Test public void fromControllerSubResource() {     UriComponents uriComponents = fromController(PersonControllerImpl.class).pathSegment("something").build().     assertThat(uriComponents.toUriString(), endsWith("/people/something")). }
false;public;0;5;;@Test public void fromControllerTwoTypeLevelMappings() {     UriComponents uriComponents = fromController(InvalidController.class).build().     assertThat(uriComponents.toUriString(), is("http://localhost/persons")). }
false;public;0;5;;@Test public void fromControllerNotMapped() {     UriComponents uriComponents = fromController(UnmappedController.class).build().     assertThat(uriComponents.toUriString(), is("http://localhost/")). }
false;public;0;8;;@Test public void fromControllerWithCustomBaseUrlViaStaticCall() {     UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base").     UriComponents uriComponents = fromController(builder, PersonControllerImpl.class).build().     assertEquals("http://example.org:9090/base/people", uriComponents.toString()).     assertEquals("http://example.org:9090/base", builder.toUriString()). }
false;public;0;9;;@Test public void fromControllerWithCustomBaseUrlViaInstance() {     UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base").     MvcUriComponentsBuilder mvcBuilder = relativeTo(builder).     UriComponents uriComponents = mvcBuilder.withController(PersonControllerImpl.class).build().     assertEquals("http://example.org:9090/base/people", uriComponents.toString()).     assertEquals("http://example.org:9090/base", builder.toUriString()). }
false;public;0;8;;@Test public void usesForwardedHostAsHostIfHeaderIsSet() throws Exception {     this.request.addHeader("X-Forwarded-Host", "somethingDifferent").     adaptRequestFromForwardedHeaders().     UriComponents uriComponents = fromController(PersonControllerImpl.class).build().     assertThat(uriComponents.toUriString(), startsWith("http://somethingDifferent")). }
false;public;0;8;;@Test public void usesForwardedHostAndPortFromHeader() throws Exception {     request.addHeader("X-Forwarded-Host", "foobar:8088").     adaptRequestFromForwardedHeaders().     UriComponents uriComponents = fromController(PersonControllerImpl.class).build().     assertThat(uriComponents.toUriString(), startsWith("http://foobar:8088")). }
false;public;0;8;;@Test public void usesFirstHostOfXForwardedHost() throws Exception {     this.request.addHeader("X-Forwarded-Host", "barfoo:8888, localhost:8088").     adaptRequestFromForwardedHeaders().     UriComponents uriComponents = fromController(PersonControllerImpl.class).build().     assertThat(uriComponents.toUriString(), startsWith("http://barfoo:8888")). }
true;private;0;6;// SPR-16668 ;// SPR-16668 private void adaptRequestFromForwardedHeaders() throws Exception {     MockFilterChain chain = new MockFilterChain().     new ForwardedHeaderFilter().doFilter(this.request, new MockHttpServletResponse(), chain).     HttpServletRequest adaptedRequest = (HttpServletRequest) chain.getRequest().     RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(adaptedRequest)). }
false;public;0;7;;@Test public void fromMethodNamePathVariable() {     UriComponents uriComponents = fromMethodName(ControllerWithMethods.class, "methodWithPathVariable", "1").build().     assertThat(uriComponents.toUriString(), is("http://localhost/something/1/foo")). }
false;public;0;8;;@Test public void fromMethodNameTypeLevelPathVariable() {     this.request.setContextPath("/myapp").     UriComponents uriComponents = fromMethodName(PersonsAddressesController.class, "getAddressesForCountry", "DE").buildAndExpand("1").     assertThat(uriComponents.toUriString(), is("http://localhost/myapp/people/1/addresses/DE")). }
false;public;0;8;;@Test public void fromMethodNameTwoPathVariables() {     DateTime now = DateTime.now().     UriComponents uriComponents = fromMethodName(ControllerWithMethods.class, "methodWithTwoPathVariables", 1, now).build().     assertThat(uriComponents.getPath(), is("/something/1/foo/" + ISODateTimeFormat.date().print(now))). }
false;public;0;10;;@Test public void fromMethodNameWithPathVarAndRequestParam() {     UriComponents uriComponents = fromMethodName(ControllerWithMethods.class, "methodForNextPage", "1", 10, 5).build().     assertThat(uriComponents.getPath(), is("/something/1/foo")).     MultiValueMap<String, String> queryParams = uriComponents.getQueryParams().     assertThat(queryParams.get("limit"), contains("5")).     assertThat(queryParams.get("offset"), contains("10")). }
false;public;0;6;;// SPR-12977 @Test public void fromMethodNameWithBridgedMethod() {     UriComponents uriComponents = fromMethodName(PersonCrudController.class, "get", (long) 42).build().     assertThat(uriComponents.toUriString(), is("http://localhost/42")). }
false;public;0;6;;// SPR-11391 @Test public void fromMethodNameTypeLevelPathVariableWithoutArgumentValue() {     UriComponents uriComponents = fromMethodName(UserContactController.class, "showCreate", 123).build().     assertThat(uriComponents.getPath(), is("/user/123/contacts/create")). }
false;public;0;6;;@Test public void fromMethodNameNotMapped() {     UriComponents uriComponents = fromMethodName(UnmappedController.class, "unmappedMethod").build().     assertThat(uriComponents.toUriString(), is("http://localhost/")). }
false;public;0;9;;@Test public void fromMethodNameWithCustomBaseUrlViaStaticCall() {     UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base").     UriComponents uriComponents = fromMethodName(builder, ControllerWithMethods.class, "methodWithPathVariable", "1").build().     assertEquals("http://example.org:9090/base/something/1/foo", uriComponents.toString()).     assertEquals("http://example.org:9090/base", builder.toUriString()). }
false;public;0;10;;@Test public void fromMethodNameWithCustomBaseUrlViaInstance() {     UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base").     MvcUriComponentsBuilder mvcBuilder = relativeTo(builder).     UriComponents uriComponents = mvcBuilder.withMethodName(ControllerWithMethods.class, "methodWithPathVariable", "1").build().     assertEquals("http://example.org:9090/base/something/1/foo", uriComponents.toString()).     assertEquals("http://example.org:9090/base", builder.toUriString()). }
false;public;0;7;;// SPR-14405 @Test public void fromMethodNameWithOptionalParam() {     UriComponents uriComponents = fromMethodName(ControllerWithMethods.class, "methodWithOptionalParam", new Object[] { null }).build().     assertThat(uriComponents.toUriString(), is("http://localhost/something/optional-param")). }
false;public;0;6;;@Test public void fromMethodNameWithMetaAnnotation() {     UriComponents uriComponents = fromMethodName(MetaAnnotationController.class, "handleInput").build().     assertThat(uriComponents.toUriString(), is("http://localhost/input")). }
false;public;0;7;;@Test public void fromMethodCallPlain() {     UriComponents uriComponents = fromMethodCall(on(ControllerWithMethods.class).myMethod(null)).build().     assertThat(uriComponents.toUriString(), startsWith("http://localhost")).     assertThat(uriComponents.toUriString(), endsWith("/something/else")). }
false;public;0;7;;@Test public void fromMethodCallOnSubclass() {     UriComponents uriComponents = fromMethodCall(on(ExtendedController.class).myMethod(null)).build().     assertThat(uriComponents.toUriString(), startsWith("http://localhost")).     assertThat(uriComponents.toUriString(), endsWith("/extended/else")). }
false;public;0;7;;@Test public void fromMethodCallWithTypeLevelUriVars() {     UriComponents uriComponents = fromMethodCall(on(PersonsAddressesController.class).getAddressesForCountry("DE")).buildAndExpand(15).     assertThat(uriComponents.toUriString(), endsWith("/people/15/addresses/DE")). }
false;public;0;8;;@Test public void fromMethodCallWithPathVariable() {     UriComponents uriComponents = fromMethodCall(on(ControllerWithMethods.class).methodWithPathVariable("1")).build().     assertThat(uriComponents.toUriString(), startsWith("http://localhost")).     assertThat(uriComponents.toUriString(), endsWith("/something/1/foo")). }
false;public;0;11;;@Test public void fromMethodCallWithPathVariableAndRequestParams() {     UriComponents uriComponents = fromMethodCall(on(ControllerWithMethods.class).methodForNextPage("1", 10, 5)).build().     assertThat(uriComponents.getPath(), is("/something/1/foo")).     MultiValueMap<String, String> queryParams = uriComponents.getQueryParams().     assertThat(queryParams.get("limit"), contains("5")).     assertThat(queryParams.get("offset"), contains("10")). }
false;public;0;11;;@Test public void fromMethodCallWithPathVariableAndMultiValueRequestParams() {     UriComponents uriComponents = fromMethodCall(on(ControllerWithMethods.class).methodWithMultiValueRequestParams("1", Arrays.asList(3, 7), 5)).build().     assertThat(uriComponents.getPath(), is("/something/1/foo")).     MultiValueMap<String, String> queryParams = uriComponents.getQueryParams().     assertThat(queryParams.get("limit"), contains("5")).     assertThat(queryParams.get("items"), containsInAnyOrder("3", "7")). }
false;public;0;8;;@Test public void fromMethodCallWithCustomBaseUrlViaStaticCall() {     UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base").     UriComponents uriComponents = fromMethodCall(builder, on(ControllerWithMethods.class).myMethod(null)).build().     assertEquals("http://example.org:9090/base/something/else", uriComponents.toString()).     assertEquals("http://example.org:9090/base", builder.toUriString()). }
false;public;0;9;;@Test public void fromMethodCallWithCustomBaseUrlViaInstance() {     UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base").     MvcUriComponentsBuilder mvcBuilder = relativeTo(builder).     UriComponents result = mvcBuilder.withMethodCall(on(ControllerWithMethods.class).myMethod(null)).build().     assertEquals("http://example.org:9090/base/something/else", result.toString()).     assertEquals("http://example.org:9090/base", builder.toUriString()). }
false;public;0;7;;// SPR-16710 @Test public void fromMethodCallWithModelAndViewReturnType() {     UriComponents uriComponents = fromMethodCall(on(BookingControllerWithModelAndView.class).getBooking(21L)).buildAndExpand(42).     assertEquals("http://localhost/hotels/42/bookings/21", uriComponents.encode().toUri().toString()). }
false;public;0;7;;// SPR-16710 @Test public void fromMethodCallWithObjectReturnType() {     UriComponents uriComponents = fromMethodCall(on(BookingControllerWithObject.class).getBooking(21L)).buildAndExpand(42).     assertEquals("http://localhost/hotels/42/bookings/21", uriComponents.encode().toUri().toString()). }
false;public;0;7;;// SPR-16710 @Test(expected = IllegalStateException.class) public void fromMethodCallWithStringReturnType() {     UriComponents uriComponents = fromMethodCall(on(BookingControllerWithString.class).getBooking(21L)).buildAndExpand(42).     assertEquals("http://localhost/hotels/42/bookings/21", uriComponents.encode().toUri().toString()). }
false;public;0;7;;// SPR-16710 @Test public void fromMethodNameWithStringReturnType() {     UriComponents uriComponents = fromMethodName(BookingControllerWithString.class, "getBooking", 21L).buildAndExpand(42).     assertEquals("http://localhost/hotels/42/bookings/21", uriComponents.encode().toUri().toString()). }
false;public;0;13;;@Test public void fromMappingNamePlain() {     initWebApplicationContext(WebConfig.class).     this.request.setServerName("example.org").     this.request.setServerPort(9999).     this.request.setContextPath("/base").     String mappingName = "PAC#getAddressesForCountry".     String url = fromMappingName(mappingName).arg(0, "DE").buildAndExpand(123).     assertEquals("/base/people/123/addresses/DE", url). }
false;public;0;10;;@Test public void fromMappingNameWithCustomBaseUrl() {     initWebApplicationContext(WebConfig.class).     UriComponentsBuilder baseUrl = UriComponentsBuilder.fromUriString("http://example.org:9999/base").     MvcUriComponentsBuilder mvcBuilder = relativeTo(baseUrl).     String url = mvcBuilder.withMappingName("PAC#getAddressesForCountry").arg(0, "DE").buildAndExpand(123).     assertEquals("http://example.org:9999/base/people/123/addresses/DE", url). }
false;public;0;13;;// SPR-17027 @Test public void fromMappingNameWithEncoding() {     initWebApplicationContext(WebConfig.class).     this.request.setServerName("example.org").     this.request.setServerPort(9999).     this.request.setContextPath("/base").     String mappingName = "PAC#getAddressesForCountry".     String url = fromMappingName(mappingName).arg(0, "DE.FR").encode().buildAndExpand("_+_").     assertEquals("/base/people/_%2B_/addresses/DE%3BFR", url). }
false;public;0;12;;@Test public void fromControllerWithPrefix() {     initWebApplicationContext(PathPrefixWebConfig.class).     this.request.setServerName("example.org").     this.request.setServerPort(9999).     this.request.setContextPath("/base").     assertEquals("http://example.org:9999/base/api/people/123/addresses", fromController(PersonsAddressesController.class).buildAndExpand("123").toString()). }
false;public;0;13;;@Test public void fromMethodWithPrefix() {     initWebApplicationContext(PathPrefixWebConfig.class).     this.request.setServerName("example.org").     this.request.setServerPort(9999).     this.request.setContextPath("/base").     assertEquals("http://example.org:9999/base/api/people/123/addresses/DE", fromMethodCall(on(PersonsAddressesController.class).getAddressesForCountry("DE")).buildAndExpand("123").toString()). }
false;private;1;7;;private void initWebApplicationContext(Class<?> configClass) {     AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().     context.setServletContext(new MockServletContext()).     context.register(configClass).     context.refresh().     this.request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, context). }
false;public;0;3;;public Long getId() {     return id. }
false;;1;4;;@RequestMapping("/{country}") HttpEntity<Void> getAddressesForCountry(@PathVariable String country) {     return null. }
false;public;0;3;;@RequestMapping public void unmappedMethod() { }
false;;1;4;;@RequestMapping("/else") HttpEntity<Void> myMethod(@RequestBody Object payload) {     return null. }
false;;1;4;;@RequestMapping("/{id}/foo") HttpEntity<Void> methodWithPathVariable(@PathVariable String id) {     return null. }
false;;2;5;;@RequestMapping("/{id}/foo/{date}") HttpEntity<Void> methodWithTwoPathVariables(@PathVariable Integer id, @DateTimeFormat(iso = ISO.DATE) @PathVariable DateTime date) {     return null. }
false;;3;5;;@RequestMapping(value = "/{id}/foo") HttpEntity<Void> methodForNextPage(@PathVariable String id, @RequestParam Integer offset, @RequestParam Integer limit) {     return null. }
false;;3;5;;@RequestMapping(value = "/{id}/foo") HttpEntity<Void> methodWithMultiValueRequestParams(@PathVariable String id, @RequestParam List<Integer> items, @RequestParam Integer limit) {     return null. }
false;;1;4;;@RequestMapping("/optional-param") HttpEntity<Void> methodWithOptionalParam(@RequestParam(defaultValue = "") String q) {     return null. }
false;public;1;4;;@RequestMapping("/create") public String showCreate(@PathVariable Integer userId) {     return null. }
false;abstract;1;1;;abstract T get(ID id).
false;public;1;4;;@RequestMapping(path = "/{id}", method = RequestMethod.GET) public Person get(@PathVariable Long id) {     return new Person(). }
false;public;0;3;;@RequestMapping public void handle() { }
false;public;0;3;;@PostJson(path = "/input") public void handleInput() { }
false;public;0;4;;@Bean public PersonsAddressesController controller() {     return new PersonsAddressesController(). }
false;public;1;4;;@Override public void configurePathMatch(PathMatchConfigurer configurer) {     configurer.addPathPrefix("/api", PersonsAddressesController.class::equals). }
false;public;0;4;;@Bean public PersonsAddressesController controller() {     return new PersonsAddressesController(). }
false;public;1;4;;@GetMapping("/bookings/{booking}") public ModelAndView getBooking(@PathVariable Long booking) {     return new ModelAndView("url"). }
false;public;1;4;;@GetMapping("/bookings/{booking}") public Object getBooking(@PathVariable Long booking) {     return "url". }
false;public;1;4;;@GetMapping("/bookings/{booking}") public String getBooking(@PathVariable Long booking) {     return "url". }
