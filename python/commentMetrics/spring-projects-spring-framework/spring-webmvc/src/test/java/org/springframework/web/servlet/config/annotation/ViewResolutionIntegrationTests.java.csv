commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void freemarker() throws Exception {     MockHttpServletResponse response = runTest(FreeMarkerWebConfig.class).     assertEquals("<html><body>Hello World!</body></html>", response.getContentAsString()). }
false;public;0;5;;@Test public void tiles() throws Exception {     MockHttpServletResponse response = runTest(TilesWebConfig.class).     assertEquals("/WEB-INF/index.jsp", response.getForwardedUrl()). }
false;public;0;5;;@Test public void groovyMarkup() throws Exception {     MockHttpServletResponse response = runTest(GroovyMarkupWebConfig.class).     assertEquals("<html><body>Hello World!</body></html>", response.getContentAsString()). }
false;public;0;5;;@Test public void freemarkerInvalidConfig() throws Exception {     this.thrown.expectMessage("In addition to a FreeMarker view resolver ").     runTest(InvalidFreeMarkerWebConfig.class). }
false;public;0;5;;@Test public void tilesInvalidConfig() throws Exception {     this.thrown.expectMessage("In addition to a Tiles view resolver ").     runTest(InvalidTilesWebConfig.class). }
false;public;0;5;;@Test public void groovyMarkupInvalidConfig() throws Exception {     this.thrown.expectMessage("In addition to a Groovy markup view resolver ").     runTest(InvalidGroovyMarkupWebConfig.class). }
false;public;0;5;;// SPR-12013 @Test public void existingViewResolver() throws Exception {     MockHttpServletResponse response = runTest(ExistingViewResolverConfig.class).     assertEquals("<html><body>Hello World!</body></html>", response.getContentAsString()). }
false;private;1;16;;private MockHttpServletResponse runTest(Class<?> configClass) throws ServletException, IOException {     String basePath = "org/springframework/web/servlet/config/annotation".     MockServletContext servletContext = new MockServletContext(basePath).     MockServletConfig servletConfig = new MockServletConfig(servletContext).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/").     MockHttpServletResponse response = new MockHttpServletResponse().     AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().     context.register(configClass).     context.setServletContext(servletContext).     context.refresh().     DispatcherServlet servlet = new DispatcherServlet(context).     servlet.init(servletConfig).     servlet.service(request, response).     return response. }
false;public;1;5;;@RequestMapping(value = "/", method = RequestMethod.GET) public String sample(ModelMap model) {     model.addAttribute("hello", "Hello World!").     return "index". }
false;public;0;4;;@Bean public SampleController sampleController() {     return new SampleController(). }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.freeMarker(). }
false;public;0;6;;@Bean public FreeMarkerConfigurer freeMarkerConfigurer() {     FreeMarkerConfigurer configurer = new FreeMarkerConfigurer().     configurer.setTemplateLoaderPath("/WEB-INF/").     return configurer. }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.tiles(). }
false;public;0;6;;@Bean public TilesConfigurer tilesConfigurer() {     TilesConfigurer configurer = new TilesConfigurer().     configurer.setDefinitions("/WEB-INF/tiles.xml").     return configurer. }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.groovy(). }
false;public;0;6;;@Bean public GroovyMarkupConfigurer groovyMarkupConfigurer() {     GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer().     configurer.setResourceLoaderPath("/WEB-INF/").     return configurer. }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.freeMarker(). }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.tiles(). }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.groovy(). }
false;public;0;4;;@Bean public FreeMarkerViewResolver freeMarkerViewResolver() {     return new FreeMarkerViewResolver("", ".ftl"). }
false;public;0;6;;@Bean public FreeMarkerConfigurer freeMarkerConfigurer() {     FreeMarkerConfigurer configurer = new FreeMarkerConfigurer().     configurer.setTemplateLoaderPath("/WEB-INF/").     return configurer. }
