commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setup() throws Exception {     resolver = new PathVariableMapMethodArgumentResolver().     mavContainer = new ModelAndViewContainer().     request = new MockHttpServletRequest().     webRequest = new ServletWebRequest(request, new MockHttpServletResponse()).     Method method = getClass().getMethod("handle", Map.class, Map.class, Map.class).     paramMap = new MethodParameter(method, 0).     paramNamedMap = new MethodParameter(method, 1).     paramMapNoAnnot = new MethodParameter(method, 2). }
false;public;0;6;;@Test public void supportsParameter() {     assertTrue(resolver.supportsParameter(paramMap)).     assertFalse(resolver.supportsParameter(paramNamedMap)).     assertFalse(resolver.supportsParameter(paramMapNoAnnot)). }
false;public;0;11;;@Test public void resolveArgument() throws Exception {     Map<String, String> uriTemplateVars = new HashMap<>().     uriTemplateVars.put("name1", "value1").     uriTemplateVars.put("name2", "value2").     request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars).     Object result = resolver.resolveArgument(paramMap, mavContainer, webRequest, null).     assertEquals(uriTemplateVars, result). }
false;public;0;7;;@Test @SuppressWarnings("unchecked") public void resolveArgumentNoUriVars() throws Exception {     Map<String, String> map = (Map<String, String>) resolver.resolveArgument(paramMap, mavContainer, webRequest, null).     assertEquals(Collections.emptyMap(), map). }
false;public;3;5;;public void handle(@PathVariable Map<String, String> map, @PathVariable(value = "name") Map<String, String> namedMap, Map<String, String> mapWithoutAnnotat) { }
