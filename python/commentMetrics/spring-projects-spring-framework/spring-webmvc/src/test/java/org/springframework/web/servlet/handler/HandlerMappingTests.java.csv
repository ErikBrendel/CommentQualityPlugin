commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.context = new StaticWebApplicationContext().     this.handlerMapping = new TestHandlerMapping().     this.request = new MockHttpServletRequest(). }
false;public;0;15;;@Test public void orderedInterceptors() throws Exception {     HandlerInterceptor i1 = Mockito.mock(HandlerInterceptor.class).     MappedInterceptor mappedInterceptor1 = new MappedInterceptor(new String[] { "/**" }, i1).     HandlerInterceptor i2 = Mockito.mock(HandlerInterceptor.class).     HandlerInterceptor i3 = Mockito.mock(HandlerInterceptor.class).     MappedInterceptor mappedInterceptor3 = new MappedInterceptor(new String[] { "/**" }, i3).     HandlerInterceptor i4 = Mockito.mock(HandlerInterceptor.class).     this.handlerMapping.setInterceptors(mappedInterceptor1, i2, mappedInterceptor3, i4).     this.handlerMapping.setApplicationContext(this.context).     HandlerExecutionChain chain = this.handlerMapping.getHandlerExecutionChain(new SimpleHandler(), this.request).     Assert.assertThat(chain.getInterceptors(), Matchers.arrayContaining(mappedInterceptor1.getInterceptor(), i2, mappedInterceptor3.getInterceptor(), i4)). }
false;protected;1;4;;@Override protected Object getHandlerInternal(HttpServletRequest request) throws Exception {     return new SimpleHandler(). }
false;public;2;4;;@Override public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     response.setStatus(HttpStatus.OK.value()). }
