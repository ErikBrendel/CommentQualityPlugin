commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.webAppContext = mock(WebApplicationContext.class).     this.servletContext = new MockServletContext().     this.servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.webAppContext). }
false;public;0;10;;@Test public void renderTemplate() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("title", "Layout example").     model.put("body", "This is the body").     String url = "org/springframework/web/servlet/view/script/jruby/template.erb".     MockHttpServletResponse response = render(url, model).     assertEquals("<html><head><title>Layout example</title></head><body><p>This is the body</p></body></html>", response.getContentAsString()). }
false;private;2;7;;private MockHttpServletResponse render(String viewUrl, Map<String, Object> model) throws Exception {     ScriptTemplateView view = createViewWithUrl(viewUrl).     MockHttpServletResponse response = new MockHttpServletResponse().     MockHttpServletRequest request = new MockHttpServletRequest().     view.renderMergedOutputModel(model, request, response).     return response. }
false;private;1;11;;private ScriptTemplateView createViewWithUrl(String viewUrl) throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ScriptTemplatingConfiguration.class).     ctx.refresh().     ScriptTemplateView view = new ScriptTemplateView().     view.setApplicationContext(ctx).     view.setUrl(viewUrl).     view.afterPropertiesSet().     return view. }
false;public;0;8;;@Bean public ScriptTemplateConfigurer jRubyConfigurer() {     ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer().     configurer.setScripts("org/springframework/web/servlet/view/script/jruby/render.rb").     configurer.setEngineName("jruby").     configurer.setRenderFunction("render").     return configurer. }
