commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testContextLoaderListenerWithDefaultContext() {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "/org/springframework/web/context/WEB-INF/applicationContext.xml " + "/org/springframework/web/context/WEB-INF/context-addition.xml").     ServletContextListener listener = new ContextLoaderListener().     ServletContextEvent event = new ServletContextEvent(sc).     listener.contextInitialized(event).     String contextAttr = WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE.     WebApplicationContext context = (WebApplicationContext) sc.getAttribute(contextAttr).     assertTrue("Correct WebApplicationContext exposed in ServletContext", context instanceof XmlWebApplicationContext).     assertTrue(WebApplicationContextUtils.getRequiredWebApplicationContext(sc) instanceof XmlWebApplicationContext).     LifecycleBean lb = (LifecycleBean) context.getBean("lifecycle").     assertTrue("Has father", context.containsBean("father")).     assertTrue("Has rod", context.containsBean("rod")).     assertTrue("Has kerry", context.containsBean("kerry")).     assertTrue("Not destroyed", !lb.isDestroyed()).     assertFalse(context.containsBean("beans1.bean1")).     assertFalse(context.containsBean("beans1.bean2")).     listener.contextDestroyed(event).     assertTrue("Destroyed", lb.isDestroyed()).     assertNull(sc.getAttribute(contextAttr)).     assertNull(WebApplicationContextUtils.getWebApplicationContext(sc)). }
false;protected;2;7;;@Override protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {     assertNotNull("The ServletContext should not be null.", sc).     assertEquals("Verifying that we received the expected ServletContext.", sc, sc).     assertFalse("The ApplicationContext should not yet have been refreshed.", wac.isActive()).     buffer.append(expectedContents). }
true;public;0;19;/**  * Addresses the issues raised in <a  * href="http://opensource.atlassian.com/projects/spring/browse/SPR-4008"  * target="_blank">SPR-4008</a>: <em>Supply an opportunity to customize  * context before calling refresh in ContextLoaders</em>.  */ ;/**  * Addresses the issues raised in <a  * href="http://opensource.atlassian.com/projects/spring/browse/SPR-4008"  * target="_blank">SPR-4008</a>: <em>Supply an opportunity to customize  * context before calling refresh in ContextLoaders</em>.  */ @Test public void testContextLoaderListenerWithCustomizedContextLoader() {     final StringBuffer buffer = new StringBuffer().     final String expectedContents = "customizeContext() was called".     final MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "/org/springframework/web/context/WEB-INF/applicationContext.xml").     ServletContextListener listener = new ContextLoaderListener() {          @Override         protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {             assertNotNull("The ServletContext should not be null.", sc).             assertEquals("Verifying that we received the expected ServletContext.", sc, sc).             assertFalse("The ApplicationContext should not yet have been refreshed.", wac.isActive()).             buffer.append(expectedContents).         }     }.     listener.contextInitialized(new ServletContextEvent(sc)).     assertEquals("customizeContext() should have been called.", expectedContents, buffer.toString()). }
false;public;0;14;;@Test public void testContextLoaderListenerWithLocalContextInitializers() {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "org/springframework/web/context/WEB-INF/ContextLoaderTests-acc-context.xml").     sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, StringUtils.arrayToCommaDelimitedString(new Object[] { TestContextInitializer.class.getName(), TestWebContextInitializer.class.getName() })).     ContextLoaderListener listener = new ContextLoaderListener().     listener.contextInitialized(new ServletContextEvent(sc)).     WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc).     TestBean testBean = wac.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("testName")).     assertThat(wac.getServletContext().getAttribute("initialized"), notNullValue()). }
false;public;0;14;;@Test public void testContextLoaderListenerWithGlobalContextInitializers() {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "org/springframework/web/context/WEB-INF/ContextLoaderTests-acc-context.xml").     sc.addInitParameter(ContextLoader.GLOBAL_INITIALIZER_CLASSES_PARAM, StringUtils.arrayToCommaDelimitedString(new Object[] { TestContextInitializer.class.getName(), TestWebContextInitializer.class.getName() })).     ContextLoaderListener listener = new ContextLoaderListener().     listener.contextInitialized(new ServletContextEvent(sc)).     WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc).     TestBean testBean = wac.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("testName")).     assertThat(wac.getServletContext().getAttribute("initialized"), notNullValue()). }
false;public;0;14;;@Test public void testContextLoaderListenerWithMixedContextInitializers() {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "org/springframework/web/context/WEB-INF/ContextLoaderTests-acc-context.xml").     sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, TestContextInitializer.class.getName()).     sc.addInitParameter(ContextLoader.GLOBAL_INITIALIZER_CLASSES_PARAM, TestWebContextInitializer.class.getName()).     ContextLoaderListener listener = new ContextLoaderListener().     listener.contextInitialized(new ServletContextEvent(sc)).     WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc).     TestBean testBean = wac.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("testName")).     assertThat(wac.getServletContext().getAttribute("initialized"), notNullValue()). }
false;public;0;13;;@Test public void testContextLoaderListenerWithProgrammaticInitializers() {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "org/springframework/web/context/WEB-INF/ContextLoaderTests-acc-context.xml").     ContextLoaderListener listener = new ContextLoaderListener().     listener.setContextInitializers(new TestContextInitializer(), new TestWebContextInitializer()).     listener.contextInitialized(new ServletContextEvent(sc)).     WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc).     TestBean testBean = wac.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("testName")).     assertThat(wac.getServletContext().getAttribute("initialized"), notNullValue()). }
false;public;0;14;;@Test public void testContextLoaderListenerWithProgrammaticAndLocalInitializers() {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "org/springframework/web/context/WEB-INF/ContextLoaderTests-acc-context.xml").     sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, TestContextInitializer.class.getName()).     ContextLoaderListener listener = new ContextLoaderListener().     listener.setContextInitializers(new TestWebContextInitializer()).     listener.contextInitialized(new ServletContextEvent(sc)).     WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc).     TestBean testBean = wac.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("testName")).     assertThat(wac.getServletContext().getAttribute("initialized"), notNullValue()). }
false;public;0;14;;@Test public void testContextLoaderListenerWithProgrammaticAndGlobalInitializers() {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "org/springframework/web/context/WEB-INF/ContextLoaderTests-acc-context.xml").     sc.addInitParameter(ContextLoader.GLOBAL_INITIALIZER_CLASSES_PARAM, TestWebContextInitializer.class.getName()).     ContextLoaderListener listener = new ContextLoaderListener().     listener.setContextInitializers(new TestContextInitializer()).     listener.contextInitialized(new ServletContextEvent(sc)).     WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc).     TestBean testBean = wac.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("testName")).     assertThat(wac.getServletContext().getAttribute("initialized"), notNullValue()). }
false;public;0;13;;@Test public void testRegisteredContextInitializerCanAccessServletContextParamsViaEnvironment() {     MockServletContext sc = new MockServletContext("").     // config file doesn't matter - just a placeholder     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "/org/springframework/web/context/WEB-INF/empty-context.xml").     sc.addInitParameter("someProperty", "someValue").     sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, EnvApplicationContextInitializer.class.getName()).     ContextLoaderListener listener = new ContextLoaderListener().     listener.contextInitialized(new ServletContextEvent(sc)). }
false;public;0;17;;@Test public void testContextLoaderListenerWithUnknownContextInitializer() {     MockServletContext sc = new MockServletContext("").     // config file doesn't matter.  just a placeholder     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "/org/springframework/web/context/WEB-INF/empty-context.xml").     sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, StringUtils.arrayToCommaDelimitedString(new Object[] { UnknownContextInitializer.class.getName() })).     ContextLoaderListener listener = new ContextLoaderListener().     try {         listener.contextInitialized(new ServletContextEvent(sc)).         fail("expected exception").     } catch (ApplicationContextException ex) {         assertTrue(ex.getMessage().contains("not assignable")).     } }
false;public;0;13;;@Test public void testContextLoaderWithCustomContext() throws Exception {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONTEXT_CLASS_PARAM, "org.springframework.web.servlet.SimpleWebApplicationContext").     ServletContextListener listener = new ContextLoaderListener().     ServletContextEvent event = new ServletContextEvent(sc).     listener.contextInitialized(event).     String contextAttr = WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE.     WebApplicationContext wc = (WebApplicationContext) sc.getAttribute(contextAttr).     assertTrue("Correct WebApplicationContext exposed in ServletContext", wc instanceof SimpleWebApplicationContext). }
false;public;0;15;;@Test public void testContextLoaderWithInvalidLocation() throws Exception {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "/WEB-INF/myContext.xml").     ServletContextListener listener = new ContextLoaderListener().     ServletContextEvent event = new ServletContextEvent(sc).     try {         listener.contextInitialized(event).         fail("Should have thrown BeanDefinitionStoreException").     } catch (BeanDefinitionStoreException ex) {         // expected         assertTrue(ex.getCause() instanceof FileNotFoundException).     } }
false;public;0;16;;@Test public void testContextLoaderWithInvalidContext() throws Exception {     MockServletContext sc = new MockServletContext("").     sc.addInitParameter(ContextLoader.CONTEXT_CLASS_PARAM, "org.springframework.web.context.support.InvalidWebApplicationContext").     ServletContextListener listener = new ContextLoaderListener().     ServletContextEvent event = new ServletContextEvent(sc).     try {         listener.contextInitialized(event).         fail("Should have thrown ApplicationContextException").     } catch (ApplicationContextException ex) {         // expected         assertTrue(ex.getCause() instanceof ClassNotFoundException).     } }
false;public;0;15;;@Test public void testContextLoaderWithDefaultLocation() throws Exception {     MockServletContext sc = new MockServletContext("").     ServletContextListener listener = new ContextLoaderListener().     ServletContextEvent event = new ServletContextEvent(sc).     try {         listener.contextInitialized(event).         fail("Should have thrown BeanDefinitionStoreException").     } catch (BeanDefinitionStoreException ex) {         // expected         assertTrue(ex.getCause() instanceof IOException).         assertTrue(ex.getCause().getMessage().contains("/WEB-INF/applicationContext.xml")).     } }
false;public;0;14;;@Test public void testFrameworkServletWithDefaultLocation() throws Exception {     DispatcherServlet servlet = new DispatcherServlet().     servlet.setContextClass(XmlWebApplicationContext.class).     try {         servlet.init(new MockServletConfig(new MockServletContext(""), "test")).         fail("Should have thrown BeanDefinitionStoreException").     } catch (BeanDefinitionStoreException ex) {         // expected         assertTrue(ex.getCause() instanceof IOException).         assertTrue(ex.getCause().getMessage().contains("/WEB-INF/test-servlet.xml")).     } }
false;public;0;9;;@Test public void testFrameworkServletWithCustomLocation() throws Exception {     DispatcherServlet servlet = new DispatcherServlet().     servlet.setContextConfigLocation("/org/springframework/web/context/WEB-INF/testNamespace.xml " + "/org/springframework/web/context/WEB-INF/context-addition.xml").     servlet.init(new MockServletConfig(new MockServletContext(""), "test")).     assertTrue(servlet.getWebApplicationContext().containsBean("kerry")).     assertTrue(servlet.getWebApplicationContext().containsBean("kerryX")). }
false;public;0;18;;@Test @SuppressWarnings("resource") public void testClassPathXmlApplicationContext() throws IOException {     ApplicationContext context = new ClassPathXmlApplicationContext("/org/springframework/web/context/WEB-INF/applicationContext.xml").     assertTrue("Has father", context.containsBean("father")).     assertTrue("Has rod", context.containsBean("rod")).     assertFalse("Hasn't kerry", context.containsBean("kerry")).     assertTrue("Doesn't have spouse", ((TestBean) context.getBean("rod")).getSpouse() == null).     assertTrue("myinit not evaluated", "Roderick".equals(((TestBean) context.getBean("rod")).getName())).     context = new ClassPathXmlApplicationContext(new String[] { "/org/springframework/web/context/WEB-INF/applicationContext.xml", "/org/springframework/web/context/WEB-INF/context-addition.xml" }).     assertTrue("Has father", context.containsBean("father")).     assertTrue("Has rod", context.containsBean("rod")).     assertTrue("Has kerry", context.containsBean("kerry")). }
false;public;0;11;;@Override public void refresh() throws BeansException {     try {         super.refresh().     } catch (BeanCreationException ex) {         DefaultListableBeanFactory factory = (DefaultListableBeanFactory) getBeanFactory().         assertEquals(0, factory.getSingletonCount()).         throw ex.     } }
false;public;0;20;;@Test(expected = BeanCreationException.class) @SuppressWarnings("resource") public void testSingletonDestructionOnStartupFailure() throws IOException {     new ClassPathXmlApplicationContext(new String[] { "/org/springframework/web/context/WEB-INF/applicationContext.xml", "/org/springframework/web/context/WEB-INF/fail.xml" }) {          @Override         public void refresh() throws BeansException {             try {                 super.refresh().             } catch (BeanCreationException ex) {                 DefaultListableBeanFactory factory = (DefaultListableBeanFactory) getBeanFactory().                 assertEquals(0, factory.getSingletonCount()).                 throw ex.             }         }     }. }
false;public;1;4;;@Override public Object getProperty(String key) {     return "name".equals(key) ? "testName" : null. }
false;public;1;10;;@Override public void initialize(ConfigurableApplicationContext applicationContext) {     ConfigurableEnvironment environment = applicationContext.getEnvironment().     environment.getPropertySources().addFirst(new PropertySource<Object>("testPropertySource") {          @Override         public Object getProperty(String key) {             return "name".equals(key) ? "testName" : null.         }     }). }
false;public;1;5;;@Override public void initialize(ConfigurableWebApplicationContext applicationContext) {     // type-safe access to servlet-specific methods     ServletContext ctx = applicationContext.getServletContext().     ctx.setAttribute("initialized", true). }
false;public;1;7;;@Override public void initialize(ConfigurableWebApplicationContext applicationContext) {     // test that ApplicationContextInitializers can access ServletContext properties     // via the environment (SPR-8991)     String value = applicationContext.getEnvironment().getRequiredProperty("someProperty").     assertThat(value, is("someValue")). }
false;;0;1;;void unheardOf().
false;public;1;4;;@Override public void initialize(UnknownApplicationContext applicationContext) {     applicationContext.unheardOf(). }
