commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void setup() throws Exception {     container = new ModelAndViewContainer().     servletRequest = new MockHttpServletRequest().     servletRequest.setMethod("POST").     servletResponse = new MockHttpServletResponse().     request = new ServletWebRequest(servletRequest, servletResponse).     this.factory = new ValidatingBinderFactory().     Method method = getClass().getDeclaredMethod("handle", List.class, SimpleBean.class, MultiValueMap.class, String.class).     paramGenericList = new MethodParameter(method, 0).     paramSimpleBean = new MethodParameter(method, 1).     paramMultiValueMap = new MethodParameter(method, 2).     paramString = new MethodParameter(method, 3).     returnTypeString = new MethodParameter(method, -1). }
false;public;0;18;;@Test public void resolveArgumentParameterizedType() throws Exception {     String content = "[{\"name\" : \"Jad\"}, {\"name\" : \"Robert\"}]".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     @SuppressWarnings("unchecked")     List<SimpleBean> result = (List<SimpleBean>) processor.resolveArgument(paramGenericList, container, request, factory).     assertNotNull(result).     assertEquals("Jad", result.get(0).getName()).     assertEquals("Robert", result.get(1).getName()). }
false;public;0;19;;@Test public void resolveArgumentRawTypeFromParameterizedType() throws Exception {     String content = "fruit=apple&vegetable=kale".     this.servletRequest.setMethod("GET").     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new AllEncompassingFormHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     @SuppressWarnings("unchecked")     MultiValueMap<String, String> result = (MultiValueMap<String, String>) processor.resolveArgument(paramMultiValueMap, container, request, factory).     assertNotNull(result).     assertEquals("apple", result.getFirst("fruit")).     assertEquals("kale", result.getFirst("vegetable")). }
false;public;0;16;;@Test public void resolveArgumentClassJson() throws Exception {     String content = "{\"name\" : \"Jad\"}".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType("application/json").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     SimpleBean result = (SimpleBean) processor.resolveArgument(paramSimpleBean, container, request, factory).     assertNotNull(result).     assertEquals("Jad", result.getName()). }
false;public;0;16;;@Test public void resolveArgumentClassString() throws Exception {     String content = "foobarbaz".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType("application/json").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new StringHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     String result = (String) processor.resolveArgument(paramString, container, request, factory).     assertNotNull(result).     assertEquals("foobarbaz", result). }
false;public;0;9;;// SPR-9942 @Test(expected = HttpMessageNotReadableException.class) public void resolveArgumentRequiredNoContent() throws Exception {     this.servletRequest.setContent(new byte[0]).     this.servletRequest.setContentType("text/plain").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new StringHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     processor.resolveArgument(paramString, container, request, factory). }
false;public;0;11;;// SPR-12778 @Test public void resolveArgumentRequiredNoContentDefaultValue() throws Exception {     this.servletRequest.setContent(new byte[0]).     this.servletRequest.setContentType("text/plain").     List<HttpMessageConverter<?>> converters = Collections.singletonList(new StringHttpMessageConverter()).     List<Object> advice = Collections.singletonList(new EmptyRequestBodyAdvice()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters, advice).     String arg = (String) processor.resolveArgument(paramString, container, request, factory).     assertNotNull(arg).     assertEquals("default value for empty body", arg). }
false;public;0;19;;// SPR-9964 @Test public void resolveArgumentTypeVariable() throws Exception {     Method method = MyParameterizedController.class.getMethod("handleDto", Identifiable.class).     HandlerMethod handlerMethod = new HandlerMethod(new MySimpleParameterizedController(), method).     MethodParameter methodParam = handlerMethod.getMethodParameters()[0].     String content = "{\"name\" : \"Jad\"}".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     SimpleBean result = (SimpleBean) processor.resolveArgument(methodParam, container, request, factory).     assertNotNull(result).     assertEquals("Jad", result.getName()). }
false;public;0;22;;// SPR-14470 @Test public void resolveParameterizedWithTypeVariableArgument() throws Exception {     Method method = MyParameterizedControllerWithList.class.getMethod("handleDto", List.class).     HandlerMethod handlerMethod = new HandlerMethod(new MySimpleParameterizedControllerWithList(), method).     MethodParameter methodParam = handlerMethod.getMethodParameters()[0].     String content = "[{\"name\" : \"Jad\"}, {\"name\" : \"Robert\"}]".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     @SuppressWarnings("unchecked")     List<SimpleBean> result = (List<SimpleBean>) processor.resolveArgument(methodParam, container, request, factory).     assertNotNull(result).     assertEquals("Jad", result.get(0).getName()).     assertEquals("Robert", result.get(1).getName()). }
false;public;0;21;;// SPR-11225 @Test public void resolveArgumentTypeVariableWithNonGenericConverter() throws Exception {     Method method = MyParameterizedController.class.getMethod("handleDto", Identifiable.class).     HandlerMethod handlerMethod = new HandlerMethod(new MySimpleParameterizedController(), method).     MethodParameter methodParam = handlerMethod.getMethodParameters()[0].     String content = "{\"name\" : \"Jad\"}".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     HttpMessageConverter<Object> target = new MappingJackson2HttpMessageConverter().     HttpMessageConverter<?> proxy = ProxyFactory.getProxy(HttpMessageConverter.class, new SingletonTargetSource(target)).     converters.add(proxy).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     SimpleBean result = (SimpleBean) processor.resolveArgument(methodParam, container, request, factory).     assertNotNull(result).     assertEquals("Jad", result.getName()). }
false;public;0;13;;// SPR-9160 @Test public void handleReturnValueSortByQuality() throws Exception {     this.servletRequest.addHeader("Accept", "text/plain. q=0.5, application/json").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     converters.add(new StringHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     processor.writeWithMessageConverters("Foo", returnTypeString, request).     assertEquals("application/json.charset=UTF-8", servletResponse.getHeader("Content-Type")). }
false;public;0;12;;@Test public void handleReturnValueString() throws Exception {     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new ByteArrayHttpMessageConverter()).     converters.add(new StringHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     processor.handleReturnValue("Foo", returnTypeString, container, request).     assertEquals("text/plain.charset=ISO-8859-1", servletResponse.getHeader("Content-Type")).     assertEquals("Foo", servletResponse.getContentAsString()). }
false;public;0;15;;// SPR-13423 @Test public void handleReturnValueCharSequence() throws Exception {     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new ByteArrayHttpMessageConverter()).     converters.add(new StringHttpMessageConverter()).     Method method = ResponseBodyController.class.getMethod("handleWithCharSequence").     MethodParameter returnType = new MethodParameter(method, -1).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     processor.handleReturnValue(new StringBuilder("Foo"), returnType, container, request).     assertEquals("text/plain.charset=ISO-8859-1", servletResponse.getHeader("Content-Type")).     assertEquals("Foo", servletResponse.getContentAsString()). }
false;public;0;13;;@Test public void handleReturnValueStringAcceptCharset() throws Exception {     this.servletRequest.addHeader("Accept", "text/plain.charset=UTF-8").     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new ByteArrayHttpMessageConverter()).     converters.add(new StringHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     processor.writeWithMessageConverters("Foo", returnTypeString, request).     assertEquals("text/plain.charset=UTF-8", servletResponse.getHeader("Content-Type")). }
false;public;0;16;;// SPR-12894 @Test public void handleReturnValueImage() throws Exception {     this.servletRequest.addHeader("Accept", "*/*").     Method method = getClass().getDeclaredMethod("getImage").     MethodParameter returnType = new MethodParameter(method, -1).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new ResourceHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     ClassPathResource resource = new ClassPathResource("logo.jpg", getClass()).     processor.writeWithMessageConverters(resource, returnType, this.request).     assertEquals("image/jpeg", this.servletResponse.getHeader("Content-Type")). }
false;public;0;7;;// SPR-13135 @Test(expected = IllegalArgumentException.class) public void handleReturnValueWithInvalidReturnType() throws Exception {     Method method = getClass().getDeclaredMethod("handleAndReturnOutputStream").     MethodParameter returnType = new MethodParameter(method, -1).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(new ArrayList<>()).     processor.writeWithMessageConverters(new ByteArrayOutputStream(), returnType, this.request). }
false;public;0;29;;@Test public void addContentDispositionHeader() throws Exception {     ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean().     factory.addMediaType("pdf", new MediaType("application", "pdf")).     factory.afterPropertiesSet().     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(Collections.singletonList(new StringHttpMessageConverter()), factory.getObject()).     assertContentDisposition(processor, false, "/hello.json", "whitelisted extension").     assertContentDisposition(processor, false, "/hello.pdf", "registered extension").     assertContentDisposition(processor, true, "/hello.dataless", "unknown extension").     // path parameters     assertContentDisposition(processor, false, "/hello.json.a=b", "path param shouldn't cause issue").     assertContentDisposition(processor, true, "/hello.json.a=b.setup.dataless", "unknown ext in path params").     assertContentDisposition(processor, true, "/hello.dataless.a=b.setup.json", "unknown ext in filename").     assertContentDisposition(processor, false, "/hello.json.a=b.setup.json", "whitelisted extensions").     // encoded dot     assertContentDisposition(processor, true, "/hello%2Edataless.a=b.setup.json", "encoded dot in filename").     assertContentDisposition(processor, true, "/hello.json.a=b.setup%2Edataless", "encoded dot in path params").     assertContentDisposition(processor, true, "/hello.dataless%3Bsetup.bat", "encoded dot in path params").     this.servletRequest.setAttribute(WebUtils.FORWARD_REQUEST_URI_ATTRIBUTE, "/hello.bat").     assertContentDisposition(processor, true, "/bonjour", "forwarded URL").     this.servletRequest.removeAttribute(WebUtils.FORWARD_REQUEST_URI_ATTRIBUTE). }
false;public;0;12;;@Test public void supportsReturnTypeResponseBodyOnType() throws Exception {     Method method = ResponseBodyController.class.getMethod("handle").     MethodParameter returnType = new MethodParameter(method, -1).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new StringHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     assertTrue("Failed to recognize type-level @ResponseBody", processor.supportsReturnType(returnType)). }
false;public;0;12;;@Test public void supportsReturnTypeRestController() throws Exception {     Method method = TestRestController.class.getMethod("handle").     MethodParameter returnType = new MethodParameter(method, -1).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new StringHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     assertTrue("Failed to recognize type-level @RestController", processor.supportsReturnType(returnType)). }
false;public;0;20;;@Test public void jacksonJsonViewWithResponseBodyAndJsonMessageConverter() throws Exception {     Method method = JacksonController.class.getMethod("handleResponseBody").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice())).     Object returnValue = new JacksonController().handleResponseBody().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     String content = this.servletResponse.getContentAsString().     assertFalse(content.contains("\"withView1\":\"with\"")).     assertTrue(content.contains("\"withView2\":\"with\"")).     assertFalse(content.contains("\"withoutView\":\"without\"")). }
false;public;0;20;;@Test public void jacksonJsonViewWithResponseEntityAndJsonMessageConverter() throws Exception {     Method method = JacksonController.class.getMethod("handleResponseEntity").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice())).     Object returnValue = new JacksonController().handleResponseEntity().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     String content = this.servletResponse.getContentAsString().     assertFalse(content.contains("\"withView1\":\"with\"")).     assertTrue(content.contains("\"withView2\":\"with\"")).     assertFalse(content.contains("\"withoutView\":\"without\"")). }
false;public;0;20;;// SPR-12149 @Test public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception {     Method method = JacksonController.class.getMethod("handleResponseBody").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2XmlHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice())).     Object returnValue = new JacksonController().handleResponseBody().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     String content = this.servletResponse.getContentAsString().     assertFalse(content.contains("<withView1>with</withView1>")).     assertTrue(content.contains("<withView2>with</withView2>")).     assertFalse(content.contains("<withoutView>without</withoutView>")). }
false;public;0;20;;// SPR-12149 @Test public void jacksonJsonViewWithResponseEntityAndXmlMessageConverter() throws Exception {     Method method = JacksonController.class.getMethod("handleResponseEntity").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2XmlHttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice())).     Object returnValue = new JacksonController().handleResponseEntity().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     String content = this.servletResponse.getContentAsString().     assertFalse(content.contains("<withView1>with</withView1>")).     assertTrue(content.contains("<withView2>with</withView2>")).     assertFalse(content.contains("<withoutView>without</withoutView>")). }
false;public;0;25;;// SPR-12501 @Test public void resolveArgumentWithJacksonJsonView() throws Exception {     String content = "{\"withView1\" : \"with\", \"withView2\" : \"with\", \"withoutView\" : \"without\"}".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE).     Method method = JacksonController.class.getMethod("handleRequestBody", JacksonViewBean.class).     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodParameter = handlerMethod.getMethodParameters()[0].     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice())).     @SuppressWarnings("unchecked")     JacksonViewBean result = (JacksonViewBean) processor.resolveArgument(methodParameter, this.container, this.request, this.factory).     assertNotNull(result).     assertEquals("with", result.getWithView1()).     assertNull(result.getWithView2()).     assertNull(result.getWithoutView()). }
false;public;0;26;;// SPR-12501 @Test public void resolveHttpEntityArgumentWithJacksonJsonView() throws Exception {     String content = "{\"withView1\" : \"with\", \"withView2\" : \"with\", \"withoutView\" : \"without\"}".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE).     Method method = JacksonController.class.getMethod("handleHttpEntity", HttpEntity.class).     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodParameter = handlerMethod.getMethodParameters()[0].     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice())).     @SuppressWarnings("unchecked")     HttpEntity<JacksonViewBean> result = (HttpEntity<JacksonViewBean>) processor.resolveArgument(methodParameter, this.container, this.request, this.factory).     assertNotNull(result).     assertNotNull(result.getBody()).     assertEquals("with", result.getBody().getWithView1()).     assertNull(result.getBody().getWithView2()).     assertNull(result.getBody().getWithoutView()). }
false;public;0;28;;// SPR-12501 @Test public void resolveArgumentWithJacksonJsonViewAndXmlMessageConverter() throws Exception {     String content = "<root>" + "<withView1>with</withView1>" + "<withView2>with</withView2>" + "<withoutView>without</withoutView></root>".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_XML_VALUE).     Method method = JacksonController.class.getMethod("handleRequestBody", JacksonViewBean.class).     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodParameter = handlerMethod.getMethodParameters()[0].     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2XmlHttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice())).     @SuppressWarnings("unchecked")     JacksonViewBean result = (JacksonViewBean) processor.resolveArgument(methodParameter, this.container, this.request, this.factory).     assertNotNull(result).     assertEquals("with", result.getWithView1()).     assertNull(result.getWithView2()).     assertNull(result.getWithoutView()). }
false;public;0;29;;// SPR-12501 @Test public void resolveHttpEntityArgumentWithJacksonJsonViewAndXmlMessageConverter() throws Exception {     String content = "<root>" + "<withView1>with</withView1>" + "<withView2>with</withView2>" + "<withoutView>without</withoutView></root>".     this.servletRequest.setContent(content.getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_XML_VALUE).     Method method = JacksonController.class.getMethod("handleHttpEntity", HttpEntity.class).     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodParameter = handlerMethod.getMethodParameters()[0].     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2XmlHttpMessageConverter()).     HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters, null, Collections.singletonList(new JsonViewRequestBodyAdvice())).     @SuppressWarnings("unchecked")     HttpEntity<JacksonViewBean> result = (HttpEntity<JacksonViewBean>) processor.resolveArgument(methodParameter, this.container, this.request, this.factory).     assertNotNull(result).     assertNotNull(result.getBody()).     assertEquals("with", result.getBody().getWithView1()).     assertNull(result.getBody().getWithView2()).     assertNull(result.getBody().getWithoutView()). }
false;public;0;17;;// SPR-12811 @Test public void jacksonTypeInfoList() throws Exception {     Method method = JacksonController.class.getMethod("handleTypeInfoList").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     Object returnValue = new JacksonController().handleTypeInfoList().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     String content = this.servletResponse.getContentAsString().     assertTrue(content.contains("\"type\":\"foo\"")).     assertTrue(content.contains("\"type\":\"bar\"")). }
false;public;0;17;;// SPR-13318 @Test public void jacksonSubType() throws Exception {     Method method = JacksonController.class.getMethod("handleSubType").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     Object returnValue = new JacksonController().handleSubType().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     String content = this.servletResponse.getContentAsString().     assertTrue(content.contains("\"id\":123")).     assertTrue(content.contains("\"name\":\"foo\"")). }
false;public;0;19;;// SPR-13318 @Test public void jacksonSubTypeList() throws Exception {     Method method = JacksonController.class.getMethod("handleSubTypeList").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     Object returnValue = new JacksonController().handleSubTypeList().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     String content = this.servletResponse.getContentAsString().     assertTrue(content.contains("\"id\":123")).     assertTrue(content.contains("\"name\":\"foo\"")).     assertTrue(content.contains("\"id\":456")).     assertTrue(content.contains("\"name\":\"bar\"")). }
false;public;0;15;;// SPR-13631 @Test public void defaultCharset() throws Exception {     Method method = JacksonController.class.getMethod("defaultCharset").     HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method).     MethodParameter methodReturnType = handlerMethod.getReturnType().     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     Object returnValue = new JacksonController().defaultCharset().     processor.handleReturnValue(returnValue, methodReturnType, this.container, this.request).     assertEquals("UTF-8", this.servletResponse.getCharacterEncoding()). }
false;public;0;18;;// SPR-14520 @Test public void resolveArgumentTypeVariableWithGenericInterface() throws Exception {     this.servletRequest.setContent("\"foo\"".getBytes("UTF-8")).     this.servletRequest.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE).     Method method = MyControllerImplementingInterface.class.getMethod("handle", Object.class).     HandlerMethod handlerMethod = new HandlerMethod(new MyControllerImplementingInterface(), method).     MethodParameter methodParameter = handlerMethod.getMethodParameters()[0].     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new MappingJackson2HttpMessageConverter()).     RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters).     String value = (String) processor.readWithMessageConverters(this.request, methodParameter, methodParameter.getGenericParameterType()).     assertEquals("foo", value). }
false;private;4;19;;private void assertContentDisposition(RequestResponseBodyMethodProcessor processor, boolean expectContentDisposition, String requestURI, String comment) throws Exception {     this.servletRequest.setRequestURI(requestURI).     processor.handleReturnValue("body", this.returnTypeString, this.container, this.request).     String header = servletResponse.getHeader("Content-Disposition").     if (expectContentDisposition) {         assertEquals("Expected 'Content-Disposition' header. Use case: '" + comment + "'", "inline.filename=f.txt", header).     } else {         assertNull("Did not expect 'Content-Disposition' header. Use case: '" + comment + "'", header).     }     this.servletRequest = new MockHttpServletRequest().     this.servletResponse = new MockHttpServletResponse().     this.request = new ServletWebRequest(servletRequest, servletResponse). }
false;;4;8;;String handle(@RequestBody List<SimpleBean> list, @RequestBody SimpleBean simpleBean, @RequestBody MultiValueMap<String, String> multiValueMap, @RequestBody String string) {     return null. }
false;;0;3;;Resource getImage() {     return null. }
false;;0;4;;@RequestMapping OutputStream handleAndReturnOutputStream() {     return null. }
false;public;1;2;;@SuppressWarnings("unused") public void handleDto(@RequestBody DTO dto) { }
false;;0;1;;Long getId().
false;;1;1;;void setId(Long id).
false;public;1;2;;public void handleDto(@RequestBody List<DTO> dto) { }
false;public;0;4;;@Override public Long getId() {     return id. }
false;public;1;4;;@Override public void setId(Long id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;3;8;;@Override public WebDataBinder createBinder(NativeWebRequest request, @Nullable Object target, String objectName) {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     WebDataBinder dataBinder = new WebDataBinder(target, objectName).     dataBinder.setValidator(validator).     return dataBinder. }
false;public;0;4;;@RequestMapping public String handle() {     return "hello". }
false;public;0;4;;@RequestMapping public CharSequence handleWithCharSequence() {     return null. }
false;public;0;4;;@RequestMapping public String handle() {     return "hello". }
false;public;0;3;;public String getWithView1() {     return withView1. }
false;public;1;3;;public void setWithView1(String withView1) {     this.withView1 = withView1. }
false;public;0;3;;public String getWithView2() {     return withView2. }
false;public;1;3;;public void setWithView2(String withView2) {     this.withView2 = withView2. }
false;public;0;3;;public String getWithoutView() {     return withoutView. }
false;public;1;3;;public void setWithoutView(String withoutView) {     this.withoutView = withoutView. }
false;public;0;3;;public String getParentProperty() {     return parentProperty. }
false;public;1;3;;public void setParentProperty(String parentProperty) {     this.parentProperty = parentProperty. }
false;public;0;9;;@RequestMapping @ResponseBody @SuppressWarnings("unchecked") public List<T> handleTypeInfoList() {     List<T> list = new ArrayList<>().     list.add((T) new Foo("foo")).     list.add((T) new Bar("bar")).     return list. }
false;public;0;10;;@RequestMapping @ResponseBody @JsonView(MyJacksonView2.class) public JacksonViewBean handleResponseBody() {     JacksonViewBean bean = new JacksonViewBean().     bean.setWithView1("with").     bean.setWithView2("with").     bean.setWithoutView("without").     return bean. }
false;public;0;11;;@RequestMapping @JsonView(MyJacksonView2.class) public ResponseEntity<JacksonViewBean> handleResponseEntity() {     JacksonViewBean bean = new JacksonViewBean().     bean.setWithView1("with").     bean.setWithView2("with").     bean.setWithoutView("without").     ModelAndView mav = new ModelAndView(new MappingJackson2JsonView()).     mav.addObject("bean", bean).     return new ResponseEntity<>(bean, HttpStatus.OK). }
false;public;1;5;;@RequestMapping @ResponseBody public JacksonViewBean handleRequestBody(@JsonView(MyJacksonView1.class) @RequestBody JacksonViewBean bean) {     return bean. }
false;public;1;5;;@RequestMapping @ResponseBody public JacksonViewBean handleHttpEntity(@JsonView(MyJacksonView1.class) HttpEntity<JacksonViewBean> entity) {     return entity.getBody(). }
false;public;0;8;;@RequestMapping @ResponseBody public Identifiable handleSubType() {     SimpleBean foo = new SimpleBean().     foo.setId(123L).     foo.setName("foo").     return foo. }
false;public;0;11;;@RequestMapping @ResponseBody public List<Identifiable> handleSubTypeList() {     SimpleBean foo = new SimpleBean().     foo.setId(123L).     foo.setName("foo").     SimpleBean bar = new SimpleBean().     bar.setId(456L).     bar.setName("bar").     return Arrays.asList(foo, bar). }
false;public;0;5;;@RequestMapping(produces = MediaType.APPLICATION_JSON_VALUE) @ResponseBody public String defaultCharset() {     return "foo". }
false;public;3;6;;@Override public boolean supports(MethodParameter methodParameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {     return StringHttpMessageConverter.class.equals(converterType). }
false;public;4;6;;@Override public HttpInputMessage beforeBodyRead(HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {     return inputMessage. }
false;public;5;6;;@Override public Object afterBodyRead(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {     return body. }
false;public;5;6;;@Override public Object handleEmptyBody(@Nullable Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {     return "default value for empty body". }
false;default;1;3;;default A handle(@RequestBody A arg) {     return arg. }
