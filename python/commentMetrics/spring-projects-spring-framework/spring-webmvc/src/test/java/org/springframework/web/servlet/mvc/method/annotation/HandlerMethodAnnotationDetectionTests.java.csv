commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;28;;@Parameters(name = "controller [{0}], auto-proxy [{1}]") public static Object[][] handlerTypes() {     return new Object[][] { // CGLIB proxy     { SimpleController.class, true }, { SimpleController.class, false }, // CGLIB proxy     { AbstractClassController.class, true }, { AbstractClassController.class, false }, // CGLIB proxy     { ParameterizedAbstractClassController.class, true }, { ParameterizedAbstractClassController.class, false }, // CGLIB proxy     { ParameterizedSubclassOverridesDefaultMappings.class, true }, { ParameterizedSubclassOverridesDefaultMappings.class, false }, // JDK dynamic proxy     { InterfaceController.class, true }, { InterfaceController.class, false }, // no AOP     { ParameterizedInterfaceController.class, false }, // CGLIB proxy     { SupportClassController.class, true }, { SupportClassController.class, false } }. }
false;public;0;25;;@Test public void testRequestMappingMethod() throws Exception {     String datePattern = "MM:dd:yyyy".     SimpleDateFormat dateFormat = new SimpleDateFormat(datePattern).     String dateA = "11:01:2011".     String dateB = "11:02:2011".     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/path1/path2").     request.setParameter("datePattern", datePattern).     request.addHeader("header1", dateA).     request.addHeader("header2", dateB).     HandlerExecutionChain chain = handlerMapping.getHandler(request).     assertNotNull(chain).     ModelAndView mav = handlerAdapter.handle(request, new MockHttpServletResponse(), chain.getHandler()).     assertEquals("model attr1:", dateFormat.parse(dateA), mav.getModel().get("attr1")).     assertEquals("model attr2:", dateFormat.parse(dateB), mav.getModel().get("attr2")).     MockHttpServletResponse response = new MockHttpServletResponse().     exceptionResolver.resolveException(request, response, chain.getHandler(), new Exception("failure")).     assertEquals("text/plain.charset=ISO-8859-1", response.getHeader("Content-Type")).     assertEquals("failure", response.getContentAsString()). }
false;public;2;5;;@InitBinder public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String pattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(pattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;4;;@ModelAttribute public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;1;5;;@RequestMapping(value = "/path1/path2", method = RequestMethod.POST) @ModelAttribute("attr2") public Date handle(@RequestHeader("header2") Date date) throws Exception {     return date. }
false;public;1;5;;@ExceptionHandler(Exception.class) @ResponseBody public String handleException(Exception exception) {     return exception.getMessage(). }
false;public,abstract;2;2;;@InitBinder public abstract void initBinder(WebDataBinder dataBinder, String pattern).
false;public,abstract;2;2;;@ModelAttribute public abstract void initModel(Date date, Model model).
false;public,abstract;2;3;;@RequestMapping(value = "/path1/path2", method = RequestMethod.POST) @ModelAttribute("attr2") public abstract Date handle(Date date, Model model) throws Exception.
false;public,abstract;1;3;;@ExceptionHandler(Exception.class) @ResponseBody public abstract String handleException(Exception exception).
false;public;2;5;;@Override public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String pattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(pattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;4;;@Override public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;2;4;;@Override public Date handle(@RequestHeader("header2") Date date, Model model) throws Exception {     return date. }
false;public;1;4;;@Override public String handleException(Exception exception) {     return exception.getMessage(). }
false;;2;2;;@InitBinder void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String thePattern).
false;;2;2;;@ModelAttribute void initModel(@RequestHeader("header1") Date date, Model model).
false;;2;3;;@RequestMapping(value = "/path1/path2", method = RequestMethod.POST) @ModelAttribute("attr2") Date handle(@RequestHeader("header2") Date date, Model model) throws Exception.
false;;1;3;;@ExceptionHandler(Exception.class) @ResponseBody String handleException(Exception exception).
false;public;2;5;;@Override public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String thePattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(thePattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;4;;@Override public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;2;4;;@Override public Date handle(@RequestHeader("header2") Date date, Model model) throws Exception {     return date. }
false;public;1;4;;@Override public String handleException(Exception exception) {     return exception.getMessage(). }
false;public,abstract;2;2;;@InitBinder public abstract void initBinder(WebDataBinder dataBinder, A thePattern).
false;public,abstract;2;2;;@ModelAttribute public abstract void initModel(B date, Model model).
false;public,abstract;2;3;;@RequestMapping(value = "/path1/path2", method = RequestMethod.POST) @ModelAttribute("attr2") public abstract Date handle(C date, Model model) throws Exception.
false;public,abstract;1;3;;@ExceptionHandler(Exception.class) @ResponseBody public abstract String handleException(Exception exception).
false;public;2;5;;@Override public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String thePattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(thePattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;4;;@Override public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;2;4;;@Override public Date handle(@RequestHeader("header2") Date date, Model model) throws Exception {     return date. }
false;public;1;4;;@Override public String handleException(Exception exception) {     return exception.getMessage(). }
false;public,abstract;2;2;;@InitBinder public abstract void initBinder(WebDataBinder dataBinder, A thePattern).
false;public,abstract;2;2;;@ModelAttribute public abstract void initModel(B date, Model model).
false;public;2;5;;@RequestMapping(value = "/path1/path2", method = RequestMethod.POST) @ModelAttribute("attr2") public Date handle(C date, Model model) throws Exception {     return (Date) date. }
false;public,abstract;1;3;;@ExceptionHandler(Exception.class) @ResponseBody public abstract String handleException(Exception exception).
false;public;2;5;;@Override public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String thePattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(thePattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;4;;@Override public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;1;4;;// does not override handle() @Override public String handleException(Exception exception) {     return exception.getMessage(). }
false;public,abstract;2;2;;@InitBinder public abstract void initBinder(WebDataBinder dataBinder, A thePattern).
false;public,abstract;2;2;;@ModelAttribute public abstract void initModel(B date, Model model).
true;public,abstract;2;4;// /foo/bar should be overridden in concrete subclass ;// /foo/bar should be overridden in concrete subclass @RequestMapping(value = "/foo/bar", method = RequestMethod.POST) // attrFoo should be overridden in concrete subclass @ModelAttribute("attrFoo") public abstract Date handle(C date, Model model) throws Exception.
false;public,abstract;1;3;;@ExceptionHandler(Exception.class) @ResponseBody public abstract String handleException(Exception exception).
false;public;2;5;;@Override public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String thePattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(thePattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;4;;@Override public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;2;9;;@Override @RequestMapping(value = "/path1/path2", method = RequestMethod.POST) // @ModelAttribute locally as well. @ModelAttribute("attr2") public Date handle(@RequestHeader("header2") Date date, Model model) throws Exception {     return date. }
false;public;1;4;;@Override public String handleException(Exception exception) {     return exception.getMessage(). }
false;;2;2;;@InitBinder void initBinder(WebDataBinder dataBinder, A thePattern).
false;;2;2;;@ModelAttribute void initModel(B date, Model model).
false;;2;3;;@RequestMapping(value = "/path1/path2", method = RequestMethod.POST) @ModelAttribute("attr2") Date handle(C date, Model model) throws Exception.
false;;1;3;;@ExceptionHandler(Exception.class) @ResponseBody String handleException(Exception exception).
false;public;2;6;;@Override @InitBinder public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String thePattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(thePattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;5;;@Override @ModelAttribute public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;2;6;;@Override @RequestMapping(value = "/path1/path2", method = RequestMethod.POST) @ModelAttribute("attr2") public Date handle(@RequestHeader("header2") Date date, Model model) throws Exception {     return date. }
false;public;1;6;;@Override @ExceptionHandler(Exception.class) @ResponseBody public String handleException(Exception exception) {     return exception.getMessage(). }
false;public;2;5;;@InitBinder public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String thePattern) {     CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat(thePattern), false).     dataBinder.registerCustomEditor(Date.class, dateEditor). }
false;public;2;4;;@ModelAttribute public void initModel(@RequestHeader("header1") Date date, Model model) {     model.addAttribute("attr1", date). }
false;public;2;5;;@RequestMapping(value = "/path2", method = RequestMethod.POST) @ModelAttribute("attr2") public Date handle(@RequestHeader("header2") Date date, Model model) throws Exception {     return date. }
false;public;1;5;;@ExceptionHandler(Exception.class) @ResponseBody public String handleException(Exception exception) {     return exception.getMessage(). }
false;public;2;5;;@Override public boolean matches(Method method, @Nullable Class<?> targetClass) {     return ((AnnotationUtils.findAnnotation(targetClass, Controller.class) != null) || (AnnotationUtils.findAnnotation(targetClass, RequestMapping.class) != null)). }
false;private,static;0;9;;private static StaticMethodMatcherPointcut getControllerPointcut() {     return new StaticMethodMatcherPointcut() {          @Override         public boolean matches(Method method, @Nullable Class<?> targetClass) {             return ((AnnotationUtils.findAnnotation(targetClass, Controller.class) != null) || (AnnotationUtils.findAnnotation(targetClass, RequestMapping.class) != null)).         }     }. }
