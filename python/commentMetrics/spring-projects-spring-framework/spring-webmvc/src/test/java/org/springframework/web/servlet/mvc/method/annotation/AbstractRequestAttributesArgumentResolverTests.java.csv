commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws Exception {     HttpServletRequest request = new MockHttpServletRequest().     HttpServletResponse response = new MockHttpServletResponse().     this.webRequest = new ServletWebRequest(request, response).     this.resolver = createResolver().     this.handleMethod = AbstractRequestAttributesArgumentResolverTests.class.getDeclaredMethod(getHandleMethodName(), Foo.class, Foo.class, Foo.class, Optional.class). }
false;protected,abstract;0;1;;protected abstract HandlerMethodArgumentResolver createResolver().
false;protected,abstract;0;1;;protected abstract String getHandleMethodName().
false;protected,abstract;0;1;;protected abstract int getScope().
false;public;0;5;;@Test public void supportsParameter() throws Exception {     assertTrue(this.resolver.supportsParameter(new MethodParameter(this.handleMethod, 0))).     assertFalse(this.resolver.supportsParameter(new MethodParameter(this.handleMethod, -1))). }
false;public;0;15;;@Test public void resolve() throws Exception {     MethodParameter param = initMethodParameter(0).     try {         testResolveArgument(param).         fail("Should be required by default").     } catch (ServletRequestBindingException ex) {         assertTrue(ex.getMessage().startsWith("Missing ")).     }     Foo foo = new Foo().     this.webRequest.setAttribute("foo", foo, getScope()).     assertSame(foo, testResolveArgument(param)). }
false;public;0;7;;@Test public void resolveWithName() throws Exception {     MethodParameter param = initMethodParameter(1).     Foo foo = new Foo().     this.webRequest.setAttribute("specialFoo", foo, getScope()).     assertSame(foo, testResolveArgument(param)). }
false;public;0;9;;@Test public void resolveNotRequired() throws Exception {     MethodParameter param = initMethodParameter(2).     assertNull(testResolveArgument(param)).     Foo foo = new Foo().     this.webRequest.setAttribute("foo", foo, getScope()).     assertSame(foo, testResolveArgument(param)). }
false;public;0;22;;@Test public void resolveOptional() throws Exception {     WebDataBinder dataBinder = new WebRequestDataBinder(null).     dataBinder.setConversionService(new DefaultConversionService()).     WebDataBinderFactory factory = mock(WebDataBinderFactory.class).     given(factory.createBinder(this.webRequest, null, "foo")).willReturn(dataBinder).     MethodParameter param = initMethodParameter(3).     Object actual = testResolveArgument(param, factory).     assertNotNull(actual).     assertEquals(Optional.class, actual.getClass()).     assertFalse(((Optional<?>) actual).isPresent()).     Foo foo = new Foo().     this.webRequest.setAttribute("foo", foo, getScope()).     actual = testResolveArgument(param, factory).     assertNotNull(actual).     assertEquals(Optional.class, actual.getClass()).     assertTrue(((Optional<?>) actual).isPresent()).     assertSame(foo, ((Optional<?>) actual).get()). }
false;private;1;3;;private Object testResolveArgument(MethodParameter param) throws Exception {     return testResolveArgument(param, null). }
false;private;2;4;;private Object testResolveArgument(MethodParameter param, WebDataBinderFactory factory) throws Exception {     ModelAndViewContainer mavContainer = new ModelAndViewContainer().     return this.resolver.resolveArgument(param, mavContainer, this.webRequest, factory). }
false;private;1;6;;private MethodParameter initMethodParameter(int parameterIndex) {     MethodParameter param = new SynthesizingMethodParameter(this.handleMethod, parameterIndex).     param.initParameterNameDiscovery(new DefaultParameterNameDiscoverer()).     GenericTypeResolver.resolveParameterType(param, this.resolver.getClass()).     return param. }
false;private;4;7;;@SuppressWarnings("unused") private void handleWithRequestAttribute(@RequestAttribute Foo foo, @RequestAttribute("specialFoo") Foo namedFoo, @RequestAttribute(name = "foo", required = false) Foo notRequiredFoo, @RequestAttribute(name = "foo") Optional<Foo> optionalFoo) { }
false;private;4;7;;@SuppressWarnings("unused") private void handleWithSessionAttribute(@SessionAttribute Foo foo, @SessionAttribute("specialFoo") Foo namedFoo, @SessionAttribute(name = "foo", required = false) Foo notRequiredFoo, @SessionAttribute(name = "foo") Optional<Foo> optionalFoo) { }
