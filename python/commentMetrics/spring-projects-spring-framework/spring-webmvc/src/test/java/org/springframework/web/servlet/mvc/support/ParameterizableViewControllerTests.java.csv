commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void defaultViewName() throws Exception {     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertNull(modelAndView.getViewName()). }
false;public;0;6;;@Test public void viewName() throws Exception {     this.controller.setViewName("view").     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertEquals("view", modelAndView.getViewName()). }
false;public;0;8;;@Test public void viewNameAndStatus() throws Exception {     this.controller.setViewName("view").     this.controller.setStatusCode(HttpStatus.NOT_FOUND).     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertEquals("view", modelAndView.getViewName()).     assertEquals(404, this.response.getStatus()). }
false;public;0;7;;@Test public void viewNameAndStatus204() throws Exception {     this.controller.setStatusCode(HttpStatus.NO_CONTENT).     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertNull(modelAndView).     assertEquals(204, this.response.getStatus()). }
false;public;0;10;;@Test public void redirectStatus() throws Exception {     this.controller.setStatusCode(HttpStatus.PERMANENT_REDIRECT).     this.controller.setViewName("/foo").     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertEquals("redirect:/foo", modelAndView.getViewName()).     assertEquals("3xx status should be left to RedirectView to set", 200, this.response.getStatus()).     assertEquals(HttpStatus.PERMANENT_REDIRECT, this.request.getAttribute(View.RESPONSE_STATUS_ATTRIBUTE)). }
false;public;0;10;;@Test public void redirectStatusWithRedirectPrefix() throws Exception {     this.controller.setStatusCode(HttpStatus.PERMANENT_REDIRECT).     this.controller.setViewName("redirect:/foo").     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertEquals("redirect:/foo", modelAndView.getViewName()).     assertEquals("3xx status should be left to RedirectView to set", 200, this.response.getStatus()).     assertEquals(HttpStatus.PERMANENT_REDIRECT, this.request.getAttribute(View.RESPONSE_STATUS_ATTRIBUTE)). }
false;public;0;7;;@Test public void redirectView() throws Exception {     RedirectView view = new RedirectView("/foo").     this.controller.setView(view).     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertSame(view, modelAndView.getView()). }
false;public;0;8;;@Test public void statusOnly() throws Exception {     this.controller.setStatusCode(HttpStatus.NOT_FOUND).     this.controller.setStatusOnly(true).     ModelAndView modelAndView = this.controller.handleRequest(this.request, this.response).     assertNull(modelAndView).     assertEquals(404, this.response.getStatus()). }
