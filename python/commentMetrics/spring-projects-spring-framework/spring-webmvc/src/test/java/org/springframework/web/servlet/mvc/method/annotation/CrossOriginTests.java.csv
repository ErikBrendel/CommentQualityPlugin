commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before @SuppressWarnings("resource") public void setup() {     StaticWebApplicationContext wac = new StaticWebApplicationContext().     Properties props = new Properties().     props.setProperty("myOrigin", "http://example.com").     wac.getEnvironment().getPropertySources().addFirst(new PropertiesPropertySource("ps", props)).     wac.registerSingleton("ppc", PropertySourcesPlaceholderConfigurer.class).     wac.refresh().     this.handlerMapping.setRemoveSemicolonContent(false).     wac.getAutowireCapableBeanFactory().initializeBean(this.handlerMapping, "hm").     this.request.setMethod("GET").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain.com/"). }
false;public;0;7;;@Test public void noAnnotationWithoutOrigin() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/no").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     assertNull(getCorsConfiguration(chain, false)). }
false;public;0;7;;// SPR-12931 @Test public void noAnnotationWithOrigin() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setRequestURI("/no").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     assertNull(getCorsConfiguration(chain, false)). }
false;public;0;8;;// SPR-12931 @Test public void noAnnotationPostWithOrigin() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setMethod("POST").     this.request.setRequestURI("/no").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     assertNull(getCorsConfiguration(chain, false)). }
false;public;0;14;;@Test public void defaultAnnotation() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setRequestURI("/default").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "GET" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertNull(config.getAllowCredentials()).     assertArrayEquals(new String[] { "*" }, config.getAllowedHeaders().toArray()).     assertTrue(CollectionUtils.isEmpty(config.getExposedHeaders())).     assertEquals(new Long(1800), config.getMaxAge()). }
false;public;0;14;;@Test public void customized() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setRequestURI("/customized").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "DELETE" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "http://site1.com", "http://site2.com" }, config.getAllowedOrigins().toArray()).     assertArrayEquals(new String[] { "header1", "header2" }, config.getAllowedHeaders().toArray()).     assertArrayEquals(new String[] { "header3", "header4" }, config.getExposedHeaders().toArray()).     assertEquals(new Long(123), config.getMaxAge()).     assertFalse(config.getAllowCredentials()). }
false;public;0;10;;@Test public void customOriginDefinedViaValueAttribute() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setRequestURI("/customOrigin").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertEquals(Arrays.asList("http://example.com"), config.getAllowedOrigins()).     assertNull(config.getAllowCredentials()). }
false;public;0;10;;@Test public void customOriginDefinedViaPlaceholder() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setRequestURI("/someOrigin").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertEquals(Arrays.asList("http://example.com"), config.getAllowedOrigins()).     assertNull(config.getAllowCredentials()). }
false;public;0;7;;@Test public void bogusAllowCredentialsValue() throws Exception {     exception.expect(IllegalStateException.class).     exception.expectMessage(containsString("@CrossOrigin's allowCredentials")).     exception.expectMessage(containsString("current value is [bogus]")).     this.handlerMapping.registerHandler(new MethodLevelControllerWithBogusAllowCredentialsValue()). }
false;public;0;28;;@Test public void classLevel() throws Exception {     this.handlerMapping.registerHandler(new ClassLevelController()).     this.request.setRequestURI("/foo").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "GET" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertFalse(config.getAllowCredentials()).     this.request.setRequestURI("/bar").     chain = this.handlerMapping.getHandler(request).     config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "GET" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertFalse(config.getAllowCredentials()).     this.request.setRequestURI("/baz").     chain = this.handlerMapping.getHandler(request).     config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "GET" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertTrue(config.getAllowCredentials()). }
false;public;0;12;;// SPR-13468 @Test public void classLevelComposedAnnotation() throws Exception {     this.handlerMapping.registerHandler(new ClassLevelMappingWithComposedAnnotation()).     this.request.setRequestURI("/foo").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "GET" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "http://foo.com" }, config.getAllowedOrigins().toArray()).     assertTrue(config.getAllowCredentials()). }
false;public;0;12;;// SPR-13468 @Test public void methodLevelComposedAnnotation() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelMappingWithComposedAnnotation()).     this.request.setRequestURI("/foo").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "GET" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "http://foo.com" }, config.getAllowedOrigins().toArray()).     assertTrue(config.getAllowCredentials()). }
false;public;0;16;;@Test public void preFlightRequest() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setMethod("OPTIONS").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     this.request.setRequestURI("/default").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, true).     assertNotNull(config).     assertArrayEquals(new String[] { "GET" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertNull(config.getAllowCredentials()).     assertArrayEquals(new String[] { "*" }, config.getAllowedHeaders().toArray()).     assertTrue(CollectionUtils.isEmpty(config.getExposedHeaders())).     assertEquals(new Long(1800), config.getMaxAge()). }
false;public;0;17;;@Test public void ambiguousHeaderPreFlightRequest() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setMethod("OPTIONS").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS, "header1").     this.request.setRequestURI("/ambiguous-header").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, true).     assertNotNull(config).     assertArrayEquals(new String[] { "*" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedHeaders().toArray()).     assertTrue(config.getAllowCredentials()).     assertTrue(CollectionUtils.isEmpty(config.getExposedHeaders())).     assertNull(config.getMaxAge()). }
false;public;0;16;;@Test public void ambiguousProducesPreFlightRequest() throws Exception {     this.handlerMapping.registerHandler(new MethodLevelController()).     this.request.setMethod("OPTIONS").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     this.request.setRequestURI("/ambiguous-produces").     HandlerExecutionChain chain = this.handlerMapping.getHandler(request).     CorsConfiguration config = getCorsConfiguration(chain, true).     assertNotNull(config).     assertArrayEquals(new String[] { "*" }, config.getAllowedMethods().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertArrayEquals(new String[] { "*" }, config.getAllowedHeaders().toArray()).     assertTrue(config.getAllowCredentials()).     assertTrue(CollectionUtils.isEmpty(config.getExposedHeaders())).     assertNull(config.getMaxAge()). }
false;public;0;6;;@Test public void preFlightRequestWithoutRequestMethodHeader() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest("OPTIONS", "/default").     request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     assertNull(this.handlerMapping.getHandler(request)). }
false;private;2;20;;private CorsConfiguration getCorsConfiguration(HandlerExecutionChain chain, boolean isPreFlightRequest) {     if (isPreFlightRequest) {         Object handler = chain.getHandler().         assertTrue(handler.getClass().getSimpleName().equals("PreFlightHandler")).         DirectFieldAccessor accessor = new DirectFieldAccessor(handler).         return (CorsConfiguration) accessor.getPropertyValue("config").     } else {         HandlerInterceptor[] interceptors = chain.getInterceptors().         if (interceptors != null) {             for (HandlerInterceptor interceptor : interceptors) {                 if (interceptor.getClass().getSimpleName().equals("CorsInterceptor")) {                     DirectFieldAccessor accessor = new DirectFieldAccessor(interceptor).                     return (CorsConfiguration) accessor.getPropertyValue("config").                 }             }         }     }     return null. }
false;public;0;3;;@GetMapping("/no") public void noAnnotation() { }
false;public;0;3;;@PostMapping("/no") public void noAnnotationPost() { }
false;public;0;4;;@CrossOrigin @GetMapping(path = "/default") public void defaultAnnotation() { }
false;public;0;4;;@CrossOrigin @GetMapping(path = "/default", params = "q") public void defaultAnnotationWithParams() { }
false;public;0;4;;@CrossOrigin @GetMapping(path = "/ambiguous-header", headers = "header1=a") public void ambiguousHeader1a() { }
false;public;0;4;;@CrossOrigin @GetMapping(path = "/ambiguous-header", headers = "header1=b") public void ambiguousHeader1b() { }
false;public;0;5;;@CrossOrigin @GetMapping(path = "/ambiguous-produces", produces = "application/xml") public String ambiguousProducesXml() {     return "<a></a>". }
false;public;0;5;;@CrossOrigin @GetMapping(path = "/ambiguous-produces", produces = "application/json") public String ambiguousProducesJson() {     return "{}". }
false;public;0;9;;@CrossOrigin(origins = { "http://site1.com", "http://site2.com" }, allowedHeaders = { "header1", "header2" }, exposedHeaders = { "header3", "header4" }, methods = RequestMethod.DELETE, maxAge = 123, allowCredentials = "false") @RequestMapping(path = "/customized", method = { RequestMethod.GET, RequestMethod.POST }) public void customized() { }
false;public;0;4;;@CrossOrigin("http://example.com") @RequestMapping("/customOrigin") public void customOriginDefinedViaValueAttribute() { }
false;public;0;4;;@CrossOrigin("${myOrigin}") @RequestMapping("/someOrigin") public void customOriginDefinedViaPlaceholder() { }
false;public;0;4;;@CrossOrigin(allowCredentials = "bogus") @RequestMapping("/bogus") public void bogusAllowCredentialsValue() { }
false;public;0;3;;@RequestMapping(path = "/foo", method = RequestMethod.GET) public void foo() { }
false;public;0;4;;@CrossOrigin @RequestMapping(path = "/bar", method = RequestMethod.GET) public void bar() { }
false;public;0;4;;@CrossOrigin(allowCredentials = "true") @RequestMapping(path = "/baz", method = RequestMethod.GET) public void baz() { }
false;public;0;3;;@RequestMapping(path = "/foo", method = RequestMethod.GET) public void foo() { }
false;public;0;4;;@RequestMapping(path = "/foo", method = RequestMethod.GET) @ComposedCrossOrigin(origins = "http://foo.com", allowCredentials = "true") public void foo() { }
false;public;1;3;;public void registerHandler(Object handler) {     super.detectHandlerMethods(handler). }
false;protected;1;4;;@Override protected boolean isHandler(Class<?> beanType) {     return AnnotationUtils.findAnnotation(beanType, Controller.class) != null. }
false;protected;2;16;;@Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {     RequestMapping annotation = AnnotatedElementUtils.findMergedAnnotation(method, RequestMapping.class).     if (annotation != null) {         return new RequestMappingInfo(new PatternsRequestCondition(annotation.value(), getUrlPathHelper(), getPathMatcher(), true, true), new RequestMethodsRequestCondition(annotation.method()), new ParamsRequestCondition(annotation.params()), new HeadersRequestCondition(annotation.headers()), new ConsumesRequestCondition(annotation.consumes(), annotation.headers()), new ProducesRequestCondition(annotation.produces(), annotation.headers()), null).     } else {         return null.     } }
