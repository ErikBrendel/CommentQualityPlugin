commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() {     this.registry = new InterceptorRegistry().     this.webInterceptor1 = new TestWebRequestInterceptor().     this.webInterceptor2 = new TestWebRequestInterceptor(). }
false;public;0;6;;@Test public void addInterceptor() {     this.registry.addInterceptor(this.interceptor1).     List<HandlerInterceptor> interceptors = getInterceptorsForPath(null).     assertEquals(Arrays.asList(this.interceptor1), interceptors). }
false;public;0;7;;@Test public void addTwoInterceptors() {     this.registry.addInterceptor(this.interceptor1).     this.registry.addInterceptor(this.interceptor2).     List<HandlerInterceptor> interceptors = getInterceptorsForPath(null).     assertEquals(Arrays.asList(this.interceptor1, this.interceptor2), interceptors). }
false;public;0;9;;@Test public void addInterceptorsWithUrlPatterns() {     this.registry.addInterceptor(this.interceptor1).addPathPatterns("/path1/**").excludePathPatterns("/path1/secret").     this.registry.addInterceptor(this.interceptor2).addPathPatterns("/path2").     assertEquals(Arrays.asList(this.interceptor1), getInterceptorsForPath("/path1/test")).     assertEquals(Arrays.asList(this.interceptor2), getInterceptorsForPath("/path2")).     assertEquals(Collections.emptyList(), getInterceptorsForPath("/path1/secret")). }
false;public;0;8;;@Test public void addWebRequestInterceptor() throws Exception {     this.registry.addWebRequestInterceptor(this.webInterceptor1).     List<HandlerInterceptor> interceptors = getInterceptorsForPath(null).     assertEquals(1, interceptors.size()).     verifyWebInterceptor(interceptors.get(0), this.webInterceptor1). }
false;public;0;10;;@Test public void addWebRequestInterceptors() throws Exception {     this.registry.addWebRequestInterceptor(this.webInterceptor1).     this.registry.addWebRequestInterceptor(this.webInterceptor2).     List<HandlerInterceptor> interceptors = getInterceptorsForPath(null).     assertEquals(2, interceptors.size()).     verifyWebInterceptor(interceptors.get(0), this.webInterceptor1).     verifyWebInterceptor(interceptors.get(1), this.webInterceptor2). }
false;public;0;8;;@Test public void addInterceptorsWithCustomPathMatcher() {     PathMatcher pathMatcher = Mockito.mock(PathMatcher.class).     this.registry.addInterceptor(interceptor1).addPathPatterns("/path1/**").pathMatcher(pathMatcher).     MappedInterceptor mappedInterceptor = (MappedInterceptor) this.registry.getInterceptors().get(0).     assertSame(pathMatcher, mappedInterceptor.getPathMatcher()). }
false;public;0;13;;@Test public void addWebRequestInterceptorsWithUrlPatterns() throws Exception {     this.registry.addWebRequestInterceptor(this.webInterceptor1).addPathPatterns("/path1").     this.registry.addWebRequestInterceptor(this.webInterceptor2).addPathPatterns("/path2").     List<HandlerInterceptor> interceptors = getInterceptorsForPath("/path1").     assertEquals(1, interceptors.size()).     verifyWebInterceptor(interceptors.get(0), this.webInterceptor1).     interceptors = getInterceptorsForPath("/path2").     assertEquals(1, interceptors.size()).     verifyWebInterceptor(interceptors.get(0), this.webInterceptor2). }
false;public;0;9;;// SPR-11130 @Test public void addInterceptorWithExcludePathPatternOnly() {     this.registry.addInterceptor(this.interceptor1).excludePathPatterns("/path1/secret").     this.registry.addInterceptor(this.interceptor2).addPathPatterns("/path2").     assertEquals(Collections.singletonList(this.interceptor1), getInterceptorsForPath("/path1")).     assertEquals(Arrays.asList(this.interceptor1, this.interceptor2), getInterceptorsForPath("/path2")).     assertEquals(Collections.emptyList(), getInterceptorsForPath("/path1/secret")). }
false;private;1;19;;private List<HandlerInterceptor> getInterceptorsForPath(String lookupPath) {     PathMatcher pathMatcher = new AntPathMatcher().     List<HandlerInterceptor> result = new ArrayList<>().     for (Object interceptor : this.registry.getInterceptors()) {         if (interceptor instanceof MappedInterceptor) {             MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor.             if (mappedInterceptor.matches(lookupPath, pathMatcher)) {                 result.add(mappedInterceptor.getInterceptor()).             }         } else if (interceptor instanceof HandlerInterceptor) {             result.add((HandlerInterceptor) interceptor).         } else {             fail("Unexpected interceptor type: " + interceptor.getClass().getName()).         }     }     return result. }
false;private;2;7;;private void verifyWebInterceptor(HandlerInterceptor interceptor, TestWebRequestInterceptor webInterceptor) throws Exception {     assertTrue(interceptor instanceof WebRequestHandlerInterceptorAdapter).     interceptor.preHandle(this.request, this.response, null).     assertTrue(webInterceptor.preHandleInvoked). }
false;public;1;4;;@Override public void preHandle(WebRequest request) throws Exception {     preHandleInvoked = true. }
false;public;2;3;;@Override public void postHandle(WebRequest request, @Nullable ModelMap model) throws Exception { }
false;public;2;3;;@Override public void afterCompletion(WebRequest request, @Nullable Exception ex) throws Exception { }
false;public;0;11;;@Test public void orderedInterceptors() throws Exception {     this.registry.addInterceptor(this.interceptor1).order(Ordered.LOWEST_PRECEDENCE).     this.registry.addInterceptor(this.interceptor2).order(Ordered.HIGHEST_PRECEDENCE).     List<Object> interceptors = this.registry.getInterceptors().     assertEquals(2, interceptors.size()).     assertSame(this.interceptor2, interceptors.get(0)).     assertSame(this.interceptor1, interceptors.get(1)). }
false;public;0;11;;@Test public void nonOrderedInterceptors() throws Exception {     this.registry.addInterceptor(this.interceptor1).order(0).     this.registry.addInterceptor(this.interceptor2).order(0).     List<Object> interceptors = this.registry.getInterceptors().     assertEquals(2, interceptors.size()).     assertSame(this.interceptor1, interceptors.get(0)).     assertSame(this.interceptor2, interceptors.get(1)). }
