commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Before public void setup() throws Exception {     ConfigurableWebBindingInitializer bindingInitializer = new ConfigurableWebBindingInitializer().     bindingInitializer.setValidator(new StubValidator()).     List<HandlerMethodArgumentResolver> customResolvers = new ArrayList<>().     customResolvers.add(new ServletWebArgumentResolverAdapter(new ColorArgumentResolver())).     GenericWebApplicationContext context = new GenericWebApplicationContext().     context.refresh().     handlerAdapter = new RequestMappingHandlerAdapter().     handlerAdapter.setWebBindingInitializer(bindingInitializer).     handlerAdapter.setCustomArgumentResolvers(customResolvers).     handlerAdapter.setApplicationContext(context).     handlerAdapter.setBeanFactory(context.getBeanFactory()).     handlerAdapter.afterPropertiesSet().     request = new MockHttpServletRequest().     response = new MockHttpServletResponse().     request.setMethod("POST").     // Expose request to the current thread (for SpEL expressions)     RequestContextHolder.setRequestAttributes(new ServletWebRequest(request)). }
false;public;0;4;;@After public void teardown() {     RequestContextHolder.resetRequestAttributes(). }
false;public;0;80;;@Test public void handle() throws Exception {     Class<?>[] parameterTypes = new Class<?>[] { int.class, String.class, String.class, String.class, Map.class, Date.class, Map.class, String.class, String.class, TestBean.class, Errors.class, TestBean.class, Color.class, HttpServletRequest.class, HttpServletResponse.class, TestBean.class, TestBean.class, User.class, OtherUser.class, Model.class, UriComponentsBuilder.class }.     String datePattern = "yyyy.MM.dd".     String formattedDate = "2011.03.16".     Date date = new GregorianCalendar(2011, Calendar.MARCH, 16).getTime().     TestBean sessionAttribute = new TestBean().     TestBean requestAttribute = new TestBean().     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("header", "headerValue").     request.addHeader("anotherHeader", "anotherHeaderValue").     request.addParameter("datePattern", datePattern).     request.addParameter("dateParam", formattedDate).     request.addParameter("paramByConvention", "paramByConventionValue").     request.addParameter("age", "25").     request.setCookies(new Cookie("cookie", "99")).     request.setContent("Hello World".getBytes("UTF-8")).     request.setUserPrincipal(new User()).     request.setContextPath("/contextPath").     request.setServletPath("/main").     System.setProperty("systemHeader", "systemHeaderValue").     Map<String, String> uriTemplateVars = new HashMap<>().     uriTemplateVars.put("pathvar", "pathvarValue").     request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars).     request.getSession().setAttribute("sessionAttribute", sessionAttribute).     request.setAttribute("requestAttribute", requestAttribute).     HandlerMethod handlerMethod = handlerMethod("handle", parameterTypes).     ModelAndView mav = handlerAdapter.handle(request, response, handlerMethod).     ModelMap model = mav.getModelMap().     assertEquals("viewName", mav.getViewName()).     assertEquals(99, model.get("cookie")).     assertEquals("pathvarValue", model.get("pathvar")).     assertEquals("headerValue", model.get("header")).     assertEquals(date, model.get("dateParam")).     Map<?, ?> map = (Map<?, ?>) model.get("headerMap").     assertEquals("headerValue", map.get("header")).     assertEquals("anotherHeaderValue", map.get("anotherHeader")).     assertEquals("systemHeaderValue", model.get("systemHeader")).     map = (Map<?, ?>) model.get("paramMap").     assertEquals(formattedDate, map.get("dateParam")).     assertEquals("paramByConventionValue", map.get("paramByConvention")).     assertEquals("/contextPath", model.get("value")).     TestBean modelAttr = (TestBean) model.get("modelAttr").     assertEquals(25, modelAttr.getAge()).     assertEquals("Set by model method [modelAttr]", modelAttr.getName()).     assertSame(modelAttr, request.getSession().getAttribute("modelAttr")).     BindingResult bindingResult = (BindingResult) model.get(BindingResult.MODEL_KEY_PREFIX + "modelAttr").     assertSame(modelAttr, bindingResult.getTarget()).     assertEquals(1, bindingResult.getErrorCount()).     String conventionAttrName = "testBean".     TestBean modelAttrByConvention = (TestBean) model.get(conventionAttrName).     assertEquals(25, modelAttrByConvention.getAge()).     assertEquals("Set by model method [modelAttrByConvention]", modelAttrByConvention.getName()).     assertSame(modelAttrByConvention, request.getSession().getAttribute(conventionAttrName)).     bindingResult = (BindingResult) model.get(BindingResult.MODEL_KEY_PREFIX + conventionAttrName).     assertSame(modelAttrByConvention, bindingResult.getTarget()).     assertTrue(model.get("customArg") instanceof Color).     assertEquals(User.class, model.get("user").getClass()).     assertEquals(OtherUser.class, model.get("otherUser").getClass()).     assertSame(sessionAttribute, model.get("sessionAttribute")).     assertSame(requestAttribute, model.get("requestAttribute")).     assertEquals(new URI("http://localhost/contextPath/main/path"), model.get("url")). }
false;public;0;80;;@Test public void handleInInterface() throws Exception {     Class<?>[] parameterTypes = new Class<?>[] { int.class, String.class, String.class, String.class, Map.class, Date.class, Map.class, String.class, String.class, TestBean.class, Errors.class, TestBean.class, Color.class, HttpServletRequest.class, HttpServletResponse.class, TestBean.class, TestBean.class, User.class, OtherUser.class, Model.class, UriComponentsBuilder.class }.     String datePattern = "yyyy.MM.dd".     String formattedDate = "2011.03.16".     Date date = new GregorianCalendar(2011, Calendar.MARCH, 16).getTime().     TestBean sessionAttribute = new TestBean().     TestBean requestAttribute = new TestBean().     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.addHeader("header", "headerValue").     request.addHeader("anotherHeader", "anotherHeaderValue").     request.addParameter("datePattern", datePattern).     request.addParameter("dateParam", formattedDate).     request.addParameter("paramByConvention", "paramByConventionValue").     request.addParameter("age", "25").     request.setCookies(new Cookie("cookie", "99")).     request.setContent("Hello World".getBytes("UTF-8")).     request.setUserPrincipal(new User()).     request.setContextPath("/contextPath").     request.setServletPath("/main").     System.setProperty("systemHeader", "systemHeaderValue").     Map<String, String> uriTemplateVars = new HashMap<>().     uriTemplateVars.put("pathvar", "pathvarValue").     request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars).     request.getSession().setAttribute("sessionAttribute", sessionAttribute).     request.setAttribute("requestAttribute", requestAttribute).     HandlerMethod handlerMethod = handlerMethod("handleInInterface", parameterTypes).     ModelAndView mav = handlerAdapter.handle(request, response, handlerMethod).     ModelMap model = mav.getModelMap().     assertEquals("viewName", mav.getViewName()).     assertEquals(99, model.get("cookie")).     assertEquals("pathvarValue", model.get("pathvar")).     assertEquals("headerValue", model.get("header")).     assertEquals(date, model.get("dateParam")).     Map<?, ?> map = (Map<?, ?>) model.get("headerMap").     assertEquals("headerValue", map.get("header")).     assertEquals("anotherHeaderValue", map.get("anotherHeader")).     assertEquals("systemHeaderValue", model.get("systemHeader")).     map = (Map<?, ?>) model.get("paramMap").     assertEquals(formattedDate, map.get("dateParam")).     assertEquals("paramByConventionValue", map.get("paramByConvention")).     assertEquals("/contextPath", model.get("value")).     TestBean modelAttr = (TestBean) model.get("modelAttr").     assertEquals(25, modelAttr.getAge()).     assertEquals("Set by model method [modelAttr]", modelAttr.getName()).     assertSame(modelAttr, request.getSession().getAttribute("modelAttr")).     BindingResult bindingResult = (BindingResult) model.get(BindingResult.MODEL_KEY_PREFIX + "modelAttr").     assertSame(modelAttr, bindingResult.getTarget()).     assertEquals(1, bindingResult.getErrorCount()).     String conventionAttrName = "testBean".     TestBean modelAttrByConvention = (TestBean) model.get(conventionAttrName).     assertEquals(25, modelAttrByConvention.getAge()).     assertEquals("Set by model method [modelAttrByConvention]", modelAttrByConvention.getName()).     assertSame(modelAttrByConvention, request.getSession().getAttribute(conventionAttrName)).     bindingResult = (BindingResult) model.get(BindingResult.MODEL_KEY_PREFIX + conventionAttrName).     assertSame(modelAttrByConvention, bindingResult.getTarget()).     assertTrue(model.get("customArg") instanceof Color).     assertEquals(User.class, model.get("user").getClass()).     assertEquals(OtherUser.class, model.get("otherUser").getClass()).     assertSame(sessionAttribute, model.get("sessionAttribute")).     assertSame(requestAttribute, model.get("requestAttribute")).     assertEquals(new URI("http://localhost/contextPath/main/path"), model.get("url")). }
false;public;0;16;;@Test public void handleRequestBody() throws Exception {     Class<?>[] parameterTypes = new Class<?>[] { byte[].class }.     request.setMethod("POST").     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.setContent("Hello Server".getBytes("UTF-8")).     HandlerMethod handlerMethod = handlerMethod("handleRequestBody", parameterTypes).     ModelAndView mav = handlerAdapter.handle(request, response, handlerMethod).     assertNull(mav).     assertEquals("Handled requestBody=[Hello Server]", new String(response.getContentAsByteArray(), "UTF-8")).     assertEquals(HttpStatus.ACCEPTED.value(), response.getStatus()). }
false;public;0;15;;@Test public void handleAndValidateRequestBody() throws Exception {     Class<?>[] parameterTypes = new Class<?>[] { TestBean.class, Errors.class }.     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.setContent("Hello Server".getBytes("UTF-8")).     HandlerMethod handlerMethod = handlerMethod("handleAndValidateRequestBody", parameterTypes).     ModelAndView mav = handlerAdapter.handle(request, response, handlerMethod).     assertNull(mav).     assertEquals("Error count [1]", new String(response.getContentAsByteArray(), "UTF-8")).     assertEquals(HttpStatus.ACCEPTED.value(), response.getStatus()). }
false;public;0;18;;@Test public void handleHttpEntity() throws Exception {     Class<?>[] parameterTypes = new Class<?>[] { HttpEntity.class }.     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.setContent("Hello Server".getBytes("UTF-8")).     HandlerMethod handlerMethod = handlerMethod("handleHttpEntity", parameterTypes).     ModelAndView mav = handlerAdapter.handle(request, response, handlerMethod).     assertNull(mav).     assertEquals(HttpStatus.ACCEPTED.value(), response.getStatus()).     assertEquals("Handled requestBody=[Hello Server]", new String(response.getContentAsByteArray(), "UTF-8")).     assertEquals("headerValue", response.getHeader("header")).     // set because of @SesstionAttributes     assertEquals("no-store", response.getHeader("Cache-Control")). }
true;public;0;14;// SPR-13867 ;// SPR-13867 @Test public void handleHttpEntityWithCacheControl() throws Exception {     Class<?>[] parameterTypes = new Class<?>[] { HttpEntity.class }.     request.addHeader("Content-Type", "text/plain. charset=utf-8").     request.setContent("Hello Server".getBytes("UTF-8")).     HandlerMethod handlerMethod = handlerMethod("handleHttpEntityWithCacheControl", parameterTypes).     ModelAndView mav = handlerAdapter.handle(request, response, handlerMethod).     assertNull(mav).     assertEquals(HttpStatus.OK.value(), response.getStatus()).     assertEquals("Handled requestBody=[Hello Server]", new String(response.getContentAsByteArray(), "UTF-8")).     assertThat(response.getHeaderValues("Cache-Control"), Matchers.contains("max-age=3600")). }
false;public;0;11;;@Test public void handleRequestPart() throws Exception {     MockMultipartHttpServletRequest multipartRequest = new MockMultipartHttpServletRequest().     multipartRequest.addFile(new MockMultipartFile("requestPart", "", "text/plain", "content".getBytes("UTF-8"))).     HandlerMethod handlerMethod = handlerMethod("handleRequestPart", String.class, Model.class).     ModelAndView mav = handlerAdapter.handle(multipartRequest, response, handlerMethod).     assertNotNull(mav).     assertEquals("content", mav.getModelMap().get("requestPart")). }
false;public;0;11;;@Test public void handleAndValidateRequestPart() throws Exception {     MockMultipartHttpServletRequest multipartRequest = new MockMultipartHttpServletRequest().     multipartRequest.addFile(new MockMultipartFile("requestPart", "", "text/plain", "content".getBytes("UTF-8"))).     HandlerMethod handlerMethod = handlerMethod("handleAndValidateRequestPart", String.class, Errors.class, Model.class).     ModelAndView mav = handlerAdapter.handle(multipartRequest, response, handlerMethod).     assertNotNull(mav).     assertEquals(1, mav.getModelMap().get("error count")). }
false;public;0;7;;@Test public void handleAndCompleteSession() throws Exception {     HandlerMethod handlerMethod = handlerMethod("handleAndCompleteSession", SessionStatus.class).     handlerAdapter.handle(request, response, handlerMethod).     assertFalse(request.getSession().getAttributeNames().hasMoreElements()). }
false;private;2;4;;private HandlerMethod handlerMethod(String methodName, Class<?>... paramTypes) throws Exception {     Method method = handler.getClass().getDeclaredMethod(methodName, paramTypes).     return new InvocableHandlerMethod(handler, method). }
false;;21;22;;String handleInInterface(@CookieValue("cookie") int cookieV, @PathVariable("pathvar") String pathvarV, @RequestHeader("header") String headerV, @RequestHeader(defaultValue = "#{systemProperties.systemHeader}") String systemHeader, @RequestHeader Map<String, Object> headerMap, @RequestParam("dateParam") Date dateParam, @RequestParam Map<String, Object> paramMap, String paramByConvention, @Value("#{request.contextPath}") String value, @ModelAttribute("modelAttr") @Valid TestBean modelAttr, Errors errors, TestBean modelAttrByConvention, Color customArg, HttpServletRequest request, HttpServletResponse response, @SessionAttribute TestBean sessionAttribute, @RequestAttribute TestBean requestAttribute, User user, @ModelAttribute OtherUser otherUser, Model model, UriComponentsBuilder builder).
false;public;2;5;;@InitBinder("dateParam") public void initBinder(WebDataBinder dataBinder, @RequestParam("datePattern") String datePattern) {     SimpleDateFormat dateFormat = new SimpleDateFormat(datePattern).     dataBinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false)). }
false;public;1;12;;@ModelAttribute public void model(Model model) {     TestBean modelAttr = new TestBean().     modelAttr.setName("Set by model method [modelAttr]").     model.addAttribute("modelAttr", modelAttr).     modelAttr = new TestBean().     modelAttr.setName("Set by model method [modelAttrByConvention]").     model.addAttribute(modelAttr).     model.addAttribute(new OtherUser()). }
false;public;21;37;;public String handle(@CookieValue("cookie") int cookieV, @PathVariable("pathvar") String pathvarV, @RequestHeader("header") String headerV, @RequestHeader(defaultValue = "#{systemProperties.systemHeader}") String systemHeader, @RequestHeader Map<String, Object> headerMap, @RequestParam("dateParam") Date dateParam, @RequestParam Map<String, Object> paramMap, String paramByConvention, @Value("#{request.contextPath}") String value, @ModelAttribute("modelAttr") @Valid TestBean modelAttr, Errors errors, TestBean modelAttrByConvention, Color customArg, HttpServletRequest request, HttpServletResponse response, @SessionAttribute TestBean sessionAttribute, @RequestAttribute TestBean requestAttribute, User user, @ModelAttribute OtherUser otherUser, Model model, UriComponentsBuilder builder) {     model.addAttribute("cookie", cookieV).addAttribute("pathvar", pathvarV).addAttribute("header", headerV).addAttribute("systemHeader", systemHeader).addAttribute("headerMap", headerMap).addAttribute("dateParam", dateParam).addAttribute("paramMap", paramMap).addAttribute("paramByConvention", paramByConvention).addAttribute("value", value).addAttribute("customArg", customArg).addAttribute(user).addAttribute("sessionAttribute", sessionAttribute).addAttribute("requestAttribute", requestAttribute).addAttribute("url", builder.path("/path").build().toUri()).     assertNotNull(request).     assertNotNull(response).     return "viewName". }
false;public;21;38;;@Override public String handleInInterface(int cookieV, String pathvarV, String headerV, String systemHeader, Map<String, Object> headerMap, Date dateParam, Map<String, Object> paramMap, String paramByConvention, String value, TestBean modelAttr, Errors errors, TestBean modelAttrByConvention, Color customArg, HttpServletRequest request, HttpServletResponse response, TestBean sessionAttribute, TestBean requestAttribute, User user, OtherUser otherUser, Model model, UriComponentsBuilder builder) {     model.addAttribute("cookie", cookieV).addAttribute("pathvar", pathvarV).addAttribute("header", headerV).addAttribute("systemHeader", systemHeader).addAttribute("headerMap", headerMap).addAttribute("dateParam", dateParam).addAttribute("paramMap", paramMap).addAttribute("paramByConvention", paramByConvention).addAttribute("value", value).addAttribute("customArg", customArg).addAttribute(user).addAttribute("sessionAttribute", sessionAttribute).addAttribute("requestAttribute", requestAttribute).addAttribute("url", builder.path("/path").build().toUri()).     assertNotNull(request).     assertNotNull(response).     return "viewName". }
false;public;1;6;;@ResponseStatus(HttpStatus.ACCEPTED) @ResponseBody public String handleRequestBody(@RequestBody byte[] bytes) throws Exception {     String requestBody = new String(bytes, "UTF-8").     return "Handled requestBody=[" + requestBody + "]". }
false;public;2;5;;@ResponseStatus(code = HttpStatus.ACCEPTED) @ResponseBody public String handleAndValidateRequestBody(@Valid TestBean modelAttr, Errors errors) {     return "Error count [" + errors.getErrorCount() + "]". }
false;public;1;6;;public ResponseEntity<String> handleHttpEntity(HttpEntity<byte[]> httpEntity) throws Exception {     String responseBody = "Handled requestBody=[" + new String(httpEntity.getBody(), "UTF-8") + "]".     return ResponseEntity.accepted().header("header", "headerValue").body(responseBody). }
false;public;1;4;;public ResponseEntity<String> handleHttpEntityWithCacheControl(HttpEntity<byte[]> httpEntity) throws Exception {     String responseBody = "Handled requestBody=[" + new String(httpEntity.getBody(), "UTF-8") + "]".     return ResponseEntity.ok().cacheControl(CacheControl.maxAge(1, TimeUnit.HOURS)).body(responseBody). }
false;public;2;3;;public void handleRequestPart(@RequestPart String requestPart, Model model) {     model.addAttribute("requestPart", requestPart). }
false;public;3;5;;public void handleAndValidateRequestPart(@RequestPart @Valid String requestPart, Errors errors, Model model) throws Exception {     model.addAttribute("error count", errors.getErrorCount()). }
false;public;1;3;;public void handleAndCompleteSession(SessionStatus sessionStatus) {     sessionStatus.setComplete(). }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return true. }
false;public;2;4;;@Override public void validate(@Nullable Object target, Errors errors) {     errors.reject("error"). }
false;public;2;4;;@Override public Object resolveArgument(MethodParameter methodParameter, NativeWebRequest webRequest) {     return new Color(0). }
false;public;0;4;;@Override public String getName() {     return "user". }
false;public;0;4;;@Override public String getName() {     return "other user". }
