commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void setup() throws Exception {     List<HttpMessageConverter<?>> converters = Arrays.asList(new StringHttpMessageConverter(), new MappingJackson2HttpMessageConverter()).     this.handler = new ResponseBodyEmitterReturnValueHandler(converters).     this.request = new MockHttpServletRequest().     this.response = new MockHttpServletResponse().     this.webRequest = new ServletWebRequest(this.request, this.response).     AsyncWebRequest asyncWebRequest = new StandardServletAsyncWebRequest(this.request, this.response).     WebAsyncUtils.getAsyncManager(this.webRequest).setAsyncWebRequest(asyncWebRequest).     this.request.setAsyncSupported(true). }
false;public;0;19;;@Test public void supportsReturnTypes() throws Exception {     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(ResponseBodyEmitter.class))).     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(SseEmitter.class))).     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(ResponseEntity.class, ResponseBodyEmitter.class))).     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(Flux.class, String.class))).     assertTrue(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(forClassWithGenerics(ResponseEntity.class, forClassWithGenerics(Flux.class, String.class))))). }
false;public;0;13;;@Test public void doesNotSupportReturnTypes() throws Exception {     assertFalse(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(ResponseEntity.class, String.class))).     assertFalse(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(forClassWithGenerics(ResponseEntity.class, forClassWithGenerics(AtomicReference.class, String.class))))).     assertFalse(this.handler.supportsReturnType(on(TestController.class).resolveReturnType(ResponseEntity.class))). }
false;public;0;34;;@Test public void responseBodyEmitter() throws Exception {     MethodParameter type = on(TestController.class).resolveReturnType(ResponseBodyEmitter.class).     ResponseBodyEmitter emitter = new ResponseBodyEmitter().     this.handler.handleReturnValue(emitter, type, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertEquals("", this.response.getContentAsString()).     SimpleBean bean = new SimpleBean().     bean.setId(1L).     bean.setName("Joe").     emitter.send(bean).     emitter.send("\n").     bean.setId(2L).     bean.setName("John").     emitter.send(bean).     emitter.send("\n").     bean.setId(3L).     bean.setName("Jason").     emitter.send(bean).     assertEquals("{\"id\":1,\"name\":\"Joe\"}\n" + "{\"id\":2,\"name\":\"John\"}\n" + "{\"id\":3,\"name\":\"Jason\"}", this.response.getContentAsString()).     MockAsyncContext asyncContext = (MockAsyncContext) this.request.getAsyncContext().     assertNull(asyncContext.getDispatchedPath()).     emitter.complete().     assertNotNull(asyncContext.getDispatchedPath()). }
false;public;0;18;;@Test public void responseBodyEmitterWithTimeoutValue() throws Exception {     AsyncWebRequest asyncWebRequest = mock(AsyncWebRequest.class).     WebAsyncUtils.getAsyncManager(this.request).setAsyncWebRequest(asyncWebRequest).     ResponseBodyEmitter emitter = new ResponseBodyEmitter(19000L).     emitter.onTimeout(mock(Runnable.class)).     emitter.onCompletion(mock(Runnable.class)).     MethodParameter type = on(TestController.class).resolveReturnType(ResponseBodyEmitter.class).     this.handler.handleReturnValue(emitter, type, this.mavContainer, this.webRequest).     verify(asyncWebRequest).setTimeout(19000L).     verify(asyncWebRequest).addTimeoutHandler(any(Runnable.class)).     verify(asyncWebRequest, times(2)).addCompletionHandler(any(Runnable.class)).     verify(asyncWebRequest).startAsync(). }
false;public;0;18;;@SuppressWarnings("unchecked") @Test public void responseBodyEmitterWithErrorValue() throws Exception {     AsyncWebRequest asyncWebRequest = mock(AsyncWebRequest.class).     WebAsyncUtils.getAsyncManager(this.request).setAsyncWebRequest(asyncWebRequest).     ResponseBodyEmitter emitter = new ResponseBodyEmitter(19000L).     emitter.onError(mock(Consumer.class)).     emitter.onCompletion(mock(Runnable.class)).     MethodParameter type = on(TestController.class).resolveReturnType(ResponseBodyEmitter.class).     this.handler.handleReturnValue(emitter, type, this.mavContainer, this.webRequest).     verify(asyncWebRequest).addErrorHandler(any(Consumer.class)).     verify(asyncWebRequest, times(2)).addCompletionHandler(any(Runnable.class)).     verify(asyncWebRequest).startAsync(). }
false;public;0;29;;@Test public void sseEmitter() throws Exception {     MethodParameter type = on(TestController.class).resolveReturnType(SseEmitter.class).     SseEmitter emitter = new SseEmitter().     this.handler.handleReturnValue(emitter, type, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertEquals(200, this.response.getStatus()).     assertEquals("text/event-stream.charset=UTF-8", this.response.getContentType()).     SimpleBean bean1 = new SimpleBean().     bean1.setId(1L).     bean1.setName("Joe").     SimpleBean bean2 = new SimpleBean().     bean2.setId(2L).     bean2.setName("John").     emitter.send(SseEmitter.event().comment("a test").name("update").id("1").reconnectTime(5000L).data(bean1).data(bean2)).     assertEquals(":a test\n" + "event:update\n" + "id:1\n" + "retry:5000\n" + "data:{\"id\":1,\"name\":\"Joe\"}\n" + "data:{\"id\":2,\"name\":\"John\"}\n" + "\n", this.response.getContentAsString()). }
false;public;0;20;;@Test public void responseBodyFlux() throws Exception {     this.request.addHeader("Accept", "text/event-stream").     MethodParameter type = on(TestController.class).resolveReturnType(Flux.class, String.class).     EmitterProcessor<String> processor = EmitterProcessor.create().     this.handler.handleReturnValue(processor, type, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertEquals(200, this.response.getStatus()).     assertEquals("text/event-stream.charset=UTF-8", this.response.getContentType()).     processor.onNext("foo").     processor.onNext("bar").     processor.onNext("baz").     processor.onComplete().     assertEquals("data:foo\n\ndata:bar\n\ndata:baz\n\n", this.response.getContentAsString()). }
false;public;0;11;;@Test public void responseEntitySse() throws Exception {     MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, SseEmitter.class).     ResponseEntity<SseEmitter> entity = ResponseEntity.ok().header("foo", "bar").body(new SseEmitter()).     this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertEquals(200, this.response.getStatus()).     assertEquals("text/event-stream.charset=UTF-8", this.response.getContentType()).     assertEquals("bar", this.response.getHeader("foo")). }
false;public;0;10;;@Test public void responseEntitySseNoContent() throws Exception {     MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, SseEmitter.class).     ResponseEntity<?> entity = ResponseEntity.noContent().header("foo", "bar").build().     this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest).     assertFalse(this.request.isAsyncStarted()).     assertEquals(204, this.response.getStatus()).     assertEquals(Collections.singletonList("bar"), this.response.getHeaders("foo")). }
false;public;0;20;;@Test public void responseEntityFlux() throws Exception {     EmitterProcessor<String> processor = EmitterProcessor.create().     ResponseEntity<Flux<String>> entity = ResponseEntity.ok().body(processor).     ResolvableType bodyType = forClassWithGenerics(Flux.class, String.class).     MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, bodyType).     this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertEquals(200, this.response.getStatus()).     assertEquals("text/plain", this.response.getContentType()).     processor.onNext("foo").     processor.onNext("bar").     processor.onNext("baz").     processor.onComplete().     assertEquals("foobarbaz", this.response.getContentAsString()). }
false;public;0;14;;// SPR-17076 @Test public void responseEntityFluxWithCustomHeader() throws Exception {     EmitterProcessor<SimpleBean> processor = EmitterProcessor.create().     ResponseEntity<Flux<SimpleBean>> entity = ResponseEntity.ok().header("x-foo", "bar").body(processor).     ResolvableType bodyType = forClassWithGenerics(Flux.class, SimpleBean.class).     MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, bodyType).     this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest).     assertTrue(this.request.isAsyncStarted()).     assertEquals(200, this.response.getStatus()).     assertEquals("bar", this.response.getHeader("x-foo")).     assertFalse(this.response.isCommitted()). }
false;private;0;1;;private ResponseBodyEmitter h1() {     return null. }
false;private;0;1;;private ResponseEntity<ResponseBodyEmitter> h2() {     return null. }
false;private;0;1;;private SseEmitter h3() {     return null. }
false;private;0;1;;private ResponseEntity<SseEmitter> h4() {     return null. }
false;private;0;1;;private ResponseEntity<String> h5() {     return null. }
false;private;0;1;;private ResponseEntity<AtomicReference<String>> h6() {     return null. }
false;private;0;1;;private ResponseEntity<?> h7() {     return null. }
false;private;0;1;;private Flux<String> h8() {     return null. }
false;private;0;1;;private ResponseEntity<Flux<String>> h9() {     return null. }
false;private;0;1;;private ResponseEntity<Flux<SimpleBean>> h10() {     return null. }
false;public;0;3;;public Long getId() {     return id. }
false;public;1;3;;public void setId(Long id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
