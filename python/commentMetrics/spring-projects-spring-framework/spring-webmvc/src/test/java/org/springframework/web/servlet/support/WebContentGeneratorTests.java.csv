commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void getAllowHeaderWithConstructorTrue() throws Exception {     WebContentGenerator generator = new TestWebContentGenerator(true).     assertEquals("GET,HEAD,POST,OPTIONS", generator.getAllowHeader()). }
false;public;0;5;;@Test public void getAllowHeaderWithConstructorFalse() throws Exception {     WebContentGenerator generator = new TestWebContentGenerator(false).     assertEquals("GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS", generator.getAllowHeader()). }
false;public;0;5;;@Test public void getAllowHeaderWithSupportedMethodsConstructor() throws Exception {     WebContentGenerator generator = new TestWebContentGenerator("POST").     assertEquals("POST,OPTIONS", generator.getAllowHeader()). }
false;public;0;6;;@Test public void getAllowHeaderWithSupportedMethodsSetter() throws Exception {     WebContentGenerator generator = new TestWebContentGenerator().     generator.setSupportedMethods("POST").     assertEquals("POST,OPTIONS", generator.getAllowHeader()). }
false;public;0;7;;@Test public void getAllowHeaderWithSupportedMethodsSetterEmpty() throws Exception {     WebContentGenerator generator = new TestWebContentGenerator().     generator.setSupportedMethods().     assertEquals("Effectively \"no restriction\" on supported methods", "GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS", generator.getAllowHeader()). }
false;public;0;8;;@Test public void varyHeaderNone() throws Exception {     WebContentGenerator generator = new TestWebContentGenerator().     MockHttpServletResponse response = new MockHttpServletResponse().     generator.prepareResponse(response).     assertNull(response.getHeader("Vary")). }
false;public;0;7;;@Test public void varyHeader() throws Exception {     String[] configuredValues = { "Accept-Language", "User-Agent" }.     String[] responseValues = {}.     String[] expected = { "Accept-Language", "User-Agent" }.     testVaryHeader(configuredValues, responseValues, expected). }
false;public;0;7;;@Test public void varyHeaderWithExistingWildcard() throws Exception {     String[] configuredValues = { "Accept-Language" }.     String[] responseValues = { "*" }.     String[] expected = { "*" }.     testVaryHeader(configuredValues, responseValues, expected). }
false;public;0;7;;@Test public void varyHeaderWithExistingCommaValues() throws Exception {     String[] configuredValues = { "Accept-Language", "User-Agent" }.     String[] responseValues = { "Accept-Encoding", "Accept-Language" }.     String[] expected = { "Accept-Encoding", "Accept-Language", "User-Agent" }.     testVaryHeader(configuredValues, responseValues, expected). }
false;public;0;7;;@Test public void varyHeaderWithExistingCommaSeparatedValues() throws Exception {     String[] configuredValues = { "Accept-Language", "User-Agent" }.     String[] responseValues = { "Accept-Encoding, Accept-Language" }.     String[] expected = { "Accept-Encoding, Accept-Language", "User-Agent" }.     testVaryHeader(configuredValues, responseValues, expected). }
false;private;3;10;;private void testVaryHeader(String[] configuredValues, String[] responseValues, String[] expected) {     WebContentGenerator generator = new TestWebContentGenerator().     generator.setVaryByRequestHeaders(configuredValues).     MockHttpServletResponse response = new MockHttpServletResponse().     for (String value : responseValues) {         response.addHeader("Vary", value).     }     generator.prepareResponse(response).     assertEquals(Arrays.asList(expected), response.getHeaderValues("Vary")). }
