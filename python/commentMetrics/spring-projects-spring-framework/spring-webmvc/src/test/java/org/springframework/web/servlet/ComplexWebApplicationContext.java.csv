commented;modifiers;parameterAmount;loc;comment;code
false;public;0;97;;@Override public void refresh() throws BeansException {     registerSingleton(DispatcherServlet.LOCALE_RESOLVER_BEAN_NAME, SessionLocaleResolver.class).     registerSingleton(DispatcherServlet.THEME_RESOLVER_BEAN_NAME, SessionThemeResolver.class).     LocaleChangeInterceptor interceptor1 = new LocaleChangeInterceptor().     LocaleChangeInterceptor interceptor2 = new LocaleChangeInterceptor().     interceptor2.setParamName("locale2").     ThemeChangeInterceptor interceptor3 = new ThemeChangeInterceptor().     ThemeChangeInterceptor interceptor4 = new ThemeChangeInterceptor().     interceptor4.setParamName("theme2").     UserRoleAuthorizationInterceptor interceptor5 = new UserRoleAuthorizationInterceptor().     interceptor5.setAuthorizedRoles("role1", "role2").     List<Object> interceptors = new ArrayList<>().     interceptors.add(interceptor5).     interceptors.add(interceptor1).     interceptors.add(interceptor2).     interceptors.add(interceptor3).     interceptors.add(interceptor4).     interceptors.add(new MyHandlerInterceptor1()).     interceptors.add(new MyHandlerInterceptor2()).     interceptors.add(new MyWebRequestInterceptor()).     MutablePropertyValues pvs = new MutablePropertyValues().     pvs.add("mappings", "/view.do=viewHandler\n/locale.do=localeHandler\nloc.do=anotherLocaleHandler").     pvs.add("interceptors", interceptors).     registerSingleton("myUrlMapping1", SimpleUrlHandlerMapping.class, pvs).     pvs = new MutablePropertyValues().     pvs.add("mappings", "/form.do=localeHandler\n/unknown.do=unknownHandler\nservlet.do=myServlet").     pvs.add("order", "2").     registerSingleton("myUrlMapping2", SimpleUrlHandlerMapping.class, pvs).     pvs = new MutablePropertyValues().     pvs.add("mappings", "/head.do=headController\n" + "body.do=bodyController\n/noview*=noviewController\n/noview/simple*=noviewController").     pvs.add("order", "1").     registerSingleton("handlerMapping", SimpleUrlHandlerMapping.class, pvs).     registerSingleton("myDummyAdapter", MyDummyAdapter.class).     registerSingleton("myHandlerAdapter", MyHandlerAdapter.class).     registerSingleton("standardHandlerAdapter", SimpleControllerHandlerAdapter.class).     registerSingleton("noviewController", NoViewController.class).     pvs = new MutablePropertyValues().     pvs.add("order", 0).     pvs.add("basename", "org.springframework.web.servlet.complexviews").     registerSingleton("viewResolver", ResourceBundleViewResolver.class, pvs).     pvs = new MutablePropertyValues().     pvs.add("suffix", ".jsp").     registerSingleton("viewResolver2", InternalResourceViewResolver.class, pvs).     pvs = new MutablePropertyValues().     pvs.add("viewName", "form").     registerSingleton("viewHandler", ParameterizableViewController.class, pvs).     registerSingleton("localeHandler", ComplexLocaleChecker.class).     registerSingleton("anotherLocaleHandler", ComplexLocaleChecker.class).     registerSingleton("unknownHandler", Object.class).     registerSingleton("headController", HeadController.class).     registerSingleton("bodyController", BodyController.class).     registerSingleton("servletPostProcessor", SimpleServletPostProcessor.class).     registerSingleton("handlerAdapter", SimpleServletHandlerAdapter.class).     registerSingleton("myServlet", MyServlet.class).     pvs = new MutablePropertyValues().     pvs.add("order", "1").     pvs.add("exceptionMappings", "java.lang.IllegalAccessException=failed2\n" + "ServletRequestBindingException=failed3").     pvs.add("defaultErrorView", "failed0").     registerSingleton("exceptionResolver1", SimpleMappingExceptionResolver.class, pvs).     pvs = new MutablePropertyValues().     pvs.add("order", "0").     pvs.add("exceptionMappings", "java.lang.Exception=failed1").     List<RuntimeBeanReference> mappedHandlers = new ManagedList<>().     mappedHandlers.add(new RuntimeBeanReference("anotherLocaleHandler")).     pvs.add("mappedHandlers", mappedHandlers).     pvs.add("defaultStatusCode", "500").     pvs.add("defaultErrorView", "failed2").     registerSingleton("handlerExceptionResolver", SimpleMappingExceptionResolver.class, pvs).     registerSingleton("multipartResolver", MockMultipartResolver.class).     registerSingleton("testListener", TestApplicationListener.class).     addMessage("test", Locale.ENGLISH, "test message").     addMessage("test", Locale.CANADA, "Canadian & test message").     super.refresh(). }
false;public;2;7;;@Override public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {     if ("HEAD".equals(request.getMethod())) {         response.setContentLength(5).     }     return null. }
false;public;2;5;;@Override public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {     response.getOutputStream().write("body".getBytes()).     return null. }
false;public;2;4;;@Override public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {     return new ModelAndView(). }
false;public;1;4;;@Override public void init(ServletConfig servletConfig) throws ServletException {     this.servletConfig = servletConfig. }
false;public;0;4;;@Override public ServletConfig getServletConfig() {     return servletConfig. }
false;public;2;4;;@Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {     servletResponse.getOutputStream().write("body".getBytes()). }
false;public;0;4;;@Override public String getServletInfo() {     return null. }
false;public;0;4;;@Override public void destroy() {     this.servletConfig = null. }
false;;1;1;;void doSomething(HttpServletRequest request) throws ServletException, IllegalAccessException.
false;;0;1;;long lastModified().
false;public;0;4;;@Override public int getOrder() {     return 99. }
false;public;1;4;;@Override public boolean supports(Object handler) {     return handler != null && MyHandler.class.isAssignableFrom(handler.getClass()). }
false;public;3;7;;@Override public ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object delegate) throws ServletException, IllegalAccessException {     ((MyHandler) delegate).doSomething(request).     return null. }
false;public;2;4;;@Override public long getLastModified(HttpServletRequest request, Object delegate) {     return ((MyHandler) delegate).lastModified(). }
false;public;1;4;;@Override public boolean supports(Object handler) {     return handler != null && MyHandler.class.isAssignableFrom(handler.getClass()). }
false;public;3;5;;@Override public ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object delegate) throws IOException, ServletException {     throw new ServletException("dummy"). }
false;public;2;4;;@Override public long getLastModified(HttpServletRequest request, Object delegate) {     return -1. }
false;public;3;12;;@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException {     if (request.getAttribute("test2") != null) {         throw new ServletException("Wrong interceptor order").     }     request.setAttribute("test1", "test1").     request.setAttribute("test1x", "test1x").     request.setAttribute("test1y", "test1y").     return true. }
false;public;4;13;;@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws ServletException {     if (request.getAttribute("test2x") != null) {         throw new ServletException("Wrong interceptor order").     }     if (!"test1x".equals(request.getAttribute("test1x"))) {         throw new ServletException("Incorrect request attribute").     }     request.removeAttribute("test1x"). }
false;public;4;13;;@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws ServletException {     if (request.getAttribute("test2y") != null) {         throw new ServletException("Wrong interceptor order").     }     if (request.getAttribute("test1y") == null) {         throw new ServletException("afterCompletion invoked twice").     }     request.removeAttribute("test1y"). }
false;public;3;15;;@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException {     if (request.getAttribute("test1x") == null) {         throw new ServletException("Wrong interceptor order").     }     if (request.getParameter("abort") != null) {         return false.     }     request.setAttribute("test2", "test2").     request.setAttribute("test2x", "test2x").     request.setAttribute("test2y", "test2y").     return true. }
false;public;4;16;;@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws ServletException {     if (request.getParameter("noView") != null) {         modelAndView.clear().     }     if (request.getAttribute("test1x") == null) {         throw new ServletException("Wrong interceptor order").     }     if (!"test2x".equals(request.getAttribute("test2x"))) {         throw new ServletException("Incorrect request attribute").     }     request.removeAttribute("test2x"). }
false;public;4;13;;@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {     if (request.getAttribute("test1y") == null) {         throw new ServletException("Wrong interceptor order").     }     if (request.getAttribute("test2y") == null) {         throw new ServletException("afterCompletion invoked twice").     }     request.removeAttribute("test2y"). }
false;public;1;4;;@Override public void preHandle(WebRequest request) throws Exception {     request.setAttribute("test3", "test3", WebRequest.SCOPE_REQUEST). }
false;public;2;4;;@Override public void postHandle(WebRequest request, @Nullable ModelMap model) throws Exception {     request.setAttribute("test3x", "test3x", WebRequest.SCOPE_REQUEST). }
false;public;2;4;;@Override public void afterCompletion(WebRequest request, @Nullable Exception ex) throws Exception {     request.setAttribute("test3y", "test3y", WebRequest.SCOPE_REQUEST). }
false;public;1;61;;@Override public void doSomething(HttpServletRequest request) throws ServletException, IllegalAccessException {     WebApplicationContext wac = RequestContextUtils.findWebApplicationContext(request).     if (!(wac instanceof ComplexWebApplicationContext)) {         throw new ServletException("Incorrect WebApplicationContext").     }     if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) == null) {         throw new ServletException("Not in a MultipartHttpServletRequest").     }     if (request.getParameter("fail") != null) {         throw new ModelAndViewDefiningException(new ModelAndView("failed1")).     }     if (request.getParameter("access") != null) {         throw new IllegalAccessException("illegal access").     }     if (request.getParameter("servlet") != null) {         throw new ServletRequestBindingException("servlet").     }     if (request.getParameter("exception") != null) {         throw new RuntimeException("servlet").     }     if (!(RequestContextUtils.getLocaleResolver(request) instanceof SessionLocaleResolver)) {         throw new ServletException("Incorrect LocaleResolver").     }     if (!Locale.CANADA.equals(RequestContextUtils.getLocale(request))) {         throw new ServletException("Incorrect Locale").     }     if (!Locale.CANADA.equals(LocaleContextHolder.getLocale())) {         throw new ServletException("Incorrect Locale").     }     if (RequestContextUtils.getTimeZone(request) != null) {         throw new ServletException("Incorrect TimeZone").     }     if (!TimeZone.getDefault().equals(LocaleContextHolder.getTimeZone())) {         throw new ServletException("Incorrect TimeZone").     }     if (!(RequestContextUtils.getThemeResolver(request) instanceof SessionThemeResolver)) {         throw new ServletException("Incorrect ThemeResolver").     }     if (!"theme".equals(RequestContextUtils.getThemeResolver(request).resolveThemeName(request))) {         throw new ServletException("Incorrect theme name").     }     RequestContext rc = new RequestContext(request).     rc.changeLocale(Locale.US, TimeZone.getTimeZone("GMT+1")).     rc.changeTheme("theme2").     if (!Locale.US.equals(RequestContextUtils.getLocale(request))) {         throw new ServletException("Incorrect Locale").     }     if (!Locale.US.equals(LocaleContextHolder.getLocale())) {         throw new ServletException("Incorrect Locale").     }     if (!TimeZone.getTimeZone("GMT+1").equals(RequestContextUtils.getTimeZone(request))) {         throw new ServletException("Incorrect TimeZone").     }     if (!TimeZone.getTimeZone("GMT+1").equals(LocaleContextHolder.getTimeZone())) {         throw new ServletException("Incorrect TimeZone").     }     if (!"theme2".equals(RequestContextUtils.getThemeResolver(request).resolveThemeName(request))) {         throw new ServletException("Incorrect theme name").     } }
false;public;0;4;;@Override public long lastModified() {     return 1427846401000L. }
false;public;1;4;;@Override public boolean isMultipart(HttpServletRequest request) {     return true. }
false;public;1;4;;@Override public HttpHeaders getMultipartHeaders(String paramOrFileName) {     return null. }
false;public;1;4;;@Override public String getMultipartContentType(String paramOrFileName) {     return null. }
false;public;1;23;;@Override public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException {     if (request.getAttribute("fail") != null) {         throw new MaxUploadSizeExceededException(1000).     }     if (request instanceof MultipartHttpServletRequest) {         throw new IllegalStateException("Already a multipart request").     }     if (request.getAttribute("resolved") != null) {         throw new IllegalStateException("Already resolved").     }     request.setAttribute("resolved", Boolean.TRUE).     return new AbstractMultipartHttpServletRequest(request) {          @Override         public HttpHeaders getMultipartHeaders(String paramOrFileName) {             return null.         }          @Override         public String getMultipartContentType(String paramOrFileName) {             return null.         }     }. }
false;public;1;7;;@Override public void cleanupMultipart(MultipartHttpServletRequest request) {     if (request.getAttribute("cleanedUp") != null) {         throw new IllegalStateException("Already cleaned up").     }     request.setAttribute("cleanedUp", Boolean.TRUE). }
false;public;1;4;;@Override public void onApplicationEvent(RequestHandledEvent event) {     this.counter++. }
