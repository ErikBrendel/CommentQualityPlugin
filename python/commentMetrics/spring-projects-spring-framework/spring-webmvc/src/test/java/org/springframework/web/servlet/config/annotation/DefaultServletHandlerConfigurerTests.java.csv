commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     response = new MockHttpServletResponse().     servletContext = new DispatchingMockServletContext().     configurer = new DefaultServletHandlerConfigurer(servletContext). }
false;public;0;4;;@Test public void notEnabled() {     assertNull(configurer.buildHandlerMapping()). }
false;public;0;15;;@Test public void enable() throws Exception {     configurer.enable().     SimpleUrlHandlerMapping handlerMapping = configurer.buildHandlerMapping().     DefaultServletHttpRequestHandler handler = (DefaultServletHttpRequestHandler) handlerMapping.getUrlMap().get("/**").     assertNotNull(handler).     assertEquals(Integer.MAX_VALUE, handlerMapping.getOrder()).     handler.handleRequest(new MockHttpServletRequest(), response).     String expected = "default".     assertEquals("The ServletContext was not called with the default servlet name", expected, servletContext.url).     assertEquals("The request was not forwarded", expected, response.getForwardedUrl()). }
false;public;0;15;;@Test public void enableWithServletName() throws Exception {     configurer.enable("defaultServlet").     SimpleUrlHandlerMapping handlerMapping = configurer.buildHandlerMapping().     DefaultServletHttpRequestHandler handler = (DefaultServletHttpRequestHandler) handlerMapping.getUrlMap().get("/**").     assertNotNull(handler).     assertEquals(Integer.MAX_VALUE, handlerMapping.getOrder()).     handler.handleRequest(new MockHttpServletRequest(), response).     String expected = "defaultServlet".     assertEquals("The ServletContext was not called with the default servlet name", expected, servletContext.url).     assertEquals("The request was not forwarded", expected, response.getForwardedUrl()). }
false;public;1;5;;@Override public RequestDispatcher getNamedDispatcher(String url) {     this.url = url.     return new MockRequestDispatcher(url). }
