commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() {     this.servletRequest = new MockHttpServletRequest("GET", "/").     this.servletResponse = new MockHttpServletResponse().     this.request = new ServletWebRequest(this.servletRequest, this.servletResponse).     this.exceptionHandlerSupport = new ApplicationExceptionHandler().     this.defaultExceptionResolver = new DefaultHandlerExceptionResolver(). }
false;public;0;15;;@Test public void supportsAllDefaultHandlerExceptionResolverExceptionTypes() throws Exception {     Class<ResponseEntityExceptionHandler> clazz = ResponseEntityExceptionHandler.class.     Method handleExceptionMethod = clazz.getMethod("handleException", Exception.class, WebRequest.class).     ExceptionHandler annotation = handleExceptionMethod.getAnnotation(ExceptionHandler.class).     List<Class<?>> exceptionTypes = Arrays.asList(annotation.value()).     for (Method method : DefaultHandlerExceptionResolver.class.getDeclaredMethods()) {         Class<?>[] paramTypes = method.getParameterTypes().         if (method.getName().startsWith("handle") && (paramTypes.length == 4)) {             String name = paramTypes[0].getSimpleName().             assertTrue("@ExceptionHandler is missing " + name, exceptionTypes.contains(paramTypes[0])).         }     } }
false;public;0;8;;@Test public void httpRequestMethodNotSupported() {     List<String> supported = Arrays.asList("POST", "DELETE").     Exception ex = new HttpRequestMethodNotSupportedException("GET", supported).     ResponseEntity<Object> responseEntity = testException(ex).     assertEquals(EnumSet.of(HttpMethod.POST, HttpMethod.DELETE), responseEntity.getHeaders().getAllow()). }
false;public;0;8;;@Test public void handleHttpMediaTypeNotSupported() {     List<MediaType> acceptable = Arrays.asList(MediaType.APPLICATION_ATOM_XML, MediaType.APPLICATION_XML).     Exception ex = new HttpMediaTypeNotSupportedException(MediaType.APPLICATION_JSON, acceptable).     ResponseEntity<Object> responseEntity = testException(ex).     assertEquals(acceptable, responseEntity.getHeaders().getAccept()). }
false;public;0;5;;@Test public void httpMediaTypeNotAcceptable() {     Exception ex = new HttpMediaTypeNotAcceptableException("").     testException(ex). }
false;public;0;7;;@Test public void missingPathVariable() throws NoSuchMethodException {     Method method = getClass().getDeclaredMethod("handle", String.class).     MethodParameter parameter = new MethodParameter(method, 0).     Exception ex = new MissingPathVariableException("param", parameter).     testException(ex). }
false;public;0;5;;@Test public void missingServletRequestParameter() {     Exception ex = new MissingServletRequestParameterException("param", "type").     testException(ex). }
false;public;0;5;;@Test public void servletRequestBindingException() {     Exception ex = new ServletRequestBindingException("message").     testException(ex). }
false;public;0;5;;@Test public void conversionNotSupported() {     Exception ex = new ConversionNotSupportedException(new Object(), Object.class, null).     testException(ex). }
false;public;0;5;;@Test public void typeMismatch() {     Exception ex = new TypeMismatchException("foo", String.class).     testException(ex). }
false;public;0;5;;@Test public void httpMessageNotReadable() {     Exception ex = new HttpMessageNotReadableException("message").     testException(ex). }
false;public;0;5;;@Test public void httpMessageNotWritable() {     Exception ex = new HttpMessageNotWritableException("").     testException(ex). }
false;public;0;5;;@Test public void methodArgumentNotValid() {     Exception ex = Mockito.mock(MethodArgumentNotValidException.class).     testException(ex). }
false;public;0;5;;@Test public void missingServletRequestPart() {     Exception ex = new MissingServletRequestPartException("partName").     testException(ex). }
false;public;0;5;;@Test public void bindException() {     Exception ex = new BindException(new Object(), "name").     testException(ex). }
false;public;0;8;;@Test public void noHandlerFoundException() {     ServletServerHttpRequest req = new ServletServerHttpRequest(new MockHttpServletRequest("GET", "/resource")).     Exception ex = new NoHandlerFoundException(req.getMethod().toString(), req.getServletRequest().getRequestURI(), req.getHeaders()).     testException(ex). }
false;public;0;4;;@Test public void asyncRequestTimeoutException() {     testException(new AsyncRequestTimeoutException()). }
false;public;0;17;;@Test public void controllerAdvice() throws Exception {     StaticWebApplicationContext ctx = new StaticWebApplicationContext().     ctx.registerSingleton("exceptionHandler", ApplicationExceptionHandler.class).     ctx.refresh().     ExceptionHandlerExceptionResolver resolver = new ExceptionHandlerExceptionResolver().     resolver.setApplicationContext(ctx).     resolver.afterPropertiesSet().     ServletRequestBindingException ex = new ServletRequestBindingException("message").     assertNotNull(resolver.resolveException(this.servletRequest, this.servletResponse, null, ex)).     assertEquals(400, this.servletResponse.getStatus()).     assertEquals("error content", this.servletResponse.getContentAsString()).     assertEquals("someHeaderValue", this.servletResponse.getHeader("someHeader")). }
false;public;0;13;;@Test public void controllerAdviceWithNestedException() {     StaticWebApplicationContext ctx = new StaticWebApplicationContext().     ctx.registerSingleton("exceptionHandler", ApplicationExceptionHandler.class).     ctx.refresh().     ExceptionHandlerExceptionResolver resolver = new ExceptionHandlerExceptionResolver().     resolver.setApplicationContext(ctx).     resolver.afterPropertiesSet().     IllegalStateException ex = new IllegalStateException(new ServletRequestBindingException("message")).     assertNull(resolver.resolveException(this.servletRequest, this.servletResponse, null, ex)). }
false;public;0;15;;@Test public void controllerAdviceWithinDispatcherServlet() throws Exception {     StaticWebApplicationContext ctx = new StaticWebApplicationContext().     ctx.registerSingleton("controller", ExceptionThrowingController.class).     ctx.registerSingleton("exceptionHandler", ApplicationExceptionHandler.class).     ctx.refresh().     DispatcherServlet servlet = new DispatcherServlet(ctx).     servlet.init(new MockServletConfig()).     servlet.service(this.servletRequest, this.servletResponse).     assertEquals(400, this.servletResponse.getStatus()).     assertEquals("error content", this.servletResponse.getContentAsString()).     assertEquals("someHeaderValue", this.servletResponse.getHeader("someHeader")). }
false;public;0;17;;@Test public void controllerAdviceWithNestedExceptionWithinDispatcherServlet() throws Exception {     StaticWebApplicationContext ctx = new StaticWebApplicationContext().     ctx.registerSingleton("controller", NestedExceptionThrowingController.class).     ctx.registerSingleton("exceptionHandler", ApplicationExceptionHandler.class).     ctx.refresh().     DispatcherServlet servlet = new DispatcherServlet(ctx).     servlet.init(new MockServletConfig()).     try {         servlet.service(this.servletRequest, this.servletResponse).     } catch (ServletException ex) {         assertTrue(ex.getCause() instanceof IllegalStateException).         assertTrue(ex.getCause().getCause() instanceof ServletRequestBindingException).     } }
false;private;1;19;;private ResponseEntity<Object> testException(Exception ex) {     try {         ResponseEntity<Object> responseEntity = this.exceptionHandlerSupport.handleException(ex, this.request).         // SPR-9653         if (HttpStatus.INTERNAL_SERVER_ERROR.equals(responseEntity.getStatusCode())) {             assertSame(ex, this.servletRequest.getAttribute("javax.servlet.error.exception")).         }         this.defaultExceptionResolver.resolveException(this.servletRequest, this.servletResponse, null, ex).         assertEquals(this.servletResponse.getStatus(), responseEntity.getStatusCode().value()).         return responseEntity.     } catch (Exception ex2) {         throw new IllegalStateException("handleException threw exception", ex2).     } }
false;public;0;4;;@RequestMapping("/") public void handleRequest() throws Exception {     throw new ServletRequestBindingException("message"). }
false;public;0;4;;@RequestMapping("/") public void handleRequest() throws Exception {     throw new IllegalStateException(new ServletRequestBindingException("message")). }
false;protected;4;7;;@Override protected ResponseEntity<Object> handleServletRequestBindingException(ServletRequestBindingException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {     headers.set("someHeader", "someHeaderValue").     return handleExceptionInternal(ex, "error content", headers, status, request). }
false;;1;3;;@SuppressWarnings("unused") void handle(String arg) { }
