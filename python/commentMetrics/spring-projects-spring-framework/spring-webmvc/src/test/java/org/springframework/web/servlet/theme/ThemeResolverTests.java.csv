commented;modifiers;parameterAmount;loc;comment;code
false;private;3;25;;private void internalTest(ThemeResolver themeResolver, boolean shouldSet, String defaultName) {     // create mocks     MockServletContext context = new MockServletContext().     MockHttpServletRequest request = new MockHttpServletRequest(context).     MockHttpServletResponse response = new MockHttpServletResponse().     // check original theme     String themeName = themeResolver.resolveThemeName(request).     assertEquals(themeName, defaultName).     // set new theme name     try {         themeResolver.setThemeName(request, response, TEST_THEME_NAME).         if (!shouldSet)             fail("should not be able to set Theme name").         // check new theme namelocale         themeName = themeResolver.resolveThemeName(request).         assertEquals(TEST_THEME_NAME, themeName).         themeResolver.setThemeName(request, response, null).         themeName = themeResolver.resolveThemeName(request).         assertEquals(themeName, defaultName).     } catch (UnsupportedOperationException ex) {         if (shouldSet)             fail("should be able to set Theme name").     } }
false;public;0;4;;@Test public void fixedThemeResolver() {     internalTest(new FixedThemeResolver(), false, AbstractThemeResolver.ORIGINAL_DEFAULT_THEME_NAME). }
false;public;0;4;;@Test public void cookieThemeResolver() {     internalTest(new CookieThemeResolver(), true, AbstractThemeResolver.ORIGINAL_DEFAULT_THEME_NAME). }
false;public;0;4;;@Test public void sessionThemeResolver() {     internalTest(new SessionThemeResolver(), true, AbstractThemeResolver.ORIGINAL_DEFAULT_THEME_NAME). }
false;public;0;6;;@Test public void sessionThemeResolverWithDefault() {     SessionThemeResolver tr = new SessionThemeResolver().     tr.setDefaultThemeName(DEFAULT_TEST_THEME_NAME).     internalTest(tr, true, DEFAULT_TEST_THEME_NAME). }
