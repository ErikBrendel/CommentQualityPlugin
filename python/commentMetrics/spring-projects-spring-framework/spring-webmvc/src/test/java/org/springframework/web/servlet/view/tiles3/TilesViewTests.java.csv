commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before public void setUp() throws Exception {     MockServletContext servletContext = new MockServletContext().     StaticWebApplicationContext wac = new StaticWebApplicationContext().     wac.setServletContext(servletContext).     wac.refresh().     request = new MockHttpServletRequest().     request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac).     response = new MockHttpServletResponse().     renderer = mock(Renderer.class).     view = new TilesView().     view.setServletContext(servletContext).     view.setRenderer(renderer).     view.setUrl(VIEW_PATH).     view.afterPropertiesSet(). }
false;public;0;8;;@Test public void render() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("modelAttribute", "modelValue").     view.render(model, request, response).     assertEquals("modelValue", request.getAttribute("modelAttribute")).     verify(renderer).render(eq(VIEW_PATH), isA(Request.class)). }
false;public;0;5;;@Test public void alwaysIncludeDefaults() throws Exception {     view.render(new HashMap<>(), request, response).     assertNull(request.getAttribute(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME)). }
false;public;0;6;;@Test public void alwaysIncludeEnabled() throws Exception {     view.setAlwaysInclude(true).     view.render(new HashMap<>(), request, response).     assertTrue((Boolean) request.getAttribute(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME)). }
