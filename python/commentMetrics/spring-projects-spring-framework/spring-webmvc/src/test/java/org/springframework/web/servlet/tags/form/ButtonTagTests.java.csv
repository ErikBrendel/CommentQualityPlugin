commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected void onSetUp() {     this.tag = createTag(getWriter()).     this.tag.setParent(getFormTag()).     this.tag.setPageContext(getPageContext()).     this.tag.setId("My Id").     this.tag.setName("My Name").     this.tag.setValue("My Button"). }
false;public;0;15;;@Test public void buttonTag() throws Exception {     assertEquals(Tag.EVAL_BODY_INCLUDE, this.tag.doStartTag()).     assertEquals(Tag.EVAL_PAGE, this.tag.doEndTag()).     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "id", "My Id").     assertContainsAttribute(output, "name", "My Name").     assertContainsAttribute(output, "type", "submit").     assertContainsAttribute(output, "value", "My Button").     assertAttributeNotPresent(output, "disabled"). }
false;public;0;13;;@Test public void disabled() throws Exception {     this.tag.setDisabled(true).     this.tag.doStartTag().     this.tag.doEndTag().     String output = getOutput().     assertTagOpened(output).     assertTagClosed(output).     assertContainsAttribute(output, "disabled", "disabled"). }
false;protected;0;4;;@Override protected TestBean createTestBean() {     return new TestBean(). }
false;protected,final;1;3;;protected final void assertTagClosed(String output) {     assertTrue("Tag not closed properly", output.endsWith("</button>")). }
false;protected,final;1;3;;protected final void assertTagOpened(String output) {     assertTrue("Tag not opened properly", output.startsWith("<button ")). }
false;protected;0;4;;@Override protected TagWriter createTagWriter() {     return new TagWriter(writer). }
false;protected;1;9;;@SuppressWarnings("serial") protected ButtonTag createTag(final Writer writer) {     return new ButtonTag() {          @Override         protected TagWriter createTagWriter() {             return new TagWriter(writer).         }     }. }
