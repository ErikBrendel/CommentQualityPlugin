commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() throws Exception {     context = createPageContext().     FormattingConversionServiceFactoryBean factory = new FormattingConversionServiceFactoryBean().     factory.afterPropertiesSet().     context.getRequest().setAttribute("org.springframework.core.convert.ConversionService", factory.getObject()).     context.getRequest().setAttribute("bean", new Bean()).     tag = new EvalTag().     tag.setPageContext(context). }
false;public;0;9;;@Test public void printScopedAttributeResult() throws Exception {     tag.setExpression("bean.method()").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("foo", ((MockHttpServletResponse) context.getResponse()).getContentAsString()). }
false;public;0;9;;@Test public void printNullAsEmptyString() throws Exception {     tag.setExpression("bean.null").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("", ((MockHttpServletResponse) context.getResponse()).getContentAsString()). }
false;public;0;11;;@Test public void printFormattedScopedAttributeResult() throws Exception {     PercentStyleFormatter formatter = new PercentStyleFormatter().     tag.setExpression("bean.formattable").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals(formatter.print(new BigDecimal(".25"), Locale.getDefault()), ((MockHttpServletResponse) context.getResponse()).getContentAsString()). }
false;public;0;10;;@Test public void printHtmlEscapedAttributeResult() throws Exception {     tag.setExpression("bean.html()").     tag.setHtmlEscape(true).     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("&lt.p&gt.", ((MockHttpServletResponse) context.getResponse()).getContentAsString()). }
false;public;0;11;;@Test public void printJavaScriptEscapedAttributeResult() throws Exception {     tag.setExpression("bean.js()").     tag.setJavaScriptEscape(true).     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("function foo() { alert(\\\"hi\\\") }", ((MockHttpServletResponse) context.getResponse()).getContentAsString()). }
false;public;0;10;;@Test public void setFormattedScopedAttributeResult() throws Exception {     tag.setExpression("bean.formattable").     tag.setVar("foo").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals(new BigDecimal(".25"), context.getAttribute("foo")). }
false;public;0;10;;// SPR-6923 @Test public void nestedPropertyWithAttributeName() throws Exception {     tag.setExpression("bean.bean").     tag.setVar("foo").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("not the bean object", context.getAttribute("foo")). }
false;public;0;13;;@Test public void accessUsingBeanSyntax() throws Exception {     GenericApplicationContext wac = (GenericApplicationContext) context.getRequest().getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE).     wac.getDefaultListableBeanFactory().registerSingleton("bean2", context.getRequest().getAttribute("bean")).     tag.setExpression("@bean2.bean").     tag.setVar("foo").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("not the bean object", context.getAttribute("foo")). }
false;public;0;15;;@Test public void environmentAccess() throws Exception {     Map<String, Object> map = new HashMap<>().     map.put("key.foo", "value.foo").     GenericApplicationContext wac = (GenericApplicationContext) context.getRequest().getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE).     wac.getEnvironment().getPropertySources().addFirst(new MapPropertySource("mapSource", map)).     wac.getDefaultListableBeanFactory().registerSingleton("bean2", context.getRequest().getAttribute("bean")).     tag.setExpression("@environment['key.foo']").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("value.foo", ((MockHttpServletResponse) context.getResponse()).getContentAsString()). }
false;public;0;9;;@Test public void mapAccess() throws Exception {     tag.setExpression("bean.map.key").     int action = tag.doStartTag().     assertEquals(Tag.EVAL_BODY_INCLUDE, action).     action = tag.doEndTag().     assertEquals(Tag.EVAL_PAGE, action).     assertEquals("value", ((MockHttpServletResponse) context.getResponse()).getContentAsString()). }
false;public;0;3;;public String method() {     return "foo". }
false;public;0;4;;@NumberFormat(style = Style.PERCENT) public BigDecimal getFormattable() {     return new BigDecimal(".25"). }
false;public;0;3;;public String html() {     return "<p>". }
false;public;0;3;;public String getBean() {     return "not the bean object". }
false;public;0;3;;public Object getNull() {     return null. }
false;public;0;3;;public String js() {     return "function foo() { alert(\"hi\") }". }
false;public;0;5;;public Map<String, Object> getMap() {     Map<String, Object> map = new HashMap<>().     map.put("key", "value").     return map. }
