commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@BeforeClass public static void setupOnce() {     ExceptionHandlerExceptionResolver resolver = new ExceptionHandlerExceptionResolver().     resolver.afterPropertiesSet().     RESOLVER_COUNT = resolver.getArgumentResolvers().getResolvers().size().     HANDLER_COUNT = resolver.getReturnValueHandlers().getHandlers().size(). }
false;public;0;8;;@Before public void setup() throws Exception {     this.resolver = new ExceptionHandlerExceptionResolver().     this.resolver.setWarnLogCategory(this.resolver.getClass().getName()).     this.request = new MockHttpServletRequest("GET", "/").     this.request.setAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap()).     this.response = new MockHttpServletResponse(). }
false;public;0;7;;@Test public void nullHandler() {     Object handler = null.     this.resolver.afterPropertiesSet().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handler, null).     assertNull("Exception can be resolved only if there is a HandlerMethod", mav). }
false;public;0;9;;@Test public void setCustomArgumentResolvers() {     HandlerMethodArgumentResolver resolver = new ServletRequestMethodArgumentResolver().     this.resolver.setCustomArgumentResolvers(Collections.singletonList(resolver)).     this.resolver.afterPropertiesSet().     assertTrue(this.resolver.getArgumentResolvers().getResolvers().contains(resolver)).     assertMethodProcessorCount(RESOLVER_COUNT + 1, HANDLER_COUNT). }
false;public;0;8;;@Test public void setArgumentResolvers() {     HandlerMethodArgumentResolver resolver = new ServletRequestMethodArgumentResolver().     this.resolver.setArgumentResolvers(Collections.singletonList(resolver)).     this.resolver.afterPropertiesSet().     assertMethodProcessorCount(1, HANDLER_COUNT). }
false;public;0;9;;@Test public void setCustomReturnValueHandlers() {     HandlerMethodReturnValueHandler handler = new ViewNameMethodReturnValueHandler().     this.resolver.setCustomReturnValueHandlers(Collections.singletonList(handler)).     this.resolver.afterPropertiesSet().     assertTrue(this.resolver.getReturnValueHandlers().getHandlers().contains(handler)).     assertMethodProcessorCount(RESOLVER_COUNT, HANDLER_COUNT + 1). }
false;public;0;8;;@Test public void setReturnValueHandlers() {     HandlerMethodReturnValueHandler handler = new ModelMethodProcessor().     this.resolver.setReturnValueHandlers(Collections.singletonList(handler)).     this.resolver.afterPropertiesSet().     assertMethodProcessorCount(RESOLVER_COUNT, 1). }
false;public;0;9;;@Test public void resolveNoExceptionHandlerForException() throws NoSuchMethodException {     Exception npe = new NullPointerException().     HandlerMethod handlerMethod = new HandlerMethod(new IoExceptionController(), "handle").     this.resolver.afterPropertiesSet().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, npe).     assertNull("NPE should not have been handled", mav). }
false;public;0;12;;@Test public void resolveExceptionModelAndView() throws NoSuchMethodException {     IllegalArgumentException ex = new IllegalArgumentException("Bad argument").     HandlerMethod handlerMethod = new HandlerMethod(new ModelAndViewController(), "handle").     this.resolver.afterPropertiesSet().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull(mav).     assertFalse(mav.isEmpty()).     assertEquals("errorView", mav.getViewName()).     assertEquals("Bad argument", mav.getModel().get("detail")). }
false;public;0;11;;@Test public void resolveExceptionResponseBody() throws UnsupportedEncodingException, NoSuchMethodException {     IllegalArgumentException ex = new IllegalArgumentException().     HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle").     this.resolver.afterPropertiesSet().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull(mav).     assertTrue(mav.isEmpty()).     assertEquals("IllegalArgumentException", this.response.getContentAsString()). }
false;public;0;11;;@Test public void resolveExceptionResponseWriter() throws Exception {     IllegalArgumentException ex = new IllegalArgumentException().     HandlerMethod handlerMethod = new HandlerMethod(new ResponseWriterController(), "handle").     this.resolver.afterPropertiesSet().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull(mav).     assertTrue(mav.isEmpty()).     assertEquals("IllegalArgumentException", this.response.getContentAsString()). }
false;public;0;11;;// SPR-13546 @Test public void resolveExceptionModelAtArgument() throws Exception {     IllegalArgumentException ex = new IllegalArgumentException().     HandlerMethod handlerMethod = new HandlerMethod(new ModelArgumentController(), "handle").     this.resolver.afterPropertiesSet().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull(mav).     assertEquals(1, mav.getModelMap().size()).     assertEquals("IllegalArgumentException", mav.getModelMap().get("exceptionClassName")). }
false;public;0;13;;// SPR-14651 @Test public void resolveRedirectAttributesAtArgument() throws Exception {     IllegalArgumentException ex = new IllegalArgumentException().     HandlerMethod handlerMethod = new HandlerMethod(new RedirectAttributesController(), "handle").     this.resolver.afterPropertiesSet().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull(mav).     assertEquals("redirect:/", mav.getViewName()).     FlashMap flashMap = (FlashMap) this.request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE).     assertNotNull("output FlashMap should exist", flashMap).     assertEquals("IllegalArgumentException", flashMap.get("exceptionClassName")). }
false;public;0;14;;@Test public void resolveExceptionGlobalHandler() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     IllegalAccessException ex = new IllegalAccessException().     HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle").     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals("AnotherTestExceptionResolver: IllegalAccessException", this.response.getContentAsString()). }
false;public;0;14;;@Test public void resolveExceptionGlobalHandlerOrdered() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     IllegalStateException ex = new IllegalStateException().     HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle").     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals("TestExceptionResolver: IllegalStateException", this.response.getContentAsString()). }
false;public;0;14;;// SPR-12605 @Test public void resolveExceptionWithHandlerMethodArg() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     ArrayIndexOutOfBoundsException ex = new ArrayIndexOutOfBoundsException().     HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle").     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals("HandlerMethod: handle", this.response.getContentAsString()). }
false;public;0;15;;@Test public void resolveExceptionWithAssertionError() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     AssertionError err = new AssertionError("argh").     HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle").     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, new NestedServletException("Handler dispatch failed", err)).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals(err.toString(), this.response.getContentAsString()). }
false;public;0;15;;@Test public void resolveExceptionWithAssertionErrorAsRootCause() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     AssertionError err = new AssertionError("argh").     FatalBeanException ex = new FatalBeanException("wrapped", err).     HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle").     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals(err.toString(), this.response.getContentAsString()). }
false;public;0;14;;@Test public void resolveExceptionControllerAdviceHandler() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyControllerAdviceConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     IllegalStateException ex = new IllegalStateException().     HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle").     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals("BasePackageTestExceptionResolver: IllegalStateException", this.response.getContentAsString()). }
false;public;0;13;;@Test public void resolveExceptionControllerAdviceNoHandler() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyControllerAdviceConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     IllegalStateException ex = new IllegalStateException().     ModelAndView mav = this.resolver.resolveException(this.request, this.response, null, ex).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals("DefaultTestExceptionResolver: IllegalStateException", this.response.getContentAsString()). }
false;public;0;14;;// SPR-16496 @Test public void resolveExceptionControllerAdviceAgainstProxy() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyControllerAdviceConfig.class).     this.resolver.setApplicationContext(ctx).     this.resolver.afterPropertiesSet().     IllegalStateException ex = new IllegalStateException().     HandlerMethod handlerMethod = new HandlerMethod(new ProxyFactory(new ResponseBodyController()).getProxy(), "handle").     ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex).     assertNotNull("Exception was not handled", mav).     assertTrue(mav.isEmpty()).     assertEquals("BasePackageTestExceptionResolver: IllegalStateException", this.response.getContentAsString()). }
false;private;2;4;;private void assertMethodProcessorCount(int resolverCount, int handlerCount) {     assertEquals(resolverCount, this.resolver.getArgumentResolvers().getResolvers().size()).     assertEquals(handlerCount, this.resolver.getReturnValueHandlers().getHandlers().size()). }
false;public;0;1;;public void handle() { }
false;public;1;4;;@ExceptionHandler public ModelAndView handle(Exception ex) throws IOException {     return new ModelAndView("errorView", "detail", ex.getMessage()). }
false;public;0;1;;public void handle() { }
false;public;2;4;;@ExceptionHandler public void handleException(Exception ex, Writer writer) throws IOException {     writer.write(ClassUtils.getShortName(ex.getClass())). }
false;;0;1;;void handle().
false;;1;3;;@ExceptionHandler @ResponseBody String handleException(IllegalArgumentException ex).
false;public;0;1;;public void handle() { }
false;public;1;5;;@ExceptionHandler @ResponseBody public String handleException(IllegalArgumentException ex) {     return ClassUtils.getShortName(ex.getClass()). }
false;public;0;1;;public void handle() { }
false;public;0;3;;@ExceptionHandler(value = IOException.class) public void handleException() { }
false;public;0;1;;public void handle() { }
false;public;2;4;;@ExceptionHandler public void handleException(Exception ex, Model model) {     model.addAttribute("exceptionClassName", ClassUtils.getShortName(ex.getClass())). }
false;public;0;1;;public void handle() { }
false;public;2;5;;@ExceptionHandler public String handleException(Exception ex, RedirectAttributes redirectAttributes) {     redirectAttributes.addFlashAttribute("exceptionClassName", ClassUtils.getShortName(ex.getClass())).     return "redirect:/". }
false;public;1;4;;@ExceptionHandler public String handleException(IllegalStateException ex) {     return "TestExceptionResolver: " + ClassUtils.getShortName(ex.getClass()). }
false;public;1;4;;@ExceptionHandler(ArrayIndexOutOfBoundsException.class) public String handleWithHandlerMethod(HandlerMethod handlerMethod) {     return "HandlerMethod: " + handlerMethod.getMethod().getName(). }
false;public;1;4;;@ExceptionHandler(AssertionError.class) public String handleAssertionError(Error err) {     return err.toString(). }
false;public;1;4;;@ExceptionHandler({ IllegalStateException.class, IllegalAccessException.class }) public String handleException(Exception ex) {     return "AnotherTestExceptionResolver: " + ClassUtils.getShortName(ex.getClass()). }
false;public;0;4;;@Bean public TestExceptionResolver testExceptionResolver() {     return new TestExceptionResolver(). }
false;public;0;4;;@Bean public AnotherTestExceptionResolver anotherTestExceptionResolver() {     return new AnotherTestExceptionResolver(). }
false;public;1;4;;@ExceptionHandler public String handleException(IllegalStateException ex) {     return "NotCalledTestExceptionResolver: " + ClassUtils.getShortName(ex.getClass()). }
false;public;1;4;;@ExceptionHandler public String handleException(IllegalStateException ex) {     return "BasePackageTestExceptionResolver: " + ClassUtils.getShortName(ex.getClass()). }
false;public;1;4;;@ExceptionHandler public String handleException(IllegalStateException ex) {     return "DefaultTestExceptionResolver: " + ClassUtils.getShortName(ex.getClass()). }
false;public;0;4;;@Bean public NotCalledTestExceptionResolver notCalledTestExceptionResolver() {     return new NotCalledTestExceptionResolver(). }
false;public;0;4;;@Bean public BasePackageTestExceptionResolver basePackageTestExceptionResolver() {     return new BasePackageTestExceptionResolver(). }
false;public;0;4;;@Bean public DefaultTestExceptionResolver defaultTestExceptionResolver() {     return new DefaultTestExceptionResolver(). }
