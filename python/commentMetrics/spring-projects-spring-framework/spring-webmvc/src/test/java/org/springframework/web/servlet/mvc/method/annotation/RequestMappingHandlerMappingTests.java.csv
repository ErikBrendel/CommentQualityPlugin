commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void useRegisteredSuffixPatternMatch() {     assertTrue(this.handlerMapping.useSuffixPatternMatch()).     assertFalse(this.handlerMapping.useRegisteredSuffixPatternMatch()).     Map<String, MediaType> fileExtensions = Collections.singletonMap("json", MediaType.APPLICATION_JSON).     PathExtensionContentNegotiationStrategy strategy = new PathExtensionContentNegotiationStrategy(fileExtensions).     ContentNegotiationManager manager = new ContentNegotiationManager(strategy).     this.handlerMapping.setContentNegotiationManager(manager).     this.handlerMapping.setUseRegisteredSuffixPatternMatch(true).     this.handlerMapping.afterPropertiesSet().     assertTrue(this.handlerMapping.useSuffixPatternMatch()).     assertTrue(this.handlerMapping.useRegisteredSuffixPatternMatch()).     assertEquals(Arrays.asList("json"), this.handlerMapping.getFileExtensions()). }
false;protected;2;5;;@Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {     extensions.addAll(getFileExtensions()).     return super.getMappingForMethod(method, handlerType). }
false;public;0;26;;@Test public void useRegisteredSuffixPatternMatchInitialization() {     Map<String, MediaType> fileExtensions = Collections.singletonMap("json", MediaType.APPLICATION_JSON).     PathExtensionContentNegotiationStrategy strategy = new PathExtensionContentNegotiationStrategy(fileExtensions).     ContentNegotiationManager manager = new ContentNegotiationManager(strategy).     final Set<String> extensions = new HashSet<>().     RequestMappingHandlerMapping hm = new RequestMappingHandlerMapping() {          @Override         protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {             extensions.addAll(getFileExtensions()).             return super.getMappingForMethod(method, handlerType).         }     }.     wac.registerSingleton("testController", ComposedAnnotationController.class).     wac.refresh().     hm.setContentNegotiationManager(manager).     hm.setUseRegisteredSuffixPatternMatch(true).     hm.setApplicationContext(wac).     hm.afterPropertiesSet().     assertEquals(Collections.singleton("json"), extensions). }
false;public;0;15;;@Test public void useSuffixPatternMatch() {     assertTrue(this.handlerMapping.useSuffixPatternMatch()).     this.handlerMapping.setUseSuffixPatternMatch(false).     assertFalse(this.handlerMapping.useSuffixPatternMatch()).     this.handlerMapping.setUseRegisteredSuffixPatternMatch(false).     assertFalse("'false' registeredSuffixPatternMatch shouldn't impact suffixPatternMatch", this.handlerMapping.useSuffixPatternMatch()).     this.handlerMapping.setUseRegisteredSuffixPatternMatch(true).     assertTrue("'true' registeredSuffixPatternMatch should enable suffixPatternMatch", this.handlerMapping.useSuffixPatternMatch()). }
false;public;0;11;;@Test public void resolveEmbeddedValuesInPatterns() {     this.handlerMapping.setEmbeddedValueResolver(value -> "/${pattern}/bar".equals(value) ? "/foo/bar" : value).     String[] patterns = new String[] { "/foo", "/${pattern}/bar" }.     String[] result = this.handlerMapping.resolveEmbeddedValuesInPatterns(patterns).     assertArrayEquals(new String[] { "/foo", "/foo/bar" }, result). }
false;public;0;12;;@Test public void pathPrefix() throws NoSuchMethodException {     this.handlerMapping.setEmbeddedValueResolver(value -> "/${prefix}".equals(value) ? "/api" : value).     this.handlerMapping.setPathPrefixes(Collections.singletonMap("/${prefix}", HandlerTypePredicate.forAnnotation(RestController.class))).     Method method = UserController.class.getMethod("getUser").     RequestMappingInfo info = this.handlerMapping.getMappingForMethod(method, UserController.class).     assertNotNull(info).     assertEquals(Collections.singleton("/api/user/{id}"), info.getPatternsCondition().getPatterns()). }
false;public;0;9;;@Test public void resolveRequestMappingViaComposedAnnotation() throws Exception {     RequestMappingInfo info = assertComposedAnnotationMapping("postJson", "/postJson", RequestMethod.POST).     assertEquals(MediaType.APPLICATION_JSON_VALUE, info.getConsumesCondition().getConsumableMediaTypes().iterator().next().toString()).     assertEquals(MediaType.APPLICATION_JSON_VALUE, info.getProducesCondition().getProducibleMediaTypes().iterator().next().toString()). }
false;public;0;7;;// SPR-14988 @Test public void getMappingOverridesConsumesFromTypeLevelAnnotation() throws Exception {     RequestMappingInfo requestMappingInfo = assertComposedAnnotationMapping(RequestMethod.GET).     assertArrayEquals(new MediaType[] { MediaType.ALL }, new ArrayList<>(requestMappingInfo.getConsumesCondition().getConsumableMediaTypes()).toArray()). }
false;public;0;4;;@Test public void getMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.GET). }
false;public;0;4;;@Test public void postMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.POST). }
false;public;0;4;;@Test public void putMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.PUT). }
false;public;0;4;;@Test public void deleteMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.DELETE). }
false;public;0;4;;@Test public void patchMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.PATCH). }
false;private;1;6;;private RequestMappingInfo assertComposedAnnotationMapping(RequestMethod requestMethod) throws Exception {     String methodName = requestMethod.name().toLowerCase().     String path = "/" + methodName.     return assertComposedAnnotationMapping(methodName, path, requestMethod). }
false;private;3;19;;private RequestMappingInfo assertComposedAnnotationMapping(String methodName, String path, RequestMethod requestMethod) throws Exception {     Class<?> clazz = ComposedAnnotationController.class.     Method method = clazz.getMethod(methodName).     RequestMappingInfo info = this.handlerMapping.getMappingForMethod(method, clazz).     assertNotNull(info).     Set<String> paths = info.getPatternsCondition().getPatterns().     assertEquals(1, paths.size()).     assertEquals(path, paths.iterator().next()).     Set<RequestMethod> methods = info.getMethodsCondition().getMethods().     assertEquals(1, methods.size()).     assertEquals(requestMethod, methods.iterator().next()).     return info. }
false;public;0;3;;@RequestMapping public void handle() { }
false;public;0;3;;@PostJson("/postJson") public void postJson() { }
false;public;0;3;;@GetMapping(value = "/get", consumes = MediaType.ALL_VALUE) public void get() { }
false;public;0;3;;@PostMapping("/post") public void post() { }
false;public;0;3;;@PutMapping("/put") public void put() { }
false;public;0;3;;@DeleteMapping("/delete") public void delete() { }
false;public;0;3;;@PatchMapping("/patch") public void patch() { }
false;public;0;4;;@GetMapping("/{id}") public Principal getUser() {     return mock(Principal.class). }
