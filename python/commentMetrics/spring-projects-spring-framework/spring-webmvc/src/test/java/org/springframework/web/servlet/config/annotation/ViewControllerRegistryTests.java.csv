commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.registry = new ViewControllerRegistry(new StaticApplicationContext()).     this.request = new MockHttpServletRequest("GET", "/").     this.response = new MockHttpServletResponse(). }
false;public;0;4;;@Test public void noViewControllers() {     assertNull(this.registry.buildHandlerMapping()). }
false;public;0;10;;@Test public void addViewController() {     this.registry.addViewController("/path").setViewName("viewName").     ParameterizableViewController controller = getController("/path").     assertEquals("viewName", controller.getViewName()).     assertNull(controller.getStatusCode()).     assertFalse(controller.isStatusOnly()).     assertNotNull(controller.getApplicationContext()). }
false;public;0;10;;@Test public void addViewControllerWithDefaultViewName() {     this.registry.addViewController("/path").     ParameterizableViewController controller = getController("/path").     assertNull(controller.getViewName()).     assertNull(controller.getStatusCode()).     assertFalse(controller.isStatusOnly()).     assertNotNull(controller.getApplicationContext()). }
false;public;0;12;;@Test public void addRedirectViewController() throws Exception {     this.registry.addRedirectViewController("/path", "/redirectTo").     RedirectView redirectView = getRedirectView("/path").     this.request.setQueryString("a=b").     this.request.setContextPath("/context").     redirectView.render(Collections.emptyMap(), this.request, this.response).     assertEquals(302, this.response.getStatus()).     assertEquals("/context/redirectTo", this.response.getRedirectedUrl()).     assertNotNull(redirectView.getApplicationContext()). }
false;public;0;16;;@Test public void addRedirectViewControllerWithCustomSettings() throws Exception {     this.registry.addRedirectViewController("/path", "/redirectTo").setContextRelative(false).setKeepQueryParams(true).setStatusCode(HttpStatus.PERMANENT_REDIRECT).     RedirectView redirectView = getRedirectView("/path").     this.request.setQueryString("a=b").     this.request.setContextPath("/context").     redirectView.render(Collections.emptyMap(), this.request, this.response).     assertEquals(308, this.response.getStatus()).     assertEquals("/redirectTo?a=b", response.getRedirectedUrl()).     assertNotNull(redirectView.getApplicationContext()). }
false;public;0;10;;@Test public void addStatusController() {     this.registry.addStatusController("/path", HttpStatus.NOT_FOUND).     ParameterizableViewController controller = getController("/path").     assertNull(controller.getViewName()).     assertEquals(HttpStatus.NOT_FOUND, controller.getStatusCode()).     assertTrue(controller.isStatusOnly()).     assertNotNull(controller.getApplicationContext()). }
false;public;0;10;;@Test public void order() {     this.registry.addViewController("/path").     SimpleUrlHandlerMapping handlerMapping = this.registry.buildHandlerMapping().     assertEquals(1, handlerMapping.getOrder()).     this.registry.setOrder(2).     handlerMapping = this.registry.buildHandlerMapping().     assertEquals(2, handlerMapping.getOrder()). }
false;private;1;6;;private ParameterizableViewController getController(String path) {     Map<String, ?> urlMap = this.registry.buildHandlerMapping().getUrlMap().     ParameterizableViewController controller = (ParameterizableViewController) urlMap.get(path).     assertNotNull(controller).     return controller. }
false;private;1;7;;private RedirectView getRedirectView(String path) {     ParameterizableViewController controller = getController(path).     assertNull(controller.getViewName()).     assertNotNull(controller.getView()).     assertEquals(RedirectView.class, controller.getView().getClass()).     return (RedirectView) controller.getView(). }
