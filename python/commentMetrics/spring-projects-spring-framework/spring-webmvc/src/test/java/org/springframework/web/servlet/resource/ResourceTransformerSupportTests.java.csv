commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void setUp() {     VersionResourceResolver versionResolver = new VersionResourceResolver().     versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy())).     PathResourceResolver pathResolver = new PathResourceResolver().     pathResolver.setAllowedLocations(new ClassPathResource("test/", getClass())).     List<ResourceResolver> resolvers = new ArrayList<>().     resolvers.add(versionResolver).     resolvers.add(pathResolver).     this.transformerChain = new DefaultResourceTransformerChain(new DefaultResourceResolverChain(resolvers), null).     this.transformer = new TestResourceTransformerSupport().     this.transformer.setResourceUrlProvider(createUrlProvider(resolvers)). }
false;private;1;9;;private ResourceUrlProvider createUrlProvider(List<ResourceResolver> resolvers) {     ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler().     handler.setLocations(Collections.singletonList(new ClassPathResource("test/", getClass()))).     handler.setResourceResolvers(resolvers).     ResourceUrlProvider urlProvider = new ResourceUrlProvider().     urlProvider.setHandlerMap(Collections.singletonMap("/resources/**", handler)).     return urlProvider. }
false;public;0;11;;@Test public void resolveUrlPath() {     this.request.setRequestURI("/context/servlet/resources/main.css").     this.request.setContextPath("/context").     this.request.setServletPath("/servlet").     String resourcePath = "/context/servlet/resources/bar.css".     Resource resource = getResource("main.css").     String actual = this.transformer.resolveUrlPath(resourcePath, this.request, resource, this.transformerChain).     assertEquals("/context/servlet/resources/bar-11e16cf79faee7ac698c805cf28248d2.css", actual). }
false;public;0;7;;@Test public void resolveUrlPathWithRelativePath() {     Resource resource = getResource("main.css").     String actual = this.transformer.resolveUrlPath("bar.css", this.request, resource, this.transformerChain).     assertEquals("bar-11e16cf79faee7ac698c805cf28248d2.css", actual). }
false;public;0;7;;@Test public void resolveUrlPathWithRelativePathInParentDirectory() {     Resource resource = getResource("images/image.png").     String actual = this.transformer.resolveUrlPath("../bar.css", this.request, resource, this.transformerChain).     assertEquals("../bar-11e16cf79faee7ac698c805cf28248d2.css", actual). }
false;public;0;10;;@Test public void toAbsolutePath() {     String absolute = this.transformer.toAbsolutePath("img/image.png", new MockHttpServletRequest("GET", "/resources/style.css")).     assertEquals("/resources/img/image.png", absolute).     absolute = this.transformer.toAbsolutePath("/img/image.png", new MockHttpServletRequest("GET", "/resources/style.css")).     assertEquals("/img/image.png", absolute). }
false;private;1;3;;private Resource getResource(String filePath) {     return new ClassPathResource("test/" + filePath, getClass()). }
false;public;3;4;;@Override public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain chain) {     throw new IllegalStateException("Should never be called"). }
