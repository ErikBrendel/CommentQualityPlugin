commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     StaticWebApplicationContext context = new StaticWebApplicationContext().     this.handlerMapping = new TestHandlerMapping().     this.handlerMapping.setApplicationContext(context).     this.request = new MockHttpServletRequest().     this.request.setRemoteHost("domain1.com"). }
false;public;0;10;;@Test public void actualRequestWithoutCorsConfigurationProvider() throws Exception {     this.request.setMethod(RequestMethod.GET.name()).     this.request.setRequestURI("/foo").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertTrue(chain.getHandler() instanceof SimpleHandler). }
false;public;0;11;;@Test public void preflightRequestWithoutCorsConfigurationProvider() throws Exception {     this.request.setMethod(RequestMethod.OPTIONS.name()).     this.request.setRequestURI("/foo").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertNotNull(chain.getHandler()).     assertTrue(chain.getHandler().getClass().getSimpleName().equals("PreFlightHandler")). }
false;public;0;13;;@Test public void actualRequestWithCorsConfigurationProvider() throws Exception {     this.request.setMethod(RequestMethod.GET.name()).     this.request.setRequestURI("/cors").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertTrue(chain.getHandler() instanceof CorsAwareHandler).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(config.getAllowedOrigins().toArray(), new String[] { "*" }). }
false;public;0;14;;@Test public void preflightRequestWithCorsConfigurationProvider() throws Exception {     this.request.setMethod(RequestMethod.OPTIONS.name()).     this.request.setRequestURI("/cors").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertNotNull(chain.getHandler()).     assertTrue(chain.getHandler().getClass().getSimpleName().equals("PreFlightHandler")).     CorsConfiguration config = getCorsConfiguration(chain, true).     assertNotNull(config).     assertArrayEquals(config.getAllowedOrigins().toArray(), new String[] { "*" }). }
false;public;0;16;;@Test public void actualRequestWithMappedCorsConfiguration() throws Exception {     CorsConfiguration config = new CorsConfiguration().     config.addAllowedOrigin("*").     this.handlerMapping.setCorsConfigurations(Collections.singletonMap("/foo", config)).     this.request.setMethod(RequestMethod.GET.name()).     this.request.setRequestURI("/foo").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertTrue(chain.getHandler() instanceof SimpleHandler).     config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(config.getAllowedOrigins().toArray(), new String[] { "*" }). }
false;public;0;17;;@Test public void preflightRequestWithMappedCorsConfiguration() throws Exception {     CorsConfiguration config = new CorsConfiguration().     config.addAllowedOrigin("*").     this.handlerMapping.setCorsConfigurations(Collections.singletonMap("/foo", config)).     this.request.setMethod(RequestMethod.OPTIONS.name()).     this.request.setRequestURI("/foo").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertNotNull(chain.getHandler()).     assertTrue(chain.getHandler().getClass().getSimpleName().equals("PreFlightHandler")).     config = getCorsConfiguration(chain, true).     assertNotNull(config).     assertArrayEquals(config.getAllowedOrigins().toArray(), new String[] { "*" }). }
false;public;0;15;;@Test public void actualRequestWithCorsConfigurationSource() throws Exception {     this.handlerMapping.setCorsConfigurationSource(new CustomCorsConfigurationSource()).     this.request.setMethod(RequestMethod.GET.name()).     this.request.setRequestURI("/foo").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertTrue(chain.getHandler() instanceof SimpleHandler).     CorsConfiguration config = getCorsConfiguration(chain, false).     assertNotNull(config).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertEquals(true, config.getAllowCredentials()). }
false;public;0;16;;@Test public void preflightRequestWithCorsConfigurationSource() throws Exception {     this.handlerMapping.setCorsConfigurationSource(new CustomCorsConfigurationSource()).     this.request.setMethod(RequestMethod.OPTIONS.name()).     this.request.setRequestURI("/foo").     this.request.addHeader(HttpHeaders.ORIGIN, "http://domain2.com").     this.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     HandlerExecutionChain chain = handlerMapping.getHandler(this.request).     assertNotNull(chain).     assertNotNull(chain.getHandler()).     assertTrue(chain.getHandler().getClass().getSimpleName().equals("PreFlightHandler")).     CorsConfiguration config = getCorsConfiguration(chain, true).     assertNotNull(config).     assertArrayEquals(new String[] { "*" }, config.getAllowedOrigins().toArray()).     assertEquals(true, config.getAllowCredentials()). }
false;private;2;20;;private CorsConfiguration getCorsConfiguration(HandlerExecutionChain chain, boolean isPreFlightRequest) {     if (isPreFlightRequest) {         Object handler = chain.getHandler().         assertTrue(handler.getClass().getSimpleName().equals("PreFlightHandler")).         DirectFieldAccessor accessor = new DirectFieldAccessor(handler).         return (CorsConfiguration) accessor.getPropertyValue("config").     } else {         HandlerInterceptor[] interceptors = chain.getInterceptors().         if (interceptors != null) {             for (HandlerInterceptor interceptor : interceptors) {                 if (interceptor.getClass().getSimpleName().equals("CorsInterceptor")) {                     DirectFieldAccessor accessor = new DirectFieldAccessor(interceptor).                     return (CorsConfiguration) accessor.getPropertyValue("config").                 }             }         }     }     return null. }
false;protected;1;7;;@Override protected Object getHandlerInternal(HttpServletRequest request) throws Exception {     if (request.getRequestURI().equals("/cors")) {         return new CorsAwareHandler().     }     return new SimpleHandler(). }
false;public;2;6;;@Override public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     response.setStatus(HttpStatus.OK.value()). }
false;public;1;6;;@Override public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {     CorsConfiguration config = new CorsConfiguration().     config.addAllowedOrigin("*").     return config. }
false;public;1;7;;@Override public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {     CorsConfiguration config = new CorsConfiguration().     config.addAllowedOrigin("*").     config.setAllowCredentials(true).     return config. }
