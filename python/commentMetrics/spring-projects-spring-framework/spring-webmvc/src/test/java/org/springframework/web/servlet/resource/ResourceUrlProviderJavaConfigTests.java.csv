commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before @SuppressWarnings("resource") public void setup() throws Exception {     AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().     context.setServletContext(new MockServletContext()).     context.register(WebConfig.class).     context.refresh().     this.request = new MockHttpServletRequest("GET", "/").     this.request.setContextPath("/myapp").     this.response = new MockHttpServletResponse().     this.filterChain = new MockFilterChain(this.servlet, new ResourceUrlEncodingFilter(), (request, response, chain) -> {         Object urlProvider = context.getBean(ResourceUrlProvider.class).         request.setAttribute(ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR, urlProvider).         chain.doFilter(request, response).     }). }
false;public;0;9;;@Test public void resolvePathWithServletMappedAsRoot() throws Exception {     this.request.setRequestURI("/myapp/index").     this.request.setServletPath("/index").     this.filterChain.doFilter(this.request, this.response).     assertEquals("/myapp/resources/foo-e36d2e05253c6c7085a91522ce43a0b4.css", resolvePublicResourceUrlPath("/myapp/resources/foo.css")). }
false;public;0;9;;@Test public void resolvePathWithServletMappedByPrefix() throws Exception {     this.request.setRequestURI("/myapp/myservlet/index").     this.request.setServletPath("/myservlet").     this.filterChain.doFilter(this.request, this.response).     assertEquals("/myapp/myservlet/resources/foo-e36d2e05253c6c7085a91522ce43a0b4.css", resolvePublicResourceUrlPath("/myapp/myservlet/resources/foo.css")). }
false;public;0;8;;@Test public void resolvePathNoMatch() throws Exception {     this.request.setRequestURI("/myapp/myservlet/index").     this.request.setServletPath("/myservlet").     this.filterChain.doFilter(this.request, this.response).     assertEquals("/myapp/myservlet/index", resolvePublicResourceUrlPath("/myapp/myservlet/index")). }
false;private;1;3;;private String resolvePublicResourceUrlPath(String path) {     return this.servlet.wrappedResponse.encodeURL(path). }
false;public;1;6;;@Override public void addResourceHandlers(ResourceHandlerRegistry registry) {     registry.addResourceHandler("/resources/**").addResourceLocations("classpath:org/springframework/web/servlet/resource/test/").resourceChain(true).addResolver(new VersionResourceResolver().addContentVersionStrategy("/**")). }
false;protected;2;4;;@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) {     this.wrappedResponse = response. }
