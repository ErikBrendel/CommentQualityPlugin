commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;18;/**  * Create an actual {@link Log} instance for the selected API.  * @param name the logger name  */ ;/**  * Create an actual {@link Log} instance for the selected API.  * @param name the logger name  */ public static Log createLog(String name) {     switch(logApi) {         case LOG4J:             return Log4jAdapter.createLog(name).         case SLF4J_LAL:             return Slf4jAdapter.createLocationAwareLog(name).         case SLF4J:             return Slf4jAdapter.createLog(name).         default:             // trying to parse the bytecode for all the cases of this switch clause.             return JavaUtilAdapter.createLog(name).     } }
false;private,static;1;9;;private static boolean isPresent(String className) {     try {         Class.forName(className, false, LogAdapter.class.getClassLoader()).         return true.     } catch (ClassNotFoundException ex) {         return false.     } }
false;public,static;1;3;;public static Log createLog(String name) {     return new Log4jLog(name). }
false;public,static;1;5;;public static Log createLocationAwareLog(String name) {     Logger logger = LoggerFactory.getLogger(name).     return (logger instanceof LocationAwareLogger ? new Slf4jLocationAwareLog((LocationAwareLogger) logger) : new Slf4jLog<>(logger)). }
false;public,static;1;3;;public static Log createLog(String name) {     return new Slf4jLog<>(LoggerFactory.getLogger(name)). }
false;public,static;1;3;;public static Log createLog(String name) {     return new JavaUtilLog(name). }
false;public;0;4;;@Override public boolean isFatalEnabled() {     return this.logger.isEnabled(Level.FATAL). }
false;public;0;4;;@Override public boolean isErrorEnabled() {     return this.logger.isEnabled(Level.ERROR). }
false;public;0;4;;@Override public boolean isWarnEnabled() {     return this.logger.isEnabled(Level.WARN). }
false;public;0;4;;@Override public boolean isInfoEnabled() {     return this.logger.isEnabled(Level.INFO). }
false;public;0;4;;@Override public boolean isDebugEnabled() {     return this.logger.isEnabled(Level.DEBUG). }
false;public;0;4;;@Override public boolean isTraceEnabled() {     return this.logger.isEnabled(Level.TRACE). }
false;public;1;4;;@Override public void fatal(Object message) {     log(Level.FATAL, message, null). }
false;public;2;4;;@Override public void fatal(Object message, Throwable exception) {     log(Level.FATAL, message, exception). }
false;public;1;4;;@Override public void error(Object message) {     log(Level.ERROR, message, null). }
false;public;2;4;;@Override public void error(Object message, Throwable exception) {     log(Level.ERROR, message, exception). }
false;public;1;4;;@Override public void warn(Object message) {     log(Level.WARN, message, null). }
false;public;2;4;;@Override public void warn(Object message, Throwable exception) {     log(Level.WARN, message, exception). }
false;public;1;4;;@Override public void info(Object message) {     log(Level.INFO, message, null). }
false;public;2;4;;@Override public void info(Object message, Throwable exception) {     log(Level.INFO, message, exception). }
false;public;1;4;;@Override public void debug(Object message) {     log(Level.DEBUG, message, null). }
false;public;2;4;;@Override public void debug(Object message, Throwable exception) {     log(Level.DEBUG, message, exception). }
false;public;1;4;;@Override public void trace(Object message) {     log(Level.TRACE, message, null). }
false;public;2;4;;@Override public void trace(Object message, Throwable exception) {     log(Level.TRACE, message, exception). }
false;private;3;15;;private void log(Level level, Object message, Throwable exception) {     if (message instanceof String) {         // for message objects in case of "{}" sequences (SPR-16226)         if (exception != null) {             this.logger.logIfEnabled(FQCN, level, null, (String) message, exception).         } else {             this.logger.logIfEnabled(FQCN, level, null, (String) message).         }     } else {         this.logger.logIfEnabled(FQCN, level, null, message, exception).     } }
false;public;0;3;;public boolean isFatalEnabled() {     return isErrorEnabled(). }
false;public;0;3;;public boolean isErrorEnabled() {     return this.logger.isErrorEnabled(). }
false;public;0;3;;public boolean isWarnEnabled() {     return this.logger.isWarnEnabled(). }
false;public;0;3;;public boolean isInfoEnabled() {     return this.logger.isInfoEnabled(). }
false;public;0;3;;public boolean isDebugEnabled() {     return this.logger.isDebugEnabled(). }
false;public;0;3;;public boolean isTraceEnabled() {     return this.logger.isTraceEnabled(). }
false;public;1;3;;public void fatal(Object message) {     error(message). }
false;public;2;3;;public void fatal(Object message, Throwable exception) {     error(message, exception). }
false;public;1;5;;public void error(Object message) {     if (message instanceof String || this.logger.isErrorEnabled()) {         this.logger.error(String.valueOf(message)).     } }
false;public;2;5;;public void error(Object message, Throwable exception) {     if (message instanceof String || this.logger.isErrorEnabled()) {         this.logger.error(String.valueOf(message), exception).     } }
false;public;1;5;;public void warn(Object message) {     if (message instanceof String || this.logger.isWarnEnabled()) {         this.logger.warn(String.valueOf(message)).     } }
false;public;2;5;;public void warn(Object message, Throwable exception) {     if (message instanceof String || this.logger.isWarnEnabled()) {         this.logger.warn(String.valueOf(message), exception).     } }
false;public;1;5;;public void info(Object message) {     if (message instanceof String || this.logger.isInfoEnabled()) {         this.logger.info(String.valueOf(message)).     } }
false;public;2;5;;public void info(Object message, Throwable exception) {     if (message instanceof String || this.logger.isInfoEnabled()) {         this.logger.info(String.valueOf(message), exception).     } }
false;public;1;5;;public void debug(Object message) {     if (message instanceof String || this.logger.isDebugEnabled()) {         this.logger.debug(String.valueOf(message)).     } }
false;public;2;5;;public void debug(Object message, Throwable exception) {     if (message instanceof String || this.logger.isDebugEnabled()) {         this.logger.debug(String.valueOf(message), exception).     } }
false;public;1;5;;public void trace(Object message) {     if (message instanceof String || this.logger.isTraceEnabled()) {         this.logger.trace(String.valueOf(message)).     } }
false;public;2;5;;public void trace(Object message, Throwable exception) {     if (message instanceof String || this.logger.isTraceEnabled()) {         this.logger.trace(String.valueOf(message), exception).     } }
false;protected;0;3;;protected Object readResolve() {     return Slf4jAdapter.createLog(this.name). }
false;public;1;4;;@Override public void fatal(Object message) {     error(message). }
false;public;2;4;;@Override public void fatal(Object message, Throwable exception) {     error(message, exception). }
false;public;1;6;;@Override public void error(Object message) {     if (message instanceof String || this.logger.isErrorEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, null).     } }
false;public;2;6;;@Override public void error(Object message, Throwable exception) {     if (message instanceof String || this.logger.isErrorEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, exception).     } }
false;public;1;6;;@Override public void warn(Object message) {     if (message instanceof String || this.logger.isWarnEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), null, null).     } }
false;public;2;6;;@Override public void warn(Object message, Throwable exception) {     if (message instanceof String || this.logger.isWarnEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), null, exception).     } }
false;public;1;6;;@Override public void info(Object message) {     if (message instanceof String || this.logger.isInfoEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), null, null).     } }
false;public;2;6;;@Override public void info(Object message, Throwable exception) {     if (message instanceof String || this.logger.isInfoEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), null, exception).     } }
false;public;1;6;;@Override public void debug(Object message) {     if (message instanceof String || this.logger.isDebugEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), null, null).     } }
false;public;2;6;;@Override public void debug(Object message, Throwable exception) {     if (message instanceof String || this.logger.isDebugEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), null, exception).     } }
false;public;1;6;;@Override public void trace(Object message) {     if (message instanceof String || this.logger.isTraceEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), null, null).     } }
false;public;2;6;;@Override public void trace(Object message, Throwable exception) {     if (message instanceof String || this.logger.isTraceEnabled()) {         this.logger.log(null, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), null, exception).     } }
false;protected;0;4;;@Override protected Object readResolve() {     return Slf4jAdapter.createLocationAwareLog(this.name). }
false;public;0;3;;public boolean isFatalEnabled() {     return isErrorEnabled(). }
false;public;0;3;;public boolean isErrorEnabled() {     return this.logger.isLoggable(java.util.logging.Level.SEVERE). }
false;public;0;3;;public boolean isWarnEnabled() {     return this.logger.isLoggable(java.util.logging.Level.WARNING). }
false;public;0;3;;public boolean isInfoEnabled() {     return this.logger.isLoggable(java.util.logging.Level.INFO). }
false;public;0;3;;public boolean isDebugEnabled() {     return this.logger.isLoggable(java.util.logging.Level.FINE). }
false;public;0;3;;public boolean isTraceEnabled() {     return this.logger.isLoggable(java.util.logging.Level.FINEST). }
false;public;1;3;;public void fatal(Object message) {     error(message). }
false;public;2;3;;public void fatal(Object message, Throwable exception) {     error(message, exception). }
false;public;1;3;;public void error(Object message) {     log(java.util.logging.Level.SEVERE, message, null). }
false;public;2;3;;public void error(Object message, Throwable exception) {     log(java.util.logging.Level.SEVERE, message, exception). }
false;public;1;3;;public void warn(Object message) {     log(java.util.logging.Level.WARNING, message, null). }
false;public;2;3;;public void warn(Object message, Throwable exception) {     log(java.util.logging.Level.WARNING, message, exception). }
false;public;1;3;;public void info(Object message) {     log(java.util.logging.Level.INFO, message, null). }
false;public;2;3;;public void info(Object message, Throwable exception) {     log(java.util.logging.Level.INFO, message, exception). }
false;public;1;3;;public void debug(Object message) {     log(java.util.logging.Level.FINE, message, null). }
false;public;2;3;;public void debug(Object message, Throwable exception) {     log(java.util.logging.Level.FINE, message, exception). }
false;public;1;3;;public void trace(Object message) {     log(java.util.logging.Level.FINEST, message, null). }
false;public;2;3;;public void trace(Object message, Throwable exception) {     log(java.util.logging.Level.FINEST, message, exception). }
false;private;3;16;;private void log(java.util.logging.Level level, Object message, Throwable exception) {     if (this.logger.isLoggable(level)) {         LogRecord rec.         if (message instanceof LogRecord) {             rec = (LogRecord) message.         } else {             rec = new LocationResolvingLogRecord(level, String.valueOf(message)).             rec.setLoggerName(this.name).             rec.setResourceBundleName(logger.getResourceBundleName()).             rec.setResourceBundle(logger.getResourceBundle()).             rec.setThrown(exception).         }         logger.log(rec).     } }
false;protected;0;3;;protected Object readResolve() {     return new JavaUtilLog(this.name). }
false;public;0;7;;@Override public String getSourceClassName() {     if (!this.resolved) {         resolve().     }     return super.getSourceClassName(). }
false;public;1;5;;@Override public void setSourceClassName(String sourceClassName) {     super.setSourceClassName(sourceClassName).     this.resolved = true. }
false;public;0;7;;@Override public String getSourceMethodName() {     if (!this.resolved) {         resolve().     }     return super.getSourceMethodName(). }
false;public;1;5;;@Override public void setSourceMethodName(String sourceMethodName) {     super.setSourceMethodName(sourceMethodName).     this.resolved = true. }
false;private;0;19;;private void resolve() {     StackTraceElement[] stack = new Throwable().getStackTrace().     String sourceClassName = null.     String sourceMethodName = null.     boolean found = false.     for (StackTraceElement element : stack) {         String className = element.getClassName().         if (FQCN.equals(className)) {             found = true.         } else if (found) {             sourceClassName = className.             sourceMethodName = element.getMethodName().             break.         }     }     setSourceClassName(sourceClassName).     setSourceMethodName(sourceMethodName). }
false;protected;0;15;;// setMillis is deprecated in JDK 9 @SuppressWarnings("deprecation") protected Object writeReplace() {     LogRecord serialized = new LogRecord(getLevel(), getMessage()).     serialized.setLoggerName(getLoggerName()).     serialized.setResourceBundle(getResourceBundle()).     serialized.setResourceBundleName(getResourceBundleName()).     serialized.setSourceClassName(getSourceClassName()).     serialized.setSourceMethodName(getSourceMethodName()).     serialized.setSequenceNumber(getSequenceNumber()).     serialized.setParameters(getParameters()).     serialized.setThreadID(getThreadID()).     serialized.setMillis(getMillis()).     serialized.setThrown(getThrown()).     return serialized. }
