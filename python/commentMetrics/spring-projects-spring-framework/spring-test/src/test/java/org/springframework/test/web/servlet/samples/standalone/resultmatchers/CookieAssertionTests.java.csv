commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setup() {     CookieLocaleResolver localeResolver = new CookieLocaleResolver().     localeResolver.setCookieDomain("domain").     localeResolver.setCookieHttpOnly(true).     this.mockMvc = standaloneSetup(new SimpleController()).addInterceptors(new LocaleChangeInterceptor()).setLocaleResolver(localeResolver).defaultRequest(get("/").param("locale", "en_US")).alwaysExpect(status().isOk()).build(). }
false;public;0;4;;@Test public void testExists() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().exists(COOKIE_NAME)). }
false;public;0;4;;@Test public void testNotExists() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().doesNotExist("unknownCookie")). }
false;public;0;5;;@Test public void testEqualTo() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().value(COOKIE_NAME, "en-US")).     this.mockMvc.perform(get("/")).andExpect(cookie().value(COOKIE_NAME, equalTo("en-US"))). }
false;public;0;4;;@Test public void testMatcher() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().value(COOKIE_NAME, startsWith("en"))). }
false;public;0;4;;@Test public void testMaxAge() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().maxAge(COOKIE_NAME, -1)). }
false;public;0;4;;@Test public void testDomain() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().domain(COOKIE_NAME, "domain")). }
false;public;0;4;;@Test public void testVersion() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().version(COOKIE_NAME, 0)). }
false;public;0;4;;@Test public void testPath() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().path(COOKIE_NAME, "/")). }
false;public;0;4;;@Test public void testSecured() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().secure(COOKIE_NAME, false)). }
false;public;0;4;;@Test public void testHttpOnly() throws Exception {     this.mockMvc.perform(get("/")).andExpect(cookie().httpOnly(COOKIE_NAME, true)). }
false;public;0;4;;@RequestMapping("/") public String home() {     return "home". }
