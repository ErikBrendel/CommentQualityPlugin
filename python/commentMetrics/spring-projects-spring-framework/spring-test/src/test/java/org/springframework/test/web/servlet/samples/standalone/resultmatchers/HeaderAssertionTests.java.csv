commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() {     this.dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US).     this.dateFormat.setTimeZone(TimeZone.getTimeZone("GMT")).     this.now = dateFormat.format(new Date(this.currentTime)).     this.minuteAgo = dateFormat.format(new Date(this.currentTime - (1000 * 60))).     PersonController controller = new PersonController().     controller.setStubTimestamp(this.currentTime).     this.mockMvc = standaloneSetup(controller).build(). }
false;public;0;5;;@Test public void stringWithCorrectResponseHeaderValue() throws Exception {     this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, minuteAgo)).andExpect(header().string(LAST_MODIFIED, now)). }
false;public;0;5;;@Test public void stringWithMatcherAndCorrectResponseHeaderValue() throws Exception {     this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, minuteAgo)).andExpect(header().string(LAST_MODIFIED, equalTo(now))). }
false;public;0;4;;@Test public void multiStringHeaderValue() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().stringValues(VARY, "foo", "bar")). }
false;public;0;6;;@SuppressWarnings("unchecked") @Test public void multiStringHeaderValueWithMatchers() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().stringValues(VARY, hasItems(containsString("foo"), startsWith("bar")))). }
false;public;0;5;;@Test public void dateValueWithCorrectResponseHeaderValue() throws Exception {     this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, minuteAgo)).andExpect(header().dateValue(LAST_MODIFIED, this.currentTime)). }
false;public;0;5;;@Test public void longValueWithCorrectResponseHeaderValue() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().longValue("X-Rate-Limiting", 42)). }
false;public;0;6;;@Test public void stringWithMissingResponseHeader() throws Exception {     this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now)).andExpect(status().isNotModified()).andExpect(header().stringValues("X-Custom-Header")). }
false;public;0;6;;@Test public void stringWithMatcherAndMissingResponseHeader() throws Exception {     this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now)).andExpect(status().isNotModified()).andExpect(header().string("X-Custom-Header", nullValue())). }
false;public;0;16;;@Test public void longValueWithMissingResponseHeader() throws Exception {     try {         this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now)).andExpect(status().isNotModified()).andExpect(header().longValue("X-Custom-Header", 99L)).         fail(ERROR_MESSAGE).     } catch (AssertionError err) {         if (ERROR_MESSAGE.equals(err.getMessage())) {             throw err.         }         assertEquals("Response does not contain header 'X-Custom-Header'", err.getMessage()).     } }
false;public;0;4;;@Test public void exists() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().exists(LAST_MODIFIED)). }
false;public;0;4;;@Test(expected = AssertionError.class) public void existsFail() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().exists("X-Custom-Header")). }
false;public;0;4;;// SPR-10771 @Test public void doesNotExist() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().doesNotExist("X-Custom-Header")). }
false;public;0;4;;// SPR-10771 @Test(expected = AssertionError.class) public void doesNotExistFail() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().doesNotExist(LAST_MODIFIED)). }
false;public;0;4;;@Test(expected = AssertionError.class) public void longValueWithIncorrectResponseHeaderValue() throws Exception {     this.mockMvc.perform(get("/persons/1")).andExpect(header().longValue("X-Rate-Limiting", 1)). }
false;public;0;11;;@Test public void stringWithMatcherAndIncorrectResponseHeaderValue() throws Exception {     long secondLater = this.currentTime + 1000.     String expected = this.dateFormat.format(new Date(secondLater)).     assertIncorrectResponseHeader(header().string(LAST_MODIFIED, expected), expected).     assertIncorrectResponseHeader(header().string(LAST_MODIFIED, equalTo(expected)), expected).     // Comparison by date uses HttpHeaders to format the date in the error message.     HttpHeaders headers = new HttpHeaders().     headers.setDate("expected", secondLater).     assertIncorrectResponseHeader(header().dateValue(LAST_MODIFIED, secondLater), headers.getFirst("expected")). }
false;private;2;19;;private void assertIncorrectResponseHeader(ResultMatcher matcher, String expected) throws Exception {     try {         this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, minuteAgo)).andExpect(matcher).         fail(ERROR_MESSAGE).     } catch (AssertionError err) {         if (ERROR_MESSAGE.equals(err.getMessage())) {             throw err.         }         // SPR-10659: ensure header name is in the message         // Unfortunately, we can't control formatting from JUnit or Hamcrest.         assertMessageContains(err, "Response header '" + LAST_MODIFIED + "'").         assertMessageContains(err, expected).         assertMessageContains(err, this.now).     } }
false;private;2;4;;private void assertMessageContains(AssertionError error, String expected) {     assertTrue("Failure message should contain [" + expected + "], actual is [" + error.getMessage() + "]", error.getMessage().contains(expected)). }
false;public;1;3;;public void setStubTimestamp(long timestamp) {     this.timestamp = timestamp. }
false;public;2;9;;@RequestMapping("/persons/{id}") public ResponseEntity<Person> showEntity(@PathVariable long id, WebRequest request) {     return ResponseEntity.ok().lastModified(this.timestamp).header("X-Rate-Limiting", "42").header("Vary", "foo", "bar").body(new Person("Jason")). }
