commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void invokeTestContextManagerFromConcurrentThreads() {     TestContextManager tcm = new TestContextManager(TestCase.class).     // Run the actual test several times in order to increase the chance of threads     // stepping on each others' toes by overwriting the same mutable state in the     // TestContext.     IntStream.range(1, 20).forEach(i -> {         actualMethods.clear().         // Execute TestExecutionListener in parallel, thereby simulating parallel         // test method execution.         stream(TestCase.class.getDeclaredMethods()).parallel().forEach(testMethod -> {             try {                 tcm.beforeTestClass().                 tcm.beforeTestMethod(testInstance, testMethod).                 // no need to invoke the actual test method                 tcm.afterTestMethod(testInstance, testMethod, null).                 tcm.afterTestClass().             } catch (Exception ex) {                 throw new RuntimeException(ex).             }         }).         assertThat(actualMethods, equalTo(expectedMethods)).     }).     assertEquals(0, tcm.getTestContext().attributeNames().length). }
false;;0;2;;void test_001() { }
false;;0;2;;void test_002() { }
false;;0;2;;void test_003() { }
false;;0;2;;void test_004() { }
false;;0;2;;void test_005() { }
false;;0;2;;void test_006() { }
false;;0;2;;void test_007() { }
false;;0;2;;void test_008() { }
false;;0;2;;void test_009() { }
false;;0;2;;void test_010() { }
false;public;1;7;;@Override public void beforeTestMethod(TestContext testContext) throws Exception {     String name = testContext.getTestMethod().getName().     actualMethods.add(name).     testContext.setAttribute("method", name).     this.methodName.set(name). }
false;public;1;4;;@Override public void afterTestMethod(TestContext testContext) throws Exception {     assertEquals(this.methodName.get(), testContext.getAttribute("method")). }
