commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnMethodWithBeforeMethodMode() throws Exception {     Class<?> clazz = getClass().     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("dirtiesContextDeclaredLocallyWithBeforeMethodMode")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;13;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnMethodWithAfterMethodMode() throws Exception {     Class<?> clazz = getClass().     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("dirtiesContextDeclaredLocallyWithAfterMethodMode")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;14;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredOnMethodViaMetaAnnotationWithAfterMethodMode() throws Exception {     Class<?> clazz = getClass().     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("dirtiesContextDeclaredViaMetaAnnotationWithAfterMethodMode")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;12;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassBeforeEachTestMethod() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyBeforeEachTestMethod.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;12;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassAfterEachTestMethod() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyAfterEachTestMethod.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;13;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterEachTestMethod() throws Exception {     Class<?> clazz = DirtiesContextDeclaredViaMetaAnnotationAfterEachTestMethod.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;11;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassBeforeClass() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyBeforeClass.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;11;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredLocallyOnClassAfterClass() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyAfterClass.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;11;;@Test public void beforeAndAfterTestMethodForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterClass() throws Exception {     Class<?> clazz = DirtiesContextDeclaredViaMetaAnnotationAfterClass.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;12;;@Test public void beforeAndAfterTestMethodForDirtiesContextViaMetaAnnotationWithOverrides() throws Exception {     Class<?> clazz = DirtiesContextViaMetaAnnotationWithOverrides.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("clean")).     beforeListener.beforeTestMethod(testContext).     afterListener.beforeTestMethod(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestMethod(testContext).     beforeListener.afterTestMethod(testContext).     verify(testContext, times(1)).markApplicationContextDirty(CURRENT_LEVEL). }
false;public;0;10;;// ------------------------------------------------------------------------- @Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnMethod() throws Exception {     Class<?> clazz = getClass().     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;10;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassBeforeEachTestMethod() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyBeforeEachTestMethod.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;10;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassAfterEachTestMethod() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyAfterEachTestMethod.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;11;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterEachTestMethod() throws Exception {     Class<?> clazz = DirtiesContextDeclaredViaMetaAnnotationAfterEachTestMethod.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;11;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassBeforeClass() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyBeforeClass.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;11;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredLocallyOnClassAfterClass() throws Exception {     Class<?> clazz = DirtiesContextDeclaredLocallyAfterClass.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;11;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationOnClassAfterClass() throws Exception {     Class<?> clazz = DirtiesContextDeclaredViaMetaAnnotationAfterClass.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;public;0;10;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationWithOverrides() throws Exception {     Class<?> clazz = DirtiesContextViaMetaAnnotationWithOverrides.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)). }
false;public;0;12;;@Test public void beforeAndAfterTestClassForDirtiesContextDeclaredViaMetaAnnotationWithOverridenAttributes() throws Exception {     Class<?> clazz = DirtiesContextViaMetaAnnotationWithOverridenAttributes.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     beforeListener.beforeTestClass(testContext).     afterListener.beforeTestClass(testContext).     verify(testContext, times(0)).markApplicationContextDirty(any(HierarchyMode.class)).     afterListener.afterTestClass(testContext).     beforeListener.afterTestClass(testContext).     verify(testContext, times(1)).markApplicationContextDirty(EXHAUSTIVE). }
false;;0;4;;// ------------------------------------------------------------------------- @DirtiesContext(methodMode = BEFORE_METHOD) void dirtiesContextDeclaredLocallyWithBeforeMethodMode() { /* no-op */ }
false;;0;4;;@DirtiesContext void dirtiesContextDeclaredLocallyWithAfterMethodMode() { /* no-op */ }
false;;0;4;;@MetaDirtyAfterMethod void dirtiesContextDeclaredViaMetaAnnotationWithAfterMethodMode() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
false;;0;3;;void clean() { /* no-op */ }
