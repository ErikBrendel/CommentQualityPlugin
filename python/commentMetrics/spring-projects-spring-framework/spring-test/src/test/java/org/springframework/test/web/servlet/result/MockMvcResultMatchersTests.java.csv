commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void redirect() throws Exception {     redirectedUrl("/resource/1").match(getRedirectedUrlStubMvcResult("/resource/1")). }
false;public;0;4;;@Test public void redirectWithUrlTemplate() throws Exception {     redirectedUrlTemplate("/orders/{orderId}/items/{itemId}", 1, 2).match(getRedirectedUrlStubMvcResult("/orders/1/items/2")). }
false;public;0;4;;@Test public void redirectWithMatchingPattern() throws Exception {     redirectedUrlPattern("/resource/*").match(getRedirectedUrlStubMvcResult("/resource/1")). }
false;public;0;4;;@Test(expected = AssertionError.class) public void redirectWithNonMatchingPattern() throws Exception {     redirectedUrlPattern("/resource/").match(getRedirectedUrlStubMvcResult("/resource/1")). }
false;public;0;4;;@Test public void forward() throws Exception {     forwardedUrl("/api/resource/1").match(getForwardedUrlStubMvcResult("/api/resource/1")). }
false;public;0;4;;@Test public void forwardWithQueryString() throws Exception {     forwardedUrl("/api/resource/1?arg=value").match(getForwardedUrlStubMvcResult("/api/resource/1?arg=value")). }
false;public;0;4;;@Test public void forwardWithUrlTemplate() throws Exception {     forwardedUrlTemplate("/orders/{orderId}/items/{itemId}", 1, 2).match(getForwardedUrlStubMvcResult("/orders/1/items/2")). }
false;public;0;4;;@Test public void forwardWithMatchingPattern() throws Exception {     forwardedUrlPattern("/api/**/?").match(getForwardedUrlStubMvcResult("/api/resource/1")). }
false;public;0;4;;@Test(expected = AssertionError.class) public void forwardWithNonMatchingPattern() throws Exception {     forwardedUrlPattern("/resource/").match(getForwardedUrlStubMvcResult("/resource/1")). }
false;private;1;6;;private StubMvcResult getRedirectedUrlStubMvcResult(String redirectUrl) throws Exception {     MockHttpServletResponse response = new MockHttpServletResponse().     response.sendRedirect(redirectUrl).     StubMvcResult mvcResult = new StubMvcResult(null, null, null, null, null, null, response).     return mvcResult. }
false;private;1;6;;private StubMvcResult getForwardedUrlStubMvcResult(String forwardedUrl) {     MockHttpServletResponse response = new MockHttpServletResponse().     response.setForwardedUrl(forwardedUrl).     StubMvcResult mvcResult = new StubMvcResult(null, null, null, null, null, null, response).     return mvcResult. }
