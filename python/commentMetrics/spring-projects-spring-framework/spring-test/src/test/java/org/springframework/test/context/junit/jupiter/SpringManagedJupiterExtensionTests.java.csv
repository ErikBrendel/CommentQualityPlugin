commented;modifiers;parameterAmount;loc;comment;code
false;;1;4;;@TestTemplate void testTemplate(String parameter) {     assertTrue("foo".equals(parameter) || "bar".equals(parameter)). }
false;;0;4;;@Bean String foo() {     return "foo". }
false;;0;4;;@Bean String bar() {     return "bar". }
false;;1;4;;@Bean TestTemplateInvocationContextProvider provider(List<String> parameters) {     return new StringInvocationContextProvider(parameters). }
false;public;1;4;;@Override public boolean supportsTestTemplate(ExtensionContext context) {     return true. }
false;public;1;4;;@Override public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context) {     return this.parameters.stream().map(this::invocationContext). }
false;public;1;4;;@Override public String getDisplayName(int invocationIndex) {     return parameter. }
false;public;2;5;;@Override public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {     return parameterContext.getParameter().getType() == String.class. }
false;public;2;5;;@Override public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {     return parameter. }
false;public;0;17;;@Override public List<Extension> getAdditionalExtensions() {     return Collections.singletonList(new ParameterResolver() {          @Override         public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {             return parameterContext.getParameter().getType() == String.class.         }          @Override         public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {             return parameter.         }     }). }
false;private;1;27;;private TestTemplateInvocationContext invocationContext(String parameter) {     return new TestTemplateInvocationContext() {          @Override         public String getDisplayName(int invocationIndex) {             return parameter.         }          @Override         public List<Extension> getAdditionalExtensions() {             return Collections.singletonList(new ParameterResolver() {                  @Override                 public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {                     return parameterContext.getParameter().getType() == String.class.                 }                  @Override                 public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {                     return parameter.                 }             }).         }     }. }
