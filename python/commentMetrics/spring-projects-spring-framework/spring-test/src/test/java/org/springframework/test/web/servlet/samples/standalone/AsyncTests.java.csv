# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncTests -> @Test 	public void completableFutureWithImmediateValue() throws Exception;1435938706;SPR-12597;@Test_	public void completableFutureWithImmediateValue() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFutureWithImmediateValue", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))__	};spr,12597;test,public,void,completable,future,with,immediate,value,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,completable,future,with,immediate,value,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false
AsyncTests -> @Test 	public void completableFutureWithImmediateValue() throws Exception;1435941500;SPR-12597;@Test_	public void completableFutureWithImmediateValue() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFutureWithImmediateValue", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))__	};spr,12597;test,public,void,completable,future,with,immediate,value,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,completable,future,with,immediate,value,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false
AsyncTests -> @Test 	public void completableFutureWithImmediateValue() throws Exception;1456785272;SPR-12597;@Test_	public void completableFutureWithImmediateValue() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFutureWithImmediateValue", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))__	};spr,12597;test,public,void,completable,future,with,immediate,value,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,completable,future,with,immediate,value,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false
AsyncTests -> @Test 	public void completableFutureWithImmediateValue() throws Exception;1467730834;SPR-12597;@Test_	public void completableFutureWithImmediateValue() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFutureWithImmediateValue", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))__	};spr,12597;test,public,void,completable,future,with,immediate,value,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,completable,future,with,immediate,value,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false
AsyncTests -> @Test 	public void completableFutureWithImmediateValue() throws Exception;1468360240;SPR-12597;@Test_	public void completableFutureWithImmediateValue() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFutureWithImmediateValue", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))__	};spr,12597;test,public,void,completable,future,with,immediate,value,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,completable,future,with,immediate,value,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false
AsyncTests -> @Test 	public void completableFutureWithImmediateValue() throws Exception;1468420789;SPR-12597;@Test_	public void completableFutureWithImmediateValue() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFutureWithImmediateValue", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))__	};spr,12597;test,public,void,completable,future,with,immediate,value,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,completable,future,with,immediate,value,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false
AsyncTests -> @Test 	public void printAsyncResult() throws Exception;1435938706;SPR-12735;@Test_	public void printAsyncResult() throws Exception {_		StringWriter writer = new StringWriter()___		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true"))_				.andDo(print(writer))_				.andExpect(request().asyncStarted())_				.andReturn()___		assertTrue(writer.toString().contains("Async started = true"))__		writer = new StringWriter()___		this.asyncController.onMessage("Joe")___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andDo(print(writer))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))___		assertTrue(writer.toString().contains("Async started = false"))__	};spr,12735;test,public,void,print,async,result,throws,exception,string,writer,writer,new,string,writer,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,true,and,do,print,writer,and,expect,request,async,started,and,return,assert,true,writer,to,string,contains,async,started,true,writer,new,string,writer,this,async,controller,on,message,joe,this,mock,mvc,perform,async,dispatch,mvc,result,and,do,print,writer,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false,assert,true,writer,to,string,contains,async,started,false
AsyncTests -> @Test 	public void printAsyncResult() throws Exception;1435941500;SPR-12735;@Test_	public void printAsyncResult() throws Exception {_		StringWriter writer = new StringWriter()___		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true"))_				.andDo(print(writer))_				.andExpect(request().asyncStarted())_				.andReturn()___		assertTrue(writer.toString().contains("Async started = true"))__		writer = new StringWriter()___		this.asyncController.onMessage("Joe")___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andDo(print(writer))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))___		assertTrue(writer.toString().contains("Async started = false"))__	};spr,12735;test,public,void,print,async,result,throws,exception,string,writer,writer,new,string,writer,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,true,and,do,print,writer,and,expect,request,async,started,and,return,assert,true,writer,to,string,contains,async,started,true,writer,new,string,writer,this,async,controller,on,message,joe,this,mock,mvc,perform,async,dispatch,mvc,result,and,do,print,writer,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false,assert,true,writer,to,string,contains,async,started,false
AsyncTests -> @Test 	public void printAsyncResult() throws Exception;1456785272;SPR-12735;@Test_	public void printAsyncResult() throws Exception {_		StringWriter writer = new StringWriter()___		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true"))_				.andDo(print(writer))_				.andExpect(request().asyncStarted())_				.andReturn()___		assertTrue(writer.toString().contains("Async started = true"))__		writer = new StringWriter()___		this.asyncController.onMessage("Joe")___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andDo(print(writer))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))___		assertTrue(writer.toString().contains("Async started = false"))__	};spr,12735;test,public,void,print,async,result,throws,exception,string,writer,writer,new,string,writer,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,true,and,do,print,writer,and,expect,request,async,started,and,return,assert,true,writer,to,string,contains,async,started,true,writer,new,string,writer,this,async,controller,on,message,joe,this,mock,mvc,perform,async,dispatch,mvc,result,and,do,print,writer,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false,assert,true,writer,to,string,contains,async,started,false
AsyncTests -> @Test 	public void printAsyncResult() throws Exception;1467730834;SPR-12735;@Test_	public void printAsyncResult() throws Exception {_		StringWriter writer = new StringWriter()___		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true"))_				.andDo(print(writer))_				.andExpect(request().asyncStarted())_				.andReturn()___		assertTrue(writer.toString().contains("Async started = true"))__		writer = new StringWriter()___		this.asyncController.onMessage("Joe")___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andDo(print(writer))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))___		assertTrue(writer.toString().contains("Async started = false"))__	};spr,12735;test,public,void,print,async,result,throws,exception,string,writer,writer,new,string,writer,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,true,and,do,print,writer,and,expect,request,async,started,and,return,assert,true,writer,to,string,contains,async,started,true,writer,new,string,writer,this,async,controller,on,message,joe,this,mock,mvc,perform,async,dispatch,mvc,result,and,do,print,writer,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false,assert,true,writer,to,string,contains,async,started,false
AsyncTests -> @Test 	public void printAsyncResult() throws Exception;1468360240;SPR-12735;@Test_	public void printAsyncResult() throws Exception {_		StringWriter writer = new StringWriter()___		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true"))_				.andDo(print(writer))_				.andExpect(request().asyncStarted())_				.andReturn()___		assertTrue(writer.toString().contains("Async started = true"))__		writer = new StringWriter()___		this.asyncController.onMessage("Joe")___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andDo(print(writer))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))___		assertTrue(writer.toString().contains("Async started = false"))__	};spr,12735;test,public,void,print,async,result,throws,exception,string,writer,writer,new,string,writer,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,true,and,do,print,writer,and,expect,request,async,started,and,return,assert,true,writer,to,string,contains,async,started,true,writer,new,string,writer,this,async,controller,on,message,joe,this,mock,mvc,perform,async,dispatch,mvc,result,and,do,print,writer,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false,assert,true,writer,to,string,contains,async,started,false
AsyncTests -> @Test 	public void printAsyncResult() throws Exception;1468420789;SPR-12735;@Test_	public void printAsyncResult() throws Exception {_		StringWriter writer = new StringWriter()___		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true"))_				.andDo(print(writer))_				.andExpect(request().asyncStarted())_				.andReturn()___		assertTrue(writer.toString().contains("Async started = true"))__		writer = new StringWriter()___		this.asyncController.onMessage("Joe")___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andDo(print(writer))_				.andExpect(status().isOk())_				.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))_				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"))___		assertTrue(writer.toString().contains("Async started = false"))__	};spr,12735;test,public,void,print,async,result,throws,exception,string,writer,writer,new,string,writer,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,true,and,do,print,writer,and,expect,request,async,started,and,return,assert,true,writer,to,string,contains,async,started,true,writer,new,string,writer,this,async,controller,on,message,joe,this,mock,mvc,perform,async,dispatch,mvc,result,and,do,print,writer,and,expect,status,is,ok,and,expect,content,content,type,media,type,and,expect,content,string,name,joe,some,double,0,0,some,boolean,false,assert,true,writer,to,string,contains,async,started,false
AsyncTests -> @Test 	public void deferredResultWithDelayedError() throws Exception;1435938706;SPR-13079;@Test_	public void deferredResultWithDelayedError() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResultWithDelayedError", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().is5xxServerError())_				.andExpect(content().string("Delayed Error"))__	};spr,13079;test,public,void,deferred,result,with,delayed,error,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,with,delayed,error,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is5xx,server,error,and,expect,content,string,delayed,error
AsyncTests -> @Test 	public void deferredResultWithDelayedError() throws Exception;1435941500;SPR-13079;@Test_	public void deferredResultWithDelayedError() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResultWithDelayedError", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().is5xxServerError())_				.andExpect(content().string("Delayed Error"))__	};spr,13079;test,public,void,deferred,result,with,delayed,error,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,with,delayed,error,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is5xx,server,error,and,expect,content,string,delayed,error
AsyncTests -> @Test 	public void deferredResultWithDelayedError() throws Exception;1456785272;SPR-13079;@Test_	public void deferredResultWithDelayedError() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResultWithDelayedError", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().is5xxServerError())_				.andExpect(content().string("Delayed Error"))__	};spr,13079;test,public,void,deferred,result,with,delayed,error,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,with,delayed,error,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is5xx,server,error,and,expect,content,string,delayed,error
AsyncTests -> @Test 	public void deferredResultWithDelayedError() throws Exception;1467730834;SPR-13079;@Test_	public void deferredResultWithDelayedError() throws Exception {_		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResultWithDelayedError", "true"))_				.andExpect(request().asyncStarted())_				.andReturn()___		this.mockMvc.perform(asyncDispatch(mvcResult))_				.andExpect(status().is5xxServerError())_				.andExpect(content().string("Delayed Error"))__	};spr,13079;test,public,void,deferred,result,with,delayed,error,throws,exception,mvc,result,mvc,result,this,mock,mvc,perform,get,1,param,deferred,result,with,delayed,error,true,and,expect,request,async,started,and,return,this,mock,mvc,perform,async,dispatch,mvc,result,and,expect,status,is5xx,server,error,and,expect,content,string,delayed,error
