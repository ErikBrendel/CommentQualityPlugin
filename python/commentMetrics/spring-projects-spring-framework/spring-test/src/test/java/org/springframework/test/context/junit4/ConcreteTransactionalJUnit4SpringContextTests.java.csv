commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;@Autowired private void setEmployee(Employee employee) {     this.employee = employee. }
false;private;1;4;;@Resource private void setBar(String bar) {     this.bar = bar. }
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;4;;@Override public void afterPropertiesSet() {     this.beanInitialized = true. }
false;public;0;5;;@Before public void setUp() {     assertEquals("Verifying the number of rows in the person table before a test method.", (inTransaction() ? 2 : 1), countRowsInPersonTable()). }
false;public;0;5;;@After public void tearDown() {     assertEquals("Verifying the number of rows in the person table after a test method.", (inTransaction() ? 4 : 1), countRowsInPersonTable()). }
false;public;0;6;;@BeforeTransaction public void beforeTransaction() {     assertEquals("Verifying the number of rows in the person table before a transactional test method.", 1, countRowsInPersonTable()).     assertEquals("Adding yoda", 1, addPerson(YODA)). }
false;public;0;6;;@AfterTransaction public void afterTransaction() {     assertEquals("Deleting yoda", 1, deletePerson(YODA)).     assertEquals("Verifying the number of rows in the person table after a transactional test method.", 1, countRowsInPersonTable()). }
false;public;0;7;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void verifyBeanNameSet() {     assertInTransaction(false).     assertTrue("The bean name of this test instance should have been set to the fully qualified class name " + "due to BeanNameAware semantics.", this.beanName.startsWith(getClass().getName())). }
false;public;0;7;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void verifyApplicationContext() {     assertInTransaction(false).     assertNotNull("The application context should have been set due to ApplicationContextAware semantics.", super.applicationContext). }
false;public;0;7;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void verifyBeanInitialized() {     assertInTransaction(false).     assertTrue("This test bean should have been initialized due to InitializingBean semantics.", this.beanInitialized). }
false;public;0;8;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void verifyAnnotationAutowiredFields() {     assertInTransaction(false).     assertNull("The nonrequiredLong property should NOT have been autowired.", this.nonrequiredLong).     assertNotNull("The pet field should have been autowired.", this.pet).     assertEquals("Fido", this.pet.getName()). }
false;public;0;7;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void verifyAnnotationAutowiredMethods() {     assertInTransaction(false).     assertNotNull("The employee setter method should have been autowired.", this.employee).     assertEquals("John Smith", this.employee.getName()). }
false;public;0;6;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void verifyResourceAnnotationWiredFields() {     assertInTransaction(false).     assertEquals("The foo field should have been wired via @Resource.", "Foo", this.foo). }
false;public;0;6;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void verifyResourceAnnotationWiredMethods() {     assertInTransaction(false).     assertEquals("The bar method should have been wired via @Resource.", "Bar", this.bar). }
false;public;0;8;;@Test public void modifyTestDataWithinTransaction() {     assertInTransaction(true).     assertEquals("Adding jane", 1, addPerson(JANE)).     assertEquals("Adding sue", 1, addPerson(SUE)).     assertEquals("Verifying the number of rows in the person table in modifyTestDataWithinTransaction().", 4, countRowsInPersonTable()). }
false;private;1;3;;private int addPerson(String name) {     return super.jdbcTemplate.update("INSERT INTO person VALUES(?)", name). }
false;private;1;3;;private int deletePerson(String name) {     return super.jdbcTemplate.update("DELETE FROM person WHERE name=?", name). }
false;private;0;3;;private int countRowsInPersonTable() {     return countRowsInTable("person"). }
