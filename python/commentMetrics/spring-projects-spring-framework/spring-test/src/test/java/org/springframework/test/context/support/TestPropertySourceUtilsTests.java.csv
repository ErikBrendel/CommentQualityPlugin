commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void emptyAnnotation() {     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage(startsWith("Could not detect default properties file for test")).     expectedException.expectMessage(containsString("EmptyPropertySources.properties")).     buildMergedTestPropertySources(EmptyPropertySources.class). }
false;public;0;7;;@Test public void extendedEmptyAnnotation() {     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage(startsWith("Could not detect default properties file for test")).     expectedException.expectMessage(containsString("ExtendedEmptyPropertySources.properties")).     buildMergedTestPropertySources(ExtendedEmptyPropertySources.class). }
false;public;0;5;;@Test public void value() {     assertMergedTestPropertySources(ValuePropertySources.class, asArray("classpath:/value.xml"), EMPTY_STRING_ARRAY). }
false;public;0;5;;@Test public void locationsAndValueAttributes() {     expectedException.expect(AnnotationConfigurationException.class).     buildMergedTestPropertySources(LocationsAndValuePropertySources.class). }
false;public;0;5;;@Test public void locationsAndProperties() {     assertMergedTestPropertySources(LocationsAndPropertiesPropertySources.class, asArray("classpath:/foo1.xml", "classpath:/foo2.xml"), asArray("k1a=v1a", "k1b: v1b")). }
false;public;0;5;;@Test public void inheritedLocationsAndProperties() {     assertMergedTestPropertySources(InheritedPropertySources.class, asArray("classpath:/foo1.xml", "classpath:/foo2.xml"), asArray("k1a=v1a", "k1b: v1b")). }
false;public;0;6;;@Test public void extendedLocationsAndProperties() {     assertMergedTestPropertySources(ExtendedPropertySources.class, asArray("classpath:/foo1.xml", "classpath:/foo2.xml", "classpath:/bar1.xml", "classpath:/bar2.xml"), asArray("k1a=v1a", "k1b: v1b", "k2a v2a", "k2b: v2b")). }
false;public;0;5;;@Test public void overriddenLocations() {     assertMergedTestPropertySources(OverriddenLocationsPropertySources.class, asArray("classpath:/baz.properties"), asArray("k1a=v1a", "k1b: v1b", "key = value")). }
false;public;0;5;;@Test public void overriddenProperties() {     assertMergedTestPropertySources(OverriddenPropertiesPropertySources.class, asArray("classpath:/foo1.xml", "classpath:/foo2.xml", "classpath:/baz.properties"), KEY_VALUE_PAIR). }
false;public;0;5;;@Test public void overriddenLocationsAndProperties() {     assertMergedTestPropertySources(OverriddenLocationsAndPropertiesPropertySources.class, asArray("classpath:/baz.properties"), KEY_VALUE_PAIR). }
false;public;0;6;;@Test public void addPropertiesFilesToEnvironmentWithNullContext() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("must not be null").     addPropertiesFilesToEnvironment((ConfigurableApplicationContext) null, FOO_LOCATIONS). }
false;public;0;6;;@Test public void addPropertiesFilesToEnvironmentWithContextAndNullLocations() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("must not be null").     addPropertiesFilesToEnvironment(mock(ConfigurableApplicationContext.class), (String[]) null). }
false;public;0;6;;@Test public void addPropertiesFilesToEnvironmentWithNullEnvironment() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("must not be null").     addPropertiesFilesToEnvironment((ConfigurableEnvironment) null, mock(ResourceLoader.class), FOO_LOCATIONS). }
false;public;0;6;;@Test public void addPropertiesFilesToEnvironmentWithEnvironmentAndNullLocations() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("must not be null").     addPropertiesFilesToEnvironment(new MockEnvironment(), mock(ResourceLoader.class), (String[]) null). }
false;public;0;17;;@Test public void addPropertiesFilesToEnvironmentWithSinglePropertyFromVirtualFile() {     ConfigurableEnvironment environment = new MockEnvironment().     MutablePropertySources propertySources = environment.getPropertySources().     propertySources.remove(MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME).     assertEquals(0, propertySources.size()).     String pair = "key = value".     ByteArrayResource resource = new ByteArrayResource(pair.getBytes(), "from inlined property: " + pair).     ResourceLoader resourceLoader = mock(ResourceLoader.class).     when(resourceLoader.getResource(anyString())).thenReturn(resource).     addPropertiesFilesToEnvironment(environment, resourceLoader, FOO_LOCATIONS).     assertEquals(1, propertySources.size()).     assertEquals("value", environment.getProperty("key")). }
false;public;0;6;;@Test public void addInlinedPropertiesToEnvironmentWithNullContext() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("context").     addInlinedPropertiesToEnvironment((ConfigurableApplicationContext) null, KEY_VALUE_PAIR). }
false;public;0;6;;@Test public void addInlinedPropertiesToEnvironmentWithContextAndNullInlinedProperties() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("inlined").     addInlinedPropertiesToEnvironment(mock(ConfigurableApplicationContext.class), (String[]) null). }
false;public;0;6;;@Test public void addInlinedPropertiesToEnvironmentWithNullEnvironment() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("environment").     addInlinedPropertiesToEnvironment((ConfigurableEnvironment) null, KEY_VALUE_PAIR). }
false;public;0;6;;@Test public void addInlinedPropertiesToEnvironmentWithEnvironmentAndNullInlinedProperties() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("inlined").     addInlinedPropertiesToEnvironment(new MockEnvironment(), (String[]) null). }
false;public;0;6;;@Test public void addInlinedPropertiesToEnvironmentWithMalformedUnicodeInValue() {     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage("Failed to load test environment property").     addInlinedPropertiesToEnvironment(new MockEnvironment(), asArray("key = \\uZZZZ")). }
false;public;0;6;;@Test public void addInlinedPropertiesToEnvironmentWithMultipleKeyValuePairsInSingleInlinedProperty() {     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage("Failed to load exactly one test environment property").     addInlinedPropertiesToEnvironment(new MockEnvironment(), asArray("a=b\nx=y")). }
false;public;0;11;;@Test @SuppressWarnings("rawtypes") public void addInlinedPropertiesToEnvironmentWithEmptyProperty() {     ConfigurableEnvironment environment = new MockEnvironment().     MutablePropertySources propertySources = environment.getPropertySources().     propertySources.remove(MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME).     assertEquals(0, propertySources.size()).     addInlinedPropertiesToEnvironment(environment, asArray("  ")).     assertEquals(1, propertySources.size()).     assertEquals(0, ((Map) propertySources.iterator().next().getSource()).size()). }
false;public;0;6;;@Test public void convertInlinedPropertiesToMapWithNullInlinedProperties() {     expectedException.expect(IllegalArgumentException.class).     expectedException.expectMessage("inlined").     convertInlinedPropertiesToMap((String[]) null). }
false;private,static;3;8;;private static void assertMergedTestPropertySources(Class<?> testClass, String[] expectedLocations, String[] expectedProperties) {     MergedTestPropertySources mergedPropertySources = buildMergedTestPropertySources(testClass).     assertNotNull(mergedPropertySources).     assertArrayEquals(expectedLocations, mergedPropertySources.getLocations()).     assertArrayEquals(expectedProperties, mergedPropertySources.getProperties()). }
false;private,static;1;4;;@SafeVarargs private static <T> T[] asArray(T... arr) {     return arr. }
