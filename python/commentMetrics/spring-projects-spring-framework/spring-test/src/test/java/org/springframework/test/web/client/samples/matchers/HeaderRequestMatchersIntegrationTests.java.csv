commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() {     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new StringHttpMessageConverter()).     converters.add(new MappingJackson2HttpMessageConverter()).     this.restTemplate = new RestTemplate().     this.restTemplate.setMessageConverters(converters).     this.mockServer = MockRestServiceServer.createServer(this.restTemplate). }
false;public;0;8;;@Test public void testString() throws Exception {     this.mockServer.expect(requestTo("/person/1")).andExpect(header("Accept", "application/json, application/*+json")).andRespond(withSuccess(RESPONSE_BODY, MediaType.APPLICATION_JSON)).     executeAndVerify(). }
false;public;0;8;;@Test public void testStringContains() throws Exception {     this.mockServer.expect(requestTo("/person/1")).andExpect(header("Accept", containsString("json"))).andRespond(withSuccess(RESPONSE_BODY, MediaType.APPLICATION_JSON)).     executeAndVerify(). }
false;private;0;4;;private void executeAndVerify() throws URISyntaxException {     this.restTemplate.getForObject(new URI("/person/1"), Person.class).     this.mockServer.verify(). }
