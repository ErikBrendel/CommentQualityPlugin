commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;14;;@Parameters(name = "{0}") public static Object[][] testData() {     return new Object[][] { { AlwaysFailingBeforeTestClassTestCase.class.getSimpleName(), 1, 0, 0, 1 }, { AlwaysFailingAfterTestClassTestCase.class.getSimpleName(), 1, 1, 0, 1 }, { AlwaysFailingPrepareTestInstanceTestCase.class.getSimpleName(), 1, 0, 0, 1 }, { AlwaysFailingBeforeTestMethodTestCase.class.getSimpleName(), 1, 0, 0, 1 }, { AlwaysFailingBeforeTestExecutionTestCase.class.getSimpleName(), 1, 0, 1, 0 }, { AlwaysFailingAfterTestExecutionTestCase.class.getSimpleName(), 1, 0, 1, 0 }, { AlwaysFailingAfterTestMethodTestCase.class.getSimpleName(), 1, 1, 0, 1 }, { FailingBeforeTransactionTestCase.class.getSimpleName(), 1, 0, 0, 1 }, { FailingAfterTransactionTestCase.class.getSimpleName(), 1, 1, 0, 1 } }. }
false;public;0;18;;@Test @Ignore("Fails against TestNG 6.11") public void runTestAndAssertCounters() throws Exception {     TrackingTestNGTestListener listener = new TrackingTestNGTestListener().     TestNG testNG = new TestNG().     testNG.addListener((ITestNGListener) listener).     testNG.setTestClasses(new Class<?>[] { this.clazz }).     testNG.setVerbose(0).     testNG.run().     String name = this.clazz.getSimpleName().     assertEquals("tests started for [" + name + "] ==> ", this.expectedTestStartCount, listener.testStartCount).     assertEquals("successful tests for [" + name + "] ==> ", this.expectedTestSuccessCount, listener.testSuccessCount).     assertEquals("failed tests for [" + name + "] ==> ", this.expectedFailureCount, listener.testFailureCount).     assertEquals("failed configurations for [" + name + "] ==> ", this.expectedFailedConfigurationsCount, listener.failedConfigurationsCount). }
false;public;1;4;;@Override public void beforeTestClass(TestContext testContext) {     org.testng.Assert.fail("always failing beforeTestClass()"). }
false;public;1;4;;@Override public void afterTestClass(TestContext testContext) {     org.testng.Assert.fail("always failing afterTestClass()"). }
false;public;1;4;;@Override public void prepareTestInstance(TestContext testContext) throws Exception {     org.testng.Assert.fail("always failing prepareTestInstance()"). }
false;public;1;4;;@Override public void beforeTestMethod(TestContext testContext) {     org.testng.Assert.fail("always failing beforeTestMethod()"). }
false;public;1;4;;@Override public void beforeTestExecution(TestContext testContext) {     org.testng.Assert.fail("always failing beforeTestExecution()"). }
false;public;1;4;;@Override public void afterTestExecution(TestContext testContext) {     org.testng.Assert.fail("always failing afterTestExecution()"). }
false;public;1;4;;@Override public void afterTestMethod(TestContext testContext) {     org.testng.Assert.fail("always failing afterTestMethod()"). }
false;public;0;3;;@org.testng.annotations.Test public void testNothing() { }
false;public;0;3;;@org.testng.annotations.Test public void testNothing() { }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     org.testng.Assert.fail("always failing beforeTransaction()"). }
false;public;0;3;;@org.testng.annotations.Test public void testNothing() { }
false;public;0;4;;@AfterTransaction public void afterTransaction() {     org.testng.Assert.fail("always failing afterTransaction()"). }
