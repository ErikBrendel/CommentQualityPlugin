commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void match() throws Exception {     RequestExpectation expectation = new DefaultRequestExpectation(once(), requestTo("/foo")).     expectation.match(createRequest(GET, "/foo")). }
false;public;0;8;;@Test public void matchWithFailedExpectation() throws Exception {     RequestExpectation expectation = new DefaultRequestExpectation(once(), requestTo("/foo")).     expectation.andExpect(method(POST)).     this.thrown.expectMessage("Unexpected HttpMethod expected:<POST> but was:<GET>").     expectation.match(createRequest(GET, "/foo")). }
false;public;0;11;;@Test public void hasRemainingCount() {     RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo")).     expectation.andRespond(withSuccess()).     expectation.incrementAndValidate().     assertTrue(expectation.hasRemainingCount()).     expectation.incrementAndValidate().     assertFalse(expectation.hasRemainingCount()). }
false;public;0;11;;@Test public void isSatisfied() {     RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo")).     expectation.andRespond(withSuccess()).     expectation.incrementAndValidate().     assertFalse(expectation.isSatisfied()).     expectation.incrementAndValidate().     assertTrue(expectation.isSatisfied()). }
false;private;2;9;;@SuppressWarnings("deprecation") private ClientHttpRequest createRequest(HttpMethod method, String url) {     try {         return new org.springframework.mock.http.client.MockAsyncClientHttpRequest(method, new URI(url)).     } catch (URISyntaxException ex) {         throw new IllegalStateException(ex).     } }
