commented;modifiers;parameterAmount;loc;comment;code
false;;0;5;;@Test @EnabledIf("false") void enabledIfWithStringFalse() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("   false   ") void enabledIfWithStringFalseWithSurroundingWhitespace() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("FaLsE") void enabledIfWithStringFalseIgnoreCase() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("${__EnigmaPropertyShouldNotExist__:false}") void enabledIfWithPropertyPlaceholderForNonexistentPropertyWithDefaultValue() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf(expression = "${foo}", loadContext = true) void enabledIfWithPropertyPlaceholder() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf(expression = "\t${foo}   ", loadContext = true) void enabledIfWithPropertyPlaceholderWithSurroundingWhitespace() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("#{T(Boolean).FALSE}") void enabledIfWithSpelBoolean() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("   #{T(Boolean).FALSE}   ") void enabledIfWithSpelBooleanWithSurroundingWhitespace() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("#{'fal' + 'se'}") void enabledIfWithSpelStringConcatenation() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("#{1 + 2 == 4}") void enabledIfWithSpelArithmeticComparison() {     fail("This test must be disabled"). }
false;;0;7;;@Test @EnabledOnMac void enabledIfWithSpelOsCheckInCustomComposedAnnotation() {     String os = System.getProperty("os.name").toLowerCase().     assertTrue(os.contains("mac"), "This test must be enabled on Mac OS").     assertFalse(os.contains("win"), "This test must be disabled on Windows"). }
false;;0;5;;@Test @EnabledIf(expression = "#{@booleanFalseBean}", loadContext = true) void enabledIfWithSpelBooleanFalseBean() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf(expression = "#{@stringFalseBean}", loadContext = true) void enabledIfWithSpelStringFalseBean() {     fail("This test must be disabled"). }
false;;0;4;;@Test void foo() {     fail("This test must be disabled"). }
false;;0;5;;@Test @EnabledIf("true") void bar() {     fail("This test must be disabled due to class-level condition"). }
false;;0;4;;@Bean Boolean booleanFalseBean() {     return Boolean.FALSE. }
false;;0;4;;@Bean String stringFalseBean() {     return "false". }
