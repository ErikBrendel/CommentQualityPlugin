commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void test1InitialState() {     int count = dao.getCount(TEST_NAME).     assertEquals("New TestEntity should have count=0.", 0, count). }
false;public;0;5;;@Test(dependsOnMethods = "test1InitialState") public void test2IncrementCount1() {     int count = dao.incrementCount(TEST_NAME).     assertEquals("Expected count=1 after first increment.", 1, count). }
true;public;0;8;/**  * The default implementation of this method assumes that the transaction  * for {@link #test2IncrementCount1()} was committed. Therefore, it is  * expected that the previous increment has been persisted in the database.  */ ;/**  * The default implementation of this method assumes that the transaction  * for {@link #test2IncrementCount1()} was committed. Therefore, it is  * expected that the previous increment has been persisted in the database.  */ @Test(dependsOnMethods = "test2IncrementCount1") public void test3IncrementCount2() {     int count = dao.getCount(TEST_NAME).     assertEquals("Expected count=1 after test2IncrementCount1().", 1, count).     count = dao.incrementCount(TEST_NAME).     assertEquals("Expected count=2 now.", 2, count). }
false;public;0;4;;@AfterMethod(alwaysRun = true) public void synchronizePersistenceContext() {     em.flush(). }
