commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void buildMultipleTimes() {     MockRestServiceServerBuilder builder = MockRestServiceServer.bindTo(this.restTemplate).     MockRestServiceServer server = builder.build().     server.expect(requestTo("/foo")).andRespond(withSuccess()).     this.restTemplate.getForObject("/foo", Void.class).     server.verify().     server = builder.ignoreExpectOrder(true).build().     server.expect(requestTo("/foo")).andRespond(withSuccess()).     server.expect(requestTo("/bar")).andRespond(withSuccess()).     this.restTemplate.getForObject("/bar", Void.class).     this.restTemplate.getForObject("/foo", Void.class).     server.verify().     server = builder.build().     server.expect(requestTo("/bar")).andRespond(withSuccess()).     this.restTemplate.getForObject("/bar", Void.class).     server.verify(). }
false;public;0;9;;@Test(expected = AssertionError.class) public void exactExpectOrder() {     MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).ignoreExpectOrder(false).build().     server.expect(requestTo("/foo")).andRespond(withSuccess()).     server.expect(requestTo("/bar")).andRespond(withSuccess()).     this.restTemplate.getForObject("/bar", Void.class). }
false;public;0;11;;@Test public void ignoreExpectOrder() {     MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).ignoreExpectOrder(true).build().     server.expect(requestTo("/foo")).andRespond(withSuccess()).     server.expect(requestTo("/bar")).andRespond(withSuccess()).     this.restTemplate.getForObject("/bar", Void.class).     this.restTemplate.getForObject("/foo", Void.class).     server.verify(). }
false;public;0;13;;@Test public void resetAndReuseServer() {     MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).build().     server.expect(requestTo("/foo")).andRespond(withSuccess()).     this.restTemplate.getForObject("/foo", Void.class).     server.verify().     server.reset().     server.expect(requestTo("/bar")).andRespond(withSuccess()).     this.restTemplate.getForObject("/bar", Void.class).     server.verify(). }
false;public;0;16;;@Test public void resetAndReuseServerWithUnorderedExpectationManager() {     MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).ignoreExpectOrder(true).build().     server.expect(requestTo("/foo")).andRespond(withSuccess()).     this.restTemplate.getForObject("/foo", Void.class).     server.verify().     server.reset().     server.expect(requestTo("/foo")).andRespond(withSuccess()).     server.expect(requestTo("/bar")).andRespond(withSuccess()).     this.restTemplate.getForObject("/bar", Void.class).     this.restTemplate.getForObject("/foo", Void.class).     server.verify(). }
false;public;0;19;;// SPR-16132 @Test public void followUpRequestAfterFailure() {     MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).build().     server.expect(requestTo("/some-service/some-endpoint")).andRespond(request -> {         throw new SocketException("pseudo network error").     }).     server.expect(requestTo("/reporting-service/report-error")).andExpect(method(POST)).andRespond(withSuccess()).     try {         this.restTemplate.getForEntity("/some-service/some-endpoint", String.class).     } catch (Exception ex) {         this.restTemplate.postForEntity("/reporting-service/report-error", ex.toString(), String.class).     }     server.verify(). }
