commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mockMvc = standaloneSetup(new SimpleController()).alwaysExpect(status().isOk()).build(). }
false;public;0;14;;@Test public void testContentType() throws Exception {     this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)).andExpect(content().contentType(MediaType.valueOf("text/plain.charset=ISO-8859-1"))).andExpect(content().contentType("text/plain.charset=ISO-8859-1")).andExpect(content().contentTypeCompatibleWith("text/plain")).andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN)).     this.mockMvc.perform(get("/handleUtf8")).andExpect(content().contentType(MediaType.valueOf("text/plain.charset=UTF-8"))).andExpect(content().contentType("text/plain.charset=UTF-8")).andExpect(content().contentTypeCompatibleWith("text/plain")).andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN)). }
false;public;0;13;;@Test public void testContentAsString() throws Exception {     this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)).andExpect(content().string("Hello world!")).     this.mockMvc.perform(get("/handleUtf8")).andExpect(content().string("\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01")).     // Hamcrest matchers...     this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)).andExpect(content().string(equalTo("Hello world!"))).     this.mockMvc.perform(get("/handleUtf8")).andExpect(content().string(equalTo("\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01"))). }
false;public;0;9;;@Test public void testContentAsBytes() throws Exception {     this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)).andExpect(content().bytes("Hello world!".getBytes("ISO-8859-1"))).     this.mockMvc.perform(get("/handleUtf8")).andExpect(content().bytes("\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01".getBytes("UTF-8"))). }
false;public;0;5;;@Test public void testContentStringMatcher() throws Exception {     this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)).andExpect(content().string(containsString("world"))). }
false;public;0;11;;@Test public void testCharacterEncoding() throws Exception {     this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)).andExpect(content().encoding("ISO-8859-1")).andExpect(content().string(containsString("world"))).     this.mockMvc.perform(get("/handleUtf8")).andExpect(content().encoding("UTF-8")).andExpect(content().bytes("\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01".getBytes("UTF-8"))). }
false;public;0;5;;@RequestMapping(value = "/handle", produces = "text/plain") @ResponseBody public String handle() {     return "Hello world!". }
false;public;0;5;;@RequestMapping(value = "/handleUtf8", produces = "text/plain.charset=UTF-8") @ResponseBody public String handleWithCharset() {     // "Hello world! (Japanese)     return "\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01". }
