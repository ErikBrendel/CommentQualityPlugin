commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void afterConfigureAdded(WebTestClient.MockServerSpec<?> spec) {     spec.webFilter(new TestWebFilter("B")). }
false;public;0;19;;@Test public void applyFiltersAfterConfigurerAdded() {     this.serverSpec.webFilter(new TestWebFilter("A")).     this.serverSpec.apply(new MockServerConfigurer() {          @Override         public void afterConfigureAdded(WebTestClient.MockServerSpec<?> spec) {             spec.webFilter(new TestWebFilter("B")).         }     }).     this.serverSpec.build().get().uri("/").exchange().expectBody(String.class).consumeWith(result -> assertThat(result.getResponseBody(), containsString("test-attribute=:A:B"))). }
false;public;1;7;;@Override public void beforeServerCreated(WebHttpHandlerBuilder builder) {     builder.filters(filters -> {         filters.add(0, new TestWebFilter("Fwk-A")).         filters.add(1, new TestWebFilter("Fwk-B")).     }). }
false;public;0;23;;@Test public void applyFiltersBeforeServerCreated() {     this.serverSpec.webFilter(new TestWebFilter("App-A")).     this.serverSpec.webFilter(new TestWebFilter("App-B")).     this.serverSpec.apply(new MockServerConfigurer() {          @Override         public void beforeServerCreated(WebHttpHandlerBuilder builder) {             builder.filters(filters -> {                 filters.add(0, new TestWebFilter("Fwk-A")).                 filters.add(1, new TestWebFilter("Fwk-B")).             }).         }     }).     this.serverSpec.build().get().uri("/").exchange().expectBody(String.class).consumeWith(result -> assertThat(result.getResponseBody(), containsString("test-attribute=:Fwk-A:Fwk-B:App-A:App-B"))). }
false;protected;0;9;;@Override protected WebHttpHandlerBuilder initHttpHandlerBuilder() {     return WebHttpHandlerBuilder.webHandler(exchange -> {         DefaultDataBufferFactory factory = new DefaultDataBufferFactory().         String text = exchange.getAttributes().toString().         DataBuffer buffer = factory.wrap(text.getBytes(StandardCharsets.UTF_8)).         return exchange.getResponse().writeWith(Mono.just(buffer)).     }). }
false;public;2;7;;@Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {     String name = "test-attribute".     String value = exchange.getAttributeOrDefault(name, "").     exchange.getAttributes().put(name, value + ":" + this.name).     return chain.filter(exchange). }
