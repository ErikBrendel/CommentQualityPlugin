commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;/**  * Redeclared to ensure test method execution order. Simply delegates to super.  */ ;/**  * Redeclared to ensure test method execution order. Simply delegates to super.  */ @Test @Override public void test1InitialState() {     super.test1InitialState(). }
true;public;0;5;/**  * Redeclared to ensure test method execution order. Simply delegates to super.  */ ;/**  * Redeclared to ensure test method execution order. Simply delegates to super.  */ @Test @Override public void test2IncrementCount1() {     super.test2IncrementCount1(). }
true;public;0;13;/**  * Overrides parent implementation in order to change expectations to align with  * behavior associated with "required" transactions on repositories/DAOs and  * default rollback semantics for transactions managed by the TestContext  * framework.  */ ;/**  * Overrides parent implementation in order to change expectations to align with  * behavior associated with "required" transactions on repositories/DAOs and  * default rollback semantics for transactions managed by the TestContext  * framework.  */ @Test @Override public void test3IncrementCount2() {     int count = dao.getCount(TEST_NAME).     // Expecting count=0 after test2IncrementCount1() since REQUIRED transactions     // participate in the existing transaction (if present), which in this case is the     // transaction managed by the TestContext framework which will be rolled back     // after each test method.     assertEquals("Expected count=0 after test2IncrementCount1().", 0, count).     count = dao.incrementCount(TEST_NAME).     assertEquals("Expected count=1 now.", 1, count). }
