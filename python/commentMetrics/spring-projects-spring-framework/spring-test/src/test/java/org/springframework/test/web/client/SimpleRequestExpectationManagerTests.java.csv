commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void unexpectedRequest() throws Exception {     try {         this.manager.validateRequest(createRequest(GET, "/foo")).     } catch (AssertionError error) {         assertEquals("No further requests expected: HTTP GET /foo\n" + "0 request(s) executed.\n", error.getMessage()).     } }
false;public;0;4;;@Test public void zeroExpectedRequests() throws Exception {     this.manager.verify(). }
false;public;0;9;;@Test public void sequentialRequests() throws Exception {     this.manager.expectRequest(once(), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(once(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.verify(). }
false;public;0;14;;@Test public void sequentialRequestsTooMany() throws Exception {     this.manager.expectRequest(max(1), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(max(1), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.thrown.expectMessage("No further requests expected: HTTP GET /baz\n" + "2 request(s) executed:\n" + "GET /foo\n" + "GET /bar\n").     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/baz")). }
false;public;0;11;;@Test public void sequentialRequestsTooFew() throws Exception {     this.manager.expectRequest(min(1), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(min(1), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.thrown.expectMessage("Further request(s) expected leaving 1 unsatisfied expectation(s).\n" + "1 request(s) executed:\nGET /foo\n").     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.verify(). }
false;public;0;13;;@Test public void repeatedRequests() throws Exception {     this.manager.expectRequest(times(3), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(times(3), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.verify(). }
false;public;0;18;;@Test public void repeatedRequestsTooMany() throws Exception {     this.manager.expectRequest(max(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(max(2), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.thrown.expectMessage("No further requests expected: HTTP GET /foo\n" + "4 request(s) executed:\n" + "GET /foo\n" + "GET /bar\n" + "GET /foo\n" + "GET /bar\n").     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")). }
false;public;0;15;;@Test public void repeatedRequestsTooFew() throws Exception {     this.manager.expectRequest(min(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(min(2), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.thrown.expectMessage("3 request(s) executed:\n" + "GET /foo\n" + "GET /bar\n" + "GET /foo\n").     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.verify(). }
false;public;0;9;;@Test public void repeatedRequestsNotInOrder() throws Exception {     this.manager.expectRequest(twice(), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(twice(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(twice(), requestTo("/baz")).andExpect(method(GET)).andRespond(withSuccess()).     this.thrown.expectMessage("Unexpected HttpMethod expected:<GET> but was:<POST>").     this.manager.validateRequest(createRequest(POST, "/foo")). }
false;public;0;9;;// SPR-15672 @Test public void sequentialRequestsWithDifferentCount() throws Exception {     this.manager.expectRequest(times(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(once(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")). }
false;public;0;10;;// SPR-15719 @Test public void repeatedRequestsInSequentialOrder() throws Exception {     this.manager.expectRequest(times(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(times(2), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/bar")). }
false;public;0;17;;// SPR-16132 @Test public void sequentialRequestsWithFirstFailing() throws Exception {     this.manager.expectRequest(once(), requestTo("/foo")).andExpect(method(GET)).andRespond(request -> {         throw new SocketException("pseudo network error").     }).     this.manager.expectRequest(once(), requestTo("/handle-error")).andExpect(method(POST)).andRespond(withSuccess()).     try {         this.manager.validateRequest(createRequest(GET, "/foo")).         fail("Expected SocketException").     } catch (SocketException ex) {     // expected     }     this.manager.validateRequest(createRequest(POST, "/handle-error")).     this.manager.verify(). }
false;private;2;8;;private ClientHttpRequest createRequest(HttpMethod method, String url) {     try {         return new MockClientHttpRequest(method, new URI(url)).     } catch (URISyntaxException ex) {         throw new IllegalStateException(ex).     } }
