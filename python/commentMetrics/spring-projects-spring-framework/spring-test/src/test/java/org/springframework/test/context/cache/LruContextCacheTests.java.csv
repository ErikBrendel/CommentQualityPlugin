commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void maxCacheSizeNegativeOne() {     new DefaultContextCache(-1). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void maxCacheSizeZero() {     new DefaultContextCache(0). }
false;public;0;18;;@Test public void maxCacheSizeOne() {     DefaultContextCache cache = new DefaultContextCache(1).     assertEquals(0, cache.size()).     assertEquals(1, cache.getMaxSize()).     cache.put(fooConfig, fooContext).     assertCacheContents(cache, "Foo").     cache.put(fooConfig, fooContext).     assertCacheContents(cache, "Foo").     cache.put(barConfig, barContext).     assertCacheContents(cache, "Bar").     cache.put(fooConfig, fooContext).     assertCacheContents(cache, "Foo"). }
false;public;0;21;;@Test public void maxCacheSizeThree() {     DefaultContextCache cache = new DefaultContextCache(3).     assertEquals(0, cache.size()).     assertEquals(3, cache.getMaxSize()).     cache.put(fooConfig, fooContext).     assertCacheContents(cache, "Foo").     cache.put(fooConfig, fooContext).     assertCacheContents(cache, "Foo").     cache.put(barConfig, barContext).     assertCacheContents(cache, "Foo", "Bar").     cache.put(bazConfig, bazContext).     assertCacheContents(cache, "Foo", "Bar", "Baz").     cache.put(abcConfig, abcContext).     assertCacheContents(cache, "Bar", "Baz", "Abc"). }
false;public;0;23;;@Test public void ensureLruOrderingIsUpdated() {     DefaultContextCache cache = new DefaultContextCache(3).     // Note: when a new entry is added it is considered the MRU entry and inserted at the tail.     cache.put(fooConfig, fooContext).     cache.put(barConfig, barContext).     cache.put(bazConfig, bazContext).     assertCacheContents(cache, "Foo", "Bar", "Baz").     // Note: the MRU entry is moved to the tail when accessed.     cache.get(fooConfig).     assertCacheContents(cache, "Bar", "Baz", "Foo").     cache.get(barConfig).     assertCacheContents(cache, "Baz", "Foo", "Bar").     cache.get(bazConfig).     assertCacheContents(cache, "Foo", "Bar", "Baz").     cache.get(barConfig).     assertCacheContents(cache, "Foo", "Baz", "Bar"). }
false;public;0;19;;@Test public void ensureEvictedContextsAreClosed() {     DefaultContextCache cache = new DefaultContextCache(2).     cache.put(fooConfig, fooContext).     cache.put(barConfig, barContext).     assertCacheContents(cache, "Foo", "Bar").     cache.put(bazConfig, bazContext).     assertCacheContents(cache, "Bar", "Baz").     verify(fooContext, times(1)).close().     cache.put(abcConfig, abcContext).     assertCacheContents(cache, "Baz", "Abc").     verify(barContext, times(1)).close().     verify(abcContext, never()).close().     verify(bazContext, never()).close(). }
false;private,static;1;3;;private static MergedContextConfiguration config(Class<?> clazz) {     return new MergedContextConfiguration(null, null, new Class<?>[] { clazz }, null, null). }
false;private,static;2;15;;@SuppressWarnings("unchecked") private static void assertCacheContents(DefaultContextCache cache, String... expectedNames) {     Map<MergedContextConfiguration, ApplicationContext> contextMap = (Map<MergedContextConfiguration, ApplicationContext>) ReflectionTestUtils.getField(cache, "contextMap").     // @formatter:off     List<String> actualNames = contextMap.keySet().stream().map(cfg -> cfg.getClasses()[0]).map(Class::getSimpleName).collect(toList()).     // @formatter:on     assertEquals(asList(expectedNames), actualNames). }
