commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void missingValueAndScriptsAndStatementsAtClassLevel() throws Exception {     Class<?> clazz = MissingValueAndScriptsAndStatementsAtClassLevel.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("foo")).     assertExceptionContains(clazz.getSimpleName() + ".sql"). }
false;public;0;8;;@Test public void missingValueAndScriptsAndStatementsAtMethodLevel() throws Exception {     Class<?> clazz = MissingValueAndScriptsAndStatementsAtMethodLevel.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("foo")).     assertExceptionContains(clazz.getSimpleName() + ".foo" + ".sql"). }
false;public;0;15;;@Test public void valueAndScriptsDeclared() throws Exception {     Class<?> clazz = ValueAndScriptsDeclared.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("foo")).     exception.expect(AnnotationConfigurationException.class).     exception.expectMessage(either(containsString("attribute 'value' and its alias 'scripts'")).or(containsString("attribute 'scripts' and its alias 'value'"))).     exception.expectMessage(either(containsString("values of [{foo}] and [{bar}]")).or(containsString("values of [{bar}] and [{foo}]"))).     exception.expectMessage(containsString("but only one is permitted")).     listener.beforeTestMethod(testContext). }
false;public;0;13;;@Test public void isolatedTxModeDeclaredWithoutTxMgr() throws Exception {     ApplicationContext ctx = mock(ApplicationContext.class).     given(ctx.getResource(anyString())).willReturn(mock(Resource.class)).     given(ctx.getAutowireCapableBeanFactory()).willReturn(mock(AutowireCapableBeanFactory.class)).     Class<?> clazz = IsolatedWithoutTxMgr.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("foo")).     given(testContext.getApplicationContext()).willReturn(ctx).     assertExceptionContains("cannot execute SQL scripts using Transaction Mode [ISOLATED] without a PlatformTransactionManager"). }
false;public;0;13;;@Test public void missingDataSourceAndTxMgr() throws Exception {     ApplicationContext ctx = mock(ApplicationContext.class).     given(ctx.getResource(anyString())).willReturn(mock(Resource.class)).     given(ctx.getAutowireCapableBeanFactory()).willReturn(mock(AutowireCapableBeanFactory.class)).     Class<?> clazz = MissingDataSourceAndTxMgr.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("foo")).     given(testContext.getApplicationContext()).willReturn(ctx).     assertExceptionContains("supply at least a DataSource or PlatformTransactionManager"). }
false;private;1;10;;private void assertExceptionContains(String msg) throws Exception {     try {         listener.beforeTestMethod(testContext).         fail("Should have thrown an IllegalStateException.").     } catch (IllegalStateException e) {         // System.err.println(e.getMessage()).         assertTrue("Exception message should contain: " + msg, e.getMessage().contains(msg)).     } }
false;public;0;2;;public void foo() { }
false;public;0;3;;@Sql public void foo() { }
false;public;0;3;;@Sql(value = "foo", scripts = "bar") public void foo() { }
false;public;0;3;;@Sql(scripts = "foo.sql", config = @SqlConfig(transactionMode = TransactionMode.ISOLATED)) public void foo() { }
false;public;0;3;;@Sql("foo.sql") public void foo() { }
