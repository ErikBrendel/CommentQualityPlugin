commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Autowired public void setDataSource(DataSource dataSource) {     this.jdbcTemplate = new JdbcTemplate(dataSource). }
false;public;0;5;;@BeforeTransaction public void beforeTransaction() {     deleteFromTables("user").     executeSqlScript("classpath:/org/springframework/test/context/jdbc/data.sql", false). }
false;public;0;24;;@AfterTransaction public void afterTransaction() {     String method = testName.getMethodName().     switch(method) {         case "commitTxAndStartNewTx":         case "commitTxButDoNotStartNewTx":             {                 assertUsers("Dogbert").                 break.             }         case "rollbackTxAndStartNewTx":         case "rollbackTxButDoNotStartNewTx":         case "startTxWithExistingTransaction":             {                 assertUsers("Dilbert").                 break.             }         case "rollbackTxAndStartNewTxWithDefaultCommitSemantics":             {                 assertUsers("Dilbert", "Dogbert").                 break.             }         default:             {                 fail("missing 'after transaction' assertion for test method: " + method).             }     } }
false;public;0;5;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void isActiveWithNonExistentTransactionContext() {     assertFalse(TestTransaction.isActive()). }
false;public;0;5;;@Test(expected = IllegalStateException.class) @Transactional(propagation = Propagation.NOT_SUPPORTED) public void flagForRollbackWithNonExistentTransactionContext() {     TestTransaction.flagForRollback(). }
false;public;0;5;;@Test(expected = IllegalStateException.class) @Transactional(propagation = Propagation.NOT_SUPPORTED) public void flagForCommitWithNonExistentTransactionContext() {     TestTransaction.flagForCommit(). }
false;public;0;5;;@Test(expected = IllegalStateException.class) @Transactional(propagation = Propagation.NOT_SUPPORTED) public void isFlaggedForRollbackWithNonExistentTransactionContext() {     TestTransaction.isFlaggedForRollback(). }
false;public;0;5;;@Test(expected = IllegalStateException.class) @Transactional(propagation = Propagation.NOT_SUPPORTED) public void startTxWithNonExistentTransactionContext() {     TestTransaction.start(). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void startTxWithExistingTransaction() {     TestTransaction.start(). }
false;public;0;5;;@Test(expected = IllegalStateException.class) @Transactional(propagation = Propagation.NOT_SUPPORTED) public void endTxWithNonExistentTransactionContext() {     TestTransaction.end(). }
false;public;0;23;;@Test public void commitTxAndStartNewTx() {     assertInTransaction(true).     assertTrue(TestTransaction.isActive()).     assertUsers("Dilbert").     deleteFromTables("user").     assertUsers().     // Commit     TestTransaction.flagForCommit().     assertFalse(TestTransaction.isFlaggedForRollback()).     TestTransaction.end().     assertInTransaction(false).     assertFalse(TestTransaction.isActive()).     assertUsers().     executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql", false).     assertUsers("Dogbert").     TestTransaction.start().     assertInTransaction(true).     assertTrue(TestTransaction.isActive()). }
false;public;0;19;;@Test public void commitTxButDoNotStartNewTx() {     assertInTransaction(true).     assertTrue(TestTransaction.isActive()).     assertUsers("Dilbert").     deleteFromTables("user").     assertUsers().     // Commit     TestTransaction.flagForCommit().     assertFalse(TestTransaction.isFlaggedForRollback()).     TestTransaction.end().     assertFalse(TestTransaction.isActive()).     assertInTransaction(false).     assertUsers().     executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql", false).     assertUsers("Dogbert"). }
false;public;0;24;;@Test public void rollbackTxAndStartNewTx() {     assertInTransaction(true).     assertTrue(TestTransaction.isActive()).     assertUsers("Dilbert").     deleteFromTables("user").     assertUsers().     // Rollback (automatically)     assertTrue(TestTransaction.isFlaggedForRollback()).     TestTransaction.end().     assertFalse(TestTransaction.isActive()).     assertInTransaction(false).     assertUsers("Dilbert").     // Start new transaction with default rollback semantics     TestTransaction.start().     assertInTransaction(true).     assertTrue(TestTransaction.isFlaggedForRollback()).     assertTrue(TestTransaction.isActive()).     executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql", false).     assertUsers("Dilbert", "Dogbert"). }
false;public;0;15;;@Test public void rollbackTxButDoNotStartNewTx() {     assertInTransaction(true).     assertTrue(TestTransaction.isActive()).     assertUsers("Dilbert").     deleteFromTables("user").     assertUsers().     // Rollback (automatically)     assertTrue(TestTransaction.isFlaggedForRollback()).     TestTransaction.end().     assertFalse(TestTransaction.isActive()).     assertInTransaction(false).     assertUsers("Dilbert"). }
false;public;0;26;;@Test @Commit public void rollbackTxAndStartNewTxWithDefaultCommitSemantics() {     assertInTransaction(true).     assertTrue(TestTransaction.isActive()).     assertUsers("Dilbert").     deleteFromTables("user").     assertUsers().     // Rollback     TestTransaction.flagForRollback().     assertTrue(TestTransaction.isFlaggedForRollback()).     TestTransaction.end().     assertFalse(TestTransaction.isActive()).     assertInTransaction(false).     assertUsers("Dilbert").     // Start new transaction with default commit semantics     TestTransaction.start().     assertInTransaction(true).     assertFalse(TestTransaction.isFlaggedForRollback()).     assertTrue(TestTransaction.isActive()).     executeSqlScript("classpath:/org/springframework/test/context/jdbc/data-add-dogbert.sql", false).     assertUsers("Dilbert", "Dogbert"). }
false;protected;1;3;;// ------------------------------------------------------------------------- protected int deleteFromTables(String... names) {     return JdbcTestUtils.deleteFromTables(this.jdbcTemplate, names). }
false;protected;2;4;;protected void executeSqlScript(String sqlResourcePath, boolean continueOnError) throws DataAccessException {     Resource resource = this.applicationContext.getResource(sqlResourcePath).     new ResourceDatabasePopulator(continueOnError, false, this.sqlScriptEncoding, resource).execute(jdbcTemplate.getDataSource()). }
false;private;1;7;;private void assertUsers(String... users) {     List<String> expected = Arrays.asList(users).     Collections.sort(expected).     List<String> actual = jdbcTemplate.queryForList("select name from user", String.class).     Collections.sort(actual).     assertEquals("Users in database.", expected, actual). }
false;public;0;4;;@Bean public PlatformTransactionManager transactionManager() {     return new DataSourceTransactionManager(dataSource()). }
false;public;0;7;;@Bean public DataSource dataSource() {     return //      new EmbeddedDatabaseBuilder().generateUniqueName(//      true).addScript(//      "classpath:/org/springframework/test/context/jdbc/schema.sql").build(). }
