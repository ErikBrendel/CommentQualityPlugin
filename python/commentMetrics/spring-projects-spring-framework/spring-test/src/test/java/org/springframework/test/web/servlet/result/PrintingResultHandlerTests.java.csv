commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isAsyncStarted() {     return false. }
false;public;0;25;;@Test public void printRequest() throws Exception {     this.request.addParameter("param", "paramValue").     this.request.addHeader("header", "headerValue").     this.request.setCharacterEncoding("UTF-16").     String palindrome = "ablE was I ere I saw Elba".     byte[] bytes = palindrome.getBytes("UTF-16").     this.request.setContent(bytes).     this.request.getSession().setAttribute("foo", "bar").     this.handler.handle(this.mvcResult).     HttpHeaders headers = new HttpHeaders().     headers.set("header", "headerValue").     MultiValueMap<String, String> params = new LinkedMultiValueMap<>().     params.add("param", "paramValue").     assertValue("MockHttpServletRequest", "HTTP Method", this.request.getMethod()).     assertValue("MockHttpServletRequest", "Request URI", this.request.getRequestURI()).     assertValue("MockHttpServletRequest", "Parameters", params).     assertValue("MockHttpServletRequest", "Headers", headers).     assertValue("MockHttpServletRequest", "Body", palindrome).     assertValue("MockHttpServletRequest", "Session Attrs", Collections.singletonMap("foo", "bar")). }
false;public;0;23;;@Test public void printRequestWithoutSession() throws Exception {     this.request.addParameter("param", "paramValue").     this.request.addHeader("header", "headerValue").     this.request.setCharacterEncoding("UTF-16").     String palindrome = "ablE was I ere I saw Elba".     byte[] bytes = palindrome.getBytes("UTF-16").     this.request.setContent(bytes).     this.handler.handle(this.mvcResult).     HttpHeaders headers = new HttpHeaders().     headers.set("header", "headerValue").     MultiValueMap<String, String> params = new LinkedMultiValueMap<>().     params.add("param", "paramValue").     assertValue("MockHttpServletRequest", "HTTP Method", this.request.getMethod()).     assertValue("MockHttpServletRequest", "Request URI", this.request.getRequestURI()).     assertValue("MockHttpServletRequest", "Parameters", params).     assertValue("MockHttpServletRequest", "Headers", headers).     assertValue("MockHttpServletRequest", "Body", palindrome). }
false;public;0;24;;@Test public void printRequestWithEmptySessionMock() throws Exception {     this.request.addParameter("param", "paramValue").     this.request.addHeader("header", "headerValue").     this.request.setCharacterEncoding("UTF-16").     String palindrome = "ablE was I ere I saw Elba".     byte[] bytes = palindrome.getBytes("UTF-16").     this.request.setContent(bytes).     this.request.setSession(Mockito.mock(HttpSession.class)).     this.handler.handle(this.mvcResult).     HttpHeaders headers = new HttpHeaders().     headers.set("header", "headerValue").     MultiValueMap<String, String> params = new LinkedMultiValueMap<>().     params.add("param", "paramValue").     assertValue("MockHttpServletRequest", "HTTP Method", this.request.getMethod()).     assertValue("MockHttpServletRequest", "Request URI", this.request.getRequestURI()).     assertValue("MockHttpServletRequest", "Parameters", params).     assertValue("MockHttpServletRequest", "Headers", headers).     assertValue("MockHttpServletRequest", "Body", palindrome). }
false;public;0;58;;@Test @SuppressWarnings("deprecation") public void printResponse() throws Exception {     Cookie enigmaCookie = new Cookie("enigma", "42").     enigmaCookie.setComment("This is a comment").     enigmaCookie.setHttpOnly(true).     enigmaCookie.setMaxAge(1234).     enigmaCookie.setDomain(".example.com").     enigmaCookie.setPath("/crumbs").     enigmaCookie.setSecure(true).     this.response.setStatus(400, "error").     this.response.addHeader("header", "headerValue").     this.response.setContentType("text/plain").     this.response.getWriter().print("content").     this.response.setForwardedUrl("redirectFoo").     this.response.sendRedirect("/redirectFoo").     this.response.addCookie(new Cookie("cookie", "cookieValue")).     this.response.addCookie(enigmaCookie).     this.handler.handle(this.mvcResult).     // Manually validate cookie values since maxAge changes...     List<String> cookieValues = this.response.getHeaders("Set-Cookie").     assertEquals(2, cookieValues.size()).     assertEquals("cookie=cookieValue", cookieValues.get(0)).     assertTrue("Actual: " + cookieValues.get(1), cookieValues.get(1).startsWith("enigma=42. Path=/crumbs. Domain=.example.com. Max-Age=1234. Expires=")).     HttpHeaders headers = new HttpHeaders().     headers.set("header", "headerValue").     headers.setContentType(MediaType.TEXT_PLAIN).     headers.setLocation(new URI("/redirectFoo")).     headers.put("Set-Cookie", cookieValues).     String heading = "MockHttpServletResponse".     assertValue(heading, "Status", this.response.getStatus()).     assertValue(heading, "Error message", response.getErrorMessage()).     assertValue(heading, "Headers", headers).     assertValue(heading, "Content type", this.response.getContentType()).     assertValue(heading, "Body", this.response.getContentAsString()).     assertValue(heading, "Forwarded URL", this.response.getForwardedUrl()).     assertValue(heading, "Redirected URL", this.response.getRedirectedUrl()).     Map<String, Map<String, Object>> printedValues = this.handler.getPrinter().printedValues.     String[] cookies = (String[]) printedValues.get(heading).get("Cookies").     assertEquals(2, cookies.length).     String cookie1 = cookies[0].     String cookie2 = cookies[1].     assertTrue(cookie1.startsWith("[" + Cookie.class.getSimpleName())).     assertTrue(cookie1.contains("name = 'cookie', value = 'cookieValue'")).     assertTrue(cookie1.endsWith("]")).     assertTrue(cookie2.startsWith("[" + Cookie.class.getSimpleName())).     assertTrue(cookie2.contains("name = 'enigma', value = '42', " + "comment = 'This is a comment', domain = '.example.com', maxAge = 1234, " + "path = '/crumbs', secure = true, version = 0, httpOnly = true")).     assertTrue(cookie2.endsWith("]")). }
false;public;0;9;;@Test public void printRequestWithCharacterEncoding() throws Exception {     this.request.setCharacterEncoding("UTF-8").     this.request.setContent("text".getBytes("UTF-8")).     this.handler.handle(this.mvcResult).     assertValue("MockHttpServletRequest", "Body", "text"). }
false;public;0;6;;@Test public void printRequestWithoutCharacterEncoding() throws Exception {     this.handler.handle(this.mvcResult).     assertValue("MockHttpServletRequest", "Body", "<no character encoding set>"). }
false;public;0;8;;@Test public void printResponseWithCharacterEncoding() throws Exception {     this.response.setCharacterEncoding("UTF-8").     this.response.getWriter().print("text").     this.handler.handle(this.mvcResult).     assertValue("MockHttpServletResponse", "Body", "text"). }
false;public;0;8;;@Test public void printResponseWithDefaultCharacterEncoding() throws Exception {     this.response.getWriter().print("text").     this.handler.handle(this.mvcResult).     assertValue("MockHttpServletResponse", "Body", "text"). }
false;public;0;9;;@Test public void printResponseWithoutCharacterEncoding() throws Exception {     this.response.setCharacterEncoding(null).     this.response.getWriter().print("text").     this.handler.handle(this.mvcResult).     assertValue("MockHttpServletResponse", "Body", "<no character encoding set>"). }
false;public;0;7;;@Test public void printHandlerNull() throws Exception {     StubMvcResult mvcResult = new StubMvcResult(this.request, null, null, null, null, null, this.response).     this.handler.handle(mvcResult).     assertValue("Handler", "Type", null). }
false;public;0;7;;@Test public void printHandler() throws Exception {     this.mvcResult.setHandler(new Object()).     this.handler.handle(this.mvcResult).     assertValue("Handler", "Type", Object.class.getName()). }
false;public;0;9;;@Test public void printHandlerMethod() throws Exception {     HandlerMethod handlerMethod = new HandlerMethod(this, "handle").     this.mvcResult.setHandler(handlerMethod).     this.handler.handle(mvcResult).     assertValue("Handler", "Type", this.getClass().getName()).     assertValue("Handler", "Method", handlerMethod). }
false;public;0;6;;@Test public void resolvedExceptionNull() throws Exception {     this.handler.handle(this.mvcResult).     assertValue("Resolved Exception", "Type", null). }
false;public;0;7;;@Test public void resolvedException() throws Exception {     this.mvcResult.setResolvedException(new Exception()).     this.handler.handle(this.mvcResult).     assertValue("Resolved Exception", "Type", Exception.class.getName()). }
false;public;0;8;;@Test public void modelAndViewNull() throws Exception {     this.handler.handle(this.mvcResult).     assertValue("ModelAndView", "View name", null).     assertValue("ModelAndView", "View", null).     assertValue("ModelAndView", "Model", null). }
false;public;0;18;;@Test public void modelAndView() throws Exception {     BindException bindException = new BindException(new Object(), "target").     bindException.reject("errorCode").     ModelAndView mav = new ModelAndView("viewName").     mav.addObject("attrName", "attrValue").     mav.addObject(BindingResult.MODEL_KEY_PREFIX + "attrName", bindException).     this.mvcResult.setMav(mav).     this.handler.handle(this.mvcResult).     assertValue("ModelAndView", "View name", "viewName").     assertValue("ModelAndView", "View", null).     assertValue("ModelAndView", "Attribute", "attrName").     assertValue("ModelAndView", "value", "attrValue").     assertValue("ModelAndView", "errors", bindException.getAllErrors()). }
false;public;0;6;;@Test public void flashMapNull() throws Exception {     this.handler.handle(mvcResult).     assertValue("FlashMap", "Type", null). }
false;public;0;11;;@Test public void flashMap() throws Exception {     FlashMap flashMap = new FlashMap().     flashMap.put("attrName", "attrValue").     this.request.setAttribute(DispatcherServlet.class.getName() + ".OUTPUT_FLASH_MAP", flashMap).     this.handler.handle(this.mvcResult).     assertValue("FlashMap", "Attribute", "attrName").     assertValue("FlashMap", "value", "attrValue"). }
false;private;3;6;;private void assertValue(String heading, String label, Object value) {     Map<String, Map<String, Object>> printedValues = this.handler.getPrinter().printedValues.     assertTrue("Heading '" + heading + "' not printed", printedValues.containsKey(heading)).     assertEquals("For label '" + label + "' under heading '" + heading + "' =>", value, printedValues.get(heading).get(label)). }
false;public;0;4;;@Override public TestResultValuePrinter getPrinter() {     return (TestResultValuePrinter) super.getPrinter(). }
false;public;1;5;;@Override public void printHeading(String heading) {     this.printedHeading = heading.     this.printedValues.put(heading, new HashMap<>()). }
false;public;2;6;;@Override public void printValue(String label, Object value) {     Assert.notNull(this.printedHeading, "Heading not printed before label " + label + " with value " + value).     this.printedValues.get(this.printedHeading).put(label, value). }
false;public;0;2;;public void handle() { }
