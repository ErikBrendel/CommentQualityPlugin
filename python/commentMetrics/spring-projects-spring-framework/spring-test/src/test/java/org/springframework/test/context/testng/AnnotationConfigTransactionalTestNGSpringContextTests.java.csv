commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private int createPerson(String name) {     return jdbcTemplate.update("INSERT INTO person VALUES(?)", name). }
false;private;1;3;;private int deletePerson(String name) {     return jdbcTemplate.update("DELETE FROM person WHERE name=?", name). }
false;private;2;4;;private void assertNumRowsInPersonTable(int expectedNumRows, String testState) {     assertEquals(countRowsInTable("person"), expectedNumRows, "the number of rows in the person table (" + testState + ")."). }
false;private;1;3;;private void assertAddPerson(final String name) {     assertEquals(createPerson(name), 1, "Adding '" + name + "'"). }
false;;0;7;;@BeforeClass void beforeClass() {     numSetUpCalls = 0.     numSetUpCallsInTransaction = 0.     numTearDownCalls = 0.     numTearDownCallsInTransaction = 0. }
false;;0;7;;@AfterClass void afterClass() {     assertEquals(numSetUpCalls, NUM_TESTS, "number of calls to setUp().").     assertEquals(numSetUpCallsInTransaction, NUM_TX_TESTS, "number of calls to setUp() within a transaction.").     assertEquals(numTearDownCalls, NUM_TESTS, "number of calls to tearDown().").     assertEquals(numTearDownCallsInTransaction, NUM_TX_TESTS, "number of calls to tearDown() within a transaction."). }
false;;0;9;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void autowiringFromConfigClass() {     assertNotNull(employee, "The employee should have been autowired.").     assertEquals(employee.getName(), "John Smith").     assertNotNull(pet, "The pet should have been autowired.").     assertEquals(pet.getName(), "Fido"). }
false;;0;5;;@BeforeTransaction void beforeTransaction() {     assertNumRowsInPersonTable(1, "before a transactional test method").     assertAddPerson(YODA). }
false;;0;8;;@BeforeMethod void setUp() throws Exception {     numSetUpCalls++.     if (inTransaction()) {         numSetUpCallsInTransaction++.     }     assertNumRowsInPersonTable((inTransaction() ? 2 : 1), "before a test method"). }
false;;0;7;;@Test void modifyTestDataWithinTransaction() {     assertInTransaction(true).     assertAddPerson(JANE).     assertAddPerson(SUE).     assertNumRowsInPersonTable(4, "in modifyTestDataWithinTransaction()"). }
false;;0;8;;@AfterMethod void tearDown() throws Exception {     numTearDownCalls++.     if (inTransaction()) {         numTearDownCallsInTransaction++.     }     assertNumRowsInPersonTable((inTransaction() ? 4 : 1), "after a test method"). }
false;;0;5;;@AfterTransaction void afterTransaction() {     assertEquals(deletePerson(YODA), 1, "Deleting yoda").     assertNumRowsInPersonTable(1, "after a transactional test method"). }
false;;0;8;;@Bean Employee employee() {     Employee employee = new Employee().     employee.setName("John Smith").     employee.setAge(42).     employee.setCompany("Acme Widgets, Inc.").     return employee. }
false;;0;4;;@Bean Pet pet() {     return new Pet("Fido"). }
false;;0;4;;@Bean PlatformTransactionManager transactionManager() {     return new DataSourceTransactionManager(dataSource()). }
false;;0;7;;@Bean DataSource dataSource() {     return //      new EmbeddedDatabaseBuilder().addScript(//      "classpath:/org/springframework/test/jdbc/schema.sql").addScript(//      "classpath:/org/springframework/test/jdbc/data.sql").build(). }
