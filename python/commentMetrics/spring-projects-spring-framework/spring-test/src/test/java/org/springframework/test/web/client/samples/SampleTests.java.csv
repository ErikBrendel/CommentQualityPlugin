commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.restTemplate = new RestTemplate().     this.mockServer = MockRestServiceServer.bindTo(this.restTemplate).ignoreExpectOrder(true).build(). }
false;public;0;17;;@Test public void performGet() {     String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}".     this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     @SuppressWarnings("unused")     Person ludwig = this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     // We are only validating the request. The response is mocked out.     // hotel.getId() == 42     // hotel.getName().equals("Holiday Inn")     this.mockServer.verify(). }
false;public;0;21;;@Test public void performGetManyTimes() {     String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}".     this.mockServer.expect(manyTimes(), requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     @SuppressWarnings("unused")     Person ludwig = this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     // We are only validating the request. The response is mocked out.     // hotel.getId() == 42     // hotel.getName().equals("Holiday Inn")     this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     this.mockServer.verify(). }
false;public;0;14;;@Test public void expectNever() {     String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}".     this.mockServer.expect(once(), requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     this.mockServer.expect(never(), requestTo("/composers/43")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     this.mockServer.verify(). }
false;public;0;13;;@Test(expected = AssertionError.class) public void expectNeverViolated() {     String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}".     this.mockServer.expect(once(), requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     this.mockServer.expect(never(), requestTo("/composers/43")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     this.restTemplate.getForObject("/composers/{id}", Person.class, 43). }
false;public;0;16;;@Test public void performGetWithResponseBodyFromFile() {     Resource responseBody = new ClassPathResource("ludwig.json", this.getClass()).     this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     @SuppressWarnings("unused")     Person ludwig = this.restTemplate.getForObject("/composers/{id}", Person.class, 42).     // hotel.getId() == 42     // hotel.getName().equals("Holiday Inn")     this.mockServer.verify(). }
false;public;0;30;;@Test public void verify() {     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("1", MediaType.TEXT_PLAIN)).     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("2", MediaType.TEXT_PLAIN)).     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("4", MediaType.TEXT_PLAIN)).     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("8", MediaType.TEXT_PLAIN)).     @SuppressWarnings("unused")     String result1 = this.restTemplate.getForObject("/number", String.class).     // result1 == "1"     @SuppressWarnings("unused")     String result2 = this.restTemplate.getForObject("/number", String.class).     try {         this.mockServer.verify().     } catch (AssertionError error) {         assertTrue(error.getMessage(), error.getMessage().contains("2 unsatisfied expectation(s)")).     } }
false;public;0;20;;// SPR-14694 @Test public void repeatedAccessToResponseViaResource() {     Resource resource = new ClassPathResource("ludwig.json", this.getClass()).     RestTemplate restTemplate = new RestTemplate().     restTemplate.setInterceptors(Collections.singletonList(new ContentInterceptor(resource))).     MockRestServiceServer mockServer = MockRestServiceServer.bindTo(restTemplate).ignoreExpectOrder(true).bufferContent().build().     mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(resource, MediaType.APPLICATION_JSON)).     restTemplate.getForObject("/composers/{id}", Person.class, 42).     mockServer.verify(). }
false;public;3;10;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     ClientHttpResponse response = execution.execute(request, body).     byte[] expected = FileCopyUtils.copyToByteArray(this.resource.getInputStream()).     byte[] actual = FileCopyUtils.copyToByteArray(response.getBody()).     assertEquals(new String(expected), new String(actual)).     return response. }
