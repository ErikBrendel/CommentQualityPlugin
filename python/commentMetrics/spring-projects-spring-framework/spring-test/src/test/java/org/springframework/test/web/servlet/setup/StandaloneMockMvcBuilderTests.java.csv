commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;// SPR-10825 @Test public void placeHoldersInRequestMapping() throws Exception {     TestStandaloneMockMvcBuilder builder = new TestStandaloneMockMvcBuilder(new PlaceholderController()).     builder.addPlaceholderValue("sys.login.ajax", "/foo").     builder.build().     RequestMappingHandlerMapping hm = builder.wac.getBean(RequestMappingHandlerMapping.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo").     HandlerExecutionChain chain = hm.getHandler(request).     assertNotNull(chain).     assertEquals("handleWithPlaceholders", ((HandlerMethod) chain.getHandler()).getMethod().getName()). }
false;public;0;17;;// SPR-13637 @Test public void suffixPatternMatch() throws Exception {     TestStandaloneMockMvcBuilder builder = new TestStandaloneMockMvcBuilder(new PersonController()).     builder.setUseSuffixPatternMatch(false).     builder.build().     RequestMappingHandlerMapping hm = builder.wac.getBean(RequestMappingHandlerMapping.class).     MockHttpServletRequest request = new MockHttpServletRequest("GET", "/persons").     HandlerExecutionChain chain = hm.getHandler(request).     assertNotNull(chain).     assertEquals("persons", ((HandlerMethod) chain.getHandler()).getMethod().getName()).     request = new MockHttpServletRequest("GET", "/persons.xml").     chain = hm.getHandler(request).     assertNull(chain). }
false;public;0;7;;// SPR-12553 @Test public void applicationContextAttribute() {     TestStandaloneMockMvcBuilder builder = new TestStandaloneMockMvcBuilder(new PlaceholderController()).     builder.addPlaceholderValue("sys.login.ajax", "/foo").     WebApplicationContext wac = builder.initWebAppContext().     assertEquals(wac, WebApplicationContextUtils.getRequiredWebApplicationContext(wac.getServletContext())). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void addFiltersFiltersNull() {     StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController()).     builder.addFilters((Filter[]) null). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void addFiltersFiltersContainsNull() {     StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController()).     builder.addFilters(new ContinueFilter(), (Filter) null). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void addFilterPatternsNull() {     StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController()).     builder.addFilter(new ContinueFilter(), (String[]) null). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void addFilterPatternContainsNull() {     StandaloneMockMvcBuilder builder = MockMvcBuilders.standaloneSetup(new PersonController()).     builder.addFilter(new ContinueFilter(), (String) null). }
false;public;0;9;;// SPR-13375 @Test @SuppressWarnings("rawtypes") public void springHandlerInstantiator() {     TestStandaloneMockMvcBuilder builder = new TestStandaloneMockMvcBuilder(new PersonController()).     builder.build().     SpringHandlerInstantiator instantiator = new SpringHandlerInstantiator(builder.wac.getAutowireCapableBeanFactory()).     JsonSerializer serializer = instantiator.serializerInstance(null, null, UnknownSerializer.class).     assertNotNull(serializer). }
false;private;0;2;;@RequestMapping(value = "${sys.login.ajax}") private void handleWithPlaceholders() { }
false;protected;0;5;;@Override protected WebApplicationContext initWebAppContext() {     this.wac = super.initWebAppContext().     return this.wac. }
false;public;0;4;;@RequestMapping(value = "/persons") public String persons() {     return null. }
false;public;0;4;;@RequestMapping(value = "/forward") public String forward() {     return "forward:/persons". }
false;protected;3;6;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     filterChain.doFilter(request, response). }
