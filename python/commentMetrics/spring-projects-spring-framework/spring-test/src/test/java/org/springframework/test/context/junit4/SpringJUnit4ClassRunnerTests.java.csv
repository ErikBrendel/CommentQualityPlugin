commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void prepareTestInstance(Object testInstance) {     throw new RuntimeException("This RuntimeException should be caught and wrapped in an Exception."). }
false;protected;1;11;;@Override protected TestContextManager createTestContextManager(Class<?> clazz) {     return new TestContextManager(clazz) {          @Override         public void prepareTestInstance(Object testInstance) {             throw new RuntimeException("This RuntimeException should be caught and wrapped in an Exception.").         }     }. }
false;public;0;18;;@Test(expected = Exception.class) public void checkThatExceptionsAreNotSilentlySwallowed() throws Exception {     SpringJUnit4ClassRunner runner = new SpringJUnit4ClassRunner(getClass()) {          @Override         protected TestContextManager createTestContextManager(Class<?> clazz) {             return new TestContextManager(clazz) {                  @Override                 public void prepareTestInstance(Object testInstance) {                     throw new RuntimeException("This RuntimeException should be caught and wrapped in an Exception.").                 }             }.         }     }.     runner.createTest(). }
false;public;0;7;;@Test public void getSpringTimeoutViaMetaAnnotation() throws Exception {     SpringJUnit4ClassRunner runner = new SpringJUnit4ClassRunner(getClass()).     long timeout = runner.getSpringTimeout(new FrameworkMethod(getClass().getDeclaredMethod("springTimeoutWithMetaAnnotation"))).     assertEquals(10, timeout). }
false;public;0;7;;@Test public void getSpringTimeoutViaMetaAnnotationWithOverride() throws Exception {     SpringJUnit4ClassRunner runner = new SpringJUnit4ClassRunner(getClass()).     long timeout = runner.getSpringTimeout(new FrameworkMethod(getClass().getDeclaredMethod("springTimeoutWithMetaAnnotationAndOverride"))).     assertEquals(42, timeout). }
false;;0;4;;// ------------------------------------------------------------------------- @MetaTimed void springTimeoutWithMetaAnnotation() { /* no-op */ }
false;;0;4;;@MetaTimedWithOverride(millis = 42) void springTimeoutWithMetaAnnotationAndOverride() { /* no-op */ }
