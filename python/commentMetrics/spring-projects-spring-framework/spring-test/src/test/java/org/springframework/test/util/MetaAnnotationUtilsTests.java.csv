commented;modifiers;parameterAmount;loc;comment;code
false;private;3;5;;private void assertAtComponentOnComposedAnnotation(Class<?> rootDeclaringClass, String name, Class<? extends Annotation> composedAnnotationType) {     assertAtComponentOnComposedAnnotation(rootDeclaringClass, rootDeclaringClass, name, composedAnnotationType). }
false;private;4;5;;private void assertAtComponentOnComposedAnnotation(Class<?> startClass, Class<?> rootDeclaringClass, String name, Class<? extends Annotation> composedAnnotationType) {     assertAtComponentOnComposedAnnotation(startClass, rootDeclaringClass, composedAnnotationType, name, composedAnnotationType). }
false;private;5;12;;private void assertAtComponentOnComposedAnnotation(Class<?> startClass, Class<?> rootDeclaringClass, Class<?> declaringClass, String name, Class<? extends Annotation> composedAnnotationType) {     AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(startClass, Component.class).     assertNotNull("AnnotationDescriptor should not be null", descriptor).     assertEquals("rootDeclaringClass", rootDeclaringClass, descriptor.getRootDeclaringClass()).     assertEquals("declaringClass", declaringClass, descriptor.getDeclaringClass()).     assertEquals("annotationType", Component.class, descriptor.getAnnotationType()).     assertEquals("component name", name, descriptor.getAnnotation().value()).     assertNotNull("composedAnnotation should not be null", descriptor.getComposedAnnotation()).     assertEquals("composedAnnotationType", composedAnnotationType, descriptor.getComposedAnnotationType()). }
false;private;3;6;;private void assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(Class<?> startClass, String name, Class<? extends Annotation> composedAnnotationType) {     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, startClass, name, composedAnnotationType). }
false;private;4;6;;private void assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(Class<?> startClass, Class<?> rootDeclaringClass, String name, Class<? extends Annotation> composedAnnotationType) {     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, rootDeclaringClass, composedAnnotationType, name, composedAnnotationType). }
false;private;5;17;;@SuppressWarnings("unchecked") private void assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(Class<?> startClass, Class<?> rootDeclaringClass, Class<?> declaringClass, String name, Class<? extends Annotation> composedAnnotationType) {     Class<Component> annotationType = Component.class.     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(startClass, Service.class, annotationType, Order.class, Transactional.class).     assertNotNull("UntypedAnnotationDescriptor should not be null", descriptor).     assertEquals("rootDeclaringClass", rootDeclaringClass, descriptor.getRootDeclaringClass()).     assertEquals("declaringClass", declaringClass, descriptor.getDeclaringClass()).     assertEquals("annotationType", annotationType, descriptor.getAnnotationType()).     assertEquals("component name", name, ((Component) descriptor.getAnnotation()).value()).     assertNotNull("composedAnnotation should not be null", descriptor.getComposedAnnotation()).     assertEquals("composedAnnotationType", composedAnnotationType, descriptor.getComposedAnnotationType()). }
false;public;0;5;;@Test public void findAnnotationDescriptorWithNoAnnotationPresent() {     assertNull(findAnnotationDescriptor(NonAnnotatedInterface.class, Transactional.class)).     assertNull(findAnnotationDescriptor(NonAnnotatedClass.class, Transactional.class)). }
false;public;0;8;;@Test public void findAnnotationDescriptorWithInheritedAnnotationOnClass() {     // Note: @Transactional is inherited     assertEquals(InheritedAnnotationClass.class, findAnnotationDescriptor(InheritedAnnotationClass.class, Transactional.class).getRootDeclaringClass()).     assertEquals(InheritedAnnotationClass.class, findAnnotationDescriptor(SubInheritedAnnotationClass.class, Transactional.class).getRootDeclaringClass()). }
false;public;0;24;;@Test public void findAnnotationDescriptorWithInheritedAnnotationOnInterface() {     // Note: @Transactional is inherited     Transactional rawAnnotation = InheritedAnnotationInterface.class.getAnnotation(Transactional.class).     AnnotationDescriptor<Transactional> descriptor = findAnnotationDescriptor(InheritedAnnotationInterface.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(InheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(InheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     descriptor = findAnnotationDescriptor(SubInheritedAnnotationInterface.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(SubInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(InheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     descriptor = findAnnotationDescriptor(SubSubInheritedAnnotationInterface.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(SubSubInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(InheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()). }
false;public;0;8;;@Test public void findAnnotationDescriptorForNonInheritedAnnotationOnClass() {     // Note: @Order is not inherited.     assertEquals(NonInheritedAnnotationClass.class, findAnnotationDescriptor(NonInheritedAnnotationClass.class, Order.class).getRootDeclaringClass()).     assertEquals(NonInheritedAnnotationClass.class, findAnnotationDescriptor(SubNonInheritedAnnotationClass.class, Order.class).getRootDeclaringClass()). }
false;public;0;18;;@Test public void findAnnotationDescriptorForNonInheritedAnnotationOnInterface() {     // Note: @Order is not inherited.     Order rawAnnotation = NonInheritedAnnotationInterface.class.getAnnotation(Order.class).     AnnotationDescriptor<Order> descriptor = findAnnotationDescriptor(NonInheritedAnnotationInterface.class, Order.class).     assertNotNull(descriptor).     assertEquals(NonInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(NonInheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     descriptor = findAnnotationDescriptor(SubNonInheritedAnnotationInterface.class, Order.class).     assertNotNull(descriptor).     assertEquals(SubNonInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(NonInheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()). }
false;public;0;4;;@Test public void findAnnotationDescriptorWithMetaComponentAnnotation() {     assertAtComponentOnComposedAnnotation(HasMetaComponentAnnotation.class, "meta1", Meta1.class). }
false;public;0;11;;@Test public void findAnnotationDescriptorWithLocalAndMetaComponentAnnotation() {     Class<Component> annotationType = Component.class.     AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(HasLocalAndMetaComponentAnnotation.class, annotationType).     assertEquals(HasLocalAndMetaComponentAnnotation.class, descriptor.getRootDeclaringClass()).     assertEquals(annotationType, descriptor.getAnnotationType()).     assertNull(descriptor.getComposedAnnotation()).     assertNull(descriptor.getComposedAnnotationType()). }
false;public;0;4;;@Test public void findAnnotationDescriptorForInterfaceWithMetaAnnotation() {     assertAtComponentOnComposedAnnotation(InterfaceWithMetaAnnotation.class, "meta1", Meta1.class). }
false;public;0;12;;@Test public void findAnnotationDescriptorForClassWithMetaAnnotatedInterface() {     Component rawAnnotation = AnnotationUtils.findAnnotation(ClassWithMetaAnnotatedInterface.class, Component.class).     AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(ClassWithMetaAnnotatedInterface.class, Component.class).     assertNotNull(descriptor).     assertEquals(ClassWithMetaAnnotatedInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(Meta1.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     assertEquals(Meta1.class, descriptor.getComposedAnnotation().annotationType()). }
false;public;0;15;;@Test public void findAnnotationDescriptorForClassWithLocalMetaAnnotationAndAnnotatedSuperclass() {     AnnotationDescriptor<ContextConfiguration> descriptor = findAnnotationDescriptor(MetaAnnotatedAndSuperAnnotatedContextConfigClass.class, ContextConfiguration.class).     assertNotNull("AnnotationDescriptor should not be null", descriptor).     assertEquals("rootDeclaringClass", MetaAnnotatedAndSuperAnnotatedContextConfigClass.class, descriptor.getRootDeclaringClass()).     assertEquals("declaringClass", MetaConfig.class, descriptor.getDeclaringClass()).     assertEquals("annotationType", ContextConfiguration.class, descriptor.getAnnotationType()).     assertNotNull("composedAnnotation should not be null", descriptor.getComposedAnnotation()).     assertEquals("composedAnnotationType", MetaConfig.class, descriptor.getComposedAnnotationType()).     assertArrayEquals("configured classes", new Class<?>[] { String.class }, descriptor.getAnnotationAttributes().getClassArray("classes")). }
false;public;0;4;;@Test public void findAnnotationDescriptorForClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {     assertAtComponentOnComposedAnnotation(ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, "meta2", Meta2.class). }
false;public;0;5;;@Test public void findAnnotationDescriptorForSubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {     assertAtComponentOnComposedAnnotation(SubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, "meta2", Meta2.class). }
true;public;0;5;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test public void findAnnotationDescriptorOnMetaMetaAnnotatedClass() {     Class<MetaMetaAnnotatedClass> startClass = MetaMetaAnnotatedClass.class.     assertAtComponentOnComposedAnnotation(startClass, startClass, Meta2.class, "meta2", MetaMeta.class). }
true;public;0;5;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test public void findAnnotationDescriptorOnMetaMetaMetaAnnotatedClass() {     Class<MetaMetaMetaAnnotatedClass> startClass = MetaMetaMetaAnnotatedClass.class.     assertAtComponentOnComposedAnnotation(startClass, startClass, Meta2.class, "meta2", MetaMetaMeta.class). }
true;public;0;7;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test public void findAnnotationDescriptorOnAnnotatedClassWithMissingTargetMetaAnnotation() {     // InheritedAnnotationClass is NOT annotated or meta-annotated with @Component     AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(InheritedAnnotationClass.class, Component.class).     assertNull("Should not find @Component on InheritedAnnotationClass", descriptor). }
true;public;0;6;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test public void findAnnotationDescriptorOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {     AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(MetaCycleAnnotatedClass.class, Component.class).     assertNull("Should not find @Component on MetaCycleAnnotatedClass", descriptor). }
false;public;0;6;;// ------------------------------------------------------------------------- @Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesWithNoAnnotationPresent() {     assertNull(findAnnotationDescriptorForTypes(NonAnnotatedInterface.class, Transactional.class, Component.class)).     assertNull(findAnnotationDescriptorForTypes(NonAnnotatedClass.class, Transactional.class, Order.class)). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesWithInheritedAnnotationOnClass() {     // Note: @Transactional is inherited     assertEquals(InheritedAnnotationClass.class, findAnnotationDescriptorForTypes(InheritedAnnotationClass.class, Transactional.class).getRootDeclaringClass()).     assertEquals(InheritedAnnotationClass.class, findAnnotationDescriptorForTypes(SubInheritedAnnotationClass.class, Transactional.class).getRootDeclaringClass()). }
false;public;0;25;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesWithInheritedAnnotationOnInterface() {     // Note: @Transactional is inherited     Transactional rawAnnotation = InheritedAnnotationInterface.class.getAnnotation(Transactional.class).     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(InheritedAnnotationInterface.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(InheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(InheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     descriptor = findAnnotationDescriptorForTypes(SubInheritedAnnotationInterface.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(SubInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(InheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     descriptor = findAnnotationDescriptorForTypes(SubSubInheritedAnnotationInterface.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(SubSubInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(InheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()). }
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesForNonInheritedAnnotationOnClass() {     // Note: @Order is not inherited.     assertEquals(NonInheritedAnnotationClass.class, findAnnotationDescriptorForTypes(NonInheritedAnnotationClass.class, Order.class).getRootDeclaringClass()).     assertEquals(NonInheritedAnnotationClass.class, findAnnotationDescriptorForTypes(SubNonInheritedAnnotationClass.class, Order.class).getRootDeclaringClass()). }
false;public;0;19;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesForNonInheritedAnnotationOnInterface() {     // Note: @Order is not inherited.     Order rawAnnotation = NonInheritedAnnotationInterface.class.getAnnotation(Order.class).     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(NonInheritedAnnotationInterface.class, Order.class).     assertNotNull(descriptor).     assertEquals(NonInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(NonInheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     descriptor = findAnnotationDescriptorForTypes(SubNonInheritedAnnotationInterface.class, Order.class).     assertNotNull(descriptor).     assertEquals(SubNonInheritedAnnotationInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(NonInheritedAnnotationInterface.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()). }
false;public;0;11;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesWithLocalAndMetaComponentAnnotation() {     Class<Component> annotationType = Component.class.     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(HasLocalAndMetaComponentAnnotation.class, Transactional.class, annotationType, Order.class).     assertEquals(HasLocalAndMetaComponentAnnotation.class, descriptor.getRootDeclaringClass()).     assertEquals(annotationType, descriptor.getAnnotationType()).     assertNull(descriptor.getComposedAnnotation()).     assertNull(descriptor.getComposedAnnotationType()). }
false;public;0;5;;@Test public void findAnnotationDescriptorForTypesWithMetaComponentAnnotation() {     Class<HasMetaComponentAnnotation> startClass = HasMetaComponentAnnotation.class.     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, "meta1", Meta1.class). }
false;public;0;18;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesWithMetaAnnotationWithDefaultAttributes() {     Class<?> startClass = MetaConfigWithDefaultAttributesTestCase.class.     Class<ContextConfiguration> annotationType = ContextConfiguration.class.     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(startClass, Service.class, ContextConfiguration.class, Order.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(startClass, descriptor.getRootDeclaringClass()).     assertEquals(annotationType, descriptor.getAnnotationType()).     assertArrayEquals(new Class<?>[] {}, ((ContextConfiguration) descriptor.getAnnotation()).value()).     assertArrayEquals(new Class<?>[] { MetaConfig.DevConfig.class, MetaConfig.ProductionConfig.class }, descriptor.getAnnotationAttributes().getClassArray("classes")).     assertNotNull(descriptor.getComposedAnnotation()).     assertEquals(MetaConfig.class, descriptor.getComposedAnnotationType()). }
false;public;0;18;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesWithMetaAnnotationWithOverriddenAttributes() {     Class<?> startClass = MetaConfigWithOverriddenAttributesTestCase.class.     Class<ContextConfiguration> annotationType = ContextConfiguration.class.     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(startClass, Service.class, ContextConfiguration.class, Order.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(startClass, descriptor.getRootDeclaringClass()).     assertEquals(annotationType, descriptor.getAnnotationType()).     assertArrayEquals(new Class<?>[] {}, ((ContextConfiguration) descriptor.getAnnotation()).value()).     assertArrayEquals(new Class<?>[] { MetaAnnotationUtilsTests.class }, descriptor.getAnnotationAttributes().getClassArray("classes")).     assertNotNull(descriptor.getComposedAnnotation()).     assertEquals(MetaConfig.class, descriptor.getComposedAnnotationType()). }
false;public;0;5;;@Test public void findAnnotationDescriptorForTypesForInterfaceWithMetaAnnotation() {     Class<InterfaceWithMetaAnnotation> startClass = InterfaceWithMetaAnnotation.class.     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, "meta1", Meta1.class). }
false;public;0;14;;@Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesForClassWithMetaAnnotatedInterface() {     Component rawAnnotation = AnnotationUtils.findAnnotation(ClassWithMetaAnnotatedInterface.class, Component.class).     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(ClassWithMetaAnnotatedInterface.class, Service.class, Component.class, Order.class, Transactional.class).     assertNotNull(descriptor).     assertEquals(ClassWithMetaAnnotatedInterface.class, descriptor.getRootDeclaringClass()).     assertEquals(Meta1.class, descriptor.getDeclaringClass()).     assertEquals(rawAnnotation, descriptor.getAnnotation()).     assertEquals(Meta1.class, descriptor.getComposedAnnotation().annotationType()). }
false;public;0;5;;@Test public void findAnnotationDescriptorForTypesForClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {     Class<ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface> startClass = ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class.     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, "meta2", Meta2.class). }
false;public;0;6;;@Test public void findAnnotationDescriptorForTypesForSubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(SubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, "meta2", Meta2.class). }
true;public;0;6;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test public void findAnnotationDescriptorForTypesOnMetaMetaAnnotatedClass() {     Class<MetaMetaAnnotatedClass> startClass = MetaMetaAnnotatedClass.class.     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, startClass, Meta2.class, "meta2", MetaMeta.class). }
true;public;0;6;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test public void findAnnotationDescriptorForTypesOnMetaMetaMetaAnnotatedClass() {     Class<MetaMetaMetaAnnotatedClass> startClass = MetaMetaMetaAnnotatedClass.class.     assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, startClass, Meta2.class, "meta2", MetaMetaMeta.class). }
true;public;0;9;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesOnAnnotatedClassWithMissingTargetMetaAnnotation() {     // InheritedAnnotationClass is NOT annotated or meta-annotated with @Component,     // @Service, or @Order, but it is annotated with @Transactional.     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(InheritedAnnotationClass.class, Service.class, Component.class, Order.class).     assertNull("Should not find @Component on InheritedAnnotationClass", descriptor). }
true;public;0;7;/**  * @since 4.0.3  */ ;/**  * @since 4.0.3  */ @Test @SuppressWarnings("unchecked") public void findAnnotationDescriptorForTypesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {     UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(MetaCycleAnnotatedClass.class, Service.class, Component.class, Order.class).     assertNull("Should not find @Component on MetaCycleAnnotatedClass", descriptor). }
