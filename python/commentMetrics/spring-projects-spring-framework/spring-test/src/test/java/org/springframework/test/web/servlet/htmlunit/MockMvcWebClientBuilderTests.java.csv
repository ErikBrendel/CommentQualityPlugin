commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void mockMvcSetupNull() {     MockMvcWebClientBuilder.mockMvcSetup(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void webAppContextSetupNull() {     MockMvcWebClientBuilder.webAppContextSetup(null). }
false;public;0;7;;@Test public void mockMvcSetupWithDefaultWebClientDelegate() throws Exception {     WebClient client = MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).build().     assertMockMvcUsed(client, "http://localhost/test").     Assume.group(TestGroup.PERFORMANCE, () -> assertMockMvcNotUsed(client, "http://example.com/")). }
false;public;0;8;;@Test public void mockMvcSetupWithCustomWebClientDelegate() throws Exception {     WebClient otherClient = new WebClient().     WebClient client = MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).withDelegate(otherClient).build().     assertMockMvcUsed(client, "http://localhost/test").     Assume.group(TestGroup.PERFORMANCE, () -> assertMockMvcNotUsed(client, "http://example.com/")). }
false;public;0;9;;// SPR-14066 @Test public void cookieManagerShared() throws Exception {     this.mockMvc = MockMvcBuilders.standaloneSetup(new CookieController()).build().     WebClient client = MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).build().     assertThat(getResponse(client, "http://localhost/").getContentAsString(), equalTo("NA")).     client.getCookieManager().addCookie(new Cookie("localhost", "cookie", "cookieManagerShared")).     assertThat(getResponse(client, "http://localhost/").getContentAsString(), equalTo("cookieManagerShared")). }
false;public;0;11;;// SPR-14265 @Test public void cookiesAreManaged() throws Exception {     this.mockMvc = MockMvcBuilders.standaloneSetup(new CookieController()).build().     WebClient client = MockMvcWebClientBuilder.mockMvcSetup(this.mockMvc).build().     assertThat(getResponse(client, "http://localhost/").getContentAsString(), equalTo("NA")).     assertThat(postResponse(client, "http://localhost/?cookie=foo").getContentAsString(), equalTo("Set")).     assertThat(getResponse(client, "http://localhost/").getContentAsString(), equalTo("foo")).     assertThat(deleteResponse(client, "http://localhost/").getContentAsString(), equalTo("Delete")).     assertThat(getResponse(client, "http://localhost/").getContentAsString(), equalTo("NA")). }
false;private;2;3;;private void assertMockMvcUsed(WebClient client, String url) throws Exception {     assertThat(getResponse(client, url).getContentAsString(), equalTo("mvc")). }
false;private;2;3;;private void assertMockMvcNotUsed(WebClient client, String url) throws Exception {     assertThat(getResponse(client, url).getContentAsString(), not(equalTo("mvc"))). }
false;private;2;3;;private WebResponse getResponse(WebClient client, String url) throws IOException {     return createResponse(client, new WebRequest(new URL(url))). }
false;private;2;3;;private WebResponse postResponse(WebClient client, String url) throws IOException {     return createResponse(client, new WebRequest(new URL(url), HttpMethod.POST)). }
false;private;2;3;;private WebResponse deleteResponse(WebClient client, String url) throws IOException {     return createResponse(client, new WebRequest(new URL(url), HttpMethod.DELETE)). }
false;private;2;3;;private WebResponse createResponse(WebClient client, WebRequest request) throws IOException {     return client.getWebConnection().getResponse(request). }
false;public;1;4;;@RequestMapping public String contextPath(HttpServletRequest request) {     return "mvc". }
false;;1;4;;@RequestMapping(path = "/", produces = "text/plain") String cookie(@CookieValue(name = COOKIE_NAME, defaultValue = "NA") String cookie) {     return cookie. }
false;;2;5;;@PostMapping(path = "/", produces = "text/plain") String setCookie(@RequestParam String cookie, HttpServletResponse response) {     response.addCookie(new javax.servlet.http.Cookie(COOKIE_NAME, cookie)).     return "Set". }
false;;1;7;;@DeleteMapping(path = "/", produces = "text/plain") String deleteCookie(HttpServletResponse response) {     javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(COOKIE_NAME, "").     cookie.setMaxAge(0).     response.addCookie(cookie).     return "Delete". }
