# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1337115871;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method instead of a singleton bean. The result is_that this method will be called at least twice:__<ul>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ul>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is most certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/context/junit4/spr9051/schema.sql")_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,instead,of,a,singleton,bean,the,result,is,that,this,method,will,be,called,at,least,twice,ul,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ul,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,most,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,context,junit4,spr9051,schema,sql,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1337118349;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method instead of a singleton bean. The result is_that this method will be called at least twice:__<ul>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ul>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is most certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/context/junit4/spr9051/schema.sql")_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,instead,of,a,singleton,bean,the,result,is,that,this,method,will,be,called,at,least,twice,ul,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ul,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,most,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,context,junit4,spr9051,schema,sql,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1337130495;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method instead of a singleton bean. The result is_that this method will be called at least twice:__<ul>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ul>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is most certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/context/junit4/spr9051/schema.sql")_			_			.setName(getClass().getName())_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,instead,of,a,singleton,bean,the,result,is,that,this,method,will,be,called,at,least,twice,ul,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ul,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,most,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,context,junit4,spr9051,schema,sql,set,name,get,class,get,name,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1337370857;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method when invoked directly (e.g., from_{@link #transactionManager()}) and as a singleton bean when retrieved_through the application context (e.g., when injected into the test_instance). The result is that this method will be called twice:__<ol>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ol>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is almost certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/context/junit4/spr9051/schema.sql")_			_			.setName(getClass().getName())_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,when,invoked,directly,e,g,from,link,transaction,manager,and,as,a,singleton,bean,when,retrieved,through,the,application,context,e,g,when,injected,into,the,test,instance,the,result,is,that,this,method,will,be,called,twice,ol,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ol,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,almost,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,context,junit4,spr9051,schema,sql,set,name,get,class,get,name,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1356735495;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method when invoked directly (e.g., from_{@link #transactionManager()}) and as a singleton bean when retrieved_through the application context (e.g., when injected into the test_instance). The result is that this method will be called twice:__<ol>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ol>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is almost certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/context/junit4/spr9051/schema.sql")_			_			.setName(getClass().getName())_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,when,invoked,directly,e,g,from,link,transaction,manager,and,as,a,singleton,bean,when,retrieved,through,the,application,context,e,g,when,injected,into,the,test,instance,the,result,is,that,this,method,will,be,called,twice,ol,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ol,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,almost,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,context,junit4,spr9051,schema,sql,set,name,get,class,get,name,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1362408075;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method when invoked directly (e.g., from_{@link #transactionManager()}) and as a singleton bean when retrieved_through the application context (e.g., when injected into the test_instance). The result is that this method will be called twice:__<ol>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ol>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is almost certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/context/junit4/spr9051/schema.sql")_			_			.setName(getClass().getName())_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,when,invoked,directly,e,g,from,link,transaction,manager,and,as,a,singleton,bean,when,retrieved,through,the,application,context,e,g,when,injected,into,the,test,instance,the,result,is,that,this,method,will,be,called,twice,ol,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ol,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,almost,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,context,junit4,spr9051,schema,sql,set,name,get,class,get,name,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1413848647;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method when invoked directly (e.g., from_{@link #transactionManager()}) and as a singleton bean when retrieved_through the application context (e.g., when injected into the test_instance). The result is that this method will be called twice:__<ol>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ol>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is almost certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/context/junit4/spr9051/schema.sql")_			_			.setName(getClass().getName())_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,when,invoked,directly,e,g,from,link,transaction,manager,and,as,a,singleton,bean,when,retrieved,through,the,application,context,e,g,when,injected,into,the,test,instance,the,result,is,that,this,method,will,be,called,twice,ol,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ol,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,almost,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,context,junit4,spr9051,schema,sql,set,name,get,class,get,name,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> AnnotatedFactoryBeans -> @Bean 		public DataSource dataSource();1437936867;Since this method does not reside in a true {@code @Configuration class},_it acts as a factory method when invoked directly (e.g., from_{@link #transactionManager()}) and as a singleton bean when retrieved_through the application context (e.g., when injected into the test_instance). The result is that this method will be called twice:__<ol>_<li>once <em>indirectly</em> by the {@link TransactionalTestExecutionListener}_when it retrieves the {@link PlatformTransactionManager} from the_application context</li>_<li>and again when the {@link DataSource} is injected into the test_instance in {@link AbstractTransactionalAnnotatedConfigClassTests#setDataSource(DataSource)}.</li>_</ol>__Consequently, the {@link JdbcTemplate} used by this test instance and_the {@link PlatformTransactionManager} used by the Spring TestContext_Framework will operate on two different {@code DataSource} instances,_which is almost certainly not the desired or intended behavior.;@Bean_		public DataSource dataSource() {_			return new EmbeddedDatabaseBuilder()_			.addScript("classpath:/org/springframework/test/jdbc/schema.sql")_			_			.setName(getClass().getName())_			.build()__		};since,this,method,does,not,reside,in,a,true,code,configuration,class,it,acts,as,a,factory,method,when,invoked,directly,e,g,from,link,transaction,manager,and,as,a,singleton,bean,when,retrieved,through,the,application,context,e,g,when,injected,into,the,test,instance,the,result,is,that,this,method,will,be,called,twice,ol,li,once,em,indirectly,em,by,the,link,transactional,test,execution,listener,when,it,retrieves,the,link,platform,transaction,manager,from,the,application,context,li,li,and,again,when,the,link,data,source,is,injected,into,the,test,instance,in,link,abstract,transactional,annotated,config,class,tests,set,data,source,data,source,li,ol,consequently,the,link,jdbc,template,used,by,this,test,instance,and,the,link,platform,transaction,manager,used,by,the,spring,test,context,framework,will,operate,on,two,different,code,data,source,instances,which,is,almost,certainly,not,the,desired,or,intended,behavior;bean,public,data,source,data,source,return,new,embedded,database,builder,add,script,classpath,org,springframework,test,jdbc,schema,sql,set,name,get,class,get,name,build
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1337115871;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1337118349;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1337130495;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1337370857;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1356735495;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1362408075;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1413848647;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests -> @AfterTransaction 	@Override 	public void afterTransaction();1437936867;Overrides {@code afterTransaction()} in order to assert a different result.__<p>See in-line comments for details.__@see AbstractTransactionalAnnotatedConfigClassTests#afterTransaction()_@see AbstractTransactionalAnnotatedConfigClassTests#modifyTestDataWithinTransaction();@AfterTransaction_	@Override_	public void afterTransaction() {_		assertEquals("Deleting yoda", 1, deletePerson(YODA))___		_		_		_		_		_		_		_		_		_		assertNumRowsInPersonTable(2, "after a transactional test method")__	};overrides,code,after,transaction,in,order,to,assert,a,different,result,p,see,in,line,comments,for,details,see,abstract,transactional,annotated,config,class,tests,after,transaction,see,abstract,transactional,annotated,config,class,tests,modify,test,data,within,transaction;after,transaction,override,public,void,after,transaction,assert,equals,deleting,yoda,1,delete,person,yoda,assert,num,rows,in,person,table,2,after,a,transactional,test,method
