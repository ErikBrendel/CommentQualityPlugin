commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Autowired public void setTransactionManager(DataSourceTransactionManager transactionManager) {     this.dataSourceFromTxManager = transactionManager.getDataSource(). }
false;public;1;5;;@Autowired public void setDataSource(DataSource dataSource) {     this.dataSourceViaInjection = dataSource.     this.jdbcTemplate = new JdbcTemplate(dataSource). }
false;private;1;3;;private int countRowsInTable(String tableName) {     return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class). }
false;private;1;3;;private int createPerson(String name) {     return jdbcTemplate.update("INSERT INTO person VALUES(?)", name). }
false;protected;1;3;;protected int deletePerson(String name) {     return jdbcTemplate.update("DELETE FROM person WHERE name=?", name). }
false;protected;2;4;;protected void assertNumRowsInPersonTable(int expectedNumRows, String testState) {     assertEquals("the number of rows in the person table (" + testState + ").", expectedNumRows, countRowsInTable("person")). }
false;protected;1;3;;protected void assertAddPerson(final String name) {     assertEquals("Adding '" + name + "'", 1, createPerson(name)). }
false;public;0;5;;@Test public void autowiringFromConfigClass() {     assertNotNull("The employee should have been autowired.", employee).     assertEquals("John Smith", employee.getName()). }
false;public;0;5;;@BeforeTransaction public void beforeTransaction() {     assertNumRowsInPersonTable(0, "before a transactional test method").     assertAddPerson(YODA). }
false;public;0;4;;@Before public void setUp() throws Exception {     assertNumRowsInPersonTable((inTransaction() ? 1 : 0), "before a test method"). }
false;public;0;8;;@Test @Transactional public void modifyTestDataWithinTransaction() {     assertInTransaction(true).     assertAddPerson(JANE).     assertAddPerson(SUE).     assertNumRowsInPersonTable(3, "in modifyTestDataWithinTransaction()"). }
false;public;0;4;;@After public void tearDown() throws Exception {     assertNumRowsInPersonTable((inTransaction() ? 3 : 0), "after a test method"). }
false;public;0;5;;@AfterTransaction public void afterTransaction() {     assertEquals("Deleting yoda", 1, deletePerson(YODA)).     assertNumRowsInPersonTable(0, "after a transactional test method"). }
