commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;@Autowired private void setEmployee(Employee employee) {     this.employee = employee. }
false;private;1;4;;@Resource private void setBar(String bar) {     this.bar = bar. }
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;4;;@Override public void afterPropertiesSet() {     this.beanInitialized = true. }
false;;0;7;;@BeforeClass void beforeClass() {     numSetUpCalls = 0.     numSetUpCallsInTransaction = 0.     numTearDownCalls = 0.     numTearDownCallsInTransaction = 0. }
false;;0;7;;@AfterClass void afterClass() {     assertEquals(numSetUpCalls, NUM_TESTS, "number of calls to setUp().").     assertEquals(numSetUpCallsInTransaction, NUM_TX_TESTS, "number of calls to setUp() within a transaction.").     assertEquals(numTearDownCalls, NUM_TESTS, "number of calls to tearDown().").     assertEquals(numTearDownCallsInTransaction, NUM_TX_TESTS, "number of calls to tearDown() within a transaction."). }
false;;0;8;;@BeforeMethod void setUp() {     numSetUpCalls++.     if (inTransaction()) {         numSetUpCallsInTransaction++.     }     assertNumRowsInPersonTable((inTransaction() ? 2 : 1), "before a test method"). }
false;;0;8;;@AfterMethod void tearDown() {     numTearDownCalls++.     if (inTransaction()) {         numTearDownCallsInTransaction++.     }     assertNumRowsInPersonTable((inTransaction() ? 4 : 1), "after a test method"). }
false;;0;5;;@BeforeTransaction void beforeTransaction() {     assertNumRowsInPersonTable(1, "before a transactional test method").     assertAddPerson(YODA). }
false;;0;5;;@AfterTransaction void afterTransaction() {     assertEquals(deletePerson(YODA), 1, "Deleting yoda").     assertNumRowsInPersonTable(1, "after a transactional test method"). }
false;;0;7;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void verifyBeanNameSet() {     assertInTransaction(false).     assertTrue(this.beanName.startsWith(getClass().getName()), "The bean name of this test instance " + "should have been set to the fully qualified class name due to BeanNameAware semantics."). }
false;;0;9;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void verifyApplicationContextSet() {     assertInTransaction(false).     assertNotNull(super.applicationContext, "The application context should have been set due to ApplicationContextAware semantics.").     Employee employeeBean = (Employee) super.applicationContext.getBean("employee").     assertEquals(employeeBean.getName(), "John Smith", "employee's name."). }
false;;0;7;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void verifyBeanInitialized() {     assertInTransaction(false).     assertTrue(beanInitialized, "This test instance should have been initialized due to InitializingBean semantics."). }
false;;0;8;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void verifyAnnotationAutowiredFields() {     assertInTransaction(false).     assertNull(nonrequiredLong, "The nonrequiredLong field should NOT have been autowired.").     assertNotNull(pet, "The pet field should have been autowired.").     assertEquals(pet.getName(), "Fido", "pet's name."). }
false;;0;7;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void verifyAnnotationAutowiredMethods() {     assertInTransaction(false).     assertNotNull(employee, "The setEmployee() method should have been autowired.").     assertEquals(employee.getName(), "John Smith", "employee's name."). }
false;;0;6;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void verifyResourceAnnotationInjectedFields() {     assertInTransaction(false).     assertEquals(foo, "Foo", "The foo field should have been injected via @Resource."). }
false;;0;6;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) void verifyResourceAnnotationInjectedMethods() {     assertInTransaction(false).     assertEquals(bar, "Bar", "The setBar() method should have been injected via @Resource."). }
false;;0;7;;@Test void modifyTestDataWithinTransaction() {     assertInTransaction(true).     assertAddPerson(JANE).     assertAddPerson(SUE).     assertNumRowsInPersonTable(4, "in modifyTestDataWithinTransaction()"). }
false;private;1;3;;private int createPerson(String name) {     return jdbcTemplate.update("INSERT INTO person VALUES(?)", name). }
false;private;1;3;;private int deletePerson(String name) {     return jdbcTemplate.update("DELETE FROM person WHERE name=?", name). }
false;private;2;4;;private void assertNumRowsInPersonTable(int expectedNumRows, String testState) {     assertEquals(countRowsInTable("person"), expectedNumRows, "the number of rows in the person table (" + testState + ")."). }
false;private;1;3;;private void assertAddPerson(String name) {     assertEquals(createPerson(name), 1, "Adding '" + name + "'"). }
