commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Before public void setup() {     List<Person> composers = Arrays.asList(new Person("Johann Sebastian Bach").setSomeDouble(21), new Person("Johannes Brahms").setSomeDouble(.0025), new Person("Edvard Grieg").setSomeDouble(1.6035), new Person("Robert Schumann").setSomeDouble(Double.NaN)).     this.people = new PeopleWrapper(composers).     List<HttpMessageConverter<?>> converters = new ArrayList<>().     converters.add(new Jaxb2RootElementHttpMessageConverter()).     this.restTemplate = new RestTemplate().     this.restTemplate.setMessageConverters(converters).     this.mockServer = MockRestServiceServer.createServer(this.restTemplate). }
false;public;0;9;;@Test public void testXmlEqualTo() throws Exception {     this.mockServer.expect(requestTo("/composers")).andExpect(content().contentType("application/xml")).andExpect(content().xml(PEOPLE_XML)).andRespond(withSuccess()).     executeAndVerify(). }
false;public;0;9;;@Test public void testHamcrestNodeMatcher() throws Exception {     this.mockServer.expect(requestTo("/composers")).andExpect(content().contentType("application/xml")).andExpect(content().node(hasXPath("/people/composers/composer[1]"))).andRespond(withSuccess()).     executeAndVerify(). }
false;private;0;4;;private void executeAndVerify() throws URISyntaxException {     this.restTemplate.put(new URI("/composers"), this.people).     this.mockServer.verify(). }
false;public;0;3;;public List<Person> getComposers() {     return this.composers. }
