commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;58;;@Parameters(name = "{0}") public static Collection<Object[]> contextConfigurationLocationsData() {     @ContextConfiguration     class ClasspathNonExistentDefaultLocationsTestCase {     }     @ContextConfiguration     class ClasspathExistentDefaultLocationsTestCase {     }     @ContextConfiguration({ "context1.xml", "context2.xml" })     class ImplicitClasspathLocationsTestCase {     }     @ContextConfiguration("classpath:context.xml")     class ExplicitClasspathLocationsTestCase {     }     @ContextConfiguration("file:/testing/directory/context.xml")     class ExplicitFileLocationsTestCase {     }     @ContextConfiguration("http://example.com/context.xml")     class ExplicitUrlLocationsTestCase {     }     @ContextConfiguration({ "context1.xml", "classpath:context2.xml", "/context3.xml", "file:/testing/directory/context.xml", "http://example.com/context.xml" })     class ExplicitMixedPathTypesLocationsTestCase {     }     return Arrays.asList(new Object[][] { { ClasspathNonExistentDefaultLocationsTestCase.class.getSimpleName(), new String[] {} }, { ClasspathExistentDefaultLocationsTestCase.class.getSimpleName(), new String[] { "classpath:org/springframework/test/context/support/GenericXmlContextLoaderResourceLocationsTests$1ClasspathExistentDefaultLocationsTestCase-context.xml" } }, { ImplicitClasspathLocationsTestCase.class.getSimpleName(), new String[] { "classpath:/org/springframework/test/context/support/context1.xml", "classpath:/org/springframework/test/context/support/context2.xml" } }, { ExplicitClasspathLocationsTestCase.class.getSimpleName(), new String[] { "classpath:context.xml" } }, { ExplicitFileLocationsTestCase.class.getSimpleName(), new String[] { "file:/testing/directory/context.xml" } }, { ExplicitUrlLocationsTestCase.class.getSimpleName(), new String[] { "http://example.com/context.xml" } }, { ExplicitMixedPathTypesLocationsTestCase.class.getSimpleName(), new String[] { "classpath:/org/springframework/test/context/support/context1.xml", "classpath:context2.xml", "classpath:/context3.xml", "file:/testing/directory/context.xml", "http://example.com/context.xml" } } }). }
false;public;0;18;;@Test public void assertContextConfigurationLocations() throws Exception {     final ContextConfiguration contextConfig = this.testClass.getAnnotation(ContextConfiguration.class).     final ContextLoader contextLoader = new GenericXmlContextLoader().     final String[] configuredLocations = (String[]) AnnotationUtils.getValue(contextConfig).     final String[] processedLocations = contextLoader.processLocations(this.testClass, configuredLocations).     if (logger.isDebugEnabled()) {         logger.debug("----------------------------------------------------------------------").         logger.debug("Configured locations: " + ObjectUtils.nullSafeToString(configuredLocations)).         logger.debug("Expected   locations: " + ObjectUtils.nullSafeToString(this.expectedLocations)).         logger.debug("Processed  locations: " + ObjectUtils.nullSafeToString(processedLocations)).     }     assertArrayEquals("Verifying locations for test [" + this.testClass + "].", this.expectedLocations, processedLocations). }
