commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void invalidateOnce() {     assertFalse(session.isInvalid()).     session.invalidate().     assertTrue(session.isInvalid()). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void invalidateTwice() {     session.invalidate().     session.invalidate(). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void getCreationTimeOnInvalidatedSession() {     session.invalidate().     session.getCreationTime(). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void getLastAccessedTimeOnInvalidatedSession() {     session.invalidate().     session.getLastAccessedTime(). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void getAttributeOnInvalidatedSession() {     session.invalidate().     session.getAttribute("foo"). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void getAttributeNamesOnInvalidatedSession() {     session.invalidate().     session.getAttributeNames(). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void getValueOnInvalidatedSession() {     session.invalidate().     session.getValue("foo"). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void getValueNamesOnInvalidatedSession() {     session.invalidate().     session.getValueNames(). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void setAttributeOnInvalidatedSession() {     session.invalidate().     session.setAttribute("name", "value"). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void putValueOnInvalidatedSession() {     session.invalidate().     session.putValue("name", "value"). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void removeAttributeOnInvalidatedSession() {     session.invalidate().     session.removeAttribute("name"). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void removeValueOnInvalidatedSession() {     session.invalidate().     session.removeValue("name"). }
true;public;0;5;/**  * @since 4.0  */ ;/**  * @since 4.0  */ @Test(expected = IllegalStateException.class) public void isNewOnInvalidatedSession() {     session.invalidate().     session.isNew(). }
false;public;0;9;;@Test public void bindingListenerBindListener() {     String bindingListenerName = "bindingListener".     CountingHttpSessionBindingListener bindingListener = new CountingHttpSessionBindingListener().     session.setAttribute(bindingListenerName, bindingListener).     assertEquals(bindingListener.getCounter(), 1). }
false;public;0;10;;@Test public void bindingListenerBindListenerThenUnbind() {     String bindingListenerName = "bindingListener".     CountingHttpSessionBindingListener bindingListener = new CountingHttpSessionBindingListener().     session.setAttribute(bindingListenerName, bindingListener).     session.removeAttribute(bindingListenerName).     assertEquals(bindingListener.getCounter(), 0). }
false;public;0;10;;@Test public void bindingListenerBindSameListenerTwice() {     String bindingListenerName = "bindingListener".     CountingHttpSessionBindingListener bindingListener = new CountingHttpSessionBindingListener().     session.setAttribute(bindingListenerName, bindingListener).     session.setAttribute(bindingListenerName, bindingListener).     assertEquals(bindingListener.getCounter(), 1). }
false;public;0;12;;@Test public void bindingListenerBindListenerOverwrite() {     String bindingListenerName = "bindingListener".     CountingHttpSessionBindingListener bindingListener1 = new CountingHttpSessionBindingListener().     CountingHttpSessionBindingListener bindingListener2 = new CountingHttpSessionBindingListener().     session.setAttribute(bindingListenerName, bindingListener1).     session.setAttribute(bindingListenerName, bindingListener2).     assertEquals(bindingListener1.getCounter(), 0).     assertEquals(bindingListener2.getCounter(), 1). }
false;public;1;4;;@Override public void valueBound(HttpSessionBindingEvent event) {     this.counter.incrementAndGet(). }
false;public;1;4;;@Override public void valueUnbound(HttpSessionBindingEvent event) {     this.counter.decrementAndGet(). }
false;;0;3;;int getCounter() {     return this.counter.get(). }
