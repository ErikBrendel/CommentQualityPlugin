commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Autowired public void setDataSource(DataSource dataSource1) {     this.jdbcTemplate = new JdbcTemplate(dataSource1). }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     assertNumUsers(0). }
false;public;0;4;;@AfterTransaction public void afterTransaction() {     assertNumUsers(0). }
false;public;0;10;;@Test @Transactional public void transactionalTest() {     TransactionTestUtils.assertInTransaction(true).     ClassPathResource resource = new ClassPathResource("/org/springframework/test/context/jdbc/data.sql").     new ResourceDatabasePopulator(resource).execute(jdbcTemplate.getDataSource()).     assertNumUsers(1). }
false;private;1;4;;private void assertNumUsers(int expected) {     assertEquals("Number of rows in the 'user' table", expected, JdbcTestUtils.countRowsInTable(this.jdbcTemplate, "user")). }
false;public;0;5;;@Primary @Bean public PlatformTransactionManager primaryTransactionManager() {     return new DataSourceTransactionManager(dataSource1()). }
false;public;0;4;;@Bean public PlatformTransactionManager additionalTransactionManager() {     return new DataSourceTransactionManager(dataSource2()). }
false;public;0;7;;@Bean public DataSource dataSource1() {     return new EmbeddedDatabaseBuilder().generateUniqueName(true).addScript("classpath:/org/springframework/test/context/jdbc/schema.sql").build(). }
false;public;0;4;;@Bean public DataSource dataSource2() {     return new EmbeddedDatabaseBuilder().generateUniqueName(true).build(). }
