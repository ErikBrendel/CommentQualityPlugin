commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void getTargetObjectForNull() {     getTargetObject(null). }
false;public;0;5;;@Test public void getTargetObjectForNonProxiedObject() {     Foo target = getTargetObject(foo).     assertSame(foo, target). }
false;public;0;5;;@Test public void getTargetObjectWrappedInSingleJdkDynamicProxy() {     Foo target = getTargetObject(jdkProxy(foo)).     assertSame(foo, target). }
false;public;0;5;;@Test public void getTargetObjectWrappedInSingleCglibProxy() {     Foo target = getTargetObject(cglibProxy(foo)).     assertSame(foo, target). }
false;public;0;5;;@Test public void getTargetObjectWrappedInDoubleJdkDynamicProxy() {     Foo target = getTargetObject(jdkProxy(jdkProxy(foo))).     assertNotSame(foo, target). }
false;public;0;5;;@Test public void getTargetObjectWrappedInDoubleCglibProxy() {     Foo target = getTargetObject(cglibProxy(cglibProxy(foo))).     assertNotSame(foo, target). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void getUltimateTargetObjectForNull() {     getUltimateTargetObject(null). }
false;public;0;5;;@Test public void getUltimateTargetObjectForNonProxiedObject() {     Foo target = getUltimateTargetObject(foo).     assertSame(foo, target). }
false;public;0;5;;@Test public void getUltimateTargetObjectWrappedInSingleJdkDynamicProxy() {     Foo target = getUltimateTargetObject(jdkProxy(foo)).     assertSame(foo, target). }
false;public;0;5;;@Test public void getUltimateTargetObjectWrappedInSingleCglibProxy() {     Foo target = getUltimateTargetObject(cglibProxy(foo)).     assertSame(foo, target). }
false;public;0;5;;@Test public void getUltimateTargetObjectWrappedInDoubleJdkDynamicProxy() {     Foo target = getUltimateTargetObject(jdkProxy(jdkProxy(foo))).     assertSame(foo, target). }
false;public;0;5;;@Test public void getUltimateTargetObjectWrappedInDoubleCglibProxy() {     Foo target = getUltimateTargetObject(cglibProxy(cglibProxy(foo))).     assertSame(foo, target). }
false;public;0;5;;@Test public void getUltimateTargetObjectWrappedInCglibProxyWrappedInJdkDynamicProxy() {     Foo target = getUltimateTargetObject(jdkProxy(cglibProxy(foo))).     assertSame(foo, target). }
false;public;0;5;;@Test public void getUltimateTargetObjectWrappedInCglibProxyWrappedInDoubleJdkDynamicProxy() {     Foo target = getUltimateTargetObject(jdkProxy(jdkProxy(cglibProxy(foo)))).     assertSame(foo, target). }
false;private;1;9;;private Foo jdkProxy(Foo foo) {     ProxyFactory pf = new ProxyFactory().     pf.setTarget(foo).     pf.addInterface(Foo.class).     Foo proxy = (Foo) pf.getProxy().     assertTrue("Proxy is a JDK dynamic proxy", AopUtils.isJdkDynamicProxy(proxy)).     assertThat(proxy, instanceOf(Foo.class)).     return proxy. }
false;private;1;9;;private Foo cglibProxy(Foo foo) {     ProxyFactory pf = new ProxyFactory().     pf.setTarget(foo).     pf.setProxyTargetClass(true).     Foo proxy = (Foo) pf.getProxy().     assertTrue("Proxy is a CGLIB proxy", AopUtils.isCglibProxy(proxy)).     assertThat(proxy, instanceOf(FooImpl.class)).     return proxy. }
