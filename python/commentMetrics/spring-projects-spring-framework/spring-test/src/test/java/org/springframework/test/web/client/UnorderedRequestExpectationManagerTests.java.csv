commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void unexpectedRequest() throws Exception {     try {         this.manager.validateRequest(createRequest(GET, "/foo")).     } catch (AssertionError error) {         assertEquals("No further requests expected: HTTP GET /foo\n" + "0 request(s) executed.\n", error.getMessage()).     } }
false;public;0;4;;@Test public void zeroExpectedRequests() throws Exception {     this.manager.verify(). }
false;public;0;9;;@Test public void multipleRequests() throws Exception {     this.manager.expectRequest(once(), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(once(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.verify(). }
false;public;0;11;;@Test public void repeatedRequests() throws Exception {     this.manager.expectRequest(twice(), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(twice(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.verify(). }
false;public;0;18;;@Test public void repeatedRequestsTooMany() throws Exception {     this.manager.expectRequest(max(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(max(2), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.thrown.expectMessage("No further requests expected: HTTP GET /foo\n" + "4 request(s) executed:\n" + "GET /bar\n" + "GET /foo\n" + "GET /bar\n" + "GET /foo\n").     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/foo")). }
false;public;0;15;;@Test public void repeatedRequestsTooFew() throws Exception {     this.manager.expectRequest(min(2), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess()).     this.manager.expectRequest(min(2), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess()).     this.thrown.expectMessage("3 request(s) executed:\n" + "GET /bar\n" + "GET /foo\n" + "GET /foo\n").     this.manager.validateRequest(createRequest(GET, "/bar")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.validateRequest(createRequest(GET, "/foo")).     this.manager.verify(). }
false;private;2;9;;@SuppressWarnings("deprecation") private ClientHttpRequest createRequest(HttpMethod method, String url) {     try {         return new org.springframework.mock.http.client.MockAsyncClientHttpRequest(method, new URI(url)).     } catch (URISyntaxException ex) {         throw new IllegalStateException(ex).     } }
