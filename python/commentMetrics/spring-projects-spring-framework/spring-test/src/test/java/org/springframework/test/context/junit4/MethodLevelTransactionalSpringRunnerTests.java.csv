commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Autowired @Qualifier("dataSource2") public void setDataSource(DataSource dataSource) {     jdbcTemplate = new JdbcTemplate(dataSource). }
false;public,static;0;5;;@AfterClass public static void verifyFinalTestData() {     assertEquals("Verifying the final number of rows in the person table after all tests.", 4, countRowsInPersonTable(jdbcTemplate)). }
false;public;0;7;;@Before public void verifyInitialTestData() {     clearPersonTable(jdbcTemplate).     assertEquals("Adding bob", 1, addPerson(jdbcTemplate, BOB)).     assertEquals("Verifying the initial number of rows in the person table.", 1, countRowsInPersonTable(jdbcTemplate)). }
false;public;0;10;;@Test @Transactional("transactionManager2") public void modifyTestDataWithinTransaction() {     assertInTransaction(true).     assertEquals("Deleting bob", 1, deletePerson(jdbcTemplate, BOB)).     assertEquals("Adding jane", 1, addPerson(jdbcTemplate, JANE)).     assertEquals("Adding sue", 1, addPerson(jdbcTemplate, SUE)).     assertEquals("Verifying the number of rows in the person table within a transaction.", 2, countRowsInPersonTable(jdbcTemplate)). }
false;public;0;9;;@Test public void modifyTestDataWithoutTransaction() {     assertInTransaction(false).     assertEquals("Adding luke", 1, addPerson(jdbcTemplate, LUKE)).     assertEquals("Adding leia", 1, addPerson(jdbcTemplate, LEIA)).     assertEquals("Adding yoda", 1, addPerson(jdbcTemplate, YODA)).     assertEquals("Verifying the number of rows in the person table without a transaction.", 4, countRowsInPersonTable(jdbcTemplate)). }
