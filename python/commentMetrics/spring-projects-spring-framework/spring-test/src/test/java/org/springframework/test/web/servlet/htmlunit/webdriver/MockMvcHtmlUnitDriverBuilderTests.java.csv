commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void webAppContextSetupNull() {     MockMvcHtmlUnitDriverBuilder.webAppContextSetup(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void mockMvcSetupNull() {     MockMvcHtmlUnitDriverBuilder.mockMvcSetup(null). }
false;public;0;8;;@Test public void mockMvcSetupWithCustomDriverDelegate() throws Exception {     WebConnectionHtmlUnitDriver otherDriver = new WebConnectionHtmlUnitDriver().     this.driver = MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).withDelegate(otherDriver).build().     assertMockMvcUsed("http://localhost/test").     Assume.group(TestGroup.PERFORMANCE, () -> assertMockMvcNotUsed("http://example.com/")). }
false;public;0;7;;@Test public void mockMvcSetupWithDefaultDriverDelegate() throws Exception {     this.driver = MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).build().     assertMockMvcUsed("http://localhost/test").     Assume.group(TestGroup.PERFORMANCE, () -> assertMockMvcNotUsed("http://example.com/")). }
false;public;0;5;;@Test public void javaScriptEnabledByDefault() {     this.driver = MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).build().     assertTrue(this.driver.isJavascriptEnabled()). }
false;public;0;5;;@Test public void javaScriptDisabled() {     this.driver = MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).javascriptEnabled(false).build().     assertFalse(this.driver.isJavascriptEnabled()). }
false;public;0;12;;// SPR-14066 @Test public void cookieManagerShared() throws Exception {     WebConnectionHtmlUnitDriver otherDriver = new WebConnectionHtmlUnitDriver().     this.mockMvc = MockMvcBuilders.standaloneSetup(new CookieController()).build().     this.driver = MockMvcHtmlUnitDriverBuilder.mockMvcSetup(this.mockMvc).withDelegate(otherDriver).build().     assertThat(get("http://localhost/"), equalTo("")).     Cookie cookie = new Cookie("localhost", "cookie", "cookieManagerShared").     otherDriver.getWebClient().getCookieManager().addCookie(cookie).     assertThat(get("http://localhost/"), equalTo("cookieManagerShared")). }
false;private;1;3;;private void assertMockMvcUsed(String url) throws Exception {     assertThat(get(url), containsString(EXPECTED_BODY)). }
false;private;1;3;;private void assertMockMvcNotUsed(String url) throws Exception {     assertThat(get(url), not(containsString(EXPECTED_BODY))). }
false;private;1;4;;private String get(String url) throws IOException {     this.driver.get(url).     return this.driver.getPageSource(). }
false;public;1;4;;@RequestMapping public String contextPath(HttpServletRequest request) {     return EXPECTED_BODY. }
false;;1;4;;@RequestMapping(path = "/", produces = "text/plain") String cookie(@CookieValue("cookie") String cookie) {     return cookie. }
