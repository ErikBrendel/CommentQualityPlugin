commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mockMvc = standaloneSetup(new SimpleController()).build(). }
false;public;0;8;;@Test public void testRequestAttributeEqualTo() throws Exception {     this.mockMvc.perform(get("/main/1").servletPath("/main")).andExpect(request().attribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, "/{id}")).andExpect(request().attribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, "/1")).andExpect(request().attribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, equalTo("/{id}"))).andExpect(request().attribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, equalTo("/1"))). }
false;public;0;9;;@Test public void testRequestAttributeMatcher() throws Exception {     String producibleMediaTypes = HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE.     this.mockMvc.perform(get("/1")).andExpect(request().attribute(producibleMediaTypes, hasItem(MediaType.APPLICATION_JSON))).andExpect(request().attribute(producibleMediaTypes, not(hasItem(MediaType.APPLICATION_XML)))). }
false;public;0;4;;@RequestMapping(value = "/{id}", produces = "application/json") public String show() {     return "view". }
