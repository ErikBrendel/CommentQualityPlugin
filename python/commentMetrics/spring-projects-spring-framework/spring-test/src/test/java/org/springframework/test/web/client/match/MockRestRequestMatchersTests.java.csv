commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void requestTo() throws Exception {     this.request.setURI(new URI("http://foo.com/bar")).     MockRestRequestMatchers.requestTo("http://foo.com/bar").match(this.request). }
false;public;0;6;;// SPR-15819 @Test public void requestToUriTemplate() throws Exception {     this.request.setURI(new URI("http://foo.com/bar")).     MockRestRequestMatchers.requestToUriTemplate("http://foo.com/{bar}", "bar").match(this.request). }
false;public;0;7;;@Test public void requestToNoMatch() throws Exception {     this.request.setURI(new URI("http://foo.com/bar")).     assertThrows(AssertionError.class, () -> MockRestRequestMatchers.requestTo("http://foo.com/wrong").match(this.request)). }
false;public;0;6;;@Test public void requestToContains() throws Exception {     this.request.setURI(new URI("http://foo.com/bar")).     MockRestRequestMatchers.requestTo(containsString("bar")).match(this.request). }
false;public;0;6;;@Test public void method() throws Exception {     this.request.setMethod(HttpMethod.GET).     MockRestRequestMatchers.method(HttpMethod.GET).match(this.request). }
false;public;0;8;;@Test public void methodNoMatch() throws Exception {     this.request.setMethod(HttpMethod.POST).     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.method(HttpMethod.GET).match(this.request)).     assertThat(error.getMessage(), containsString("expected:<GET> but was:<POST>")). }
false;public;0;6;;@Test public void header() throws Exception {     this.request.getHeaders().put("foo", Arrays.asList("bar", "baz")).     MockRestRequestMatchers.header("foo", "bar", "baz").match(this.request). }
false;public;0;6;;@Test public void headerMissing() throws Exception {     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.header("foo", "bar").match(this.request)).     assertThat(error.getMessage(), containsString("was null")). }
false;public;0;8;;@Test public void headerMissingValue() throws Exception {     this.request.getHeaders().put("foo", Arrays.asList("bar", "baz")).     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.header("foo", "bad").match(this.request)).     assertThat(error.getMessage(), containsString("expected:<bad> but was:<bar>")). }
false;public;0;6;;@Test public void headerContains() throws Exception {     this.request.getHeaders().put("foo", Arrays.asList("bar", "baz")).     MockRestRequestMatchers.header("foo", containsString("ba")).match(this.request). }
false;public;0;6;;@Test public void headerContainsWithMissingHeader() throws Exception {     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.header("foo", containsString("baz")).match(this.request)).     assertThat(error.getMessage(), containsString("but was null")). }
false;public;0;8;;@Test public void headerContainsWithMissingValue() throws Exception {     this.request.getHeaders().put("foo", Arrays.asList("bar", "baz")).     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.header("foo", containsString("bx")).match(this.request)).     assertThat(error.getMessage(), containsString("was \"bar\"")). }
false;public;0;6;;@Test public void headers() throws Exception {     this.request.getHeaders().put("foo", Arrays.asList("bar", "baz")).     MockRestRequestMatchers.header("foo", "bar", "baz").match(this.request). }
false;public;0;6;;@Test public void headersWithMissingHeader() throws Exception {     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.header("foo", "bar").match(this.request)).     assertThat(error.getMessage(), containsString("but was null")). }
false;public;0;8;;@Test public void headersWithMissingValue() throws Exception {     this.request.getHeaders().put("foo", Collections.singletonList("bar")).     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.header("foo", "bar", "baz").match(this.request)).     assertThat(error.getMessage(), containsString("to have at least <2> values")). }
false;public;0;6;;@Test public void queryParam() throws Exception {     this.request.setURI(new URI("http://foo.com/a?foo=bar&foo=baz")).     MockRestRequestMatchers.queryParam("foo", "bar", "baz").match(this.request). }
false;public;0;8;;@Test public void queryParamMissing() throws Exception {     this.request.setURI(new URI("http://foo.com/a")).     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.queryParam("foo", "bar").match(this.request)).     assertThat(error.getMessage(), containsString("but was null")). }
false;public;0;8;;@Test public void queryParamMissingValue() throws Exception {     this.request.setURI(new URI("http://foo.com/a?foo=bar&foo=baz")).     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.queryParam("foo", "bad").match(this.request)).     assertThat(error.getMessage(), containsString("expected:<bad> but was:<bar>")). }
false;public;0;6;;@Test public void queryParamContains() throws Exception {     this.request.setURI(new URI("http://foo.com/a?foo=bar&foo=baz")).     MockRestRequestMatchers.queryParam("foo", containsString("ba")).match(this.request). }
false;public;0;8;;@Test public void queryParamContainsWithMissingValue() throws Exception {     this.request.setURI(new URI("http://foo.com/a?foo=bar&foo=baz")).     AssertionError error = assertThrows(AssertionError.class, () -> MockRestRequestMatchers.queryParam("foo", containsString("bx")).match(this.request)).     assertThat(error.getMessage(), containsString("was \"bar\"")). }
