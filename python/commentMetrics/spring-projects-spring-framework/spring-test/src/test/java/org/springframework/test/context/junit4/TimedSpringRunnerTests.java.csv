commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected Class<?> getTestCase() {     return TimedSpringRunnerTestCase.class. }
false;protected;0;3;;protected Class<? extends Runner> getRunnerClass() {     return SpringRunner.class. }
false;public;0;4;;@Test public void timedTests() throws Exception {     runTestsAndAssertCounters(getRunnerClass(), getTestCase(), 7, 5, 7, 0, 0). }
true;public;0;4;// Should Pass. ;// Should Pass. @Test(timeout = 2000) public void jUnitTimeoutWithNoOp() { /* no-op */ }
true;public;0;5;// Should Pass. ;// Should Pass. @Test @Timed(millis = 2000) public void springTimeoutWithNoOp() { /* no-op */ }
true;public;0;4;// Should Fail due to timeout. ;// Should Fail due to timeout. @Test(timeout = 100) public void jUnitTimeoutWithSleep() throws Exception {     Thread.sleep(200). }
true;public;0;5;// Should Fail due to timeout. ;// Should Fail due to timeout. @Test @Timed(millis = 100) public void springTimeoutWithSleep() throws Exception {     Thread.sleep(200). }
true;public;0;5;// Should Fail due to timeout. ;// Should Fail due to timeout. @Test @MetaTimed public void springTimeoutWithSleepAndMetaAnnotation() throws Exception {     Thread.sleep(200). }
true;public;0;5;// Should Fail due to timeout. ;// Should Fail due to timeout. @Test @MetaTimedWithOverride(millis = 100) public void springTimeoutWithSleepAndMetaAnnotationAndOverride() throws Exception {     Thread.sleep(200). }
true;public;0;5;// Should Fail due to duplicate configuration. ;// Should Fail due to duplicate configuration. @Test(timeout = 200) @Timed(millis = 200) public void springAndJUnitTimeouts() { /* no-op */ }
