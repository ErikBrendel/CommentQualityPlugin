commented;modifiers;parameterAmount;loc;comment;code
true;public,static,final;0;3;/**  * Reset the state of the static context cache in {@link DefaultCacheAwareContextLoaderDelegate}.  */ ;/**  * Reset the state of the static context cache in {@link DefaultCacheAwareContextLoaderDelegate}.  */ public static final void resetContextCache() {     DefaultCacheAwareContextLoaderDelegate.defaultContextCache.reset(). }
true;public,static,final;4;5;/**  * Assert the statistics of the static context cache in {@link DefaultCacheAwareContextLoaderDelegate}.  *  * @param usageScenario the scenario in which the statistics are used  * @param expectedSize the expected number of contexts in the cache  * @param expectedHitCount the expected hit count  * @param expectedMissCount the expected miss count  */ ;/**  * Assert the statistics of the static context cache in {@link DefaultCacheAwareContextLoaderDelegate}.  *  * @param usageScenario the scenario in which the statistics are used  * @param expectedSize the expected number of contexts in the cache  * @param expectedHitCount the expected hit count  * @param expectedMissCount the expected miss count  */ public static final void assertContextCacheStatistics(String usageScenario, int expectedSize, int expectedHitCount, int expectedMissCount) {     assertContextCacheStatistics(DefaultCacheAwareContextLoaderDelegate.defaultContextCache, usageScenario, expectedSize, expectedHitCount, expectedMissCount). }
true;public,static,final;5;10;/**  * Assert the statistics of the supplied context cache.  *  * @param contextCache the cache to assert against  * @param usageScenario the scenario in which the statistics are used  * @param expectedSize the expected number of contexts in the cache  * @param expectedHitCount the expected hit count  * @param expectedMissCount the expected miss count  */ ;/**  * Assert the statistics of the supplied context cache.  *  * @param contextCache the cache to assert against  * @param usageScenario the scenario in which the statistics are used  * @param expectedSize the expected number of contexts in the cache  * @param expectedHitCount the expected hit count  * @param expectedMissCount the expected miss count  */ public static final void assertContextCacheStatistics(ContextCache contextCache, String usageScenario, int expectedSize, int expectedHitCount, int expectedMissCount) {     assertEquals("Verifying number of contexts in cache (" + usageScenario + ").", expectedSize, contextCache.size()).     assertEquals("Verifying number of cache hits (" + usageScenario + ").", expectedHitCount, contextCache.getHitCount()).     assertEquals("Verifying number of cache misses (" + usageScenario + ").", expectedMissCount, contextCache.getMissCount()). }
