commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void incrementStaticBeforeCounter() {     StandardJUnit4FeaturesTests.staticBeforeCounter++. }
false;public;0;5;;@Test @Ignore public void alwaysFailsButShouldBeIgnored() {     fail("The body of an ignored test should never be executed!"). }
false;public;0;4;;@Test public void alwaysSucceeds() {     assertTrue(true). }
false;public;0;4;;@Test(expected = IndexOutOfBoundsException.class) public void expectingAnIndexOutOfBoundsException() {     new ArrayList<>().get(1). }
false;public;0;5;;@Test public void failedAssumptionShouldPrecludeImminentFailure() {     assumeTrue(false).     fail("A failed assumption should preclude imminent failure!"). }
false;public;0;4;;@Before public void incrementBeforeCounter() {     this.beforeCounter++. }
false;public;0;4;;@Test(timeout = 10000) public void noOpShouldNotTimeOut() { /* no-op */ }
false;public;0;4;;@Test public void verifyBeforeAnnotation() {     assertEquals(1, this.beforeCounter). }
false;public;0;7;;@Test public void verifyBeforeClassAnnotation() {     // Instead of testing for equality to 1, we just assert that the value     // was incremented at least once, since this test class may serve as a     // parent class to other tests in a suite, etc.     assertTrue(StandardJUnit4FeaturesTests.staticBeforeCounter > 0). }
