commented;modifiers;parameterAmount;loc;comment;code
false;;0;5;;@Test @DisabledIf("true") void disabledIfWithStringTrue() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("   true   ") void disabledIfWithStringTrueWithSurroundingWhitespace() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("TrUe") void disabledIfWithStringTrueIgnoreCase() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("${__EnigmaPropertyShouldNotExist__:true}") void disabledIfWithPropertyPlaceholderForNonexistentPropertyWithDefaultValue() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf(expression = "${foo}", loadContext = true) void disabledIfWithPropertyPlaceholder() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf(expression = "\t${foo}   ", loadContext = true) void disabledIfWithPropertyPlaceholderWithSurroundingWhitespace() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("#{T(Boolean).TRUE}") void disabledIfWithSpelBoolean() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("   #{T(Boolean).TRUE}   ") void disabledIfWithSpelBooleanWithSurroundingWhitespace() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("#{'tr' + 'ue'}") void disabledIfWithSpelStringConcatenation() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("#{6 * 7 == 42}") void disabledIfWithSpelArithmeticComparison() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledOnMac void disabledIfWithSpelOsCheckInCustomComposedAnnotation() {     assertFalse(System.getProperty("os.name").contains("Mac"), "This test must be disabled on Mac OS"). }
false;;0;5;;@Test @DisabledIf(expression = "#{@booleanTrueBean}", loadContext = true) void disabledIfWithSpelBooleanTrueBean() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf(expression = "#{@stringTrueBean}", loadContext = true) void disabledIfWithSpelStringTrueBean() {     fail("This test must be disabled"). }
false;;0;4;;@Test void foo() {     fail("This test must be disabled"). }
false;;0;5;;@Test @DisabledIf("false") void bar() {     fail("This test must be disabled due to class-level condition"). }
false;;0;4;;@Bean Boolean booleanTrueBean() {     return Boolean.TRUE. }
false;;0;4;;@Bean String stringTrueBean() {     return "true". }
