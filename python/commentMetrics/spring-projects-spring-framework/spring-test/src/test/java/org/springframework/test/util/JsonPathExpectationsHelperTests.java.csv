commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void exists() throws Exception {     new JsonPathExpectationsHelper("$.str").exists(CONTENT). }
false;public;0;4;;@Test public void existsForAnEmptyArray() throws Exception {     new JsonPathExpectationsHelper("$.emptyArray").exists(CONTENT). }
false;public;0;4;;@Test public void existsForAnEmptyMap() throws Exception {     new JsonPathExpectationsHelper("$.emptyMap").exists(CONTENT). }
false;public;0;4;;@Test public void existsForIndefinatePathWithResults() throws Exception {     new JsonPathExpectationsHelper("$.familyMembers[?(@.name == 'Bart')]").exists(SIMPSONS). }
false;public;0;7;;@Test public void existsForIndefinatePathWithEmptyResults() throws Exception {     String expression = "$.familyMembers[?(@.name == 'Dilbert')]".     exception.expect(AssertionError.class).     exception.expectMessage("No value at JSON path \"" + expression + "\"").     new JsonPathExpectationsHelper(expression).exists(SIMPSONS). }
false;public;0;4;;@Test public void doesNotExist() throws Exception {     new JsonPathExpectationsHelper("$.bogus").doesNotExist(CONTENT). }
false;public;0;7;;@Test public void doesNotExistForAnEmptyArray() throws Exception {     String expression = "$.emptyArray".     exception.expect(AssertionError.class).     exception.expectMessage("Expected no value at JSON path \"" + expression + "\" but found: []").     new JsonPathExpectationsHelper(expression).doesNotExist(CONTENT). }
false;public;0;7;;@Test public void doesNotExistForAnEmptyMap() throws Exception {     String expression = "$.emptyMap".     exception.expect(AssertionError.class).     exception.expectMessage("Expected no value at JSON path \"" + expression + "\" but found: {}").     new JsonPathExpectationsHelper(expression).doesNotExist(CONTENT). }
false;public;0;8;;@Test public void doesNotExistForIndefinatePathWithResults() throws Exception {     String expression = "$.familyMembers[?(@.name == 'Bart')]".     exception.expect(AssertionError.class).     exception.expectMessage("Expected no value at JSON path \"" + expression + "\" but found: [{\"name\":\"Bart\"}]").     new JsonPathExpectationsHelper(expression).doesNotExist(SIMPSONS). }
false;public;0;4;;@Test public void doesNotExistForIndefinatePathWithEmptyResults() throws Exception {     new JsonPathExpectationsHelper("$.familyMembers[?(@.name == 'Dilbert')]").doesNotExist(SIMPSONS). }
false;public;0;4;;@Test public void assertValueIsEmptyForAnEmptyString() throws Exception {     new JsonPathExpectationsHelper("$.emptyString").assertValueIsEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsEmptyForAnEmptyArray() throws Exception {     new JsonPathExpectationsHelper("$.emptyArray").assertValueIsEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsEmptyForAnEmptyMap() throws Exception {     new JsonPathExpectationsHelper("$.emptyMap").assertValueIsEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsEmptyForIndefinatePathWithEmptyResults() throws Exception {     new JsonPathExpectationsHelper("$.familyMembers[?(@.name == 'Dilbert')]").assertValueIsEmpty(SIMPSONS). }
false;public;0;8;;@Test public void assertValueIsEmptyForIndefinatePathWithResults() throws Exception {     String expression = "$.familyMembers[?(@.name == 'Bart')]".     exception.expect(AssertionError.class).     exception.expectMessage("Expected an empty value at JSON path \"" + expression + "\" but found: [{\"name\":\"Bart\"}]").     new JsonPathExpectationsHelper(expression).assertValueIsEmpty(SIMPSONS). }
false;public;0;7;;@Test public void assertValueIsEmptyForWhitespace() throws Exception {     String expression = "$.whitespace".     exception.expect(AssertionError.class).     exception.expectMessage("Expected an empty value at JSON path \"" + expression + "\" but found: '    '").     new JsonPathExpectationsHelper(expression).assertValueIsEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsNotEmptyForString() throws Exception {     new JsonPathExpectationsHelper("$.str").assertValueIsNotEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsNotEmptyForNumber() throws Exception {     new JsonPathExpectationsHelper("$.num").assertValueIsNotEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsNotEmptyForBoolean() throws Exception {     new JsonPathExpectationsHelper("$.bool").assertValueIsNotEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsNotEmptyForArray() throws Exception {     new JsonPathExpectationsHelper("$.arr").assertValueIsNotEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsNotEmptyForMap() throws Exception {     new JsonPathExpectationsHelper("$.colorMap").assertValueIsNotEmpty(CONTENT). }
false;public;0;4;;@Test public void assertValueIsNotEmptyForIndefinatePathWithResults() throws Exception {     new JsonPathExpectationsHelper("$.familyMembers[?(@.name == 'Bart')]").assertValueIsNotEmpty(SIMPSONS). }
false;public;0;7;;@Test public void assertValueIsNotEmptyForIndefinatePathWithEmptyResults() throws Exception {     String expression = "$.familyMembers[?(@.name == 'Dilbert')]".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a non-empty value at JSON path \"" + expression + "\" but found: []").     new JsonPathExpectationsHelper(expression).assertValueIsNotEmpty(SIMPSONS). }
false;public;0;7;;@Test public void assertValueIsNotEmptyForAnEmptyString() throws Exception {     String expression = "$.emptyString".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a non-empty value at JSON path \"" + expression + "\" but found: ''").     new JsonPathExpectationsHelper(expression).assertValueIsNotEmpty(CONTENT). }
false;public;0;7;;@Test public void assertValueIsNotEmptyForAnEmptyArray() throws Exception {     String expression = "$.emptyArray".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a non-empty value at JSON path \"" + expression + "\" but found: []").     new JsonPathExpectationsHelper(expression).assertValueIsNotEmpty(CONTENT). }
false;public;0;7;;@Test public void assertValueIsNotEmptyForAnEmptyMap() throws Exception {     String expression = "$.emptyMap".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a non-empty value at JSON path \"" + expression + "\" but found: {}").     new JsonPathExpectationsHelper(expression).assertValueIsNotEmpty(CONTENT). }
false;public;0;4;;@Test public void hasJsonPath() {     new JsonPathExpectationsHelper("$.abc").hasJsonPath("{\"abc\": \"123\"}"). }
false;public;0;4;;@Test public void hasJsonPathWithNull() {     new JsonPathExpectationsHelper("$.abc").hasJsonPath("{\"abc\": null}"). }
false;public;0;4;;@Test public void hasJsonPathForIndefinatePathWithResults() {     new JsonPathExpectationsHelper("$.familyMembers[?(@.name == 'Bart')]").hasJsonPath(SIMPSONS). }
false;public;0;7;;@Test public void hasJsonPathForIndefinatePathWithEmptyResults() {     String expression = "$.familyMembers[?(@.name == 'Dilbert')]".     exception.expect(AssertionError.class).     exception.expectMessage("No values for JSON path \"" + expression + "\"").     new JsonPathExpectationsHelper(expression).hasJsonPath(SIMPSONS). }
false;public;0;4;;// SPR-16339 @Test public void doesNotHaveJsonPath() {     new JsonPathExpectationsHelper("$.abc").doesNotHaveJsonPath("{}"). }
false;public;0;5;;// SPR-16339 @Test public void doesNotHaveJsonPathWithNull() {     exception.expect(AssertionError.class).     new JsonPathExpectationsHelper("$.abc").doesNotHaveJsonPath("{\"abc\": null}"). }
false;public;0;4;;@Test public void doesNotHaveJsonPathForIndefinatePathWithEmptyResults() {     new JsonPathExpectationsHelper("$.familyMembers[?(@.name == 'Dilbert')]").doesNotHaveJsonPath(SIMPSONS). }
false;public;0;8;;@Test public void doesNotHaveEmptyPathForIndefinatePathWithResults() {     String expression = "$.familyMembers[?(@.name == 'Bart')]".     exception.expect(AssertionError.class).     exception.expectMessage("Expected no values at JSON path \"" + expression + "\" " + "but found: [{\"name\":\"Bart\"}]").     new JsonPathExpectationsHelper(expression).doesNotHaveJsonPath(SIMPSONS). }
false;public;0;4;;@Test public void assertValue() throws Exception {     new JsonPathExpectationsHelper("$.num").assertValue(CONTENT, 5). }
false;public;0;4;;// SPR-14498 @Test public void assertValueWithNumberConversion() throws Exception {     new JsonPathExpectationsHelper("$.num").assertValue(CONTENT, 5.0). }
false;public;0;4;;// SPR-14498 @Test public void assertValueWithNumberConversionAndMatcher() throws Exception {     new JsonPathExpectationsHelper("$.num").assertValue(CONTENT, is(5.0), Double.class). }
false;public;0;4;;@Test public void assertValueIsString() throws Exception {     new JsonPathExpectationsHelper("$.str").assertValueIsString(CONTENT). }
false;public;0;4;;@Test public void assertValueIsStringForAnEmptyString() throws Exception {     new JsonPathExpectationsHelper("$.emptyString").assertValueIsString(CONTENT). }
false;public;0;7;;@Test public void assertValueIsStringForNonString() throws Exception {     String expression = "$.bool".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a string at JSON path \"" + expression + "\" but found: true").     new JsonPathExpectationsHelper(expression).assertValueIsString(CONTENT). }
false;public;0;4;;@Test public void assertValueIsNumber() throws Exception {     new JsonPathExpectationsHelper("$.num").assertValueIsNumber(CONTENT). }
false;public;0;7;;@Test public void assertValueIsNumberForNonNumber() throws Exception {     String expression = "$.bool".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a number at JSON path \"" + expression + "\" but found: true").     new JsonPathExpectationsHelper(expression).assertValueIsNumber(CONTENT). }
false;public;0;4;;@Test public void assertValueIsBoolean() throws Exception {     new JsonPathExpectationsHelper("$.bool").assertValueIsBoolean(CONTENT). }
false;public;0;7;;@Test public void assertValueIsBooleanForNonBoolean() throws Exception {     String expression = "$.num".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a boolean at JSON path \"" + expression + "\" but found: 5").     new JsonPathExpectationsHelper(expression).assertValueIsBoolean(CONTENT). }
false;public;0;4;;@Test public void assertValueIsArray() throws Exception {     new JsonPathExpectationsHelper("$.arr").assertValueIsArray(CONTENT). }
false;public;0;4;;@Test public void assertValueIsArrayForAnEmptyArray() throws Exception {     new JsonPathExpectationsHelper("$.emptyArray").assertValueIsArray(CONTENT). }
false;public;0;7;;@Test public void assertValueIsArrayForNonArray() throws Exception {     String expression = "$.str".     exception.expect(AssertionError.class).     exception.expectMessage("Expected an array at JSON path \"" + expression + "\" but found: 'foo'").     new JsonPathExpectationsHelper(expression).assertValueIsArray(CONTENT). }
false;public;0;4;;@Test public void assertValueIsMap() throws Exception {     new JsonPathExpectationsHelper("$.colorMap").assertValueIsMap(CONTENT). }
false;public;0;4;;@Test public void assertValueIsMapForAnEmptyMap() throws Exception {     new JsonPathExpectationsHelper("$.emptyMap").assertValueIsMap(CONTENT). }
false;public;0;7;;@Test public void assertValueIsMapForNonMap() throws Exception {     String expression = "$.str".     exception.expect(AssertionError.class).     exception.expectMessage("Expected a map at JSON path \"" + expression + "\" but found: 'foo'").     new JsonPathExpectationsHelper(expression).assertValueIsMap(CONTENT). }
