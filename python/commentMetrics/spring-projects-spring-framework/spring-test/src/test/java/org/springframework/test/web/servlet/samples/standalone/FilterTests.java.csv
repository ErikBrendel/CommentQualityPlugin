commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void whenFiltersCompleteMvcProcessesRequest() throws Exception {     standaloneSetup(new PersonController()).addFilters(new ContinueFilter()).build().perform(post("/persons").param("name", "Andy")).andExpect(status().isFound()).andExpect(redirectedUrl("/person/1")).andExpect(model().size(1)).andExpect(model().attributeExists("id")).andExpect(flash().attributeCount(1)).andExpect(flash().attribute("message", "success!")). }
false;public;0;7;;@Test public void filtersProcessRequest() throws Exception {     standaloneSetup(new PersonController()).addFilters(new ContinueFilter(), new RedirectFilter()).build().perform(post("/persons").param("name", "Andy")).andExpect(redirectedUrl("/login")). }
false;public;0;7;;@Test public void filterMappedBySuffix() throws Exception {     standaloneSetup(new PersonController()).addFilter(new RedirectFilter(), "*.html").build().perform(post("/persons.html").param("name", "Andy")).andExpect(redirectedUrl("/login")). }
false;public;0;7;;@Test public void filterWithExactMapping() throws Exception {     standaloneSetup(new PersonController()).addFilter(new RedirectFilter(), "/p", "/persons").build().perform(post("/persons").param("name", "Andy")).andExpect(redirectedUrl("/login")). }
false;public;0;12;;@Test public void filterSkipped() throws Exception {     standaloneSetup(new PersonController()).addFilter(new RedirectFilter(), "/p", "/person").build().perform(post("/persons").param("name", "Andy")).andExpect(status().isFound()).andExpect(redirectedUrl("/person/1")).andExpect(model().size(1)).andExpect(model().attributeExists("id")).andExpect(flash().attributeCount(1)).andExpect(flash().attribute("message", "success!")). }
false;public;0;7;;@Test public void filterWrapsRequestResponse() throws Exception {     standaloneSetup(new PersonController()).addFilters(new WrappingRequestResponseFilter()).build().perform(post("/user")).andExpect(model().attribute("principal", WrappingRequestResponseFilter.PRINCIPAL_NAME)). }
false;public;0;17;;// SPR-16067, SPR-16695 @Test public void filterWrapsRequestResponseAndPerformsAsyncDispatch() throws Exception {     MockMvc mockMvc = standaloneSetup(new PersonController()).addFilters(new WrappingRequestResponseFilter(), new ShallowEtagHeaderFilter()).build().     MvcResult mvcResult = mockMvc.perform(get("/persons/1").accept(MediaType.APPLICATION_JSON)).andExpect(request().asyncStarted()).andExpect(request().asyncResult(new Person("Lukas"))).andReturn().     mockMvc.perform(asyncDispatch(mvcResult)).andExpect(status().isOk()).andExpect(header().longValue("Content-Length", 53)).andExpect(header().string("ETag", "\"0e37becb4f0c90709cb2e1efcc61eaa00\"")).andExpect(content().string("{\"name\":\"Lukas\",\"someDouble\":0.0,\"someBoolean\":false}")). }
false;public;3;9;;@PostMapping(path = "/persons") public String save(@Valid Person person, Errors errors, RedirectAttributes redirectAttrs) {     if (errors.hasErrors()) {         return "person/add".     }     redirectAttrs.addAttribute("id", "1").     redirectAttrs.addFlashAttribute("message", "success!").     return "redirect:/person/{id}". }
false;public;1;4;;@PostMapping("/user") public ModelAndView user(Principal principal) {     return new ModelAndView("user/view", "principal", principal.getName()). }
false;public;0;4;;@GetMapping("/forward") public String forward() {     return "forward:/persons". }
false;public;0;5;;@GetMapping("persons/{id}") @ResponseBody public CompletableFuture<Person> getPerson() {     return CompletableFuture.completedFuture(new Person("Lukas")). }
false;protected;3;6;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     filterChain.doFilter(request, response). }
false;public;0;4;;@Override public Principal getUserPrincipal() {     return () -> PRINCIPAL_NAME. }
false;public;0;5;;// Like Spring Security does in HttpServlet3RequestFactory.. @Override public AsyncContext getAsyncContext() {     return super.getAsyncContext() != null ? new AsyncContextWrapper(super.getAsyncContext()) : null. }
false;protected;3;21;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     filterChain.doFilter(new HttpServletRequestWrapper(request) {          @Override         public Principal getUserPrincipal() {             return () -> PRINCIPAL_NAME.         }          // Like Spring Security does in HttpServlet3RequestFactory..         @Override         public AsyncContext getAsyncContext() {             return super.getAsyncContext() != null ? new AsyncContextWrapper(super.getAsyncContext()) : null.         }     }, new HttpServletResponseWrapper(response)). }
false;protected;3;6;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     response.sendRedirect("/login"). }
false;public;0;4;;@Override public ServletRequest getRequest() {     return this.delegate.getRequest(). }
false;public;0;4;;@Override public ServletResponse getResponse() {     return this.delegate.getResponse(). }
false;public;0;4;;@Override public boolean hasOriginalRequestAndResponse() {     return this.delegate.hasOriginalRequestAndResponse(). }
false;public;0;4;;@Override public void dispatch() {     this.delegate.dispatch(). }
false;public;1;4;;@Override public void dispatch(String path) {     this.delegate.dispatch(path). }
false;public;2;4;;@Override public void dispatch(ServletContext context, String path) {     this.delegate.dispatch(context, path). }
false;public;0;4;;@Override public void complete() {     this.delegate.complete(). }
false;public;1;4;;@Override public void start(Runnable run) {     this.delegate.start(run). }
false;public;1;4;;@Override public void addListener(AsyncListener listener) {     this.delegate.addListener(listener). }
false;public;3;4;;@Override public void addListener(AsyncListener listener, ServletRequest req, ServletResponse res) {     this.delegate.addListener(listener, req, res). }
false;public;1;4;;@Override public <T extends AsyncListener> T createListener(Class<T> clazz) throws ServletException {     return this.delegate.createListener(clazz). }
false;public;1;4;;@Override public void setTimeout(long timeout) {     this.delegate.setTimeout(timeout). }
false;public;0;4;;@Override public long getTimeout() {     return this.delegate.getTimeout(). }
