commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Autowired public void setDataSource(DataSource dataSource) {     jdbcTemplate = new JdbcTemplate(dataSource). }
false;public,static;0;5;;@BeforeClass public static void beforeClass() {     BeforeAndAfterTransactionAnnotationTests.numBeforeTransactionCalls = 0.     BeforeAndAfterTransactionAnnotationTests.numAfterTransactionCalls = 0. }
false;public,static;0;9;;@AfterClass public static void afterClass() {     assertEquals("Verifying the final number of rows in the person table after all tests.", 3, countRowsInPersonTable(jdbcTemplate)).     assertEquals("Verifying the total number of calls to beforeTransaction().", 2, BeforeAndAfterTransactionAnnotationTests.numBeforeTransactionCalls).     assertEquals("Verifying the total number of calls to afterTransaction().", 2, BeforeAndAfterTransactionAnnotationTests.numAfterTransactionCalls). }
false;;0;8;;@BeforeTransaction void beforeTransaction() {     assertInTransaction(false).     this.inTransaction = true.     BeforeAndAfterTransactionAnnotationTests.numBeforeTransactionCalls++.     clearPersonTable(jdbcTemplate).     assertEquals("Adding yoda", 1, addPerson(jdbcTemplate, YODA)). }
false;;0;9;;@AfterTransaction void afterTransaction() {     assertInTransaction(false).     this.inTransaction = false.     BeforeAndAfterTransactionAnnotationTests.numAfterTransactionCalls++.     assertEquals("Deleting yoda", 1, deletePerson(jdbcTemplate, YODA)).     assertEquals("Verifying the number of rows in the person table after a transactional test method.", 0, countRowsInPersonTable(jdbcTemplate)). }
false;public;0;6;;@Before public void before() {     assertShouldBeInTransaction().     assertEquals("Verifying the number of rows in the person table before a test method.", (this.inTransaction ? 1 : 0), countRowsInPersonTable(jdbcTemplate)). }
false;private;0;4;;private void assertShouldBeInTransaction() {     boolean shouldBeInTransaction = !testName.getMethodName().equals("nonTransactionalMethod").     assertInTransaction(shouldBeInTransaction). }
false;public;0;4;;@After public void after() {     assertShouldBeInTransaction(). }
false;public;0;7;;@Test public void transactionalMethod1() {     assertInTransaction(true).     assertEquals("Adding jane", 1, addPerson(jdbcTemplate, JANE)).     assertEquals("Verifying the number of rows in the person table within transactionalMethod1().", 2, countRowsInPersonTable(jdbcTemplate)). }
false;public;0;8;;@Test public void transactionalMethod2() {     assertInTransaction(true).     assertEquals("Adding jane", 1, addPerson(jdbcTemplate, JANE)).     assertEquals("Adding sue", 1, addPerson(jdbcTemplate, SUE)).     assertEquals("Verifying the number of rows in the person table within transactionalMethod2().", 3, countRowsInPersonTable(jdbcTemplate)). }
false;public;0;10;;@Test @Transactional(propagation = Propagation.NOT_SUPPORTED) public void nonTransactionalMethod() {     assertInTransaction(false).     assertEquals("Adding luke", 1, addPerson(jdbcTemplate, LUKE)).     assertEquals("Adding leia", 1, addPerson(jdbcTemplate, LEIA)).     assertEquals("Adding yoda", 1, addPerson(jdbcTemplate, YODA)).     assertEquals("Verifying the number of rows in the person table without a transaction.", 3, countRowsInPersonTable(jdbcTemplate)). }
