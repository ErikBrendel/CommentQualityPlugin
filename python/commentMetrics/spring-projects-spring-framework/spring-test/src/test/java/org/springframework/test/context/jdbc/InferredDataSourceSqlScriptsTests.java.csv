commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test @Sql(scripts = "data-add-dogbert.sql", config = @SqlConfig(transactionManager = "txMgr1")) public void database1() {     assertInTransaction(false).     assertUsers(new JdbcTemplate(dataSource1), "Dilbert", "Dogbert"). }
false;public;0;6;;@Test @Sql(scripts = "data-add-catbert.sql", config = @SqlConfig(transactionManager = "txMgr2")) public void database2() {     assertInTransaction(false).     assertUsers(new JdbcTemplate(dataSource2), "Dilbert", "Catbert"). }
false;private;2;7;;private void assertUsers(JdbcTemplate jdbcTemplate, String... users) {     List<String> expected = Arrays.asList(users).     Collections.sort(expected).     List<String> actual = jdbcTemplate.queryForList("select name from user", String.class).     Collections.sort(actual).     assertEquals("Users in database.", expected, actual). }
false;public;0;4;;@Bean public PlatformTransactionManager txMgr1() {     return new DataSourceTransactionManager(dataSource1()). }
false;public;0;4;;@Bean public PlatformTransactionManager txMgr2() {     return new DataSourceTransactionManager(dataSource2()). }
false;public;0;8;;@Bean public DataSource dataSource1() {     return //      new EmbeddedDatabaseBuilder().setName(//      "database1").addScript(//      "classpath:/org/springframework/test/context/jdbc/schema.sql").addScript(//      "classpath:/org/springframework/test/context/jdbc/data.sql").build(). }
false;public;0;8;;@Bean public DataSource dataSource2() {     return //      new EmbeddedDatabaseBuilder().setName(//      "database2").addScript(//      "classpath:/org/springframework/test/context/jdbc/schema.sql").addScript(//      "classpath:/org/springframework/test/context/jdbc/data.sql").build(). }
