commented;modifiers;parameterAmount;loc;comment;code
false;;0;5;;@Test void missingDisabledIf() {     assertResult(condition.evaluateExecutionCondition(buildExtensionContext("missingDisabledIf")), false, endsWith("missingDisabledIf() is enabled since @DisabledIf is not present")). }
false;;0;9;;@Test void disabledByEmptyExpression() {     // @formatter:off     assertAll(() -> assertExpressionIsBlank("emptyExpression"), () -> assertExpressionIsBlank("blankExpression")). // @formatter:on }
false;;0;11;;@Test void invalidExpressionEvaluationType() {     String methodName = "nonBooleanOrStringExpression".     IllegalStateException exception = assertThrows(IllegalStateException.class, () -> condition.evaluateExecutionCondition(buildExtensionContext(methodName))).     Method method = ReflectionUtils.findMethod(getClass(), methodName).     assertThat(exception.getMessage(), is(equalTo("@DisabledIf(\"#{6 * 7}\") on " + method + " must evaluate to a String or a Boolean, not java.lang.Integer"))). }
false;;0;11;;@Test void unsupportedStringEvaluationValue() {     String methodName = "stringExpressionThatIsNeitherTrueNorFalse".     IllegalStateException exception = assertThrows(IllegalStateException.class, () -> condition.evaluateExecutionCondition(buildExtensionContext(methodName))).     Method method = ReflectionUtils.findMethod(getClass(), methodName).     assertThat(exception.getMessage(), is(equalTo("@DisabledIf(\"#{'enigma'}\") on " + method + " must evaluate to \"true\" or \"false\", not \"enigma\""))). }
false;;0;4;;@Test void disabledWithCustomReason() {     assertResult(condition.evaluateExecutionCondition(buildExtensionContext("customReason")), true, is(equalTo("Because... 42!"))). }
false;;0;5;;@Test void disabledWithDefaultReason() {     assertResult(condition.evaluateExecutionCondition(buildExtensionContext("defaultReason")), true, endsWith("defaultReason() is disabled because @DisabledIf(\"#{1 + 1 eq 2}\") evaluated to true")). }
false;;0;5;;@Test void notDisabledWithDefaultReason() {     assertResult(condition.evaluateExecutionCondition(buildExtensionContext("neverDisabledWithDefaultReason")), false, endsWith("neverDisabledWithDefaultReason() is enabled because @DisabledIf(\"false\") did not evaluate to true")). }
false;private;1;12;;// ------------------------------------------------------------------------- private ExtensionContext buildExtensionContext(String methodName) {     Class<?> testClass = SpringTestCase.class.     Method method = ReflectionUtils.findMethod(getClass(), methodName).     Store store = mock(Store.class).     when(store.getOrComputeIfAbsent(any(), any(), any())).thenReturn(new TestContextManager(testClass)).     ExtensionContext extensionContext = mock(ExtensionContext.class).     when(extensionContext.getTestClass()).thenReturn(Optional.of(testClass)).     when(extensionContext.getElement()).thenReturn(Optional.of(method)).     when(extensionContext.getStore(any())).thenReturn(store).     return extensionContext. }
false;private;1;6;;private void assertExpressionIsBlank(String methodName) {     IllegalStateException exception = assertThrows(IllegalStateException.class, () -> condition.evaluateExecutionCondition(buildExtensionContext(methodName))).     assertThat(exception.getMessage(), containsString("must not be blank")). }
false;private;3;14;;private void assertResult(ConditionEvaluationResult result, boolean disabled, Matcher<String> matcher) {     assertNotNull(result).     if (disabled) {         assertTrue(result.isDisabled()).     } else {         assertFalse(result.isDisabled()).     }     Optional<String> reason = result.getReason().     assertTrue(reason.isPresent()).     assertThat(reason.get(), matcher). }
false;private;0;3;;// ------------------------------------------------------------------------- @DisabledIf("") private void emptyExpression() { }
false;private;0;3;;@DisabledIf("\t") private void blankExpression() { }
false;private;0;3;;@DisabledIf("#{6 * 7}") private void nonBooleanOrStringExpression() { }
false;private;0;3;;@DisabledIf("#{'enigma'}") private void stringExpressionThatIsNeitherTrueNorFalse() { }
false;private;0;3;;@DisabledIf(expression = "#{6 * 7 == 42}", reason = "Because... 42!") private void customReason() { }
false;private;0;3;;@DisabledIf("#{1 + 1 eq 2}") private void defaultReason() { }
false;private;0;3;;@DisabledIf("false") private void neverDisabledWithDefaultReason() { }
