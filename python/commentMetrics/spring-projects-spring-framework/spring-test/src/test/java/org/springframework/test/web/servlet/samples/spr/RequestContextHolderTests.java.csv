commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() {     this.mockRequest.setAttribute(FROM_TCF_MOCK, FROM_TCF_MOCK).     this.mockMvc = webAppContextSetup(this.wac).addFilters(new RequestFilter(), new RequestAttributesFilter(), this.filterWithSessionScopedService).defaultRequest(get("/").requestAttr(FROM_MVC_TEST_DEFAULT, FROM_MVC_TEST_DEFAULT)).alwaysExpect(status().isOk()).build(). }
false;public;0;4;;@Test public void singletonController() throws Exception {     this.mockMvc.perform(get("/singletonController").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK)). }
false;public;0;5;;@Test public void requestScopedController() throws Exception {     assertTrue("request-scoped controller must be a CGLIB proxy", AopUtils.isCglibProxy(this.requestScopedController)).     this.mockMvc.perform(get("/requestScopedController").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK)). }
false;public;0;5;;@Test public void requestScopedService() throws Exception {     assertTrue("request-scoped service must be a CGLIB proxy", AopUtils.isCglibProxy(this.requestScopedService)).     this.mockMvc.perform(get("/requestScopedService").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK)). }
false;public;0;5;;@Test public void sessionScopedService() throws Exception {     assertTrue("session-scoped service must be a CGLIB proxy", AopUtils.isCglibProxy(this.sessionScopedService)).     this.mockMvc.perform(get("/sessionScopedService").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK)). }
false;public;0;4;;@After public void verifyRestoredRequestAttributes() {     assertRequestAttributes(false). }
false;public;0;4;;@Bean public SingletonController singletonController() {     return new SingletonController(). }
false;public;0;5;;@Bean @Scope(scopeName = "request", proxyMode = ScopedProxyMode.TARGET_CLASS) public RequestScopedController requestScopedController() {     return new RequestScopedController(). }
false;public;0;5;;@Bean @RequestScope public RequestScopedService requestScopedService() {     return new RequestScopedService(). }
false;public;0;4;;@Bean public ControllerWithRequestScopedService controllerWithRequestScopedService() {     return new ControllerWithRequestScopedService(). }
false;public;0;5;;@Bean @SessionScope public SessionScopedService sessionScopedService() {     return new SessionScopedService(). }
false;public;0;4;;@Bean public ControllerWithSessionScopedService controllerWithSessionScopedService() {     return new ControllerWithSessionScopedService(). }
false;public;0;4;;@Bean public FilterWithSessionScopedService filterWithSessionScopedService() {     return new FilterWithSessionScopedService(). }
false;public;0;4;;@RequestMapping("/singletonController") public void handle() {     assertRequestAttributes(). }
false;public;0;5;;@RequestMapping("/requestScopedController") public void handle() {     assertRequestAttributes(request).     assertRequestAttributes(). }
false;;0;3;;void process() {     assertRequestAttributes(request). }
false;;0;3;;void process() {     assertRequestAttributes(this.request). }
false;public;0;5;;@RequestMapping("/requestScopedService") public void handle() {     this.service.process().     assertRequestAttributes(). }
false;public;0;5;;@RequestMapping("/sessionScopedService") public void handle() {     this.service.process().     assertRequestAttributes(). }
false;public;3;7;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     this.service.process().     assertRequestAttributes(request).     assertRequestAttributes().     chain.doFilter(request, response). }
false;public;3;5;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     request.setAttribute(FROM_REQUEST_FILTER, FROM_REQUEST_FILTER).     chain.doFilter(request, response). }
false;public;3;5;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     RequestContextHolder.getRequestAttributes().setAttribute(FROM_REQUEST_ATTRIBUTES_FILTER, FROM_REQUEST_ATTRIBUTES_FILTER, RequestAttributes.SCOPE_REQUEST).     chain.doFilter(request, response). }
false;private,static;0;3;;private static void assertRequestAttributes() {     assertRequestAttributes(true). }
false;private,static;1;5;;private static void assertRequestAttributes(boolean withinMockMvc) {     RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes().     assertThat(requestAttributes, instanceOf(ServletRequestAttributes.class)).     assertRequestAttributes(((ServletRequestAttributes) requestAttributes).getRequest(), withinMockMvc). }
false;private,static;1;3;;private static void assertRequestAttributes(ServletRequest request) {     assertRequestAttributes(request, true). }
false;private,static;2;16;;private static void assertRequestAttributes(ServletRequest request, boolean withinMockMvc) {     if (withinMockMvc) {         assertThat(request.getAttribute(FROM_TCF_MOCK), is(nullValue())).         assertThat(request.getAttribute(FROM_MVC_TEST_DEFAULT), is(FROM_MVC_TEST_DEFAULT)).         assertThat(request.getAttribute(FROM_MVC_TEST_MOCK), is(FROM_MVC_TEST_MOCK)).         assertThat(request.getAttribute(FROM_REQUEST_FILTER), is(FROM_REQUEST_FILTER)).         assertThat(request.getAttribute(FROM_REQUEST_ATTRIBUTES_FILTER), is(FROM_REQUEST_ATTRIBUTES_FILTER)).     } else {         assertThat(request.getAttribute(FROM_TCF_MOCK), is(FROM_TCF_MOCK)).         assertThat(request.getAttribute(FROM_MVC_TEST_DEFAULT), is(nullValue())).         assertThat(request.getAttribute(FROM_MVC_TEST_MOCK), is(nullValue())).         assertThat(request.getAttribute(FROM_REQUEST_FILTER), is(nullValue())).         assertThat(request.getAttribute(FROM_REQUEST_ATTRIBUTES_FILTER), is(nullValue())).     } }
