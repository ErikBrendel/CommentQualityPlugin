commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before public void setUp() throws Exception {     this.matchers = new ModelResultMatchers().     ModelAndView mav = new ModelAndView("view", "good", "good").     BindingResult bindingResult = new BeanPropertyBindingResult("good", "good").     mav.addObject(BindingResult.MODEL_KEY_PREFIX + "good", bindingResult).     this.mvcResult = getMvcResult(mav).     Date date = new Date().     BindingResult bindingResultWithError = new BeanPropertyBindingResult(date, "date").     bindingResultWithError.rejectValue("time", "error").     ModelAndView mavWithError = new ModelAndView("view", "good", "good").     mavWithError.addObject("date", date).     mavWithError.addObject(BindingResult.MODEL_KEY_PREFIX + "date", bindingResultWithError).     this.mvcResultWithError = getMvcResult(mavWithError). }
false;public;0;4;;@Test public void attributeExists() throws Exception {     this.matchers.attributeExists("good").match(this.mvcResult). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeExists_doesNotExist() throws Exception {     this.matchers.attributeExists("bad").match(this.mvcResult). }
false;public;0;4;;@Test public void attributeDoesNotExist() throws Exception {     this.matchers.attributeDoesNotExist("bad").match(this.mvcResult). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeDoesNotExist_doesExist() throws Exception {     this.matchers.attributeDoesNotExist("good").match(this.mvcResultWithError). }
false;public;0;4;;@Test public void attribute_equal() throws Exception {     this.matchers.attribute("good", is("good")).match(this.mvcResult). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attribute_notEqual() throws Exception {     this.matchers.attribute("good", is("bad")).match(this.mvcResult). }
false;public;0;4;;@Test public void hasNoErrors() throws Exception {     this.matchers.hasNoErrors().match(this.mvcResult). }
false;public;0;4;;@Test(expected = AssertionError.class) public void hasNoErrors_withErrors() throws Exception {     this.matchers.hasNoErrors().match(this.mvcResultWithError). }
false;public;0;4;;@Test public void attributeHasErrors() throws Exception {     this.matchers.attributeHasErrors("date").match(this.mvcResultWithError). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasErrors_withoutErrors() throws Exception {     this.matchers.attributeHasErrors("good").match(this.mvcResultWithError). }
false;public;0;4;;@Test public void attributeHasNoErrors() throws Exception {     this.matchers.attributeHasNoErrors("good").match(this.mvcResult). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasNoErrors_withoutAttribute() throws Exception {     this.matchers.attributeHasNoErrors("missing").match(this.mvcResultWithError). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasNoErrors_withErrors() throws Exception {     this.matchers.attributeHasNoErrors("date").match(this.mvcResultWithError). }
false;public;0;4;;@Test public void attributeHasFieldErrors() throws Exception {     this.matchers.attributeHasFieldErrors("date", "time").match(this.mvcResultWithError). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasFieldErrors_withoutAttribute() throws Exception {     this.matchers.attributeHasFieldErrors("missing", "bad").match(this.mvcResult). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasFieldErrors_withoutErrorsForAttribute() throws Exception {     this.matchers.attributeHasFieldErrors("date", "time").match(this.mvcResult). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasFieldErrors_withoutErrorsForField() throws Exception {     this.matchers.attributeHasFieldErrors("date", "good", "time").match(this.mvcResultWithError). }
false;public;0;4;;@Test public void attributeHasFieldErrorCode() throws Exception {     this.matchers.attributeHasFieldErrorCode("date", "time", "error").match(this.mvcResultWithError). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasFieldErrorCode_withoutErrorOnField() throws Exception {     this.matchers.attributeHasFieldErrorCode("date", "time", "incorrectError").match(this.mvcResultWithError). }
false;public;0;4;;@Test public void attributeHasFieldErrorCode_startsWith() throws Exception {     this.matchers.attributeHasFieldErrorCode("date", "time", startsWith("err")).match(this.mvcResultWithError). }
false;public;0;4;;@Test(expected = AssertionError.class) public void attributeHasFieldErrorCode_startsWith_withoutErrorOnField() throws Exception {     this.matchers.attributeHasFieldErrorCode("date", "time", startsWith("inc")).match(this.mvcResultWithError). }
false;private;1;3;;private MvcResult getMvcResult(ModelAndView modelAndView) {     return new StubMvcResult(null, null, null, null, modelAndView, null, null). }
