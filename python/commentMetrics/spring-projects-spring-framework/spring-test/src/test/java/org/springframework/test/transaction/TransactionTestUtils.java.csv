commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Convenience method for determining if a transaction is active for the  * current {@link Thread}.  * @return {@code true} if a transaction is currently active  */ ;/**  * Convenience method for determining if a transaction is active for the  * current {@link Thread}.  * @return {@code true} if a transaction is currently active  */ public static boolean inTransaction() {     return TransactionSynchronizationManager.isActualTransactionActive(). }
true;public,static;1;8;/**  * Asserts whether or not a transaction is active for the current  * {@link Thread}.  * @param transactionExpected whether or not a transaction is expected  * @throws AssertionError if the supplied assertion fails  * @see #inTransaction()  */ ;/**  * Asserts whether or not a transaction is active for the current  * {@link Thread}.  * @param transactionExpected whether or not a transaction is expected  * @throws AssertionError if the supplied assertion fails  * @see #inTransaction()  */ public static void assertInTransaction(boolean transactionExpected) {     if (transactionExpected) {         assertCondition(inTransaction(), "The current thread should be associated with a transaction.").     } else {         assertCondition(!inTransaction(), "The current thread should not be associated with a transaction").     } }
true;private,static;1;3;/**  * Fails by throwing an {@code AssertionError} with the supplied  * {@code message}.  * @param message the exception message to use  * @see #assertCondition(boolean, String)  */ ;/**  * Fails by throwing an {@code AssertionError} with the supplied  * {@code message}.  * @param message the exception message to use  * @see #assertCondition(boolean, String)  */ private static void fail(String message) throws AssertionError {     throw new AssertionError(message). }
true;private,static;2;5;/**  * Assert the provided boolean {@code condition}, throwing  * {@code AssertionError} with the supplied {@code message} if  * the test result is {@code false}.  * @param condition a boolean expression  * @param message the exception message to use if the assertion fails  * @throws AssertionError if condition is {@code false}  * @see #fail(String)  */ ;/**  * Assert the provided boolean {@code condition}, throwing  * {@code AssertionError} with the supplied {@code message} if  * the test result is {@code false}.  * @param condition a boolean expression  * @param message the exception message to use if the assertion fails  * @throws AssertionError if condition is {@code false}  * @see #fail(String)  */ private static void assertCondition(boolean condition, String message) throws AssertionError {     if (!condition) {         fail(message).     } }
