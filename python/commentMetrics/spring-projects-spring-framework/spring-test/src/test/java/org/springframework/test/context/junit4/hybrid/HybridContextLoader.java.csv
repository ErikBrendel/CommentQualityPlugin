commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {     Assert.isTrue(mergedConfig.hasClasses() || mergedConfig.hasLocations(), getClass().getSimpleName() + " requires either classes or locations"). }
false;public;1;10;;@Override public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {     // Detect default XML configuration files:     super.processContextConfiguration(configAttributes).     // Detect default configuration classes:     if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {         configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())).     } }
false;protected;2;6;;@Override protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {     // Order doesn't matter: <bean> always wins over @Bean.     new XmlBeanDefinitionReader(context).loadBeanDefinitions(mergedConfig.getLocations()).     new AnnotatedBeanDefinitionReader(context).register(mergedConfig.getClasses()). }
false;protected;1;4;;@Override protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {     throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support this"). }
false;protected;0;4;;@Override protected String getResourceSuffix() {     return "-context.xml". }
