commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void contextConfigurationValue() throws Exception {     Class<MetaValueConfigTestCase> declaringClass = MetaValueConfigTestCase.class.     AnnotationDescriptor<ContextConfiguration> descriptor = findAnnotationDescriptor(declaringClass, ContextConfiguration.class).     assertNotNull(descriptor).     assertEquals(declaringClass, descriptor.getRootDeclaringClass()).     assertEquals(MetaValueConfig.class, descriptor.getComposedAnnotationType()).     assertEquals(ContextConfiguration.class, descriptor.getAnnotationType()).     assertNotNull(descriptor.getComposedAnnotation()).     assertEquals(MetaValueConfig.class, descriptor.getComposedAnnotationType()).     // direct access to annotation value:     assertArrayEquals(new String[] { "foo.xml" }, descriptor.getAnnotation().value()). }
false;public;0;23;;@Test public void overriddenContextConfigurationValue() throws Exception {     Class<?> declaringClass = OverriddenMetaValueConfigTestCase.class.     AnnotationDescriptor<ContextConfiguration> descriptor = findAnnotationDescriptor(declaringClass, ContextConfiguration.class).     assertNotNull(descriptor).     assertEquals(declaringClass, descriptor.getRootDeclaringClass()).     assertEquals(MetaValueConfig.class, descriptor.getComposedAnnotationType()).     assertEquals(ContextConfiguration.class, descriptor.getAnnotationType()).     assertNotNull(descriptor.getComposedAnnotation()).     assertEquals(MetaValueConfig.class, descriptor.getComposedAnnotationType()).     // direct access to annotation value:     assertArrayEquals(new String[] { "foo.xml" }, descriptor.getAnnotation().value()).     // overridden attribute:     AnnotationAttributes attributes = descriptor.getAnnotationAttributes().     // NOTE: we would like to be able to override the 'value' attribute. however,     // Spring currently does not allow overrides for the 'value' attribute.     // See SPR-11393 for related discussions.     assertArrayEquals(new String[] { "foo.xml" }, attributes.getStringArray("value")). }
false;public;0;16;;@Test public void contextConfigurationLocationsAndInheritLocations() throws Exception {     Class<MetaLocationsConfigTestCase> declaringClass = MetaLocationsConfigTestCase.class.     AnnotationDescriptor<ContextConfiguration> descriptor = findAnnotationDescriptor(declaringClass, ContextConfiguration.class).     assertNotNull(descriptor).     assertEquals(declaringClass, descriptor.getRootDeclaringClass()).     assertEquals(MetaLocationsConfig.class, descriptor.getComposedAnnotationType()).     assertEquals(ContextConfiguration.class, descriptor.getAnnotationType()).     assertNotNull(descriptor.getComposedAnnotation()).     assertEquals(MetaLocationsConfig.class, descriptor.getComposedAnnotationType()).     // direct access to annotation attributes:     assertArrayEquals(new String[] { "foo.xml" }, descriptor.getAnnotation().locations()).     assertFalse(descriptor.getAnnotation().inheritLocations()). }
false;public;0;21;;@Test public void overriddenContextConfigurationLocationsAndInheritLocations() throws Exception {     Class<?> declaringClass = OverriddenMetaLocationsConfigTestCase.class.     AnnotationDescriptor<ContextConfiguration> descriptor = findAnnotationDescriptor(declaringClass, ContextConfiguration.class).     assertNotNull(descriptor).     assertEquals(declaringClass, descriptor.getRootDeclaringClass()).     assertEquals(MetaLocationsConfig.class, descriptor.getComposedAnnotationType()).     assertEquals(ContextConfiguration.class, descriptor.getAnnotationType()).     assertNotNull(descriptor.getComposedAnnotation()).     assertEquals(MetaLocationsConfig.class, descriptor.getComposedAnnotationType()).     // direct access to annotation attributes:     assertArrayEquals(new String[] { "foo.xml" }, descriptor.getAnnotation().locations()).     assertFalse(descriptor.getAnnotation().inheritLocations()).     // overridden attributes:     AnnotationAttributes attributes = descriptor.getAnnotationAttributes().     assertArrayEquals(new String[] { "bar.xml" }, attributes.getStringArray("locations")).     assertTrue(attributes.getBoolean("inheritLocations")). }
