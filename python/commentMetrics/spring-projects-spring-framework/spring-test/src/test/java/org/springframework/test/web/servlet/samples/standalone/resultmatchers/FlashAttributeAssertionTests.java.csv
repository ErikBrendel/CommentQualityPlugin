commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     this.mockMvc = standaloneSetup(new PersonController()).alwaysExpect(status().isFound()).alwaysExpect(flash().attributeCount(3)).build(). }
false;public;0;5;;@Test public void testExists() throws Exception {     this.mockMvc.perform(post("/persons")).andExpect(flash().attributeExists("one", "two", "three")). }
false;public;0;10;;@Test public void testEqualTo() throws Exception {     this.mockMvc.perform(post("/persons")).andExpect(flash().attribute("one", "1")).andExpect(flash().attribute("two", 2.222)).andExpect(flash().attribute("three", new URL("http://example.com"))).andExpect(// Hamcrest...     flash().attribute("one", equalTo("1"))).andExpect(flash().attribute("two", equalTo(2.222))).andExpect(flash().attribute("three", equalTo(new URL("http://example.com")))). }
false;public;0;7;;@Test public void testMatchers() throws Exception {     this.mockMvc.perform(post("/persons")).andExpect(flash().attribute("one", containsString("1"))).andExpect(flash().attribute("two", closeTo(2, 0.5))).andExpect(flash().attribute("three", notNullValue())). }
false;public;1;7;;@RequestMapping(value = "/persons", method = RequestMethod.POST) public String save(RedirectAttributes redirectAttrs) throws Exception {     redirectAttrs.addFlashAttribute("one", "1").     redirectAttrs.addFlashAttribute("two", 2.222).     redirectAttrs.addFlashAttribute("three", new URL("http://example.com")).     return "redirect:/person/1". }
