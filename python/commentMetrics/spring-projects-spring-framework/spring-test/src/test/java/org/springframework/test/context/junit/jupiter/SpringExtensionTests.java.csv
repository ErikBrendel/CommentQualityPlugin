commented;modifiers;parameterAmount;loc;comment;code
false;;1;5;;@Test void applicationContextInjectedIntoMethod(ApplicationContext applicationContext) {     assertNotNull(applicationContext, "ApplicationContext should have been injected by Spring").     assertEquals(this.dilbert, applicationContext.getBean("dilbert", Person.class)). }
false;;1;5;;@Test void genericApplicationContextInjectedIntoMethod(GenericApplicationContext applicationContext) {     assertNotNull(applicationContext, "GenericApplicationContext should have been injected by Spring").     assertEquals(this.dilbert, applicationContext.getBean("dilbert", Person.class)). }
false;;0;16;;@Test void autowiredFields() {     assertNotNull(this.dilbert, "Dilbert should have been @Autowired by Spring").     assertEquals("Dilbert", this.dilbert.getName(), "Person's name").     assertEquals(2, this.people.size(), "Number of people in context").     assertNotNull(this.dog, "Dogbert should have been @Autowired by Spring").     assertEquals("Dogbert", this.dog.getName(), "Dog's name").     assertNotNull(this.cat, "Catbert should have been @Autowired by Spring as the @Primary cat").     assertEquals("Catbert", this.cat.getName(), "Primary cat's name").     assertEquals(2, this.cats.size(), "Number of cats in context").     assertNotNull(this.enigma, "Enigma should have been injected via @Value by Spring").     assertEquals(Integer.valueOf(42), this.enigma, "enigma"). }
false;;1;5;;@Test void autowiredParameterByTypeForSingleBean(@Autowired Dog dog) {     assertNotNull(dog, "Dogbert should have been @Autowired by Spring").     assertEquals("Dogbert", dog.getName(), "Dog's name"). }
false;;1;5;;@Test void autowiredParameterByTypeForPrimaryBean(@Autowired Cat primaryCat) {     assertNotNull(primaryCat, "Primary cat should have been @Autowired by Spring").     assertEquals("Catbert", primaryCat.getName(), "Primary cat's name"). }
false;;1;5;;@Test void autowiredParameterWithExplicitQualifier(@Qualifier("wally") Person person) {     assertNotNull(person, "Wally should have been @Autowired by Spring").     assertEquals("Wally", person.getName(), "Person's name"). }
true;;1;5;/**  * NOTE: Test code must be compiled with "-g" (debug symbols) or "-parameters" in order  * for the parameter name to be used as the qualifier. otherwise, use  * {@code @Qualifier("wally")}.  */ ;/**  * NOTE: Test code must be compiled with "-g" (debug symbols) or "-parameters" in order  * for the parameter name to be used as the qualifier. otherwise, use  * {@code @Qualifier("wally")}.  */ @Test void autowiredParameterWithImplicitQualifierBasedOnParameterName(@Autowired Person wally) {     assertNotNull(wally, "Wally should have been @Autowired by Spring").     assertEquals("Wally", wally.getName(), "Person's name"). }
false;;1;6;;@Test void autowiredParameterAsJavaUtilOptional(@Autowired Optional<Dog> dog) {     assertNotNull(dog, "Optional dog should have been @Autowired by Spring").     assertTrue(dog.isPresent(), "Value of Optional should be 'present'").     assertEquals("Dogbert", dog.get().getName(), "Dog's name"). }
false;;1;5;;@Test void autowiredParameterThatDoesNotExistAsJavaUtilOptional(@Autowired Optional<Number> number) {     assertNotNull(number, "Optional number should have been @Autowired by Spring").     assertFalse(number.isPresent(), "Value of Optional number should not be 'present'"). }
false;;1;4;;@Test void autowiredParameterThatDoesNotExistButIsNotRequired(@Autowired(required = false) Number number) {     assertNull(number, "Non-required number should have been @Autowired as 'null' by Spring"). }
false;;1;5;;@Test void autowiredParameterOfList(@Autowired List<Person> peopleParam) {     assertNotNull(peopleParam, "list of people should have been @Autowired by Spring").     assertEquals(2, peopleParam.size(), "Number of people in context"). }
false;;1;4;;@Test void valueParameterWithPrimitiveType(@Value("99") int num) {     assertEquals(99, num). }
false;;1;5;;@Test void valueParameterFromPropertyPlaceholder(@Value("${enigma}") Integer enigmaParam) {     assertNotNull(enigmaParam, "Enigma should have been injected via @Value by Spring").     assertEquals(Integer.valueOf(42), enigmaParam, "enigma"). }
false;;1;5;;@Test void valueParameterFromDefaultValueForPropertyPlaceholder(@Value("${bogus:false}") Boolean defaultValue) {     assertNotNull(defaultValue, "Default value should have been injected via @Value by Spring").     assertEquals(false, defaultValue, "default value"). }
false;;1;5;;@Test void valueParameterFromSpelExpression(@Value("#{@dilbert.name}") String name) {     assertNotNull(name, "Dilbert's name should have been injected via SpEL expression in @Value by Spring").     assertEquals("Dilbert", name, "name from SpEL expression"). }
false;;1;5;;@Test void valueParameterFromSpelExpressionWithNestedPropertyPlaceholder(@Value("#{'Hello ' + ${enigma}}") String hello) {     assertNotNull(hello, "hello should have been injected via SpEL expression in @Value by Spring").     assertEquals("Hello 42", hello, "hello from SpEL expression"). }
false;;4;10;;@Test void junitAndSpringMethodInjectionCombined(@Autowired Cat kittyCat, TestInfo testInfo, ApplicationContext context, TestReporter testReporter) {     assertNotNull(testInfo, "TestInfo should have been injected by JUnit").     assertNotNull(testReporter, "TestReporter should have been injected by JUnit").     assertNotNull(context, "ApplicationContext should have been injected by Spring").     assertNotNull(kittyCat, "Cat should have been @Autowired by Spring"). }
