commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     this.webTestClient = WebTestClient.bindToController(new TestController()).apply(identity("Pablo")).build(). }
false;public;0;7;;@Test public void useGloballyConfiguredIdentity() throws Exception {     this.webTestClient.get().uri("/userIdentity").exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("Hello Pablo!"). }
false;public;0;10;;@Test public void useLocallyConfiguredIdentity() throws Exception {     this.webTestClient.mutateWith(identity("Giovanni")).get().uri("/userIdentity").exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("Hello Giovanni!"). }
false;private,static;1;3;;private static IdentityConfigurer identity(String userName) {     return new IdentityConfigurer(userName). }
false;public;1;4;;@GetMapping("/userIdentity") public String handle(Principal principal) {     return "Hello " + principal.getName() + "!". }
false;public;0;4;;@Override public String getName() {     return this.name. }
false;public;1;4;;@Override public void beforeServerCreated(WebHttpHandlerBuilder builder) {     builder.filters(filters -> filters.add(0, this.filter)). }
false;public;3;11;;@Override public void afterConfigurerAdded(WebTestClient.Builder builder, @Nullable WebHttpHandlerBuilder httpHandlerBuilder, @Nullable ClientHttpConnector connector) {     Assert.notNull(httpHandlerBuilder, "Not a mock server").     httpHandlerBuilder.filters(filters -> {         filters.removeIf(filter -> filter instanceof IdentityFilter).         filters.add(0, this.filter).     }). }
false;public;2;5;;@Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {     exchange = exchange.mutate().principal(this.userMono).build().     return chain.filter(exchange). }
