commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.request = new MockHttpServletRequest().     this.response = new MockHttpServletResponse(). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void constructorNullServlet() {     new MockFilterChain((Servlet) null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void constructorNullFilter() {     new MockFilterChain(mock(Servlet.class), (Filter) null). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void doFilterNullRequest() throws Exception {     MockFilterChain chain = new MockFilterChain().     chain.doFilter(null, this.response). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void doFilterNullResponse() throws Exception {     MockFilterChain chain = new MockFilterChain().     chain.doFilter(this.request, null). }
false;public;0;16;;@Test public void doFilterEmptyChain() throws Exception {     MockFilterChain chain = new MockFilterChain().     chain.doFilter(this.request, this.response).     assertThat(chain.getRequest(), is(request)).     assertThat(chain.getResponse(), is(response)).     try {         chain.doFilter(this.request, this.response).         fail("Expected Exception").     } catch (IllegalStateException ex) {         assertEquals("This FilterChain has already been called!", ex.getMessage()).     } }
false;public;0;14;;@Test public void doFilterWithServlet() throws Exception {     Servlet servlet = mock(Servlet.class).     MockFilterChain chain = new MockFilterChain(servlet).     chain.doFilter(this.request, this.response).     verify(servlet).service(this.request, this.response).     try {         chain.doFilter(this.request, this.response).         fail("Expected Exception").     } catch (IllegalStateException ex) {         assertEquals("This FilterChain has already been called!", ex.getMessage()).     } }
false;public;0;23;;@Test public void doFilterWithServletAndFilters() throws Exception {     Servlet servlet = mock(Servlet.class).     MockFilter filter2 = new MockFilter(servlet).     MockFilter filter1 = new MockFilter(null).     MockFilterChain chain = new MockFilterChain(servlet, filter1, filter2).     chain.doFilter(this.request, this.response).     assertTrue(filter1.invoked).     assertTrue(filter2.invoked).     verify(servlet).service(this.request, this.response).     try {         chain.doFilter(this.request, this.response).         fail("Expected Exception").     } catch (IllegalStateException ex) {         assertEquals("This FilterChain has already been called!", ex.getMessage()).     } }
false;public;3;13;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     this.invoked = true.     if (this.servlet != null) {         this.servlet.service(request, response).     } else {         chain.doFilter(request, response).     } }
false;public;1;3;;@Override public void init(FilterConfig filterConfig) throws ServletException { }
false;public;0;3;;@Override public void destroy() { }
