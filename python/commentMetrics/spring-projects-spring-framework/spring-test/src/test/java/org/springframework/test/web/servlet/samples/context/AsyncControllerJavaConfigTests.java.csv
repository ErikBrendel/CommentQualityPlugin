commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(). }
false;public;0;20;;// SPR-13615 @Test public void callableInterceptor() throws Exception {     MvcResult mvcResult = this.mockMvc.perform(get("/callable").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andExpect(request().asyncStarted()).andExpect(request().asyncResult(Collections.singletonMap("key", "value"))).andReturn().     Mockito.verify(this.callableInterceptor).beforeConcurrentHandling(any(), any()).     Mockito.verify(this.callableInterceptor).preProcess(any(), any()).     Mockito.verify(this.callableInterceptor).postProcess(any(), any(), any()).     Mockito.verifyNoMoreInteractions(this.callableInterceptor).     this.mockMvc.perform(asyncDispatch(mvcResult)).andExpect(status().isOk()).andExpect(content().string("{\"key\":\"value\"}")).     Mockito.verify(this.callableInterceptor).afterCompletion(any(), any()).     Mockito.verifyNoMoreInteractions(this.callableInterceptor). }
false;public;1;4;;@Override public void configureAsyncSupport(AsyncSupportConfigurer configurer) {     configurer.registerCallableInterceptors(callableInterceptor()). }
false;public;0;4;;@Bean public CallableProcessingInterceptor callableInterceptor() {     return Mockito.mock(CallableProcessingInterceptor.class). }
false;public;0;4;;@Bean public AsyncController asyncController() {     return new AsyncController(). }
false;public;0;4;;@GetMapping("/callable") public Callable<Map<String, String>> getCallable() {     return () -> Collections.singletonMap("key", "value"). }
