commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;private void assertLocationsFooAttributes(ContextConfigurationAttributes attributes) {     assertAttributes(attributes, LocationsFoo.class, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY, ContextLoader.class, false). }
false;private;1;4;;private void assertClassesFooAttributes(ContextConfigurationAttributes attributes) {     assertAttributes(attributes, ClassesFoo.class, EMPTY_STRING_ARRAY, new Class<?>[] { FooConfig.class }, ContextLoader.class, false). }
false;private;1;4;;private void assertLocationsBarAttributes(ContextConfigurationAttributes attributes) {     assertAttributes(attributes, LocationsBar.class, new String[] { "/bar.xml" }, EMPTY_CLASS_ARRAY, AnnotationConfigContextLoader.class, true). }
false;private;1;4;;private void assertClassesBarAttributes(ContextConfigurationAttributes attributes) {     assertAttributes(attributes, ClassesBar.class, EMPTY_STRING_ARRAY, new Class<?>[] { BarConfig.class }, AnnotationConfigContextLoader.class, true). }
false;public;0;13;;@Test public void resolveConfigAttributesWithConflictingLocations() {     exception.expect(AnnotationConfigurationException.class).     exception.expectMessage(containsString(ConflictingLocations.class.getName())).     exception.expectMessage(either(containsString("attribute 'value' and its alias 'locations'")).or(containsString("attribute 'locations' and its alias 'value'"))).     exception.expectMessage(either(containsString("values of [{x}] and [{y}]")).or(containsString("values of [{y}] and [{x}]"))).     exception.expectMessage(containsString("but only one is permitted")).     resolveContextConfigurationAttributes(ConflictingLocations.class). }
false;public;0;9;;@Test public void resolveConfigAttributesWithBareAnnotations() {     Class<BareAnnotations> testClass = BareAnnotations.class.     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass).     assertNotNull(attributesList).     assertEquals(1, attributesList.size()).     assertAttributes(attributesList.get(0), testClass, EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, ContextLoader.class, true). }
false;public;0;7;;@Test public void resolveConfigAttributesWithLocalAnnotationAndLocations() {     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(LocationsFoo.class).     assertNotNull(attributesList).     assertEquals(1, attributesList.size()).     assertLocationsFooAttributes(attributesList.get(0)). }
false;public;0;9;;@Test public void resolveConfigAttributesWithMetaAnnotationAndLocations() {     Class<MetaLocationsFoo> testClass = MetaLocationsFoo.class.     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass).     assertNotNull(attributesList).     assertEquals(1, attributesList.size()).     assertAttributes(attributesList.get(0), testClass, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY, ContextLoader.class, true). }
false;public;0;9;;@Test public void resolveConfigAttributesWithMetaAnnotationAndLocationsAndOverrides() {     Class<MetaLocationsFooWithOverrides> testClass = MetaLocationsFooWithOverrides.class.     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass).     assertNotNull(attributesList).     assertEquals(1, attributesList.size()).     assertAttributes(attributesList.get(0), testClass, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY, ContextLoader.class, true). }
false;public;0;9;;@Test public void resolveConfigAttributesWithMetaAnnotationAndLocationsAndOverriddenAttributes() {     Class<MetaLocationsFooWithOverriddenAttributes> testClass = MetaLocationsFooWithOverriddenAttributes.class.     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass).     assertNotNull(attributesList).     assertEquals(1, attributesList.size()).     assertAttributes(attributesList.get(0), testClass, new String[] { "foo1.xml", "foo2.xml" }, EMPTY_CLASS_ARRAY, ContextLoader.class, true). }
false;public;0;11;;@Test public void resolveConfigAttributesWithMetaAnnotationAndLocationsInClassHierarchy() {     Class<MetaLocationsBar> testClass = MetaLocationsBar.class.     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass).     assertNotNull(attributesList).     assertEquals(2, attributesList.size()).     assertAttributes(attributesList.get(0), testClass, new String[] { "/bar.xml" }, EMPTY_CLASS_ARRAY, ContextLoader.class, true).     assertAttributes(attributesList.get(1), MetaLocationsFoo.class, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY, ContextLoader.class, true). }
false;public;0;7;;@Test public void resolveConfigAttributesWithLocalAnnotationAndClasses() {     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(ClassesFoo.class).     assertNotNull(attributesList).     assertEquals(1, attributesList.size()).     assertClassesFooAttributes(attributesList.get(0)). }
false;public;0;8;;@Test public void resolveConfigAttributesWithLocalAndInheritedAnnotationsAndLocations() {     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(LocationsBar.class).     assertNotNull(attributesList).     assertEquals(2, attributesList.size()).     assertLocationsBarAttributes(attributesList.get(0)).     assertLocationsFooAttributes(attributesList.get(1)). }
false;public;0;8;;@Test public void resolveConfigAttributesWithLocalAndInheritedAnnotationsAndClasses() {     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(ClassesBar.class).     assertNotNull(attributesList).     assertEquals(2, attributesList.size()).     assertClassesBarAttributes(attributesList.get(0)).     assertClassesFooAttributes(attributesList.get(1)). }
true;public;0;6;/**  * Verifies change requested in <a href="https://jira.spring.io/browse/SPR-11634">SPR-11634</a>.  * @since 4.0.4  */ ;/**  * Verifies change requested in <a href="https://jira.spring.io/browse/SPR-11634">SPR-11634</a>.  * @since 4.0.4  */ @Test public void resolveConfigAttributesWithLocationsAndClasses() {     List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(LocationsAndClasses.class).     assertNotNull(attributesList).     assertEquals(1, attributesList.size()). }
