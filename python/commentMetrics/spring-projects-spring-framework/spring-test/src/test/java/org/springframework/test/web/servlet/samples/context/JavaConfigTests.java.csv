commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build().     verifyRootWacSupport().     given(this.personDao.getPerson(5L)).willReturn(new Person("Joe")). }
false;public;0;7;;@Test public void person() throws Exception {     this.mockMvc.perform(get("/person/5").accept(MediaType.APPLICATION_JSON)).andDo(print()).andExpect(status().isOk()).andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}")). }
false;public;0;6;;@Test public void tilesDefinitions() throws Exception {     this.mockMvc.perform(get("/")).andExpect(status().isOk()).andExpect(forwardedUrl("/WEB-INF/layouts/standardLayout.jsp")). }
true;private;0;18;/**  * Verify that the breaking change introduced in <a  * href="https://jira.spring.io/browse/SPR-12553">SPR-12553</a> has been reverted.  *  * <p>This code has been copied from  * {@link org.springframework.test.context.hierarchies.web.ControllerIntegrationTests}.  *  * @see org.springframework.test.context.hierarchies.web.ControllerIntegrationTests#verifyRootWacSupport()  */ ;/**  * Verify that the breaking change introduced in <a  * href="https://jira.spring.io/browse/SPR-12553">SPR-12553</a> has been reverted.  *  * <p>This code has been copied from  * {@link org.springframework.test.context.hierarchies.web.ControllerIntegrationTests}.  *  * @see org.springframework.test.context.hierarchies.web.ControllerIntegrationTests#verifyRootWacSupport()  */ private void verifyRootWacSupport() {     assertNotNull(personDao).     assertNotNull(personController).     ApplicationContext parent = wac.getParent().     assertNotNull(parent).     assertTrue(parent instanceof WebApplicationContext).     WebApplicationContext root = (WebApplicationContext) parent.     ServletContext childServletContext = wac.getServletContext().     assertNotNull(childServletContext).     ServletContext rootServletContext = root.getServletContext().     assertNotNull(rootServletContext).     assertSame(childServletContext, rootServletContext).     assertSame(root, rootServletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)).     assertSame(root, childServletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)). }
false;public;0;4;;@Bean public PersonDao personDao() {     return Mockito.mock(PersonDao.class). }
false;public;0;4;;@Bean public PersonController personController() {     return new PersonController(this.rootConfig.personDao()). }
false;public;1;4;;@Override public void addResourceHandlers(ResourceHandlerRegistry registry) {     registry.addResourceHandler("/resources/**").addResourceLocations("/resources/"). }
false;public;1;4;;@Override public void addViewControllers(ViewControllerRegistry registry) {     registry.addViewController("/").setViewName("home"). }
false;public;1;4;;@Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {     configurer.enable(). }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.tiles(). }
false;public;0;6;;@Bean public TilesConfigurer tilesConfigurer() {     TilesConfigurer configurer = new TilesConfigurer().     configurer.setDefinitions("/WEB-INF/**/tiles.xml").     return configurer. }
