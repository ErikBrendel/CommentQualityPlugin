commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     assertInTransaction(true).     assertNotNull("PersonService should have been autowired.", personService).     assertNotNull("SessionFactory should have been autowired.", sessionFactory). }
false;public;0;8;;@Test public void findSam() {     Person sam = personService.findByName(SAM).     assertNotNull("Should be able to find Sam", sam).     DriversLicense driversLicense = sam.getDriversLicense().     assertNotNull("Sam's driver's license should not be null", driversLicense).     assertEquals("Verifying Sam's driver's license number", Long.valueOf(1234), driversLicense.getNumber()). }
false;public;0;11;;// SPR-16956 @Test @Transactional(readOnly = true) public void findSamWithReadOnlySession() {     Person sam = personService.findByName(SAM).     sam.setName("Vlad").     // By setting setDefaultReadOnly(true), the user can no longer modify any entity...     Session session = sessionFactory.getCurrentSession().     session.flush().     session.refresh(sam).     assertEquals("Sam", sam.getName()). }
false;public;0;10;;@Test public void saveJuergenWithDriversLicense() {     DriversLicense driversLicense = new DriversLicense(2L, 2222L).     Person juergen = new Person(JUERGEN, driversLicense).     int numRows = countRowsInTable("person").     personService.save(juergen).     assertEquals("Verifying number of rows in the 'person' table.", numRows + 1, countRowsInTable("person")).     assertNotNull("Should be able to save and retrieve Juergen", personService.findByName(JUERGEN)).     assertNotNull("Juergen's ID should have been set", juergen.getId()). }
false;public;0;4;;@Test(expected = ConstraintViolationException.class) public void saveJuergenWithNullDriversLicense() {     personService.save(new Person(JUERGEN)). }
false;public;0;7;;@Test public // no expected exception! void updateSamWithNullDriversLicenseWithoutSessionFlush() {     updateSamWithNullDriversLicense(). // False positive, since an exception will be thrown once the session is // finally flushed (i.e., in production code) }
false;public;0;12;;@Test(expected = ConstraintViolationException.class) public void updateSamWithNullDriversLicenseWithSessionFlush() throws Throwable {     updateSamWithNullDriversLicense().     // Manual flush is required to avoid false positive in test     try {         sessionFactory.getCurrentSession().flush().     } catch (PersistenceException ex) {         // Wrapped in Hibernate 5.2, with the constraint violation as cause         throw ex.getCause().     } }
false;private;0;6;;private void updateSamWithNullDriversLicense() {     Person sam = personService.findByName(SAM).     assertNotNull("Should be able to find Sam", sam).     sam.setDriversLicense(null).     personService.save(sam). }
