commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void isEqualTo() {     StatusAssertions assertions = statusAssertions(HttpStatus.CONFLICT).     // Success     assertions.isEqualTo(HttpStatus.CONFLICT).     assertions.isEqualTo(409).     try {         assertions.isEqualTo(HttpStatus.REQUEST_TIMEOUT).         fail("Wrong status expected").     } catch (AssertionError error) {     // Expected     }     try {         assertions.isEqualTo(408).         fail("Wrong status value expected").     } catch (AssertionError error) {     // Expected     } }
false;public;0;15;;@Test public void reasonEquals() {     StatusAssertions assertions = statusAssertions(HttpStatus.CONFLICT).     // Success     assertions.reasonEquals("Conflict").     try {         assertions.reasonEquals("Request Timeout").         fail("Wrong reason expected").     } catch (AssertionError error) {     // Expected     } }
false;public;0;15;;@Test public void statusSerius1xx() {     StatusAssertions assertions = statusAssertions(HttpStatus.CONTINUE).     // Success     assertions.is1xxInformational().     try {         assertions.is2xxSuccessful().         fail("Wrong series expected").     } catch (AssertionError error) {     // Expected     } }
false;public;0;15;;@Test public void statusSerius2xx() {     StatusAssertions assertions = statusAssertions(HttpStatus.OK).     // Success     assertions.is2xxSuccessful().     try {         assertions.is5xxServerError().         fail("Wrong series expected").     } catch (AssertionError error) {     // Expected     } }
false;public;0;15;;@Test public void statusSerius3xx() {     StatusAssertions assertions = statusAssertions(HttpStatus.PERMANENT_REDIRECT).     // Success     assertions.is3xxRedirection().     try {         assertions.is2xxSuccessful().         fail("Wrong series expected").     } catch (AssertionError error) {     // Expected     } }
false;public;0;15;;@Test public void statusSerius4xx() {     StatusAssertions assertions = statusAssertions(HttpStatus.BAD_REQUEST).     // Success     assertions.is4xxClientError().     try {         assertions.is2xxSuccessful().         fail("Wrong series expected").     } catch (AssertionError error) {     // Expected     } }
false;public;0;15;;@Test public void statusSerius5xx() {     StatusAssertions assertions = statusAssertions(HttpStatus.INTERNAL_SERVER_ERROR).     // Success     assertions.is5xxServerError().     try {         assertions.is2xxSuccessful().         fail("Wrong series expected").     } catch (AssertionError error) {     // Expected     } }
false;public;0;16;;@Test public void matches() {     StatusAssertions assertions = statusAssertions(HttpStatus.CONFLICT).     // Success     assertions.value(equalTo(409)).     assertions.value(greaterThan(400)).     try {         assertions.value(equalTo(200)).         fail("Wrong status expected").     } catch (AssertionError error) {     // Expected     } }
false;private;1;10;;private StatusAssertions statusAssertions(HttpStatus status) {     MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.GET, URI.create("/")).     MockClientHttpResponse response = new MockClientHttpResponse(status).     MonoProcessor<byte[]> emptyContent = MonoProcessor.create().     emptyContent.onComplete().     ExchangeResult result = new ExchangeResult(request, response, emptyContent, emptyContent, Duration.ZERO, null).     return new StatusAssertions(result, mock(WebTestClient.ResponseSpec.class)). }
