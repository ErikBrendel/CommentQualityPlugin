commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void performGet() throws Exception {     String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}".     this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     @SuppressWarnings("unused")     ListenableFuture<ResponseEntity<Person>> ludwig = this.restTemplate.getForEntity("/composers/{id}", Person.class, 42).     // We are only validating the request. The response is mocked out.     // person.getName().equals("Ludwig van Beethoven")     // person.getDouble().equals(1.6035)     this.mockServer.verify(). }
false;public;0;23;;@Test public void performGetManyTimes() throws Exception {     String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}".     this.mockServer.expect(manyTimes(), requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     @SuppressWarnings("unused")     ListenableFuture<ResponseEntity<Person>> ludwig = this.restTemplate.getForEntity("/composers/{id}", Person.class, 42).     // We are only validating the request. The response is mocked out.     // person.getName().equals("Ludwig van Beethoven")     // person.getDouble().equals(1.6035)     this.restTemplate.getForEntity("/composers/{id}", Person.class, 42).     this.restTemplate.getForEntity("/composers/{id}", Person.class, 42).     this.restTemplate.getForEntity("/composers/{id}", Person.class, 42).     this.restTemplate.getForEntity("/composers/{id}", Person.class, 42).     this.mockServer.verify(). }
false;public;0;17;;@Test public void performGetWithResponseBodyFromFile() throws Exception {     Resource responseBody = new ClassPathResource("ludwig.json", this.getClass()).     this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON)).     @SuppressWarnings("unused")     ListenableFuture<ResponseEntity<Person>> ludwig = this.restTemplate.getForEntity("/composers/{id}", Person.class, 42).     // hotel.getId() == 42     // hotel.getName().equals("Holiday Inn")     this.mockServer.verify(). }
false;public;0;29;;@Test public void verify() {     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("1", MediaType.TEXT_PLAIN)).     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("2", MediaType.TEXT_PLAIN)).     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("4", MediaType.TEXT_PLAIN)).     this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("8", MediaType.TEXT_PLAIN)).     @SuppressWarnings("unused")     ListenableFuture<ResponseEntity<String>> result = this.restTemplate.getForEntity("/number", String.class).     // result == "1"     result = this.restTemplate.getForEntity("/number", String.class).     try {         this.mockServer.verify().     } catch (AssertionError error) {         assertTrue(error.getMessage(), error.getMessage().contains("2 unsatisfied expectation(s)")).     } }
