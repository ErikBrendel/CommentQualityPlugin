commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Autowired protected void setEmployee(Employee employee) {     this.employee = employee. }
false;protected;1;4;;@Resource protected void setBar(String bar) {     this.bar = bar. }
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;4;;@Override public void afterPropertiesSet() {     this.beanInitialized = true. }
false;public;0;5;;@Test public void verifyBeanNameSet() {     assertTrue("The bean name of this test instance should have been set to the fully qualified class name " + "due to BeanNameAware semantics.", this.beanName.startsWith(getClass().getName())). }
false;public;0;5;;@Test public void verifyBeanInitialized() {     assertTrue("This test bean should have been initialized due to InitializingBean semantics.", this.beanInitialized). }
false;public;0;7;;@Test public void verifyAnnotationAutowiredFields() {     assertNull("The nonrequiredLong property should NOT have been autowired.", this.nonrequiredLong).     assertNotNull("The application context should have been autowired.", this.applicationContext).     assertNotNull("The pet field should have been autowired.", this.pet).     assertEquals("Dogbert", this.pet.getName()). }
false;public;0;5;;@Test public void verifyAnnotationAutowiredMethods() {     assertNotNull("The employee setter method should have been autowired.", this.employee).     assertEquals("Dilbert", this.employee.getName()). }
false;public;0;4;;@Test public void verifyResourceAnnotationWiredFields() {     assertEquals("The foo field should have been wired via @Resource.", "Foo", this.foo). }
false;public;0;4;;@Test public void verifyResourceAnnotationWiredMethods() {     assertEquals("The bar method should have been wired via @Resource.", "Bar", this.bar). }
