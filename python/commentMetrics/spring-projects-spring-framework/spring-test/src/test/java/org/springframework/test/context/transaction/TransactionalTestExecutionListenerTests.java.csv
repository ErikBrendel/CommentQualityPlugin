commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {     return tm. }
false;public;0;4;;@After public void cleanUpThreadLocalStateForSubsequentTestClassesInSuite() {     TransactionContextHolder.removeCurrentTransactionContext(). }
false;protected;2;3;;protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {     return null. }
false;public;0;26;;// SPR-13895 @Test public void transactionalTestWithoutTransactionManager() throws Exception {     TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {          protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {             return null.         }     }.     Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class.     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     Invocable instance = BeanUtils.instantiateClass(clazz).     given(testContext.getTestInstance()).willReturn(instance).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest")).     assertFalse("callback should not have been invoked", instance.invoked()).     TransactionContextHolder.removeCurrentTransactionContext().     try {         listener.beforeTestMethod(testContext).         fail("Should have thrown an IllegalStateException").     } catch (IllegalStateException e) {         assertTrue(e.getMessage().startsWith("Failed to retrieve PlatformTransactionManager for @Transactional test")).     } }
false;public;0;4;;@Test public void beforeTestMethodWithTransactionalDeclaredOnClassLocally() throws Exception {     assertBeforeTestMethodWithTransactionalTestMethod(TransactionalDeclaredOnClassLocallyTestCase.class). }
false;public;0;4;;@Test public void beforeTestMethodWithTransactionalDeclaredOnClassViaMetaAnnotation() throws Exception {     assertBeforeTestMethodWithTransactionalTestMethod(TransactionalDeclaredOnClassViaMetaAnnotationTestCase.class). }
false;public;0;7;;@Test public void beforeTestMethodWithTransactionalDeclaredOnClassViaMetaAnnotationWithOverride() throws Exception {     // Note: not actually invoked within a transaction since the test class is     // annotated with @MetaTxWithOverride(propagation = NOT_SUPPORTED)     assertBeforeTestMethodWithTransactionalTestMethod(TransactionalDeclaredOnClassViaMetaAnnotationWithOverrideTestCase.class, false). }
false;public;0;8;;@Test public void beforeTestMethodWithTransactionalDeclaredOnMethodViaMetaAnnotationWithOverride() throws Exception {     // Note: not actually invoked within a transaction since the method is     // annotated with @MetaTxWithOverride(propagation = NOT_SUPPORTED)     assertBeforeTestMethodWithTransactionalTestMethod(TransactionalDeclaredOnMethodViaMetaAnnotationWithOverrideTestCase.class, false).     assertBeforeTestMethodWithNonTransactionalTestMethod(TransactionalDeclaredOnMethodViaMetaAnnotationWithOverrideTestCase.class). }
false;public;0;4;;@Test public void beforeTestMethodWithTransactionalDeclaredOnMethodLocally() throws Exception {     assertBeforeTestMethod(TransactionalDeclaredOnMethodLocallyTestCase.class). }
false;public;0;4;;@Test public void beforeTestMethodWithTransactionalDeclaredOnMethodViaMetaAnnotation() throws Exception {     assertBeforeTestMethod(TransactionalDeclaredOnMethodViaMetaAnnotationTestCase.class). }
false;public;0;4;;@Test public void beforeTestMethodWithBeforeTransactionDeclaredLocally() throws Exception {     assertBeforeTestMethod(BeforeTransactionDeclaredLocallyTestCase.class). }
false;public;0;4;;@Test public void beforeTestMethodWithBeforeTransactionDeclaredViaMetaAnnotation() throws Exception {     assertBeforeTestMethod(BeforeTransactionDeclaredViaMetaAnnotationTestCase.class). }
false;public;0;4;;@Test public void afterTestMethodWithAfterTransactionDeclaredLocally() throws Exception {     assertAfterTestMethod(AfterTransactionDeclaredLocallyTestCase.class). }
false;public;0;4;;@Test public void afterTestMethodWithAfterTransactionDeclaredViaMetaAnnotation() throws Exception {     assertAfterTestMethod(AfterTransactionDeclaredViaMetaAnnotationTestCase.class). }
false;public;0;4;;@Test public void beforeTestMethodWithBeforeTransactionDeclaredAsInterfaceDefaultMethod() throws Exception {     assertBeforeTestMethod(BeforeTransactionDeclaredAsInterfaceDefaultMethodTestCase.class). }
false;public;0;4;;@Test public void afterTestMethodWithAfterTransactionDeclaredAsInterfaceDefaultMethod() throws Exception {     assertAfterTestMethod(AfterTransactionDeclaredAsInterfaceDefaultMethodTestCase.class). }
false;public;0;4;;@Test public void isRollbackWithMissingRollback() throws Exception {     assertIsRollback(MissingRollbackTestCase.class, true). }
false;public;0;4;;@Test public void isRollbackWithEmptyMethodLevelRollback() throws Exception {     assertIsRollback(EmptyMethodLevelRollbackTestCase.class, true). }
false;public;0;4;;@Test public void isRollbackWithMethodLevelRollbackWithExplicitValue() throws Exception {     assertIsRollback(MethodLevelRollbackWithExplicitValueTestCase.class, false). }
false;public;0;4;;@Test public void isRollbackWithMethodLevelRollbackViaMetaAnnotation() throws Exception {     assertIsRollback(MethodLevelRollbackViaMetaAnnotationTestCase.class, false). }
false;public;0;4;;@Test public void isRollbackWithEmptyClassLevelRollback() throws Exception {     assertIsRollback(EmptyClassLevelRollbackTestCase.class, true). }
false;public;0;4;;@Test public void isRollbackWithClassLevelRollbackWithExplicitValue() throws Exception {     assertIsRollback(ClassLevelRollbackWithExplicitValueTestCase.class, false). }
false;public;0;4;;@Test public void isRollbackWithClassLevelRollbackViaMetaAnnotation() throws Exception {     assertIsRollback(ClassLevelRollbackViaMetaAnnotationTestCase.class, false). }
false;public;0;4;;@Test public void isRollbackWithClassLevelRollbackWithExplicitValueOnTestInterface() throws Exception {     assertIsRollback(ClassLevelRollbackWithExplicitValueOnTestInterfaceTestCase.class, false). }
false;public;0;4;;@Test public void isRollbackWithClassLevelRollbackViaMetaAnnotationOnTestInterface() throws Exception {     assertIsRollback(ClassLevelRollbackViaMetaAnnotationOnTestInterfaceTestCase.class, false). }
false;private;1;4;;private void assertBeforeTestMethod(Class<? extends Invocable> clazz) throws Exception {     assertBeforeTestMethodWithTransactionalTestMethod(clazz).     assertBeforeTestMethodWithNonTransactionalTestMethod(clazz). }
false;private;1;3;;private void assertBeforeTestMethodWithTransactionalTestMethod(Class<? extends Invocable> clazz) throws Exception {     assertBeforeTestMethodWithTransactionalTestMethod(clazz, true). }
false;private;2;13;;private void assertBeforeTestMethodWithTransactionalTestMethod(Class<? extends Invocable> clazz, boolean invokedInTx) throws Exception {     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     Invocable instance = BeanUtils.instantiateClass(clazz).     given(testContext.getTestInstance()).willReturn(instance).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest")).     assertFalse("callback should not have been invoked", instance.invoked()).     TransactionContextHolder.removeCurrentTransactionContext().     listener.beforeTestMethod(testContext).     assertEquals(invokedInTx, instance.invoked()). }
false;private;1;11;;private void assertBeforeTestMethodWithNonTransactionalTestMethod(Class<? extends Invocable> clazz) throws Exception {     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     Invocable instance = BeanUtils.instantiateClass(clazz).     given(testContext.getTestInstance()).willReturn(instance).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("nonTransactionalTest")).     assertFalse("callback should not have been invoked", instance.invoked()).     TransactionContextHolder.removeCurrentTransactionContext().     listener.beforeTestMethod(testContext).     assertFalse("callback should not have been invoked", instance.invoked()). }
false;private;1;4;;private void assertAfterTestMethod(Class<? extends Invocable> clazz) throws Exception {     assertAfterTestMethodWithTransactionalTestMethod(clazz).     assertAfterTestMethodWithNonTransactionalTestMethod(clazz). }
false;private;1;14;;private void assertAfterTestMethodWithTransactionalTestMethod(Class<? extends Invocable> clazz) throws Exception {     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     Invocable instance = BeanUtils.instantiateClass(clazz).     given(testContext.getTestInstance()).willReturn(instance).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest")).     given(tm.getTransaction(BDDMockito.any(TransactionDefinition.class))).willReturn(new SimpleTransactionStatus()).     assertFalse("callback should not have been invoked", instance.invoked()).     TransactionContextHolder.removeCurrentTransactionContext().     listener.beforeTestMethod(testContext).     assertFalse("callback should not have been invoked", instance.invoked()).     listener.afterTestMethod(testContext).     assertTrue("callback should have been invoked", instance.invoked()). }
false;private;1;12;;private void assertAfterTestMethodWithNonTransactionalTestMethod(Class<? extends Invocable> clazz) throws Exception {     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     Invocable instance = BeanUtils.instantiateClass(clazz).     given(testContext.getTestInstance()).willReturn(instance).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("nonTransactionalTest")).     assertFalse("callback should not have been invoked", instance.invoked()).     TransactionContextHolder.removeCurrentTransactionContext().     listener.beforeTestMethod(testContext).     listener.afterTestMethod(testContext).     assertFalse("callback should not have been invoked", instance.invoked()). }
false;private;2;5;;private void assertIsRollback(Class<?> clazz, boolean rollback) throws Exception {     BDDMockito.<Class<?>>given(testContext.getTestClass()).willReturn(clazz).     given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("test")).     assertEquals(rollback, listener.isRollback(testContext)). }
false;;1;1;;void invoked(boolean invoked).
false;;0;1;;boolean invoked().
false;public;1;4;;@Override public void invoked(boolean invoked) {     this.invoked = invoked. }
false;public;0;4;;@Override public boolean invoked() {     return this.invoked. }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;2;;public void transactionalTest() { }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;3;;@Transactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;2;;public void transactionalTest() { }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;3;;@MetaTransactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;2;;public void transactionalTest() { }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;3;;@MetaTxWithOverride(propagation = NOT_SUPPORTED) public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;4;;@BeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;3;;@Transactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;4;;@MetaBeforeTransaction public void beforeTransaction() {     invoked(true). }
false;public;0;3;;@Transactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;4;;@AfterTransaction public void afterTransaction() {     invoked(true). }
false;public;0;3;;@Transactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;4;;@MetaAfterTransaction public void afterTransaction() {     invoked(true). }
false;public;0;3;;@Transactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;default;0;4;;@BeforeTransaction default void beforeTransaction() {     invoked(true). }
false;default;0;4;;@AfterTransaction default void afterTransaction() {     invoked(true). }
false;public;0;3;;@Transactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;3;;@Transactional public void transactionalTest() { }
false;public;0;2;;public void nonTransactionalTest() { }
false;public;0;2;;public void test() { }
false;public;0;3;;@Rollback public void test() { }
false;public;0;3;;@Rollback(false) public void test() { }
false;public;0;3;;@Commit public void test() { }
false;public;0;2;;public void test() { }
false;public;0;2;;public void test() { }
false;public;0;2;;public void test() { }
false;public;0;2;;public void test() { }
false;public;0;2;;public void test() { }
