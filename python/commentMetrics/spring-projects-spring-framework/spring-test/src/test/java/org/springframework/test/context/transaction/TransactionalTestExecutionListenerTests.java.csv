# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionalTestExecutionListenerTests -> @Test 	public void transactionalTestWithoutTransactionManager() throws Exception;1454507787;SPR-13895;@Test_	public void transactionalTestWithoutTransactionManager() throws Exception {_		TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {__			protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {_				return null__			}_		}___		Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class___		BDDMockito.<Class<?>> given(testContext.getTestClass()).willReturn(clazz)__		Invocable instance = clazz.newInstance()__		given(testContext.getTestInstance()).willReturn(instance)__		given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest"))___		assertFalse(instance.invoked)__		TransactionContextHolder.removeCurrentTransactionContext()___		try {_			listener.beforeTestMethod(testContext)__			fail("Should have thrown an IllegalStateException")__		}_		catch (IllegalStateException e) {_			assertTrue(e.getMessage().startsWith(_				"Failed to retrieve PlatformTransactionManager for @Transactional test for test context"))__		}_	};spr,13895;test,public,void,transactional,test,without,transaction,manager,throws,exception,transactional,test,execution,listener,listener,new,transactional,test,execution,listener,protected,platform,transaction,manager,get,transaction,manager,test,context,test,context,string,qualifier,return,null,class,extends,invocable,clazz,transactional,declared,on,class,locally,test,case,class,bddmockito,class,given,test,context,get,test,class,will,return,clazz,invocable,instance,clazz,new,instance,given,test,context,get,test,instance,will,return,instance,given,test,context,get,test,method,will,return,clazz,get,declared,method,transactional,test,assert,false,instance,invoked,transaction,context,holder,remove,current,transaction,context,try,listener,before,test,method,test,context,fail,should,have,thrown,an,illegal,state,exception,catch,illegal,state,exception,e,assert,true,e,get,message,starts,with,failed,to,retrieve,platform,transaction,manager,for,transactional,test,for,test,context
TransactionalTestExecutionListenerTests -> @Test 	public void transactionalTestWithoutTransactionManager() throws Exception;1460901667;SPR-13895;@Test_	public void transactionalTestWithoutTransactionManager() throws Exception {_		TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {__			protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {_				return null__			}_		}___		Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class___		BDDMockito.<Class<?>> given(testContext.getTestClass()).willReturn(clazz)__		Invocable instance = clazz.newInstance()__		given(testContext.getTestInstance()).willReturn(instance)__		given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest"))___		assertFalse("callback not have been invoked", instance.invoked())__		TransactionContextHolder.removeCurrentTransactionContext()___		try {_			listener.beforeTestMethod(testContext)__			fail("Should have thrown an IllegalStateException")__		}_		catch (IllegalStateException e) {_			assertTrue(e.getMessage().startsWith(_				"Failed to retrieve PlatformTransactionManager for @Transactional test for test context"))__		}_	};spr,13895;test,public,void,transactional,test,without,transaction,manager,throws,exception,transactional,test,execution,listener,listener,new,transactional,test,execution,listener,protected,platform,transaction,manager,get,transaction,manager,test,context,test,context,string,qualifier,return,null,class,extends,invocable,clazz,transactional,declared,on,class,locally,test,case,class,bddmockito,class,given,test,context,get,test,class,will,return,clazz,invocable,instance,clazz,new,instance,given,test,context,get,test,instance,will,return,instance,given,test,context,get,test,method,will,return,clazz,get,declared,method,transactional,test,assert,false,callback,not,have,been,invoked,instance,invoked,transaction,context,holder,remove,current,transaction,context,try,listener,before,test,method,test,context,fail,should,have,thrown,an,illegal,state,exception,catch,illegal,state,exception,e,assert,true,e,get,message,starts,with,failed,to,retrieve,platform,transaction,manager,for,transactional,test,for,test,context
TransactionalTestExecutionListenerTests -> @Test 	public void transactionalTestWithoutTransactionManager() throws Exception;1462294651;SPR-13895;@Test_	public void transactionalTestWithoutTransactionManager() throws Exception {_		TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {__			protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {_				return null__			}_		}___		Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class___		BDDMockito.<Class<?>> given(testContext.getTestClass()).willReturn(clazz)__		Invocable instance = clazz.newInstance()__		given(testContext.getTestInstance()).willReturn(instance)__		given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest"))___		assertFalse("callback should not have been invoked", instance.invoked())__		TransactionContextHolder.removeCurrentTransactionContext()___		try {_			listener.beforeTestMethod(testContext)__			fail("Should have thrown an IllegalStateException")__		}_		catch (IllegalStateException e) {_			assertTrue(e.getMessage().startsWith(_				"Failed to retrieve PlatformTransactionManager for @Transactional test for test context"))__		}_	};spr,13895;test,public,void,transactional,test,without,transaction,manager,throws,exception,transactional,test,execution,listener,listener,new,transactional,test,execution,listener,protected,platform,transaction,manager,get,transaction,manager,test,context,test,context,string,qualifier,return,null,class,extends,invocable,clazz,transactional,declared,on,class,locally,test,case,class,bddmockito,class,given,test,context,get,test,class,will,return,clazz,invocable,instance,clazz,new,instance,given,test,context,get,test,instance,will,return,instance,given,test,context,get,test,method,will,return,clazz,get,declared,method,transactional,test,assert,false,callback,should,not,have,been,invoked,instance,invoked,transaction,context,holder,remove,current,transaction,context,try,listener,before,test,method,test,context,fail,should,have,thrown,an,illegal,state,exception,catch,illegal,state,exception,e,assert,true,e,get,message,starts,with,failed,to,retrieve,platform,transaction,manager,for,transactional,test,for,test,context
TransactionalTestExecutionListenerTests -> @Test 	public void transactionalTestWithoutTransactionManager() throws Exception;1462294651;SPR-13895;@Test_	public void transactionalTestWithoutTransactionManager() throws Exception {_		TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {__			protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {_				return null__			}_		}___		Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class___		BDDMockito.<Class<?>> given(testContext.getTestClass()).willReturn(clazz)__		Invocable instance = clazz.newInstance()__		given(testContext.getTestInstance()).willReturn(instance)__		given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest"))___		assertFalse("callback should not have been invoked", instance.invoked())__		TransactionContextHolder.removeCurrentTransactionContext()___		try {_			listener.beforeTestMethod(testContext)__			fail("Should have thrown an IllegalStateException")__		}_		catch (IllegalStateException e) {_			assertTrue(e.getMessage().startsWith(_				"Failed to retrieve PlatformTransactionManager for @Transactional test for test context"))__		}_	};spr,13895;test,public,void,transactional,test,without,transaction,manager,throws,exception,transactional,test,execution,listener,listener,new,transactional,test,execution,listener,protected,platform,transaction,manager,get,transaction,manager,test,context,test,context,string,qualifier,return,null,class,extends,invocable,clazz,transactional,declared,on,class,locally,test,case,class,bddmockito,class,given,test,context,get,test,class,will,return,clazz,invocable,instance,clazz,new,instance,given,test,context,get,test,instance,will,return,instance,given,test,context,get,test,method,will,return,clazz,get,declared,method,transactional,test,assert,false,callback,should,not,have,been,invoked,instance,invoked,transaction,context,holder,remove,current,transaction,context,try,listener,before,test,method,test,context,fail,should,have,thrown,an,illegal,state,exception,catch,illegal,state,exception,e,assert,true,e,get,message,starts,with,failed,to,retrieve,platform,transaction,manager,for,transactional,test,for,test,context
TransactionalTestExecutionListenerTests -> @Test 	public void transactionalTestWithoutTransactionManager() throws Exception;1462470884;SPR-13895;@Test_	public void transactionalTestWithoutTransactionManager() throws Exception {_		TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {__			protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {_				return null__			}_		}___		Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class___		BDDMockito.<Class<?>> given(testContext.getTestClass()).willReturn(clazz)__		Invocable instance = clazz.newInstance()__		given(testContext.getTestInstance()).willReturn(instance)__		given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest"))___		assertFalse("callback should not have been invoked", instance.invoked())__		TransactionContextHolder.removeCurrentTransactionContext()___		try {_			listener.beforeTestMethod(testContext)__			fail("Should have thrown an IllegalStateException")__		}_		catch (IllegalStateException e) {_			assertTrue(e.getMessage().startsWith(_				"Failed to retrieve PlatformTransactionManager for @Transactional test for test context"))__		}_	};spr,13895;test,public,void,transactional,test,without,transaction,manager,throws,exception,transactional,test,execution,listener,listener,new,transactional,test,execution,listener,protected,platform,transaction,manager,get,transaction,manager,test,context,test,context,string,qualifier,return,null,class,extends,invocable,clazz,transactional,declared,on,class,locally,test,case,class,bddmockito,class,given,test,context,get,test,class,will,return,clazz,invocable,instance,clazz,new,instance,given,test,context,get,test,instance,will,return,instance,given,test,context,get,test,method,will,return,clazz,get,declared,method,transactional,test,assert,false,callback,should,not,have,been,invoked,instance,invoked,transaction,context,holder,remove,current,transaction,context,try,listener,before,test,method,test,context,fail,should,have,thrown,an,illegal,state,exception,catch,illegal,state,exception,e,assert,true,e,get,message,starts,with,failed,to,retrieve,platform,transaction,manager,for,transactional,test,for,test,context
TransactionalTestExecutionListenerTests -> @Test 	public void transactionalTestWithoutTransactionManager() throws Exception;1467994604;SPR-13895;@Test_	public void transactionalTestWithoutTransactionManager() throws Exception {_		TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {__			protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {_				return null__			}_		}___		Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class___		BDDMockito.<Class<?>> given(testContext.getTestClass()).willReturn(clazz)__		Invocable instance = clazz.newInstance()__		given(testContext.getTestInstance()).willReturn(instance)__		given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest"))___		assertFalse("callback should not have been invoked", instance.invoked())__		TransactionContextHolder.removeCurrentTransactionContext()___		try {_			listener.beforeTestMethod(testContext)__			fail("Should have thrown an IllegalStateException")__		}_		catch (IllegalStateException e) {_			assertTrue(e.getMessage().startsWith(_				"Failed to retrieve PlatformTransactionManager for @Transactional test for test context"))__		}_	};spr,13895;test,public,void,transactional,test,without,transaction,manager,throws,exception,transactional,test,execution,listener,listener,new,transactional,test,execution,listener,protected,platform,transaction,manager,get,transaction,manager,test,context,test,context,string,qualifier,return,null,class,extends,invocable,clazz,transactional,declared,on,class,locally,test,case,class,bddmockito,class,given,test,context,get,test,class,will,return,clazz,invocable,instance,clazz,new,instance,given,test,context,get,test,instance,will,return,instance,given,test,context,get,test,method,will,return,clazz,get,declared,method,transactional,test,assert,false,callback,should,not,have,been,invoked,instance,invoked,transaction,context,holder,remove,current,transaction,context,try,listener,before,test,method,test,context,fail,should,have,thrown,an,illegal,state,exception,catch,illegal,state,exception,e,assert,true,e,get,message,starts,with,failed,to,retrieve,platform,transaction,manager,for,transactional,test,for,test,context
TransactionalTestExecutionListenerTests -> @Test 	public void transactionalTestWithoutTransactionManager() throws Exception;1515858304;SPR-13895;@Test_	public void transactionalTestWithoutTransactionManager() throws Exception {_		TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {__			protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {_				return null__			}_		}___		Class<? extends Invocable> clazz = TransactionalDeclaredOnClassLocallyTestCase.class___		BDDMockito.<Class<?>> given(testContext.getTestClass()).willReturn(clazz)__		Invocable instance = BeanUtils.instantiateClass(clazz)__		given(testContext.getTestInstance()).willReturn(instance)__		given(testContext.getTestMethod()).willReturn(clazz.getDeclaredMethod("transactionalTest"))___		assertFalse("callback should not have been invoked", instance.invoked())__		TransactionContextHolder.removeCurrentTransactionContext()___		try {_			listener.beforeTestMethod(testContext)__			fail("Should have thrown an IllegalStateException")__		}_		catch (IllegalStateException e) {_			assertTrue(e.getMessage().startsWith(_				"Failed to retrieve PlatformTransactionManager for @Transactional test for test context"))__		}_	};spr,13895;test,public,void,transactional,test,without,transaction,manager,throws,exception,transactional,test,execution,listener,listener,new,transactional,test,execution,listener,protected,platform,transaction,manager,get,transaction,manager,test,context,test,context,string,qualifier,return,null,class,extends,invocable,clazz,transactional,declared,on,class,locally,test,case,class,bddmockito,class,given,test,context,get,test,class,will,return,clazz,invocable,instance,bean,utils,instantiate,class,clazz,given,test,context,get,test,instance,will,return,instance,given,test,context,get,test,method,will,return,clazz,get,declared,method,transactional,test,assert,false,callback,should,not,have,been,invoked,instance,invoked,transaction,context,holder,remove,current,transaction,context,try,listener,before,test,method,test,context,fail,should,have,thrown,an,illegal,state,exception,catch,illegal,state,exception,e,assert,true,e,get,message,starts,with,failed,to,retrieve,platform,transaction,manager,for,transactional,test,for,test,context
