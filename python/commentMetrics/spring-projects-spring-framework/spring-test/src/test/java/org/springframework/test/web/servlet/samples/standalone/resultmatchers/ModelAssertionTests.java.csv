commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() {     SampleController controller = new SampleController("a string value", 3, new Person("a name")).     this.mockMvc = standaloneSetup(controller).defaultRequest(get("/")).alwaysExpect(status().isOk()).setControllerAdvice(new ModelAttributeAdvice()).build(). }
false;public;0;9;;@Test public void testAttributeEqualTo() throws Exception {     mockMvc.perform(get("/")).andExpect(model().attribute("integer", 3)).andExpect(model().attribute("string", "a string value")).andExpect(// Hamcrest...     model().attribute("integer", equalTo(3))).andExpect(model().attribute("string", equalTo("a string value"))).andExpect(model().attribute("globalAttrName", equalTo("Global Attribute Value"))). }
false;public;0;7;;@Test public void testAttributeExists() throws Exception {     mockMvc.perform(get("/")).andExpect(model().attributeExists("integer", "string", "person")).andExpect(// Hamcrest...     model().attribute("integer", notNullValue())).andExpect(model().attribute("INTEGER", nullValue())). }
false;public;0;7;;@Test public void testAttributeHamcrestMatchers() throws Exception {     mockMvc.perform(get("/")).andExpect(model().attribute("integer", equalTo(3))).andExpect(model().attribute("string", allOf(startsWith("a string"), endsWith("value")))).andExpect(model().attribute("person", hasProperty("name", equalTo("a name")))). }
false;public;0;4;;@Test public void testHasErrors() throws Exception {     mockMvc.perform(post("/persons")).andExpect(model().attributeHasErrors("person")). }
false;public;0;4;;@Test public void testHasNoErrors() throws Exception {     mockMvc.perform(get("/")).andExpect(model().hasNoErrors()). }
false;public;1;7;;@RequestMapping("/") public String handle(Model model) {     for (Object value : this.values) {         model.addAttribute(value).     }     return "view". }
false;public;3;4;;@PostMapping("/persons") public String create(@Valid Person person, BindingResult result, Model model) {     return "view". }
false;public;0;4;;@ModelAttribute("globalAttrName") public String getAttribute() {     return "Global Attribute Value". }
