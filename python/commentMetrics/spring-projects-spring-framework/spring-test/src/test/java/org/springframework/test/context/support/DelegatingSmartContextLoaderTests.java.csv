commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static void assertEmpty(Object[] array) {     assertTrue(ObjectUtils.isEmpty(array)). }
false;public;0;8;;// --- SmartContextLoader - processContextConfiguration() ------------------ @Test public void processContextConfigurationWithDefaultXmlConfigGeneration() {     ContextConfigurationAttributes configAttributes = new ContextConfigurationAttributes(XmlTestCase.class, EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, true, null, true, ContextLoader.class).     loader.processContextConfiguration(configAttributes).     assertEquals(1, configAttributes.getLocations().length).     assertEmpty(configAttributes.getClasses()). }
false;public;0;8;;@Test public void processContextConfigurationWithDefaultConfigurationClassGeneration() {     ContextConfigurationAttributes configAttributes = new ContextConfigurationAttributes(ConfigClassTestCase.class, EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, true, null, true, ContextLoader.class).     loader.processContextConfiguration(configAttributes).     assertEquals(1, configAttributes.getClasses().length).     assertEmpty(configAttributes.getLocations()). }
false;public;0;10;;@Test public void processContextConfigurationWithDefaultXmlConfigAndConfigurationClassGeneration() {     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage(containsString("both default locations AND default configuration classes were detected")).     ContextConfigurationAttributes configAttributes = new ContextConfigurationAttributes(ImproperDuplicateDefaultXmlAndConfigClassTestCase.class, EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, true, null, true, ContextLoader.class).     loader.processContextConfiguration(configAttributes). }
false;public;0;9;;@Test public void processContextConfigurationWithLocation() {     String[] locations = new String[] { "classpath:/foo.xml" }.     ContextConfigurationAttributes configAttributes = new ContextConfigurationAttributes(getClass(), locations, EMPTY_CLASS_ARRAY, true, null, true, ContextLoader.class).     loader.processContextConfiguration(configAttributes).     assertArrayEquals(locations, configAttributes.getLocations()).     assertEmpty(configAttributes.getClasses()). }
false;public;0;9;;@Test public void processContextConfigurationWithConfigurationClass() {     Class<?>[] classes = new Class<?>[] { getClass() }.     ContextConfigurationAttributes configAttributes = new ContextConfigurationAttributes(getClass(), EMPTY_STRING_ARRAY, classes, true, null, true, ContextLoader.class).     loader.processContextConfiguration(configAttributes).     assertArrayEquals(classes, configAttributes.getClasses()).     assertEmpty(configAttributes.getLocations()). }
false;public;0;5;;// --- SmartContextLoader - loadContext() ---------------------------------- @Test(expected = IllegalArgumentException.class) public void loadContextWithNullConfig() throws Exception {     MergedContextConfiguration mergedConfig = null.     loader.loadContext(mergedConfig). }
false;public;0;10;;@Test public void loadContextWithoutLocationsAndConfigurationClasses() throws Exception {     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage(startsWith("Neither")).     expectedException.expectMessage(containsString("was able to load an ApplicationContext from")).     MergedContextConfiguration mergedConfig = new MergedContextConfiguration(getClass(), EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, EMPTY_STRING_ARRAY, loader).     loader.loadContext(mergedConfig). }
true;public;0;10;/**  * @since 4.1  */ ;/**  * @since 4.1  */ @Test public void loadContextWithLocationsAndConfigurationClasses() throws Exception {     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage(startsWith("Neither")).     expectedException.expectMessage(endsWith("declare either 'locations' or 'classes' but not both.")).     MergedContextConfiguration mergedConfig = new MergedContextConfiguration(getClass(), new String[] { "test.xml" }, new Class<?>[] { getClass() }, EMPTY_STRING_ARRAY, loader).     loader.loadContext(mergedConfig). }
false;private;1;9;;private void assertApplicationContextLoadsAndContainsFooString(MergedContextConfiguration mergedConfig) throws Exception {     ApplicationContext applicationContext = loader.loadContext(mergedConfig).     assertNotNull(applicationContext).     assertEquals("foo", applicationContext.getBean(String.class)).     assertTrue(applicationContext instanceof ConfigurableApplicationContext).     ((ConfigurableApplicationContext) applicationContext).close(). }
false;public;0;8;;@Test public void loadContextWithXmlConfig() throws Exception {     MergedContextConfiguration mergedConfig = new MergedContextConfiguration(XmlTestCase.class, new String[] { "classpath:/org/springframework/test/context/support/DelegatingSmartContextLoaderTests$XmlTestCase-context.xml" }, EMPTY_CLASS_ARRAY, EMPTY_STRING_ARRAY, loader).     assertApplicationContextLoadsAndContainsFooString(mergedConfig). }
false;public;0;6;;@Test public void loadContextWithConfigurationClass() throws Exception {     MergedContextConfiguration mergedConfig = new MergedContextConfiguration(ConfigClassTestCase.class, EMPTY_STRING_ARRAY, new Class<?>[] { ConfigClassTestCase.Config.class }, EMPTY_STRING_ARRAY, loader).     assertApplicationContextLoadsAndContainsFooString(mergedConfig). }
false;public;0;4;;// --- ContextLoader ------------------------------------------------------- @Test(expected = UnsupportedOperationException.class) public void processLocations() {     loader.processLocations(getClass(), EMPTY_STRING_ARRAY). }
false;public;0;4;;@Test(expected = UnsupportedOperationException.class) public void loadContextFromLocations() throws Exception {     loader.loadContext(EMPTY_STRING_ARRAY). }
false;public;0;4;;@Bean public String foo() {     return new String("foo"). }
