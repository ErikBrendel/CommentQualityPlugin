commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     webRequest = new WebRequest(new URL("http://example.com:80/test/this/here")).     webRequest.setHttpMethod(HttpMethod.GET).     requestBuilder = new HtmlUnitRequestBuilder(sessions, webClient, webRequest). }
false;public;0;4;;// --- constructor @Test(expected = IllegalArgumentException.class) public void constructorNullSessions() {     new HtmlUnitRequestBuilder(null, webClient, webRequest). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void constructorNullWebClient() {     new HtmlUnitRequestBuilder(sessions, null, webRequest). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void constructorNullWebRequest() {     new HtmlUnitRequestBuilder(sessions, webClient, null). }
false;public;0;14;;// --- buildRequest @Test @SuppressWarnings("deprecation") public void buildRequestBasicAuth() {     String base64Credentials = "dXNlcm5hbWU6cGFzc3dvcmQ=".     String authzHeaderValue = "Basic: " + base64Credentials.     UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(base64Credentials).     webRequest.setCredentials(credentials).     webRequest.setAdditionalHeader("Authorization", authzHeaderValue).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getAuthType(), equalTo("Basic")).     assertThat(actualRequest.getHeader("Authorization"), equalTo(authzHeaderValue)). }
false;public;0;8;;@Test public void buildRequestCharacterEncoding() {     webRequest.setCharset(StandardCharsets.UTF_8).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getCharacterEncoding(), equalTo("UTF-8")). }
false;public;0;6;;@Test public void buildRequestDefaultCharacterEncoding() {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getCharacterEncoding(), equalTo("ISO-8859-1")). }
false;public;0;10;;@Test public void buildRequestContentLength() {     String content = "some content that has length".     webRequest.setHttpMethod(HttpMethod.POST).     webRequest.setRequestBody(content).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getContentLength(), equalTo(content.length())). }
false;public;0;10;;@Test public void buildRequestContentType() {     String contentType = "text/html.charset=UTF-8".     webRequest.setAdditionalHeader("Content-Type", contentType).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getContentType(), equalTo(contentType)).     assertThat(actualRequest.getHeader("Content-Type"), equalTo(contentType)). }
false;public;0;10;;// SPR-14916 @Test public void buildRequestContentTypeWithFormSubmission() {     webRequest.setEncodingType(FormEncodingType.URL_ENCODED).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getContentType(), equalTo("application/x-www-form-urlencoded")).     assertThat(actualRequest.getHeader("Content-Type"), equalTo("application/x-www-form-urlencoded.charset=ISO-8859-1")). }
false;public;0;6;;@Test public void buildRequestContextPathUsesFirstSegmentByDefault() {     String contextPath = requestBuilder.buildRequest(servletContext).getContextPath().     assertThat(contextPath, equalTo("/test")). }
false;public;0;7;;@Test public void buildRequestContextPathUsesNoFirstSegmentWithDefault() throws MalformedURLException {     webRequest.setUrl(new URL("http://example.com/")).     String contextPath = requestBuilder.buildRequest(servletContext).getContextPath().     assertThat(contextPath, equalTo("")). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void buildRequestContextPathInvalid() {     requestBuilder.setContextPath("/invalid").     requestBuilder.buildRequest(servletContext).getContextPath(). }
false;public;0;9;;@Test public void buildRequestContextPathEmpty() {     String expected = "".     requestBuilder.setContextPath(expected).     String contextPath = requestBuilder.buildRequest(servletContext).getContextPath().     assertThat(contextPath, equalTo(expected)). }
false;public;0;9;;@Test public void buildRequestContextPathExplicit() {     String expected = "/test".     requestBuilder.setContextPath(expected).     String contextPath = requestBuilder.buildRequest(servletContext).getContextPath().     assertThat(contextPath, equalTo(expected)). }
false;public;0;9;;@Test public void buildRequestContextPathMulti() {     String expected = "/test/this".     requestBuilder.setContextPath(expected).     String contextPath = requestBuilder.buildRequest(servletContext).getContextPath().     assertThat(contextPath, equalTo(expected)). }
false;public;0;6;;@Test public void buildRequestCookiesNull() {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getCookies(), nullValue()). }
false;public;0;11;;@Test public void buildRequestCookiesSingle() {     webRequest.setAdditionalHeader("Cookie", "name=value").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     Cookie[] cookies = actualRequest.getCookies().     assertThat(cookies.length, equalTo(1)).     assertThat(cookies[0].getName(), equalTo("name")).     assertThat(cookies[0].getValue(), equalTo("value")). }
false;public;0;15;;@Test public void buildRequestCookiesMulti() {     webRequest.setAdditionalHeader("Cookie", "name=value. name2=value2").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     Cookie[] cookies = actualRequest.getCookies().     assertThat(cookies.length, equalTo(2)).     Cookie cookie = cookies[0].     assertThat(cookie.getName(), equalTo("name")).     assertThat(cookie.getValue(), equalTo("value")).     cookie = cookies[1].     assertThat(cookie.getName(), equalTo("name2")).     assertThat(cookie.getValue(), equalTo("value2")). }
false;public;0;11;;@Test @SuppressWarnings("deprecation") public void buildRequestInputStream() throws Exception {     String content = "some content that has length".     webRequest.setHttpMethod(HttpMethod.POST).     webRequest.setRequestBody(content).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(IOUtils.toString(actualRequest.getInputStream()), equalTo(content)). }
false;public;0;6;;@Test public void buildRequestLocalAddr() {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocalAddr(), equalTo("127.0.0.1")). }
false;public;0;6;;@Test public void buildRequestLocaleDefault() {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocale(), equalTo(Locale.getDefault())). }
false;public;0;8;;@Test public void buildRequestLocaleDa() {     webRequest.setAdditionalHeader("Accept-Language", "da").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocale(), equalTo(new Locale("da"))). }
false;public;0;8;;@Test public void buildRequestLocaleEnGbQ08() {     webRequest.setAdditionalHeader("Accept-Language", "en-gb.q=0.8").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocale(), equalTo(new Locale("en", "gb"))). }
false;public;0;8;;@Test public void buildRequestLocaleEnQ07() {     webRequest.setAdditionalHeader("Accept-Language", "en").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocale(), equalTo(new Locale("en", ""))). }
false;public;0;8;;@Test public void buildRequestLocaleEnUs() {     webRequest.setAdditionalHeader("Accept-Language", "en-US").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocale(), equalTo(Locale.US)). }
false;public;0;8;;@Test public void buildRequestLocaleFr() {     webRequest.setAdditionalHeader("Accept-Language", "fr").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocale(), equalTo(Locale.FRENCH)). }
false;public;0;9;;@Test public void buildRequestLocaleMulti() {     webRequest.setAdditionalHeader("Accept-Language", "en-gb.q=0.8, da, en.q=0.7").     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     List<Locale> expected = asList(new Locale("da"), new Locale("en", "gb"), new Locale("en", "")).     assertThat(Collections.list(actualRequest.getLocales()), equalTo(expected)). }
false;public;0;6;;@Test public void buildRequestLocalName() {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocalName(), equalTo("localhost")). }
false;public;0;6;;@Test public void buildRequestLocalPort() {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocalPort(), equalTo(80)). }
false;public;0;7;;@Test public void buildRequestLocalMissing() throws Exception {     webRequest.setUrl(new URL("http://localhost/test/this")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getLocalPort(), equalTo(-1)). }
false;public;0;8;;@Test public void buildRequestMethods() {     for (HttpMethod expectedMethod : HttpMethod.values()) {         webRequest.setHttpMethod(expectedMethod).         String actualMethod = requestBuilder.buildRequest(servletContext).getMethod().         assertThat(actualMethod, equalTo(expectedMethod.name())).     } }
false;public;0;9;;@Test public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParam() {     webRequest.setRequestParameters(asList(new NameValuePair("name", "value"))).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo("value")). }
false;public;0;9;;@Test public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParamWithNullValue() {     webRequest.setRequestParameters(asList(new NameValuePair("name", null))).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), nullValue()). }
false;public;0;9;;@Test public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParamWithEmptyValue() {     webRequest.setRequestParameters(asList(new NameValuePair("name", ""))).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo("")). }
false;public;0;9;;@Test public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithSingleRequestParamWithValueSetToSpace() {     webRequest.setRequestParameters(asList(new NameValuePair("name", " "))).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo(" ")). }
false;public;0;10;;@Test public void buildRequestParameterMapViaWebRequestDotSetRequestParametersWithMultipleRequestParams() {     webRequest.setRequestParameters(asList(new NameValuePair("name1", "value1"), new NameValuePair("name2", "value2"))).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(2)).     assertThat(actualRequest.getParameter("name1"), equalTo("value1")).     assertThat(actualRequest.getParameter("name2"), equalTo("value2")). }
false;public;0;9;;@Test public void buildRequestParameterMapFromSingleQueryParam() throws Exception {     webRequest.setUrl(new URL("http://example.com/example/?name=value")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo("value")). }
true;public;0;9;// SPR-14177 ;// SPR-14177 @Test public void buildRequestParameterMapDecodesParameterName() throws Exception {     webRequest.setUrl(new URL("http://example.com/example/?row%5B0%5D=value")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("row[0]"), equalTo("value")). }
false;public;0;9;;@Test public void buildRequestParameterMapDecodesParameterValue() throws Exception {     webRequest.setUrl(new URL("http://example.com/example/?name=row%5B0%5D")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo("row[0]")). }
false;public;0;9;;@Test public void buildRequestParameterMapFromSingleQueryParamWithoutValueAndWithoutEqualsSign() throws Exception {     webRequest.setUrl(new URL("http://example.com/example/?name")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo("")). }
false;public;0;9;;@Test public void buildRequestParameterMapFromSingleQueryParamWithoutValueButWithEqualsSign() throws Exception {     webRequest.setUrl(new URL("http://example.com/example/?name=")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo("")). }
false;public;0;9;;@Test public void buildRequestParameterMapFromSingleQueryParamWithValueSetToEncodedSpace() throws Exception {     webRequest.setUrl(new URL("http://example.com/example/?name=%20")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(1)).     assertThat(actualRequest.getParameter("name"), equalTo(" ")). }
false;public;0;10;;@Test public void buildRequestParameterMapFromMultipleQueryParams() throws Exception {     webRequest.setUrl(new URL("http://example.com/example/?name=value&param2=value+2")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getParameterMap().size(), equalTo(2)).     assertThat(actualRequest.getParameter("name"), equalTo("value")).     assertThat(actualRequest.getParameter("param2"), equalTo("value 2")). }
false;public;0;6;;@Test public void buildRequestPathInfo() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getPathInfo(), nullValue()). }
false;public;0;8;;@Test public void buildRequestPathInfoNull() throws Exception {     webRequest.setUrl(new URL("http://example.com/example")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getPathInfo(), nullValue()). }
false;public;0;10;;@Test public void buildRequestAndAntPathRequestMatcher() throws Exception {     webRequest.setUrl(new URL("http://example.com/app/login/authenticate")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     // verify it is going to work with Spring Security's AntPathRequestMatcher     assertThat(actualRequest.getPathInfo(), nullValue()).     assertThat(actualRequest.getServletPath(), equalTo("/login/authenticate")). }
false;public;0;6;;@Test public void buildRequestProtocol() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getProtocol(), equalTo("HTTP/1.1")). }
false;public;0;9;;@Test public void buildRequestQueryWithSingleQueryParam() throws Exception {     String expectedQuery = "param=value".     webRequest.setUrl(new URL("http://example.com/example?" + expectedQuery)).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getQueryString(), equalTo(expectedQuery)). }
false;public;0;9;;@Test public void buildRequestQueryWithSingleQueryParamWithoutValueAndWithoutEqualsSign() throws Exception {     String expectedQuery = "param".     webRequest.setUrl(new URL("http://example.com/example?" + expectedQuery)).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getQueryString(), equalTo(expectedQuery)). }
false;public;0;9;;@Test public void buildRequestQueryWithSingleQueryParamWithoutValueButWithEqualsSign() throws Exception {     String expectedQuery = "param=".     webRequest.setUrl(new URL("http://example.com/example?" + expectedQuery)).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getQueryString(), equalTo(expectedQuery)). }
false;public;0;9;;@Test public void buildRequestQueryWithSingleQueryParamWithValueSetToEncodedSpace() throws Exception {     String expectedQuery = "param=%20".     webRequest.setUrl(new URL("http://example.com/example?" + expectedQuery)).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getQueryString(), equalTo(expectedQuery)). }
false;public;0;9;;@Test public void buildRequestQueryWithMultipleQueryParams() throws Exception {     String expectedQuery = "param1=value1&param2=value2".     webRequest.setUrl(new URL("http://example.com/example?" + expectedQuery)).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getQueryString(), equalTo(expectedQuery)). }
false;public;0;10;;@Test public void buildRequestReader() throws Exception {     String expectedBody = "request body".     webRequest.setHttpMethod(HttpMethod.POST).     webRequest.setRequestBody(expectedBody).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(IOUtils.toString(actualRequest.getReader()), equalTo(expectedBody)). }
false;public;0;6;;@Test public void buildRequestRemoteAddr() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getRemoteAddr(), equalTo("127.0.0.1")). }
false;public;0;6;;@Test public void buildRequestRemoteHost() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getRemoteAddr(), equalTo("127.0.0.1")). }
false;public;0;6;;@Test public void buildRequestRemotePort() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getRemotePort(), equalTo(80)). }
false;public;0;8;;@Test public void buildRequestRemotePort8080() throws Exception {     webRequest.setUrl(new URL("http://example.com:8080/")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getRemotePort(), equalTo(8080)). }
false;public;0;8;;@Test public void buildRequestRemotePort80WithDefault() throws Exception {     webRequest.setUrl(new URL("http://example.com/")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getRemotePort(), equalTo(80)). }
false;public;0;8;;@Test public void buildRequestRequestedSessionId() throws Exception {     String sessionId = "session-id".     webRequest.setAdditionalHeader("Cookie", "JSESSIONID=" + sessionId).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getRequestedSessionId(), equalTo(sessionId)). }
false;public;0;6;;@Test public void buildRequestRequestedSessionIdNull() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getRequestedSessionId(), nullValue()). }
false;public;0;5;;@Test public void buildRequestUri() {     String uri = requestBuilder.buildRequest(servletContext).getRequestURI().     assertThat(uri, equalTo("/test/this/here")). }
false;public;0;5;;@Test public void buildRequestUrl() {     String uri = requestBuilder.buildRequest(servletContext).getRequestURL().toString().     assertThat(uri, equalTo("http://example.com/test/this/here")). }
false;public;0;6;;@Test public void buildRequestSchemeHttp() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getScheme(), equalTo("http")). }
false;public;0;7;;@Test public void buildRequestSchemeHttps() throws Exception {     webRequest.setUrl(new URL("https://example.com/")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getScheme(), equalTo("https")). }
false;public;0;6;;@Test public void buildRequestServerName() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getServerName(), equalTo("example.com")). }
false;public;0;6;;@Test public void buildRequestServerPort() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getServerPort(), equalTo(80)). }
false;public;0;7;;@Test public void buildRequestServerPortDefault() throws Exception {     webRequest.setUrl(new URL("https://example.com/")).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getServerPort(), equalTo(-1)). }
false;public;0;6;;@Test public void buildRequestServletContext() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getServletContext(), equalTo(servletContext)). }
false;public;0;6;;@Test public void buildRequestServletPath() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getServletPath(), equalTo("/this/here")). }
false;public;0;16;;@Test public void buildRequestSession() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     HttpSession newSession = actualRequest.getSession().     assertThat(newSession, notNullValue()).     assertSingleSessionCookie("JSESSIONID=" + newSession.getId() + ". Path=/test. Domain=example.com").     webRequest.setAdditionalHeader("Cookie", "JSESSIONID=" + newSession.getId()).     requestBuilder = new HtmlUnitRequestBuilder(sessions, webClient, webRequest).     actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getSession(), sameInstance(newSession)). }
false;public;0;20;;@Test public void buildRequestSessionWithExistingSession() throws Exception {     String sessionId = "session-id".     webRequest.setAdditionalHeader("Cookie", "JSESSIONID=" + sessionId).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     HttpSession session = actualRequest.getSession().     assertThat(session.getId(), equalTo(sessionId)).     assertSingleSessionCookie("JSESSIONID=" + session.getId() + ". Path=/test. Domain=example.com").     requestBuilder = new HtmlUnitRequestBuilder(sessions, webClient, webRequest).     actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getSession(), equalTo(session)).     webRequest.setAdditionalHeader("Cookie", "JSESSIONID=" + sessionId + "NEW").     actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getSession(), not(equalTo(session))).     assertSingleSessionCookie("JSESSIONID=" + actualRequest.getSession().getId() + ". Path=/test. Domain=example.com"). }
false;public;0;7;;@Test public void buildRequestSessionTrue() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     HttpSession session = actualRequest.getSession(true).     assertThat(session, notNullValue()). }
false;public;0;7;;@Test public void buildRequestSessionFalseIsNull() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     HttpSession session = actualRequest.getSession(false).     assertThat(session, nullValue()). }
false;public;0;9;;@Test public void buildRequestSessionFalseWithExistingSession() throws Exception {     String sessionId = "session-id".     webRequest.setAdditionalHeader("Cookie", "JSESSIONID=" + sessionId).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     HttpSession session = actualRequest.getSession(false).     assertThat(session, notNullValue()). }
false;public;0;6;;@Test public void buildRequestSessionIsNew() throws Exception {     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getSession().isNew(), equalTo(true)). }
false;public;0;9;;@Test public void buildRequestSessionIsNewFalse() throws Exception {     String sessionId = "session-id".     webRequest.setAdditionalHeader("Cookie", "JSESSIONID=" + sessionId).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getSession().isNew(), equalTo(false)). }
false;public;0;21;;@Test public void buildRequestSessionInvalidate() throws Exception {     String sessionId = "session-id".     webRequest.setAdditionalHeader("Cookie", "JSESSIONID=" + sessionId).     MockHttpServletRequest actualRequest = requestBuilder.buildRequest(servletContext).     HttpSession sessionToRemove = actualRequest.getSession().     sessionToRemove.invalidate().     assertThat(sessions.containsKey(sessionToRemove.getId()), equalTo(false)).     assertSingleSessionCookie("JSESSIONID=" + sessionToRemove.getId() + ". Expires=Thu, 01-Jan-1970 00:00:01 GMT. Path=/test. Domain=example.com").     webRequest.removeAdditionalHeader("Cookie").     requestBuilder = new HtmlUnitRequestBuilder(sessions, webClient, webRequest).     actualRequest = requestBuilder.buildRequest(servletContext).     assertThat(actualRequest.getSession().isNew(), equalTo(true)).     assertThat(sessions.containsKey(sessionToRemove.getId()), equalTo(false)). }
false;public;0;6;;// --- setContextPath @Test public void setContextPathNull() {     requestBuilder.setContextPath(null).     assertThat(getContextPath(), nullValue()). }
false;public;0;6;;@Test public void setContextPathEmptyString() {     requestBuilder.setContextPath("").     assertThat(getContextPath(), isEmptyString()). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void setContextPathDoesNotStartWithSlash() {     requestBuilder.setContextPath("abc/def"). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void setContextPathEndsWithSlash() {     requestBuilder.setContextPath("/abc/def/"). }
false;public;0;7;;@Test public void setContextPath() {     String expectedContextPath = "/abc/def".     requestBuilder.setContextPath(expectedContextPath).     assertThat(getContextPath(), equalTo(expectedContextPath)). }
false;public;0;10;;@Test public void mergeHeader() throws Exception {     String headerName = "PARENT".     String headerValue = "VALUE".     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).defaultRequest(get("/").header(headerName, headerValue)).build().     assertThat(mockMvc.perform(requestBuilder).andReturn().getRequest().getHeader(headerName), equalTo(headerValue)). }
false;public;0;10;;@Test public void mergeSession() throws Exception {     String attrName = "PARENT".     String attrValue = "VALUE".     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).defaultRequest(get("/").sessionAttr(attrName, attrValue)).build().     assertThat(mockMvc.perform(requestBuilder).andReturn().getRequest().getSession().getAttribute(attrName), equalTo(attrValue)). }
false;public;0;8;;@Test public void mergeSessionNotInitialized() throws Exception {     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).defaultRequest(get("/")).build().     assertThat(mockMvc.perform(requestBuilder).andReturn().getRequest().getSession(false), nullValue()). }
false;public;0;12;;@Test public void mergeParameter() throws Exception {     String paramName = "PARENT".     String paramValue = "VALUE".     String paramValue2 = "VALUE2".     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).defaultRequest(get("/").param(paramName, paramValue, paramValue2)).build().     MockHttpServletRequest performedRequest = mockMvc.perform(requestBuilder).andReturn().getRequest().     assertThat(asList(performedRequest.getParameterValues(paramName)), contains(paramValue, paramValue2)). }
false;public;0;15;;@Test public void mergeCookie() throws Exception {     String cookieName = "PARENT".     String cookieValue = "VALUE".     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).defaultRequest(get("/").cookie(new Cookie(cookieName, cookieValue))).build().     Cookie[] cookies = mockMvc.perform(requestBuilder).andReturn().getRequest().getCookies().     assertThat(cookies, notNullValue()).     assertThat(cookies.length, equalTo(1)).     Cookie cookie = cookies[0].     assertThat(cookie.getName(), equalTo(cookieName)).     assertThat(cookie.getValue(), equalTo(cookieValue)). }
false;public;0;10;;@Test public void mergeRequestAttribute() throws Exception {     String attrName = "PARENT".     String attrValue = "VALUE".     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).defaultRequest(get("/").requestAttr(attrName, attrValue)).build().     assertThat(mockMvc.perform(requestBuilder).andReturn().getRequest().getAttribute(attrName), equalTo(attrValue)). }
false;public;0;13;;// SPR-14584 @Test public void mergeDoesNotCorruptPathInfoOnParent() throws Exception {     String pathInfo = "/foo/bar".     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).defaultRequest(get("/")).build().     assertThat(mockMvc.perform(get(pathInfo)).andReturn().getRequest().getPathInfo(), equalTo(pathInfo)).     mockMvc.perform(requestBuilder).     assertThat(mockMvc.perform(get(pathInfo)).andReturn().getRequest().getPathInfo(), equalTo(pathInfo)). }
false;private;1;9;;private void assertSingleSessionCookie(String expected) {     com.gargoylesoftware.htmlunit.util.Cookie jsessionidCookie = webClient.getCookieManager().getCookie("JSESSIONID").     if (expected == null || expected.contains("Expires=Thu, 01-Jan-1970 00:00:01 GMT")) {         assertThat(jsessionidCookie, nullValue()).         return.     }     String actual = jsessionidCookie.getValue().     assertThat("JSESSIONID=" + actual + ". Path=/test. Domain=example.com", equalTo(expected)). }
false;private;0;3;;private String getContextPath() {     return (String) ReflectionTestUtils.getField(requestBuilder, "contextPath"). }
