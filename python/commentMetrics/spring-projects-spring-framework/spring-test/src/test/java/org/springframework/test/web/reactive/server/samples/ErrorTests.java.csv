commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void notFound() {     this.client.get().uri("/invalid").exchange().expectStatus().isNotFound().expectBody(Void.class). }
false;public;0;7;;@Test public void serverException() {     this.client.get().uri("/server-error").exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectBody(Void.class). }
false;public;0;14;;// SPR-17363 @Test public void badRequestBeforeRequestBodyConsumed() {     EntityExchangeResult<Void> result = this.client.post().uri("/post").contentType(MediaType.APPLICATION_JSON_UTF8).syncBody(new Person("Dan")).exchange().expectStatus().isBadRequest().expectBody().isEmpty().     byte[] content = result.getRequestBodyContent().     assertNotNull(content).     assertEquals("{\"name\":\"Dan\"}", new String(content, StandardCharsets.UTF_8)). }
false;;0;4;;@GetMapping("/server-error") void handleAndThrowException() {     throw new IllegalStateException("server error"). }
false;;1;3;;@PostMapping(path = "/post", params = "p") void handlePost(@RequestBody Person person) { }
