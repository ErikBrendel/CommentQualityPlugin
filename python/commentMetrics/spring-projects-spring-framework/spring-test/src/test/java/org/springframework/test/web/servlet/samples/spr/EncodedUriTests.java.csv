commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mockMvc = webAppContextSetup(this.wac).build(). }
false;public;0;7;;@Test public void test() throws Exception {     String id = "a/b".     URI url = UriComponentsBuilder.fromUriString("/circuit").pathSegment(id).build().encode().toUri().     ResultActions result = mockMvc.perform(get(url)).     result.andExpect(status().isOk()).andExpect(model().attribute("receivedId", is(id))). }
false;public;0;4;;@Bean public MyController myController() {     return new MyController(). }
false;public;0;4;;@Bean public HandlerMappingConfigurer myHandlerMappingConfigurer() {     return new HandlerMappingConfigurer(). }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     registry.jsp("", ""). }
false;public;2;5;;@RequestMapping(value = "/circuit/{id}", method = RequestMethod.GET) public String getCircuit(@PathVariable String id, Model model) {     model.addAttribute("receivedId", id).     return "result". }
false;public;2;9;;public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof RequestMappingHandlerMapping) {         RequestMappingHandlerMapping requestMappingHandlerMapping = (RequestMappingHandlerMapping) bean.         // URL decode after request mapping, not before.         requestMappingHandlerMapping.setUrlDecode(false).     }     return bean. }
false;public;2;3;;public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;public;0;3;;public int getOrder() {     return PriorityOrdered.HIGHEST_PRECEDENCE. }
