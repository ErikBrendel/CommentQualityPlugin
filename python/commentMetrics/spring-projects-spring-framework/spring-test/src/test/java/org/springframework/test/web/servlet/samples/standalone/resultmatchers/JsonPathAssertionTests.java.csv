commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     this.mockMvc = standaloneSetup(new MusicController()).defaultRequest(get("/").accept(MediaType.APPLICATION_JSON)).alwaysExpect(status().isOk()).alwaysExpect(content().contentType("application/json.charset=UTF-8")).build(). }
false;public;0;17;;@Test public void exists() throws Exception {     String composerByName = "$.composers[?(@.name == '%s')]".     String performerByName = "$.performers[?(@.name == '%s')]".     this.mockMvc.perform(get("/music/people")).andExpect(jsonPath(composerByName, "Johann Sebastian Bach").exists()).andExpect(jsonPath(composerByName, "Johannes Brahms").exists()).andExpect(jsonPath(composerByName, "Edvard Grieg").exists()).andExpect(jsonPath(composerByName, "Robert Schumann").exists()).andExpect(jsonPath(performerByName, "Vladimir Ashkenazy").exists()).andExpect(jsonPath(performerByName, "Yehudi Menuhin").exists()).andExpect(jsonPath("$.composers[0]").exists()).andExpect(jsonPath("$.composers[1]").exists()).andExpect(jsonPath("$.composers[2]").exists()).andExpect(jsonPath("$.composers[3]").exists()). }
false;public;0;7;;@Test public void doesNotExist() throws Exception {     this.mockMvc.perform(get("/music/people")).andExpect(jsonPath("$.composers[?(@.name == 'Edvard Grieeeeeeg')]").doesNotExist()).andExpect(jsonPath("$.composers[?(@.name == 'Robert Schuuuuuuman')]").doesNotExist()).andExpect(jsonPath("$.composers[4]").doesNotExist()). }
false;public;0;11;;@Test public void equality() throws Exception {     this.mockMvc.perform(get("/music/people")).andExpect(jsonPath("$.composers[0].name").value("Johann Sebastian Bach")).andExpect(jsonPath("$.performers[1].name").value("Yehudi Menuhin")).     // Hamcrest matchers...     this.mockMvc.perform(get("/music/people")).andExpect(jsonPath("$.composers[0].name").value(equalTo("Johann Sebastian Bach"))).andExpect(jsonPath("$.performers[1].name").value(equalTo("Yehudi Menuhin"))). }
false;public;0;8;;@Test public void hamcrestMatcher() throws Exception {     this.mockMvc.perform(get("/music/people")).andExpect(jsonPath("$.composers[0].name", startsWith("Johann"))).andExpect(jsonPath("$.performers[0].name", endsWith("Ashkenazy"))).andExpect(jsonPath("$.performers[1].name", containsString("di Me"))).andExpect(jsonPath("$.composers[1].name", isIn(Arrays.asList("Johann Sebastian Bach", "Johannes Brahms")))). }
false;public;0;11;;@Test public void hamcrestMatcherWithParameterizedJsonPath() throws Exception {     String composerName = "$.composers[%s].name".     String performerName = "$.performers[%s].name".     this.mockMvc.perform(get("/music/people")).andExpect(jsonPath(composerName, 0).value(startsWith("Johann"))).andExpect(jsonPath(performerName, 0).value(endsWith("Ashkenazy"))).andExpect(jsonPath(performerName, 1).value(containsString("di Me"))).andExpect(jsonPath(composerName, 1).value(isIn(Arrays.asList("Johann Sebastian Bach", "Johannes Brahms")))). }
false;public;0;14;;@RequestMapping("/music/people") public MultiValueMap<String, Person> get() {     MultiValueMap<String, Person> map = new LinkedMultiValueMap<>().     map.add("composers", new Person("Johann Sebastian Bach")).     map.add("composers", new Person("Johannes Brahms")).     map.add("composers", new Person("Edvard Grieg")).     map.add("composers", new Person("Robert Schumann")).     map.add("performers", new Person("Vladimir Ashkenazy")).     map.add("performers", new Person("Yehudi Menuhin")).     return map. }
