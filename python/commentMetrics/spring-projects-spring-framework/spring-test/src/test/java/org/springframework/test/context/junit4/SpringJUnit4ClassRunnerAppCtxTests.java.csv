commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Autowired protected void setEmployee(Employee employee) {     this.employee = employee. }
false;protected;1;4;;@Resource protected void setBar(String bar) {     this.bar = bar. }
false;public;1;4;;@Autowired public void setLiteralParameterValue(@Value("enigma") String literalParameterValue) {     this.literalParameterValue = literalParameterValue. }
false;public;1;4;;@Autowired public void setSpelParameterValue(@Value("#{2 == (1+1)}") Boolean spelParameterValue) {     this.spelParameterValue = spelParameterValue. }
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;1;4;;@Override public void setApplicationContext(ApplicationContext applicationContext) {     this.applicationContext = applicationContext. }
false;public;0;4;;@Override public void afterPropertiesSet() {     this.beanInitialized = true. }
false;public;0;5;;@Test public void verifyBeanNameSet() {     assertTrue("The bean name of this test instance should have been set due to BeanNameAware semantics.", this.beanName.startsWith(getClass().getName())). }
false;public;0;5;;@Test public void verifyApplicationContextSet() {     assertNotNull("The application context should have been set due to ApplicationContextAware semantics.", this.applicationContext). }
false;public;0;5;;@Test public void verifyBeanInitialized() {     assertTrue("This test bean should have been initialized due to InitializingBean semantics.", this.beanInitialized). }
false;public;0;13;;@Test public void verifyAnnotationAutowiredAndInjectedFields() {     assertNull("The nonrequiredLong field should NOT have been autowired.", this.nonrequiredLong).     assertEquals("The quux field should have been autowired via @Autowired and @Qualifier.", "Quux", this.quux).     assertEquals("The namedFoo field should have been injected via @Inject and @Named.", "Quux", this.namedQuux).     assertSame("@Autowired/@Qualifier and @Inject/@Named quux should be the same object.", this.quux, this.namedQuux).     assertNotNull("The pet field should have been autowired.", this.autowiredPet).     assertNotNull("The pet field should have been injected.", this.injectedPet).     assertEquals("Fido", this.autowiredPet.getName()).     assertEquals("Fido", this.injectedPet.getName()).     assertSame("@Autowired and @Inject pet should be the same object.", this.autowiredPet, this.injectedPet). }
false;public;0;5;;@Test public void verifyAnnotationAutowiredMethods() {     assertNotNull("The employee setter method should have been autowired.", this.employee).     assertEquals("John Smith", this.employee.getName()). }
false;public;0;7;;@Test public void verifyAutowiredAtValueFields() {     assertNotNull("Literal @Value field should have been autowired", this.literalFieldValue).     assertNotNull("SpEL @Value field should have been autowired.", this.spelFieldValue).     assertEquals("enigma", this.literalFieldValue).     assertEquals(Boolean.TRUE, this.spelFieldValue). }
false;public;0;7;;@Test public void verifyAutowiredAtValueMethods() {     assertNotNull("Literal @Value method parameter should have been autowired.", this.literalParameterValue).     assertNotNull("SpEL @Value method parameter should have been autowired.", this.spelParameterValue).     assertEquals("enigma", this.literalParameterValue).     assertEquals(Boolean.TRUE, this.spelParameterValue). }
false;public;0;4;;@Test public void verifyResourceAnnotationInjectedFields() {     assertEquals("The foo field should have been injected via @Resource.", "Foo", this.foo). }
false;public;0;4;;@Test public void verifyResourceAnnotationInjectedMethods() {     assertEquals("The bar method should have been wired via @Resource.", "Bar", this.bar). }
